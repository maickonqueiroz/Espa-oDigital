#INCLUDE "VKEY.CH"
#INCLUDE "RWMAKE.CH"
#INCLUDE "PROTHEUS.CH"                                                                                                                               
#INCLUDE "TOPCONN.CH"                                                                                    
#INCLUDE "WFPROCESS.CH"        
#INCLUDE "TBICONN.CH"
#INCLUDE "TBICODE.CH" 
#INCLUDE "FILEIO.CH"  
#INCLUDE "PONCALEN.CH"

#DEFINE MAXGETDAD 99999
#DEFINE	CLR_ORANGE	RGB(255,200,100) //Laranja
#Command @ <nRow>, <nCol> BMPBUTTON TYPE <nType> ACTION <cAction> [OBJECT <oBmt>] [<lEnable:ENABLE>] => [ <oBmt> := ] SButton():New(<nRow>, <nCol>, <nType>, [{|| <cAction>}],,<lEnable>)

#Define cCaminho "\Rotas"	// Caminho onde estão armazenados o documentos digitalizados

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ          
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³ LOCC001º Autor   ³M&S Consultoria     º Data ³  30/06/07   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºChamado   ³ Descricao                                                  º±±
±±-----------³------------------------------------------------------------º±±
±±º 984      ³ Nao estava validando o tipo do veiculo nos gatilhos para   º±±
±±º          ³ encontrar a tabela de vendas e compras - Frank Fuga 18/4/16º±±
±±-----------³------------------------------------------------------------º±±
±±º 985      ³ Criacao de uma trava no valid  do agendamento para impossi-º±±
±±º          ³ bilitar a gravacao,no caso de nao haver tabela de vendas   º±±
±±º          ³ ou compras associada - Frank Fuga 18/4/16                  º±±
±±-----------³------------------------------------------------------------º±±
±±º 945      ³ Trava no itinerario para evitar a gravacao,no caso de dele-º±±
±±º          ³ ção das linhas- Frank Zwarg Fuga 19/04/16                  º±±   
±±º          ³ ValITxObr - tratamento no preenchimento do ZAM_DE para     º±±   
±±º          ³ validar se existe um itinerario valido no preenchimento.   º±±   
±±º          ³ Frank Zwarg Fuga 26/04/2016.                               º±±   
±±-----------³------------------------------------------------------------º±±
±± Interface ³ barra de processamento ao carregar o agendamento           º±±
±±           ³ Frank Zwarg Fuga 27/04/2016                                º±±   
±±-----------³------------------------------------------------------------º±±
±± CEPS      ³ ao confirmar o agendamento, o sistema valida para o tipo   º±±
±±           ³ de tabela FTL a existência do CEP. Nao permite salvar.     º±±
±±           ³ Frank Zwarg Fuga 28/04/2016 - funcao VALCEPX               º±±
±±-----------³------------------------------------------------------------º±±
±± DTQ e DT8 ³ Ao gravar o ZA7 em alguns casos o sistema atualiza a DTQ e º±±
±±           ³ DT8, fiz uma alteracao para atualizar somente os elementos º±±
±±           ³ selecionados na ZA6, anteiormente era feito com todos, ou  º±±
±±           ³ seja, com o be change. Frank Zwarg Fuga 29/04/2016         º±±
±±-----------³------------------------------------------------------------º±±
±± BI        ³ Cristian em 03/05/2016                                     º±±      
±±-----------³------------------------------------------------------------º±±
±± VALCEPX   ³ Zerando as variaveis e colocando o tipo da regra 04        º±±
±±           ³ Frank Zwarg Fuga em 06/05/2016                             º±±
±±-----------³------------------------------------------------------------º±±
±± AchaKM    ³ Tratamento da variavel _cErroX - Frank Zwarg Fuga 09/05/16 º±±
±±-----------³------------------------------------------------------------º±±
±± VALCEPX   ³ Tratamento do tipo 4 de calculo no compras - Frank Fuga    º±±
±±           ³ 09/05/16                                                   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³                                                            º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
User Function LOCC001  //Projetos

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Declaracao de Variaveis                                             ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

Local 	pString	  := "ZA0",pCadastro:="Agendamento"     // "Projetos" ALTERAÇÃO - ROBERTO MARQUES - 22/05/2015" 
Private cCadastro := "Manutenção de "+pCadastro+" ("+pString+")"
Private cString   := pString
Private aRotina   := fMontaRot()  	//Monta o aRotina
Private cDelFunc  := ".T." 			// Validacao para a exclusao. Pode-se utilizar ExecBlock
Private aAreaSm0  := SM0->(GetArea())
Private aCampoZA0 := {}
Private lCopyPrj  := .F.	
Private aDelViag  := {} //Alison 20/03/14
Private oBjt 
Private oTGet2

Private lBuscaF3  := .F. // Frank Z Fuga
Private _dViag1	  := dDataBase // by Frank Zwarg Fuga - uso no filtro da viagem e na funcao ZA0FIL1
Private _dViag2	  := dDataBase + SuperGetMv("LC_LFTMAX", .F., 5,) // by Frank Zwarg Fuga - uso no filtro da viagem e na funcao ZA0FIL1
Private _nProxLn  := StrZero( 0, len(ZA6->ZA6_OBRA) )  // Uso na aba de viagens para o controle da proxima linha da getdados - by Frank Zwarg Fuga
Private _cFilViag := "" // Uso para nao deletar os registros que nao fazem parte do filtro do acols das viagens - by Frank Zwarg Fuga

Private lBuscaF3  := .F. // Frank Z Fuga
Private _lExclZAM := .F. // Frank Z Fuga - 04/04/2016 - Controle para zerar os itinerarios quanto alterar a origem/destino (ZA6)

//Set Key VK_F5 To u_getInfoRPO( "LOCC001" )
SetKey( VK_F5, { || u_getInfoRPO( "LOCC001" ) } )
RegToMemory("ZA5",.F.)
RegToMemory("ZA6",.F.)
RegToMemory("ZAG",.F.)
        
dbSelectArea(cString)
dbSetOrder(1)
mBrowse(6,1,22,75,cString,,,,,,U_ZA0Lege())
Set Key VK_F5 To 
RestArea(aAreaSm0)
Return
//----------------------------------------
User Function getInfoRPO( cProgName )
Local   aFonte
Local   cTexto := ""
Local   aRet
Default cProgName := ProcName()

	If !Empty(cProgName)
		aFonte := &('GetApoInfo("'+cProgName+'.PRX")')
		If Empty(aFonte)
			aFonte := &('GetApoInfo("'+cProgName+'.PRW")')
		EndIf		
		If Empty(aFonte)
			aFonte := &('GetApoInfo("'+cProgName+'.PRG")')
		EndIf		

		cTexto := "Objeto: "+	cProgName+CRLF+CRLF
		If !Empty(aFonte)
			cTexto += "Programa: "+aFonte[01]+CRLF
			cTexto += "Data: "+DTOC(aFonte[04])+CRLF
			cTexto += "Hora: "+aFonte[05]
		EndIf
	EndIf

	MsgInfo( cTexto, "Informação RPO" )
Return nil

********************************************************************************
User Function ZA0Lege(nRecno)
// Trata a Legenda
********************************************************************************
Local aLegenda,aCores,aStatus,aCondic

aStatus:=fStatus("Legenda")  //Traz os Status das Propostas

aLegenda:={}
AAdd(aLegenda,{'BR_VERDE'        ,aStatus[Len(aLegenda)+1]})
AAdd(aLegenda,{'BR_AMARELO'      ,aStatus[Len(aLegenda)+1]})
AAdd(aLegenda,{'BR_AZUL'         ,aStatus[Len(aLegenda)+1]})
AAdd(aLegenda,{'BR_BRANCO'       ,aStatus[Len(aLegenda)+1]})
AAdd(aLegenda,{'BR_PRETO'        ,aStatus[Len(aLegenda)+1]})
AAdd(aLegenda,{'BR_VERMELHO'     ,aStatus[Len(aLegenda)+1]})
AAdd(aLegenda,{'BR_LARANJA'      ,aStatus[Len(aLegenda)+1]})
AAdd(aLegenda,{'BR_MARRON'       ,aStatus[Len(aLegenda)+1]})
AAdd(aLegenda,{'BR_CINZA'        ,aStatus[Len(aLegenda)+1]})
AAdd(aLegenda,{'BR_PINK'         ,aStatus[Len(aLegenda)+1]})
AAdd(aLegenda,{'BR_CANCEL'       ,aStatus[Len(aLegenda)+1]})

If nRecno==Nil  //Chamada pelo mBrowse não passa o Recno()
	aCores:={}
	AAdd(aCores,{'ZA0_STATUS$"1"',aLegenda[Len(aCores)+1,1]})
	AAdd(aCores,{'ZA0_STATUS$"2"',aLegenda[Len(aCores)+1,1]})
	AAdd(aCores,{'ZA0_STATUS$"3"',aLegenda[Len(aCores)+1,1]})
	AAdd(aCores,{'ZA0_STATUS$"4"',aLegenda[Len(aCores)+1,1]})
	AAdd(aCores,{'ZA0_STATUS$"5"',aLegenda[Len(aCores)+1,1]})
	AAdd(aCores,{'ZA0_STATUS$"6"',aLegenda[Len(aCores)+1,1]})
	AAdd(aCores,{'ZA0_STATUS$"7"',aLegenda[Len(aCores)+1,1]})
	AAdd(aCores,{'ZA0_STATUS$"8"',aLegenda[Len(aCores)+1,1]})
	AAdd(aCores,{'ZA0_STATUS$"A"',aLegenda[Len(aCores)+1,1]})
	AAdd(aCores,{'ZA0_STATUS$"B"',aLegenda[Len(aCores)+1,1]})
	AAdd(aCores,{'ZA0_STATUS$"C"',aLegenda[Len(aCores)+1,1]})
	Return(aCores)
Else  //Chamada pelo aRotina passa o Recno()
	BrwLegenda(cCadastro,OemToAnsi("Status"),aLegenda)
	Return(.t.)
EndIf

Return

********************************************************************************
Static Function fStatus(cVar)  
// Traz os Status das Propostas
********************************************************************************
Local aRet:={}

Do Case
Case Upper(cVar) == Upper("Legenda")
	AAdd(aRet,"Digitado"      )
	AAdd(aRet,"Em Aprovação"  ) 
	AAdd(aRet,"Aprovado"      )
	AAdd(aRet,"Não Aprovado"  )
	AAdd(aRet,"Fechado"       )
	AAdd(aRet,"Indisponível"  )
	AAdd(aRet,"Rejeitado"     )
	AAdd(aRet,"Faturado"    )
	AAdd(aRet,"Revisado"      )
	AAdd(aRet,"Excluido"      )
	AAdd(aRet,"Cancelado"     )
Case Upper(cVar) == Upper("Combo")
	AAdd(aRet,"1=Digitado"    )
	AAdd(aRet,"2=Em Aprovação")
	AAdd(aRet,"3=Aprovado"    )
	AAdd(aRet,"4=Não Aprovado")
	AAdd(aRet,"5=Fechado"     )
	AAdd(aRet,"6=Indisponível")
	AAdd(aRet,"7=Rejeitado"   )
	AAdd(aRet,"8=Faturado"  )
	AAdd(aRet,"A=Revisado"    )
	AAdd(aRet,"B=Excluido"    )
	AAdd(aRet,"C=Cancelado"   )
EndCase

Return(Aclone(aRet))

********************************************************************************
Static Function fTrazStat(cStatus)  
// Retorna a descrição do Status do Projeto informado
********************************************************************************
Local nPos,aRet,cRet

aRet:=fStatus("Combo")  //Traz os Status das Propostas

nPos:=Ascan(aRet,{|x|Subs(x,1,Len(cStatus))==cStatus})

If nPos==0
	cRet:=""
Else
	cRet:=Subs(aRet[nPos],3,Len(aRet[nPos])-2)
EndIf

Return(cRet)

********************************************************************************
User Function ZA0AS()	
// Impressão das AS 
********************************************************************************
If ZA0->ZA0_STATUS != "3" .and. ZA0->ZA0_STATUS != "5" .and. ZA0->ZA0_STATUS != "8"
	MsgAlert("Impressão de autorização de serviço não permitida! A proposta deve estar APROVADA, FECHADA ou FINALIZADA para de AS.")
Else	
	Do Case
	Case ZA0->ZA0_TIPOSE $ "G|R|I"	//AS de Guindastes / Remoção / Transporte Interno (ASG)
		U_LOCI022()
	Case ZA0->ZA0_TIPOSE == "U"		//AS de Gruas (AS Grua)
		U_LOCI045()
	Case ZA0->ZA0_TIPOSE $ "T|O"	//AS de Transporte (AST)
		U_LOCI024()
	Case ZA0->ZA0_TIPOSE $ "P"		//AS de Plataforma (ASP)
		U_LOCI086()
	Case ZA0->ZA0_TIPOSE $ "M"		//AS de Maritima (ASB)
		U_LCRCM010()
		//U_LOCF117()
	OtherWise
		MsgStop("ATENÇÃO: Não existe AS definida para esse tipo de serviço. (" + ZA0->ZA0_TIPOSE + ")")
	EndCase
EndIf

Return

********************************************************************************
User Function ZA0PRO()	 
// Impressão das Propostas
********************************************************************************
If ZA0->ZA0_STATUS != "3" .and. ZA0->ZA0_STATUS != "5" .and. ZA0->ZA0_STATUS != "8"
	MsgAlert("Impressão do agendamento não permitido! O agendamento deve estar APROVADO, FECHADO ou FINALIZADO para impressão.")
Else	
	_cTipoPro := ""//Iif(SubStr(ZA0->ZA0_PROJET,12,1)=="/",SubStr(ZA0->ZA0_PROJET,15,1),SubStr(ZA0->ZA0_PROJET,12,1))
	Do Case
	/*Case !Empty(_cTipoPro)									//Proposta Casada
		U_LOCF099()
	Case Empty(_cTipoPro) .and. ZA0->ZA0_TIPOSE == "G"		//Proposta de Guindastes (SOG)
		If ZA0->ZA0_TIPO == "E"
			U_LOCF026(1)
		Else
			U_LOCF116(1)
		EndIf
	Case Empty(_cTipoPro) .and. ZA0->ZA0_TIPOSE == "U"		//Proposta de Gruas
		If ZA0->ZA0_TIPO == "E"
			U_LOCF044(1)
		Else
			U_LOCF136(1)
		EndIf */                                                                         
	Case Empty(_cTipoPro) .and. ZA0->ZA0_TIPOSE == "G"		//Proposta de Guindastes (SOG)
		U_LOCF026(1)	
	Case Empty(_cTipoPro) .and. ZA0->ZA0_TIPOSE $ "T|O|I"	//Proposta de Transporte (SOT)
		U_LOCF027(1)
	Case Empty(_cTipoPro) .and. ZA0->ZA0_TIPOSE == "R"		//Proposta de Remoção Mecânica
		U_LOCF073(1)
	Case Empty(_cTipoPro) .and. ZA0->ZA0_TIPOSE == "P"		//Proposta de Plataforma
		U_LOCF087(1)
	Case Empty(_cTipoPro) .and. ZA0->ZA0_TIPOSE == "M"		//Proposta de Maritima
		U_LOCF117(1)
	OtherWise
		MsgStop("ATENÇÃO: Não existe agendamento definido para esse tipo de serviço. (" + ZA0->ZA0_TIPOSE + ")")
	EndCase
EndIf
	
Return

********************************************************************************
User Function ZAQINICI(cCampo)
********************************************************************************
Return(u_ProxNume("ZAQ","ZAQ_CODIGO",1))

********************************************************************************
User Function ProxNume(cAlias,cCampo,nOrdem)
********************************************************************************
Local nRecAnt:=(cAlias)->(Recno()),nOrdAnt:=(cAlias)->(IndexOrd())
Local cRet

(cAlias)->(dbSetOrder(nOrdem))
(cAlias)->(dbGoBottom())
cRet:=(cAlias)->(&cCampo)
cRet:=StrZero(Val(cRet)+1,Len(cRet))
(cAlias)->(dbSetOrder(nOrdAnt))
(cAlias)->(dbGoTo(nRecAnt))

Return(cRet)

********************************************************************************
Static Function fMontaRot()  
// Monta o aRotina
********************************************************************************
Local aRotina:={},aRotina1:={},aRotina2:={}

//If Upper(AllTrim(Subs(cUsuario,7,5))) == Upper("Admin")
If PswAdmin(,,__cUserId) == 0
	AAdd(aRotina1,{"Agendamentos"           ,"U_CADZA0"   ,0,6}) // "Projetos" ROBERTO MARQUES - 22/05/2015
	AAdd(aRotina1,{"Obras"              	,"U_CADZA1"   ,0,6})
	AAdd(aRotina1,{"Locais"             	,"U_CADZA2"   ,0,6})
	AAdd(aRotina1,{"Itinerarios"             	,"U_CADZA3"   ,0,6})
	AAdd(aRotina1,{"Itinerarios  x Agendamento"   ,"U_CADZA4"   ,0,6}) //"Projeto"
	AAdd(aRotina1,{"Guind. x Agendamento"   ,"U_CADZA5"   ,0,6})
	AAdd(aRotina1,{"Transp.x Agendamento"   ,"U_CADZA6"   ,0,6})
	AAdd(aRotina1,{"Coletas x Agendamento"   ,"U_CADZA7"   ,0,6})
	AAdd(aRotina1,{"RAT    x Agendamento"   ,"U_CADZA8"   ,0,6})
	AAdd(aRotina1,{"Custos x Agendamento"   ,"U_CADZA9"   ,0,6})
	AAdd(aRotina1,{"Respon.x Agendamento"   ,"U_CADZAA"   ,0,6})
	AAdd(aRotina1,{"Responsabilidades"  	,"U_CADZAB"   ,0,6})
	AAdd(aRotina1,{"M.O.   x Agendamento"   ,"U_CADZAC"   ,0,6})
	AAdd(aRotina1,{"Licit. x Agendamento"   ,"U_CADZAD"   ,0,6})
	AAdd(aRotina1,{"Cj.Transp.x Agendamento","U_CADZAE"   ,0,6})
	AAdd(aRotina1,{"Follow x Agendamento"   ,"U_CADZAF"   ,0,6})
	AAdd(aRotina1,{"Grua   x Agendamento"   ,"U_CADZAG"   ,0,6})
	AAdd(aRotina1,{"Concorrentes"       	,"U_CADZAH"   ,0,6})
	AAdd(aRotina1,{"Doctos.x Agendamento"   ,"U_CADZAI"   ,0,6})
	AAdd(aRotina1,{"Documentos"         	,"U_CADZAJ"   ,0,6})
	AAdd(aRotina1,{"Acess.Gruas x Agend."	,"U_CADZAK"   ,0,6})
	AAdd(aRotina1,{"CADZAL"             	,"U_CADZAL"   ,0,6})
	AAdd(aRotina1,{"Trecho x Agendamento"   ,"U_CADZAM"   ,0,6})
	AAdd(aRotina1,{"Escolta"            	,"U_CADZAN"   ,0,6})
	AAdd(aRotina1,{"Escolta SP"         	,"U_CADZAO"   ,0,6})
	AAdd(aRotina1,{"TUV"		        	,"U_CADZAP"   ,0,6})
	AAdd(aRotina1,{"Acess.Guin.xAgendamento","U_CADZAQ"   ,0,6})
	AAdd(aRotina1,{"Descrição Agendamento" 	,"U_CADZAR"   ,0,6})
	AAdd(aRotina1,{"Parametros"         	,"U_CADZAX"   ,0,6})
	AAdd(aRotina1,{"BENS"               	,"U_CADST9"   ,0,6})
	AAdd(aRotina1,{"Tabela de Venda do Frete","U_CADZTX(0)"   ,0,6})
	AAdd(aRotina1,{"Tabela de Compra do Frete","U_CADZTX(1)"   ,0,6})
Else
	AAdd(aRotina1,{"Locais"             ,"U_CADZA2"   ,0,6})
	AAdd(aRotina1,{"Itinerarios"             ,"U_CADZA3"   ,0,6})
	AAdd(aRotina1,{"Responsabilidades"  ,"U_CADZAB"   ,0,6})
	AAdd(aRotina1,{"Documentos"         ,"U_CADZAJ"   ,0,6})
	AAdd(aRotina1,{"Escolta"            ,"U_CADZAN"   ,0,6})
	//AAdd(aRotina1,{"Escolta SP"         ,"U_CADZAO"   ,0,6})
	AAdd(aRotina1,{"TUV"	            ,"U_CADZAP"   ,0,6})      
	//AAdd(aRotina1,{"Tabela de Preço"    ,"U_CADZT0"   ,0,6})
	//AAdd(aRotina1,{"Parametros"         ,"U_CADZAX"   ,0,6})
EndIf

AAdd(aRotina2,{"AST"                    ,"U_ZA0AST"   ,0,6})
AAdd(aRotina2,{"ASG"                    ,"U_ZA0ASG"   ,0,6})
AAdd(aRotina2,{"AS GRUA"                ,"U_ZA0ASX"   ,0,6})

If cNivel>=5
	AAdd(aRotina,{"Pesquisar"           ,"AxPesqui"   ,0,1})
	AAdd(aRotina,{"Visualizar"          ,"U_ZA0Visu"  ,0,2})
//	AAdd(aRotina,{"Gráfico/Status"      ,"U_ZA0Graf"  ,0,6})
	AAdd(aRotina,{"Incluir"             ,"U_ZA0Incl"  ,0,3})//U_ZA0Incl
	AAdd(aRotina,{"Alterar"             ,"U_ZA0Alte"  ,0,4})
//	AAdd(aRotina,{"Serviço "       ,"U_ZA0IncC"  ,0,6})
//	AAdd(aRotina,{"Agendamento"           ,"U_ZA0Orca"  ,0,6}) // "Orçamento" ALTERADO ROBERTO MARQUES 22/05/2015
	AAdd(aRotina,{"Legenda"             ,"U_ZA0Lege"  ,0,6})
	AAdd(aRotina,{"Manutenção"          ,"U_ZA0Manu(4)"  ,0,4}) 
	
	//U_CriaMV("MV_LC01APR")        // CRIAR PARAMETRO SE NAO EXISTIR - ROBERTO MARQUES  25/05/2015
	IF GetMv("MV_LC01APR") == .T. // VERIFICAR SE A ROTINA APROVAÇÃO SERA HABILITADA NO MENU  
		AAdd(aRotina,{"Em Aprovação"        ,"U_ZA0APROV" ,0,6})	
	ENDIF
	AAdd(aRotina,{"Cadastros"           ,aRotina1     ,0,6})
	AAdd(aRotina,{"Gerar AST"       ,"U_GRCONTR2" ,0,6})
	AAdd(aRotina,{"Emitir AST"           ,"U_ZA0AS"    ,0,6})
	AAdd(aRotina,{"Cancelar AST"         ,"U_LOCF145"  ,0,6})	
//	AAdd(aRotina,{"% &Possibilidade"     ,"U_LC001Pos" ,0,6})	
//	AAdd(aRotina,{"Emitir Proposta"     ,"U_LOCI100"  ,0,6})
//	AAdd(aRotina,{"Emitir Agendamento"  ,"U_ZA0PRO"  ,0,6})
//	AAdd(aRotina,{"E-Mail Aprovação"    ,"U_MAILAPRO" ,0,6})
//	AAdd(aRotina,{"Revisão"             ,"U_ZA0Revi2" ,0,6})	//ZA0Revi2
	AAdd(aRotina,{"Follow-up"           ,"U_ZA0Follow",0,6})
//	AAdd(aRotina,{"Copiar"          	,"U_ZA0Manu(5)",0,6})  Desabilitado no dia 15/08/2014 por Cauê Poltronieri
	AAdd(aRotina,{"Planilha PDF"      	,"U_LOCR001",0,6})
	//AAdd(aRotina,{"Proposta PDF"      	,"U_LOCI100",0,6})//Em Desenvolvimento.
	AAdd(aRotina,{"Cancelar Contrato"      	    ,"U_ZA0Canc"  ,0,6}) 

Else
	AAdd(aRotina,{"Pesquisar"       ,"AxPesqui"  ,0,1})
	AAdd(aRotina,{"Visualizar"      ,"U_ZA0Visu" ,0,2})
	AAdd(aRotina,{"Legenda"         ,"U_ZA0Lege" ,0,6})
EndIf          

Return(aRotina)
                                      
********************************************************************************
User Function ZA0Alte()  
// AxAltera
********************************************************************************
Local cTipoAnt,cTipoNew
Private nOpc    :=4 //4=Alterar
Private nOpcManu:=4 //4=Alterar

//Validação (Alison 16/07/13)
DbSelectArea("DTQ")
//DbSetOrder(20)//Projeto

DbOrderNickName("XPRJFLORI")
If DbSeek(xFilial("DTQ")+ZA0->ZA0_PROJET+ZA0->ZA0_FILIAL) //SubStr(ZA0->ZA0_PROJET,1,9))
	Alert("Não é possivel revisar, pois já foi gerado AS's para o Agendamento")
	Return
EndIf

//If ZA0->(!Empty(Subs(ZA0_PROJET,12,1)) .and. !Subs(ZA0_PROJET,12,1)=="/")  //Se não for revisão
//	MsgStop("ATENÇÃO: Proposta com Serviço      . Alterar a proposta base.")
//	Return(.f.)
//EndIf              

If ! LockByName(ZA0->ZA0_FILIAL+ZA0->ZA0_PROJET, .F., .F.)
	Aviso("Controle de acesso.","Registro em uso por outro usuário.",{"Ok"},,"Projeto: "+ZA0->ZA0_PROJET)
	Return(.f.)
EndIf

      //AxAltera( <cAlias>, <nReg>, <nOpc>, <aAcho>, <aCpos>, <nColMens>, <cMensagem>, <cTudoOk>, <cTransact>, <cFunc>, <aButtons>, <aParam>, <aAuto>, <lVirtual>, <lMaximized>)
nOpcA:=AxAltera("ZA0",ZA0->(Recno()),4,/*<aAcho>*/,/*<aCpos>*/,/*<nColMens>*/,/*<cMensagem>*/, 'U_xValCVA()')
lRet:=(nOpcA==1)  //1=Ok,3=Cancel      

UnLockByName(ZA0->ZA0_FILIAL+ZA0->ZA0_PROJET, .F., .F.)

Return(.t.)

********************************************************************************
User Function ZA0Incl()  
 
********************************************************************************
Local nPos,cDir,lRet,nOpcA  //Retorno do AxInclui()
Local aHeader,aCols,aCols0,nRecZA0,cNum,cNum1,cTipo1
Local cCasadas,aCasadas,nCasadas
Local nRecZA0:=ZA0->(Recno()),nOrdZA0:=ZA0->(IndexOrd())
Local lReceitaT,lReceitaG,lReceitaU,lReceitaR,lReceitaI,lReceitaO,lReceitaP,lReceitaB
Private nOpc    :=3 //3=Incluir
Private nOpcManu:=3 //3=Incluir
 
//AxInclui

lRet	 :=.f.
lReceitaT:=.t.
lReceitaG:=.f.
lReceitaU:=.f.
lReceitaR:=.f.
lReceitaI:=.f.
lReceitaO:=.f.
lReceitaP:=.f.
lReceitaB:=.f.

/*

DEFINE MSDIALOG oDlg TITLE "Inclusão de Agendamento" FROM C(178),C(181) TO C(402),C(385) PIXEL

// Cria as Groups do Sistema
@ C(010),C(008) TO C(090),C(097) LABEL "Selecione a Receita" PIXEL OF oDlg

// Cria Componentes Padroes do Sistema
@ C(017),C(015) CheckBox oCheckBox1 Var lReceitaT Prompt "Receita Transporte"         Size C(075),C(008) PIXEL OF oDlg
@ C(026),C(015) CheckBox oCheckBox2 Var lReceitaG Prompt "Receita Equipamentos"          Size C(075),C(008) PIXEL OF oDlg
//@ C(035),C(015) CheckBox oCheckBox3 Var lReceitaU Prompt "Receita Grua"               Size C(075),C(008) PIXEL OF oDlg
//@ C(044),C(015) CheckBox oCheckBox4 Var lReceitaR Prompt "Receita Remoção Mecânica"   Size C(075),C(008) PIXEL OF oDlg
//@ C(053),C(015) CheckBox oCheckBox5 Var lReceitaI Prompt "Receita Transporte Interno" Size C(075),C(008) PIXEL OF oDlg
//@ C(062),C(015) CheckBox oCheckBox6 Var lReceitaO Prompt "Receita Transporte EMP"   Size C(075),C(008) PIXEL OF oDlg
//@ C(071),C(015) CheckBox oCheckBox7 Var lReceitaP Prompt "Receita Plataforma"         Size C(075),C(008) PIXEL OF oDlg
//@ C(080),C(015) CheckBox oCheckBox8 Var lReceitaB Prompt "Receita Marítima"           Size C(075),C(008) PIXEL OF oDlg
@ C(097),C(024) BMPBUTTON TYPE 1 ACTION (lRet:=.t.,Close(oDlg))
@ C(097),C(054) BMPBUTTON TYPE 2 ACTION (lRet:=.f.,Close(oDlg))

ACTIVATE MSDIALOG oDlg CENTERED 

If !lRet
	Return
EndIf
*/
aCasadas:={}
If lReceitaT ; AAdd(aCasadas,"T") ; EndIf
If lReceitaG ; AAdd(aCasadas,"G") ; EndIf
If lReceitaU ; AAdd(aCasadas,"U") ; EndIf
If lReceitaR ; AAdd(aCasadas,"R") ; EndIf
If lReceitaI ; AAdd(aCasadas,"I") ; EndIf
If lReceitaO ; AAdd(aCasadas,"O") ; EndIf
If lReceitaP ; AAdd(aCasadas,"P") ; EndIf
If lReceitaB ; AAdd(aCasadas,"M") ; EndIf

If Len(aCasadas)==0
	MsgStop("ATENÇÃO: Falta selecionar a Receita !!")
	Return
EndIf

Private ZA0Receit:=aCasadas[1]  //Usada em ZA0INICI("ZA0_RECEIT")  //Inicializador padrão do campo
Private ZA0TipoSe:=aCasadas[1]  //Usada em ZA0INICI("ZA0_TIPOSE")  //Inicializador padrão do campo

//Chama o AxInclui
// [ cAlias ] [ nReg ] [ nOpc ] [ aAcho ] [ cFunc ] [ aCpos ] [ cTudoOk ] [ lF3 ] [ cTransact ] [ aButtons ] [ aParam ] [ aAuto ] [ lVirtual ] [ lMaximized ] [ cTela ] [ lPanelFin ] [ oFather ] [ aDim ] [ uArea ]
nOpcA:=AxInclui(cString,/*[ nReg ]*/,/* [ nOpc ]*/,/* [ aAcho ]*/,/* [ cFunc ]*/,/* [ aCpos ]*/, 'U_xValCVA()')
lRet:=(nOpcA==1)  //1=Ok,3=Cancel

If lRet .and. Len(aCasadas)>=2
	//Inclui o Tipo do Serviço no Nro.do Projeto
	cTipoNew:=aCasadas[1]
	cProjet:=ZA0->ZA0_PROJET
	cProjetNew:=AllTrim(Subs(cProjet,1,9))+cTipoNew  //Monta o Nro.Projeto com o Tipo do Seviço
	cProjetNew:=PadR(cProjetNew,Len(cProjet))         //Monta o Nro.Projeto com o tamanho do ZA0_PROJET

	ZA0->(RecLock("ZA0",.F.))
	ZA0->ZA0_PROJET:=cProjetNew
	ZA0->ZA0_TIPOSE:=cTipoNew
	ZA0->(MsUnLock())

	//Monta o aHeader e o aCols para gerar as receitas
	aHeader:={}
	aCols  :={}
	aCols0 :={}
	For nPos:=1 to ZA0->(FCount())
		ZA0->(AAdd(aHeader,{Upper(AllTrim(FieldName(nPos))),Upper(AllTrim(FieldName(nPos)))}))
		ZA0->(AAdd(aCols0,FieldGet(nPos)))
	Next
	AAdd(aCols,aCols0)

	nOrdZA0:=ZA0->(IndexOrd())
	nRecZA0:=ZA0->(Recno())

	For nCasadas:=2 to Len(aCasadas)  //Inicia em 2 porque o primeiro registro é a primeira receita
		cTipoNew:=aCasadas[nCasadas]
		fGravaNew(aHeader,aCols,cTipoNew)  //Grava o novo Tipo de Serviço
	Next

	ZA0->(dbSetOrder(nOrdZA0))
	ZA0->(dbGoTo(nRecZA0))
EndIf

IF ZA0->ZA0_TIPOSE == 'P'
	DBSELECTAREA("ZA1")      
	DBSETORDER(1) //ZA1_FILIAL+ZA1_PROJET+ZA1_OBRA 
	IF !DBSEEK(XFILIAL("ZA1")+ZA0->ZA0_PROJET+'001')
        RECLOCK("ZA1",.T.)
          ZA1->ZA1_FILIAL := XFILIAL("ZA1")
          ZA1->ZA1_PROJET := ZA0->ZA0_PROJET
          ZA1->ZA1_OBRA   := '001'
          ZA1->ZA1_NOMORI := ZA0->ZA0_CLINOM
          ZA1->ZA1_CGCORI := ZA0->ZA0_CLICGC
          ZA1->ZA1_INSORI := ZA0->ZA0_CLIINS
          ZA1->ZA1_ENDORI := ZA0->ZA0_CLIEND
          ZA1->ZA1_MUNORI := ZA0->ZA0_CLIMUN
          ZA1->ZA1_BAIORI := ZA0->ZA0_CLIBAI
          ZA1->ZA1_ESTORI := ZA0->ZA0_CLIEST
          ZA1->ZA1_CEPORI := ZA0->ZA0_CLICEP
          ZA1->ZA1_EMAORI := ZA0->ZA0_CLIEMA
          ZA1->ZA1_DDDORI := ZA0->ZA0_CLIDDD
          ZA1->ZA1_TELORI := ZA0->ZA0_CLITEL
          ZA1->ZA1_FAXORI := ZA0->ZA0_CLIFAX
          ZA1->ZA1_CLIORI := ZA0->ZA0_CLI
          ZA1->ZA1_LOJORI := ZA0->ZA0_LOJA
        MSUNLOCK()
    ENDIF
ENDIF
Return(.t.)

********************************************************************************
User Function ZA0Orca()  
// Inclui o projeto / orçamento baseado na tabela SCJ/SCK
********************************************************************************
Local nPos,cDir,lRet,nOpcA	//Retorno do AxInclui()
Local aHeader,aCols,aCols0,nRecZA0,cNum,cNum1,cTipo1
Local cCasadas,aCasadas,nCasadas
Local cARet := "" //Retorno do Tipo de Seguimento Por Anderson Pedrassi
Local cACtrl:= '0'
Local nRecZA0:=ZA0->(Recno()),nOrdZA0:=ZA0->(IndexOrd())
Local lReceitaT,lReceitaG,lReceitaU,lReceitaR,lReceitaI,lReceitaO,lReceitaP,lReceitaB
Local _aItensOrc := {}
Private nOpc    :=3 //3=Incluir
Private nOpcManu:=3 //3=Incluir

lRet	 :=.t.
cOrcam := Space(6)

Define MsDialog oDlg Title "Agendamento" 	From 178,181 To 270,330 Pixel
	@ 010,008 Say "Agendamento:"			Size 030,008 Pixel Of oDlg
	@ 009,040 MsGet oOrcam Var cOrcam 	Size 030,009 Pixel Of oDlg F3 "SCJ" Valid ExistChav("SCJ") .and. NaoVazio()		//When fWhen(.f.)
	@ 030,008 BmpButton Type 1 Action (lRet:=.t.,Close(oDlg))
	@ 030,040 BmpButton Type 2 Action (lRet:=.f.,Close(oDlg))
Activate MsDialog oDlg Centered 

//Procura o orçamento lançado
SCJ->(dbSetOrder(1))	//CJ_FILIAL + CJ_NUM
SCJ->(dbSeek(xFilial("SCJ") + cOrcam))
Do Case
Case lRet .and. !(SCJ->(Found()))
	MsgStop("Agendamento " + cOrcam + ", não encontrado.", "Atenção")
	lRet := .f.
Case lRet .and. !(SCJ->CJ_STATUS $ "A|D")
	MsgStop("Agendamento " + cOrcam + ", encontra-se como " + Iif(SCJ->CJ_STATUS == "B", "baixado",;
															Iif(SCJ->CJ_STATUS == "C", "cancelado",;
															Iif(SCJ->CJ_STATUS == "E", "aprovado","não identificado"))) + " no sistema.", "Atenção")
	lRet := .f.
EndCase

//Identifica os serviços inclusos no orçamento
aCasadas:={}
lReceitaT:=.f.
lReceitaG:=.f.
lReceitaU:=.f.
lReceitaR:=.f.
lReceitaI:=.f.
lReceitaO:=.f.
lReceitaP:=.f.
lReceitaB:=.f.

//Varre os ítens do orçamento para identificar o(s) serviço(s)
SCK->(dbSetOrder(1))
SCK->(dbSeek(xFilial("SCK") + cOrcam))
While lRet .and. SCK->(!Eof()) .and. SCK->CK_NUM == cOrcam

	ST9->(dbSetOrder(7))	//T9_FILIAL + T9_CODESTO
	ST9->(dbSeek(xFilial("ST9") + SCK->CK_PRODUTO))
	If !(ST9->(Found())) .or. !(ST9->T9_TIPOSE $ "T|G|U|R|I|O|P|M")
		MsgStop("Item " + SCK->CK_ITEM + ", do agendamento " + cOrcam + ", produto " + AllTrim(SCK->CK_PRODUTO) + ", não encontrado ou sem frota relacionada ao mesmo.", "Atenção")
		lRet := .f.
	ElseIf !(ST9->T9_TIPOSE $ "T|G|U|R|I|O|P|M")
		MsgStop("Item " + SCK->CK_ITEM + ", do agendamento " + cOrcam + ", produto " + AllTrim(SCK->CK_PRODUTO) + ", sem classificação do tipo de serviço permitido.", "Atenção")
		lRet := .f.
	Else
		If ST9->T9_TIPOSE == 'T'	.AND.	cACtrl == '0'
			cARet := U_LCPCM001()
			cACtrl:= '1' 
		Else
			cARet := ST9->T9_TIPOSE
		EndIf
		Do Case
			Case cARet == "T" .and. !(lReceitaT);	lReceitaT := .t.;	AAdd(aCasadas,"T")
			Case cARet == "G" .and. !(lReceitaG);	lReceitaG := .t.;	AAdd(aCasadas,"G")
			Case cARet == "U" .and. !(lReceitaU);	lReceitaU := .t.;	AAdd(aCasadas,"U")
			Case cARet == "R" .and. !(lReceitaR);	lReceitaR := .t.;	AAdd(aCasadas,"R")
			Case cARet == "I" .and. !(lReceitaI);	lReceitaI := .t.;	AAdd(aCasadas,"I")
			Case cARet == "O" .and. !(lReceitaO);	lReceitaO := .t.;	AAdd(aCasadas,"O")
			Case cARet == "P" .and. !(lReceitaP);	lReceitaP := .t.;	AAdd(aCasadas,"P")
			Case cARet == "M" .and. !(lReceitaB);	lReceitaB := .t.;	AAdd(aCasadas,"M")
		EndCase
	EndIf
	
	aAdd(_aItensOrc, {SCK->CK_PRODUTO, SCK->CK_DESCRI, SCK->CK_QTDVEN, SCK->CK_VALOR, ST9->T9_CODBEM,cARet})
	
/*	Alterado para atender a solicitação do chamado CEC 36377 Por Anderson Pedrassi
	Else
		Do Case
		Case ST9->T9_TIPOSE == "T" .and. !(lReceitaT);	lReceitaT := .t.;	AAdd(aCasadas,"T")
		Case ST9->T9_TIPOSE == "G" .and. !(lReceitaG);	lReceitaG := .t.;	AAdd(aCasadas,"G")
		Case ST9->T9_TIPOSE == "U" .and. !(lReceitaU);	lReceitaU := .t.;	AAdd(aCasadas,"U")
		Case ST9->T9_TIPOSE == "R" .and. !(lReceitaR);	lReceitaR := .t.;	AAdd(aCasadas,"R")
		Case ST9->T9_TIPOSE == "I" .and. !(lReceitaI);	lReceitaI := .t.;	AAdd(aCasadas,"I")
		Case ST9->T9_TIPOSE == "O" .and. !(lReceitaO);	lReceitaO := .t.;	AAdd(aCasadas,"O")
		Case ST9->T9_TIPOSE == "P" .and. !(lReceitaP);	lReceitaP := .t.;	AAdd(aCasadas,"P")
		Case ST9->T9_TIPOSE == "M" .and. !(lReceitaB);	lReceitaB := .t.;	AAdd(aCasadas,"M")
		EndCase
	EndIf

	aAdd(_aItensOrc, {SCK->CK_PRODUTO, SCK->CK_DESCRI, SCK->CK_QTDVEN, SCK->CK_VALOR, ST9->T9_CODBEM, ST9->T9_TIPOSE})
*/  

	SCK->(dbSkip())
EndDo

If Len(aCasadas)==0
	If !Empty(cOrcam)
		MsgStop("Agendamento " + cOrcam + ", não importado.", "Atenção")
	EndIf
	Return
EndIf

Private ZA0Receit:=aCasadas[1]  //Usada em ZA0INICI("ZA0_RECEIT")  //Inicializador padrão do campo
Private ZA0TipoSe:=aCasadas[1]  //Usada em ZA0INICI("ZA0_TIPOSE")  //Inicializador padrão do campo

//Chama o AxInclui
nOpcA:=AxInclui(cString,,,,"u_AtuSCJ")
lRet:=(nOpcA==1)  //1=Ok,3=Cancel

If lRet
	//Atualizo o status do orçamento
	SCJ->(dbSetOrder(1))	//CJ_FILIAL + CJ_NUM
	SCJ->(dbSeek(xFilial("SCJ") + cOrcam))
	SCJ->(RecLock("SCJ",.F.))
	SCJ->CJ_STATUS := "B"
	SCJ->(MsUnLock())
	ItensOrc(cOrcam, aCasadas[1], _aItensOrc, Len(aCasadas)>=2)
EndIf

If lRet .and. Len(aCasadas)>=2
	//Inclui o Tipo do Serviço no Nro.do Projeto
	cTipoNew:=aCasadas[1]
	cProjet:=ZA0->ZA0_PROJET
	cProjetNew:=AllTrim(Subs(cProjet,1,9))+cTipoNew  //Monta o Nro.Projeto com o Tipo do Seviço
	cProjetNew:=PadR(cProjetNew,Len(cProjet))         //Monta o Nro.Projeto com o tamanho do ZA0_PROJET

	ZA0->(RecLock("ZA0",.F.))
	ZA0->ZA0_PROJET:=cProjetNew
	ZA0->ZA0_TIPOSE:=cTipoNew
	ZA0->(MsUnLock())

	//Monta o aHeader e o aCols para gerar as receitas
	aHeader:={}
	aCols  :={}
	aCols0 :={}
	For nPos:=1 to ZA0->(FCount())
		ZA0->(AAdd(aHeader,{Upper(AllTrim(FieldName(nPos))),Upper(AllTrim(FieldName(nPos)))}))
		ZA0->(AAdd(aCols0,FieldGet(nPos)))
	Next
	AAdd(aCols,aCols0)

	nOrdZA0:=ZA0->(IndexOrd())
	nRecZA0:=ZA0->(Recno())

	For nCasadas:=2 to Len(aCasadas)  //Inicia em 2 porque o primeiro registro é a primeira receita
		cTipoNew:=aCasadas[nCasadas]
		fGravaNew(aHeader,aCols,cTipoNew)  //Grava o novo Tipo de Serviço
		ItensOrc(cOrcam, aCasadas[nCasadas], _aItensOrc, Len(aCasadas)>=2)
	Next

	ZA0->(dbSetOrder(nOrdZA0))
	ZA0->(dbGoTo(nRecZA0))
EndIf

Return(.t.)

********************************************************************************
User Function AtuSCJ()
// Atualiza os campos da tabela SCJ-Orçamento na tabela ZA0-Projetos
********************************************************************************
M->ZA0_CLI		:= SCJ->CJ_CLIENTE
M->ZA0_LOJA		:= SCJ->CJ_LOJA
M->ZA0_PROSPE	:= SCJ->CJ_PROSPE
M->ZA0_LOJAP	:= SCJ->CJ_LOJPRO
M->ZA0_ORCAM	:= SCJ->CJ_NUM
M->ZA0_DATINC	:= SCJ->CJ_EMISSAO
M->ZA0_DTPARA	:= SCJ->CJ_EMISSAO
M->ZA0_DTVALI	:= SCJ->CJ_VALIDA
U_ZA0VALID("ZA0_CLI")
U_ZA0VALID("ZA0_PROSPE")

Return .t.

********************************************************************************
Static Function ItensOrc(_cNumOrc, _cSegmento, _aItensOrc, _lCasada)
// Atualiza os campos da tabela SCK-Itens do Orçamento na tabela correspondente
********************************************************************************
Local lRet		:= .t.
Local _nItem	:= 0

If !Empty(_aItensOrc)
	
	For _nItens := 1 to Len(_aItensOrc)
		Do Case
		Case _cSegmento $ "T|O" .and. _aItensOrc[_nItens][6] == _cSegmento
			ZAE->(RecLock("ZAE",.T.))
			ZAE->ZAE_FILIAL	:= ZA0->ZA0_FILIAL
			ZAE->ZAE_PROJET	:= AllTrim(Subs(ZA0->ZA0_PROJET,1,9)) + Iif(_lCasada, _cSegmento, "")
			ZAE->ZAE_OBRA	:= "001"
			ZAE->ZAE_SEQTRA	:= "001"
			ZAE->ZAE_SEQCAR	:= "001"
			ZAE->ZAE_SEQCON	:= StrZero(++_nItem,3)
			ZAE->ZAE_TRANSP	:= _aItensOrc[_nItens][5]
			ZAE->ZAE_DESTRA	:= _aItensOrc[_nItens][2]
			ZAE->ZAE_VRDIA	:= _aItensOrc[_nItens][4]
			ZAE->(MsUnLock())

		Case _cSegmento $ "G|R|I" .and. _aItensOrc[_nItens][6] == _cSegmento
			ZA5->(RecLock("ZA5",.T.))
			ZA5->ZA5_FILIAL	:= ZA0->ZA0_FILIAL
			ZA5->ZA5_PROJET	:= AllTrim(Subs(ZA0->ZA0_PROJET,1,9)) + Iif(_lCasada, _cSegmento, "")
			ZA5->ZA5_OBRA	:= "001"
			ZA5->ZA5_SEQGUI	:= StrZero(++_nItem,3)
			ZA5->ZA5_TIPOSE	:= Iif(_cSegmento == "I", "T", _cSegmento)
			ZA5->ZA5_PRODUT	:= _aItensOrc[_nItens][1]
			ZA5->ZA5_GUINDA	:= _aItensOrc[_nItens][5]
			ZA5->ZA5_DESGUI	:= _aItensOrc[_nItens][2]
			ZA5->ZA5_PREDIA	:= _aItensOrc[_nItens][3]
			ZA5->ZA5_VRHOR	:= _aItensOrc[_nItens][4]
			ZA5->(MsUnLock())

		Case _cSegmento $ "U|P|M" .and. _aItensOrc[_nItens][6] == _cSegmento
			ZAG->(RecLock("ZAG",.T.))
			ZAG->ZAG_FILIAL	:= ZA0->ZA0_FILIAL
			ZAG->ZAG_PROJET	:= AllTrim(Subs(ZA0->ZA0_PROJET,1,9)) + Iif(_lCasada, _cSegmento, "")
			ZAG->ZAG_OBRA	:= "001"
			ZAG->ZAG_SEQGRU	:= StrZero(++_nItem,3)
			ZAG->ZAG_TIPOSE	:= Iif(_cSegmento == "M", "O", _cSegmento)
			ZAG->ZAG_PRODUT	:= _aItensOrc[_nItens][1]
			ZAG->ZAG_GRUA	:= _aItensOrc[_nItens][5]
			ZAG->ZAG_DESGRU	:= _aItensOrc[_nItens][2]
			ZAG->ZAG_QUANT	:= 1 //_aItensOrc[_nItens][3]
			ZAG->ZAG_PREDIA	:= _aItensOrc[_nItens][3]
			ZAG->ZAG_VRHOR	:= _aItensOrc[_nItens][4]
			ZAG->(MsUnLock())

		EndCase
	Next _nItens
EndIf

Return lRet

/*
********************************************************************************
User Function ZA0IncC()  
// Serviço             
********************************************************************************
Local cProjet,cProjetNew,cTipoNew,aTipoNew
Local oDlg,lRet
Local nRecZA0:=ZA0->(Recno()),nOrdZA0:=ZA0->(IndexOrd())

Private nOpc    :=3 //3=Incluir
Private nOpcManu:=3 //3=Incluir

cProjet:=ZA0->ZA0_PROJET

aTipoNew:=fMontaCboX("ZA0_TIPOSE")  //Retorna o array com os textos do X3_CBOX do campo informado

If Len(aTipoNew)==0
	MsgStop("ERRO: Problemas na montagem do combo de Tipos de Serviço !!")
	Return(.t.)
EndIf

cTipoNew:=Subs(aTipoNew[1],1,1)

lRet:=.f.
DEFINE MSDIALOG oDlg TITLE "Serviço      " FROM C(178),C(181) TO C(331),C(531) PIXEL
	@ C(010),C(008) Say "Projeto:"                              Size C(020),C(008) COLOR CLR_BLACK PIXEL OF oDlg
	@ C(022),C(008) Say "Tipo de Serviço:"                      Size C(041),C(008) COLOR CLR_BLACK PIXEL OF oDlg
	@ C(009),C(052) MsGet    oEdit1 Var cProjet                 Size C(093),C(009) COLOR CLR_BLACK PIXEL OF oDlg When fWhen(.f.)
	@ C(022),C(052) COMBOBOX oEdit2 Var cTipoNew ITEMS aTipoNew SIZE C(070),C(008) COLOR CLR_BLACK PIXEL OF oDlg When fWhen()
	@ C(050),C(57) BMPBUTTON TYPE 1 ACTION (lRet:=.t.,Close(oDlg))
	@ C(050),C(87) BMPBUTTON TYPE 2 ACTION (lRet:=.f.,Close(oDlg))
ACTIVATE MSDIALOG oDlg CENTERED 

If lRet .and. !Empty(cTipoNew)

	//Monta o aHeader e o aCols para gerar as receitas
	aHeader:={}
	aCols  :={}
	aCols0 :={}
	For nPos:=1 to ZA0->(FCount())
		ZA0->(AAdd(aHeader,{Upper(AllTrim(FieldName(nPos))),Upper(AllTrim(FieldName(nPos)))}))
		ZA0->(AAdd(aCols0,FieldGet(nPos)))
	Next
	AAdd(aCols,aCols0)

	nOrdZA0:=ZA0->(IndexOrd())
	nRecZA0:=ZA0->(Recno())

	cTipoAnt:=AllTrim(Subs(cProjet,12,Len(cProjet)))  //Pega o Tipo de Serviço atual
	If Right(cTipoAnt,1)<>cTipoNew
		fGravaNew(aHeader,aCols,cTipoAnt+cTipoNew)  //Grava o novo Tipo de Serviço
	EndIf

	ZA0->(dbSetOrder(nOrdZA0))
	ZA0->(dbGoTo(nRecZA0))
EndIf

Return(.t.)*/

********************************************************************************
Static Function fGravaNew(aHeader,aCols,cTipoNew)  
// Grava o novo Tipo de Serviço
********************************************************************************
Local nOrdZA0:=ZA0->(IndexOrd()),nRecZA0:=ZA0->(Recno())
Local nPos,cProjet,cProjetNew

cProjet:=ZA0->ZA0_PROJET

cProjetNew:=AllTrim(Subs(cProjet,1,9))+cTipoNew  //Monta o Nro.Projeto com o Tipo do Seviço
cProjetNew:=PadR(cProjetNew,Len(cProjet))         //Monta o Nro.Projeto com o tamanho do ZA0_PROJET

ZA0->(dbSetOrder(1))  //ZA0_FILIAL+ZA0_PROJET
ZA0->(dbSeek(xFilial("ZA0")+cProjetNew))
If ZA0->(!Eof())
	MsgStop("ATENÇÃO: Já existe o Agendamento "+AllTrim(cProjetNew)+" !!")
	ZA0->(dbSetOrder(nOrdZA0))
	ZA0->(dbGoTo(nRecZA0))
	Return(.f.)
EndIf

//
ZA0->(RecLock("ZA0",.T.))
fGravaTudo("ZA0",aHeader,aCols[1])  //Grava todos os campos do aCols
ZA0->ZA0_PROJET:=cProjetNew
ZA0->ZA0_TIPOSE:=cTipoNew
ZA0->ZA0_RECEIT:=cTipoNew			//Quando é casada o sistema ficava com a receita da primeira
ZA0->(MsUnLock())
//

ZA0->(dbSetOrder(nOrdZA0))
ZA0->(dbGoTo(nRecZA0))

Return(.t.)

********************************************************************************
Static Function C(nTam)                                                         
// Funcao responsavel por manter o Layout independente da resolucao horizontal 
// do Monitor do Usuario.
********************************************************************************
Local nHRes	:=	oMainWnd:nClientWidth	// Resolucao horizontal do monitor     

If nHRes == 640	// Resolucao 640x480 (soh o Ocean e o Classic aceitam 640)  
	nTam *= 0.8                                                                
ElseIf (nHRes == 798).Or.(nHRes == 800)	// Resolucao 800x600                
	nTam *= 1                                                                  
Else	// Resolucao 1024x768 e acima                                           
	nTam *= 1.28                                                               
EndIf                                                                         
                                                                                
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿                                               
//³Tratamento para tema "Flat"³                                               
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ                                               
If "MP8" $ oApp:cVersion                                                      
	If (Alltrim(GetTheme()) == "FLAT") .Or. SetMdiChild()                      
		nTam *= 0.90                                                            
	EndIf                                                                      
EndIf                                                                         

Return Int(nTam)                                                                

********************************************************************************
User Function ZA0Manu(cOpc)  
// Manutenção
********************************************************************************

lCopyPrj := cOpc == 5//Copia de projeto

If .f.	//ZA0->(!Empty(Subs(ZA0_PROJET,12,1)) .and. !Subs(ZA0_PROJET,12,1)=="/")  //Se não for revisão
	MsgStop("ATENÇÃO: Agendamento base. Fazer a manutenção por tipo de serviço !!")
	Return(.f.)
EndIf        

If ! LockByName(ZA0->ZA0_FILIAL+ZA0->ZA0_PROJET, .F., .F.)
	Aviso("Controle de acesso.","Registro em uso por outro usuário.",{"Ok"},,"Projeto: "+ZA0->ZA0_PROJET)
	Return(.f.)
EndIf                

// Controle de linhas em branco na DTQ - Frank Zwarg Fuga - 09/05/2016
If !file('\DTQCTR.CTR')
	_cQryDel := "UPDATE DTQ010 SET D_E_L_E_T_ = '*' "
	_cQryDel += "WHERE DTQ_FILORI = '' AND "
	_cQryDel += "      DTQ_VIAGEM = '' AND "
	_cQryDel += "      DTQ_TIPVIA = '' AND "
	_cQryDel += "      DTQ_ROTA   = '' AND "
	_cQryDel += "      DTQ_DATGER = '' AND "
	_cQryDel += "      D_E_L_E_T_ = '' AND "
	_cQryDel += "      DTQ_SERTMS = '' "
	TCSQLExec (_cQryDel)
	Memowrite('\DTQCTR.CTR',"NAO DELETAR!!!")       
EndIF


// Controle de linhas em branco na DTQ - Frank Zwarg Fuga - 09/05/2016
If !file('\DTQCTR.CTR')
	_cQryDel := "UPDATE DTQ010 SET D_E_L_E_T_ = '*' "
	_cQryDel += "WHERE DTQ_FILORI = '' AND "
	_cQryDel += "      DTQ_VIAGEM = '' AND "
	_cQryDel += "      DTQ_TIPVIA = '' AND "
	_cQryDel += "      DTQ_ROTA   = '' AND "
	_cQryDel += "      DTQ_DATGER = '' AND "
	_cQryDel += "      D_E_L_E_T_ = '' AND "
	_cQryDel += "      DTQ_SERTMS = '' "
	TCSQLExec (_cQryDel)
	Memowrite('\DTQCTR.CTR',"NAO DELETAR!!!")       
EndIF


// by Frank Zwarg Fuga - parametro para visualizacao das viagens
If !U_ZA0FIL1()                                                 
	UnLockByName(ZA0->ZA0_FILIAL+ZA0->ZA0_PROJET, .F., .F.)
	Return
EndIF

If ZA0->ZA0_STATUS $ "6|7|A|B|C" .And. !lCopyPrj 
// If ZA0->ZA0_STATUS $ "2|6|7|A|B|C"
//	_cLabel :=  Iif(ZA0->ZA0_STATUS == "2", "Em Aprovação",;
	_cLabel :=  Iif(ZA0->ZA0_STATUS == "6", "Indisponível",;
	            Iif(ZA0->ZA0_STATUS == "7", "Rejeitado",;
	            Iif(ZA0->ZA0_STATUS == "8", "Faturado",;
	            Iif(ZA0->ZA0_STATUS == "A", "Revisado",;
				Iif(ZA0->ZA0_STATUS == "B", "Excluído",;
				Iif(ZA0->ZA0_STATUS == "C", "Cancelado",""))))))
	MsgStop("Agendamento encontra-se com o status " + ZA0->ZA0_STATUS + "-" + _cLabel + ", não é possível a manutenção !!!")
	UnLockByName(ZA0->ZA0_FILIAL+ZA0->ZA0_PROJET, .F., .F.)
	Return
EndIf

If ZA0->ZA0_STATUS $ "3|4|5|8" .And. !lCopyPrj
	_cLabel :=  Iif(ZA0->ZA0_STATUS == "3", "Aprovada",;
				Iif(ZA0->ZA0_STATUS == "4", "Não Aprovada",;
				Iif(ZA0->ZA0_STATUS == "5", "Fechada","")))
	
	//If MsgYesNo("Agendamento encontra-se com o status igual a " + _cLabel + ", " + Chr(10) + Chr(13) +;
	//			"você deseja gerar uma nova revisão deste agendamento ?")
	//	U_ZA0Revi2()	//ZA0Revi2
	//	Return
	//Else
	If MsgYesNo("Você pode efetuar a alteração deste agendamento, " + Chr(10) + Chr(13) +;
					"mas ao confirmar essa opção o status da mesma " + Chr(10) + Chr(13) +;
					"será modificado para 1=Digitado.              " + Chr(10) + Chr(13) +;
					"Você deseja efetuar a alteração desta agendamento ?")
	RecLock("ZA0",.F.)
	//ZA0->ZA0_STATUS = "1"	//Digitado
		ZA0->ZA0_STATUS := "1" //Alterado por Jesus
		MsUnlock("ZA0")
				
		aCampos := {}
			nValTot := 0
			aInfos  := TamSX3("ZA0_PROJET")
			AADD(aCampos,{ "PROJETO" ,aInfos[3],aInfos[1],aInfos[2] } )
			AADD(aCampos,{ "COLUNA1"    ,"C",59,0 } ) // Obra
			AADD(aCampos,{ "COLUNA2"    ,"C",57,0 } ) // Equipamentos
			AADD(aCampos,{ "COLUNA3"    ,"C",30,0 } ) // Periodo
			AADD(aCampos,{ "COLUNA4"    ,"C",18,0 } ) // Vr.Base
			AADD(aCampos,{ "COLUNA5"    ,"C",18,0 } ) // Vr.Mob./ Desmob.
			AADD(aCampos,{ "COLUNA6"    ,"C",18,0 } ) // Vr.Total
					
			cNomArq := CriaTrab(aCampos)
			If (Select("TMP") <> 0)
				dbSelectArea("TMP")
				dbCloseArea()
			Endif
			dbUseArea(.T.,,cNomArq,"TMP",nil,.F.)
				
			U_fCalcT(ZA0->ZA0_PROJET,ZA0->ZA0_TIPOSE)
					
			TMP->(DBGOTOP())
			WHILE TMP->(!EOF())
				nValTot := nValTot+VAL(STRTRAN(STRTRAN(Alltrim(TMP->COLUNA6),".",""),",","."))
				TMP->(DBSKIP())
			ENDDO
			//Integração Protheus x Dynamics para informar alterações nos status da proposta ao CRM
			//u_IntPropCRM(ZA0->ZA0_ORCAM, ZA0->ZA0_STATUS,ZA0->ZA0_CLI,ZA0->ZA0_LOJA,ZA0->ZA0_PROJET,nValTot)
							
	Else
		MsgStop("Agendamento não foi alterada.")
		UnLockByName(ZA0->ZA0_FILIAL+ZA0->ZA0_PROJET, .F., .F.)
		Return
	EndIf
//EndIf
EndIf

fManu(4)
UnLockByName(ZA0->ZA0_FILIAL+ZA0->ZA0_PROJET, .F., .F.)

Return

********************************************************************************
User Function ZA0Follow()  
// Follow-up
********************************************************************************
If ZA0->ZA0_STATUS == "A" .or. ZA0->ZA0_STATUS == "B"
	_cLabel :=  Iif(ZA0->ZA0_STATUS == "A", "REVISADO",;
				Iif(ZA0->ZA0_STATUS == "B", "EXCLUIDO",""))
	MsgStop("Agendamento encontra-se com o status " + ZA0->ZA0_STATUS + "-" + _cLabel + ", não é possível follow-up !!!")
	Return
EndIf

fManu(0)

Return

********************************************************************************
User Function ZA0Revi()  
// Revisão
********************************************************************************
Local nPos,aTabAux
Local cProjet,cRevisa
Local cProjetNew,cRevisaNew
Local aAreaZA0:=ZA0->(GetArea())
Local nRgZA0  := 0

cProjet:=SubStr(ZA0->ZA0_PROJET,1,9)
cRevisa:=ZA0->ZA0_REVISA

cRevisaNew:=StrZero(Val(cRevisa)+1,Len(cRevisa))

If !MsgYesNo("Confirma a revisão "      + cRevisaNew + " do Agendamento " + AllTrim(cProjet) + " ?")
	RestArea(aAreaZA0)
	Return(.F.)
EndIf

Begin Transaction

//Verifico se já não existe revisão desta(s) proposta(s) *Obs: Mais de uma no caso de casadas
DbSelectArea("ZA0")
dbSetOrder(1)  //ZA0_FILIAL+ZA0_PROJET
_lFlag := .T.
ZA0->(dbSeek(xFilial("ZA0") + cProjet))

While ZA0->(!Eof()) .and. SubStr(ZA0->ZA0_PROJET,1,9) == cProjet .and. _lFlag
	nRgZA0 := ZA0->(Recno())

	If ZA0->ZA0_REVISA == cRevisa
		nPos:=At("/",ZA0->ZA0_PROJET)
		If nPos==0
			cProjetNew:=PadR(AllTrim(ZA0->ZA0_PROJET)       + "/" + cRevisaNew,Len(ZA0->ZA0_PROJET))
		Else
			cProjetNew:=PadR(Subs(ZA0->ZA0_PROJET,1,nPos-1) + "/" + cRevisaNew,Len(ZA0->ZA0_PROJET))
		EndIf

		If MsSeek(xFilial("ZA0") + cProjetNew)
			_lFlag := .F.
		Else
			dbGoto(nRgZA0)
			RecLock("ZA0",.F.)
				//ZA0->ZA0_STATUS = "A"	//Altero o status da proposta original para A=Revisado
				ZA0->ZA0_STATUS := "A" //Alterado por Jesus -> Biale
			MsUnlock("ZA0")

			//Integração Protheus x Dynamics para informar alterações nos status da proposta ao CRM
			//u_IntPropCRM(ZA0->ZA0_ORCAM, ZA0->ZA0_STATUS,ZA0->ZA0_CLI+ZA0->ZA0_LOJA)
		
			Processa({||fZA0Revi(ZA0->ZA0_PROJET,cProjetNew,cRevisaNew)},"Aguarde... Atualizando a Revisão")
		EndIf
    EndIf
	
	dbGoto(nRgZA0)
	ZA0->(dbSkip())
	While ZA0->(!Eof()) .and. SubStr(ZA0->ZA0_PROJET,1,9) == cProjet .and. ZA0->ZA0_REVISA == cRevisaNew .and. _lFlag
		ZA0->(dbSkip())
	EndDo
EndDo

If !(_lFlag)
    MsgStop("ATENÇÃO: Já existe a revisão " + cRevisaNew + " do Agendamento " + AllTrim(cProjet) + " !")
    RestArea(aAreaZA0)
	DisarmTransaction()
	Return(.F.)
EndIf

End Transaction

DbSelectArea("ZA0")

RestArea(aAreaZA0)

Return

********************************************************************************
Static Function fZA0Revi(cProjet,cProjetNew,cRevisaNew)  
// Processa a Revisão
********************************************************************************
ProcRegua(15)

If  U_DupliReg("ZA0",1,"ZA0_FILIAL+ZA0_PROJET",xFilial("ZA0")+cProjet,{{"ZA0_PROJET",cProjetNew},;
                                                                       {"ZA0_REVISA",cRevisaNew},;
                                                                       {"ZA0_STATUS","1"},;
                                                                       {"ZA0_DATINC",dDataBase},;
                                                                       {"ZA0_DTPARA",dDataBase},;
                                                                       {"ZA0_HRINC",SubStr(TIME(),1,2)+SubStr(TIME(),4,2)},;
                                                                       {"ZA0_PRVALI",30},;
                                                                       {"ZA0_DTVALI",dDataBase+30}})//Duplica o registro da tabela informada
	U_DupliReg("ZA1",1,"ZA1_FILIAL+ZA1_PROJET",xFilial("ZA1")+cProjet,{{"ZA1_PROJET",cProjetNew}})  //Duplica o registro da tabela informada
	U_DupliReg("ZA4",1,"ZA4_FILIAL+ZA4_PROJET",xFilial("ZA4")+cProjet,{{"ZA4_PROJET",cProjetNew}})  //Duplica o registro da tabela informada
	U_DupliReg("ZA5",1,"ZA5_FILIAL+ZA5_PROJET",xFilial("ZA5")+cProjet,{{"ZA5_PROJET",cProjetNew}})  //Duplica o registro da tabela informada
	U_DupliReg("ZA6",1,"ZA6_FILIAL+ZA6_PROJET",xFilial("ZA6")+cProjet,{{"ZA6_PROJET",cProjetNew}})  //Duplica o registro da tabela informada
	U_DupliReg("ZA7",1,"ZA7_FILIAL+ZA7_PROJET",xFilial("ZA7")+cProjet,{{"ZA7_PROJET",cProjetNew}})  //Duplica o registro da tabela informada
	U_DupliReg("ZA8",1,"ZA8_FILIAL+ZA8_PROJET",xFilial("ZA8")+cProjet,{{"ZA8_PROJET",cProjetNew}})  //Duplica o registro da tabela informada
	U_DupliReg("ZA9",1,"ZA9_FILIAL+ZA9_PROJET",xFilial("ZA9")+cProjet,{{"ZA9_PROJET",cProjetNew}})  //Duplica o registro da tabela informada
	U_DupliReg("ZAA",1,"ZAA_FILIAL+ZAA_PROJET",xFilial("ZAA")+cProjet,{{"ZAA_PROJET",cProjetNew}})  //Duplica o registro da tabela informada
	U_DupliReg("ZAE",1,"ZAE_FILIAL+ZAE_PROJET",xFilial("ZAE")+cProjet,{{"ZAE_PROJET",cProjetNew}})  //Duplica o registro da tabela informada
	U_DupliReg("ZAF",1,"ZAF_FILIAL+ZAF_PROJET",xFilial("ZAF")+cProjet,{{"ZAF_PROJET",cProjetNew}})  //Duplica o registro da tabela informada
	U_DupliReg("ZAG",1,"ZAG_FILIAL+ZAG_PROJET",xFilial("ZAG")+cProjet,{{"ZAG_PROJET",cProjetNew}})  //Duplica o registro da tabela informada
	U_DupliReg("ZAI",1,"ZAI_FILIAL+ZAI_PROJET",xFilial("ZAI")+cProjet,{{"ZAI_PROJET",cProjetNew}})  //Duplica o registro da tabela informada
	U_DupliReg("ZAK",1,"ZAK_FILIAL+ZAK_PROJET",xFilial("ZAK")+cProjet,{{"ZAK_PROJET",cProjetNew}})  //Duplica o registro da tabela informada
	U_DupliReg("ZAM",1,"ZAM_FILIAL+ZAM_PROJET",xFilial("ZAM")+cProjet,{{"ZAM_PROJET",cProjetNew}})  //Duplica o registro da tabela informada
EndIf

Return

********************************************************************************
User Function DupliReg(cAlias,nOrdem,cChaveCpos,cChaveOld,aReplace)  
// Duplica os registros da tabela informada
********************************************************************************
Local nPos,aTabAux
Local nRecAnt:=(cAlias)->(Recno()),nOrdAnt:=(cAlias)->(IndexOrd())

IncProc("Processando... "+cAlias)

aTabAux:={}

(cAlias)->(dbSetOrder(nOrdem))
(cAlias)->(dbSeek(cChaveOld))
While (cAlias)->(!Eof() .and. &cChaveCpos==cChaveOld)
	(cAlias)->(AAdd(aTabAux,Recno()))
	(cAlias)->(dbSkip())
End

For nPos:=1 to Len(aTabAux)
	(cAlias)->(dbGoTo(aTabAux[nPos]))
	U_fDupliReg(cAlias,aReplace)  //Duplica o registro da tabela informada
Next

(cAlias)->(dbSetOrder(nOrdAnt))

Return(.t.)

********************************************************************************
User Function fDupliReg(cAlias,aReplace)  
// Duplica o registro da tabela informada
********************************************************************************
Local nPos,aTabAux
Local cCampo,cCampoGet

aTabAux:={}
For nPos:=1 to (cAlias)->(Fcount())
	(cAlias)->(AAdd(aTabAux,FieldGet(nPos)))
Next

(cAlias)->(RECLOCK(cAlias,.T.))  //Insere o novo registro

For nPos:=1 to Len(aTabAux)
	(cAlias)->(FieldPut(nPos,aTabAux[nPos]))
Next

For nPos:=1 to Len(aReplace)  		//Campos para o Replace
	cCampo   :=aReplace[nPos,1]  	//Nome do campo
	cCampoGet:=aReplace[nPos,2]  	//Conteúdo do campo
	(cAlias)->&cCampo:=cCampoGet
Next

(cAlias)->(MsUnLock())

Return(.t.)

********************************************************************************
User Function ZA0Visu(_cProj)  
// Visualizar
********************************************************************************
If !Empty(_cProj) .and. _cProj <> "ZA0"
	ZA0->(dbSeek(xFilial("ZA0") + _cProj))
EndIf                

// by Frank Zwarg Fuga - parametro para visualizacao das viagens
If !U_ZA0FIL1()
	Return
EndIF

fManu(2)

Return

********************************************************************************
Static Function fDupliGui
********************************************************************************
Local cCampo,cCampoGet

If !oFolder:nOption==nFolderGui
	MsgStop("ATENÇÃO: Favor selecionar a aba LOCAÇÃO !!")
	Return
EndIf

_nNumDup := 0

@ 0,0   TO 90,250 DIALOG oDlgq TITLE "Duplica a última Locação"
@ 00,01 TO 03,15

@ 001,002 SAY "Quantidade de Linhas a duplicar:"
@ 001,012 GET _nNumDup picture "999" When fWhen()
@ 025,060 BMPBUTTON TYPE 1 ACTION Close(oDlgq)
@ 025,085 BMPBUTTON TYPE 2 ACTION Close(oDlgq)
ACTIVATE DIALOG oDlgq CENTERED

If Empty(_nNumDup) .or. !MsgYesNo("Duplica a última Locação " + AllTrim(Str(_nNumDup)) + " vezes ??")
	Return
EndIf

For _f:= 1 to _nNumDup
	AAdd(oDlgGui:aCols,Aclone(oDlgGui:aCols[Len(oDlgGui:aCols)]))

	cCampo   :="ZA5_SEQGUI"
	cCampoGet:=oDlgGui:aCols[Len(oDlgGui:aCols)][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])==cCampo})]
	oDlgGui:aCols[Len(oDlgGui:aCols)][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])==cCampo})]:=StrZero(Val(cCampoGet)+1,Len(cCampoGet))
	oDlgGui:aCols[Len(oDlgGui:aCols)][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VIAGEM"})]:= ""
	oDlgGui:aCols[Len(oDlgGui:aCols)][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_AS"})]    := ""
Next _f
	
      

Return

********************************************************************************
Static Function fManu(pOpc)
********************************************************************************
Processa({||fManu1(pOpc)},"Aguarde... Montando o ambiente.")
Return

Static Function fManu1(pOpc)

Local cTitJan:="Agendamento"
Local nStyle:=GD_INSERT + GD_UPDATE + GD_DELETE
Local nPos,oDlg,lRet:=.f.
Local aButtons          
Local aColsAux := {}

Private aColsTurno := {}
Private oTurno_Cols := {}
Private nOpc    :=Iif(pOpc==0,4,pOpc)	//Caso seja 0, significa que é apenas a aba follow-up, fixei no programa para não ter interferências
Private nOpcManu:=Iif(pOpc==0,4,pOpc)  //Usada para Visualizar

Private bDelIT  := {|| fDelIt()}		// CodeBlock p/ apagar Itinerários

ProcRegua(32)

nStyle:=If(nOpcManu==2,0,nStyle)  //2=Visualizar

aButtons:={}

If !ZA0->ZA0_TIPOSE $ "T|R|P|I" .and. pOpc == 2
       AAdd(aButtons,{"GPEIMG32",{||TurVal(nOpcManu, oBjt) },OemToAnsi("Turnos e Valores"  ),OemToAnsi("Turnos" )}) //Alteração Claudino(Biale Consultoria).
Endif

If ZA0->ZA0_TIPOSE == "P" .And. ZA0->ZA0_TIPFAT == "P"
	AAdd(aButtons,{"OBJETIVO",{|| ConsLift() },OemToAnsi("Consulta LIFT"),OemToAnsi("Consulta LIFT")})	
EndIf
 
//Monta os botões da barra de ferramentas
If fWhen()
	//aButtons:={}
	AAdd(aButtons,{"S4WB001N",{|| fSalvar900( oFolder, oDlg )  },OemToAnsi("Salvar"         ),OemToAnsi("Salvar" )})
	//AAdd(aButtons,{"OBJETIVO",{||U_Locc003(.F.,ZA0->ZA0_PROJET)},OemToAnsi("Disponibilidade"),OemToAnsi("Dispon.")})
//	AAdd(aButtons,{"OBJETIVO",{||U_LOCGANT()},OemToAnsi("Disponibilidade"),OemToAnsi("Dispon.")})
    
    If !ZA0->ZA0_TIPOSE $ "T|R|P|I" .and. pOpc <> 0    
       AAdd(aButtons,{"GPEIMG32",{||TurVal(nOpcManu,oBjt)      },OemToAnsi("Turnos e Valores"  ),OemToAnsi("Turnos" )}) //Alteração Claudino(Biale Consultoria).
    Endif
    
    Do Case
	Case ZA0->ZA0_TIPOSE $ "G|R|I" .and. pOpc <> 0	// Não for follow-up
		AAdd(aButtons,{"ANALITIC",{||fDupliGui()   },OemToAnsi("Duplica Locação"),OemToAnsi("Locação")})
	Case ZA0->ZA0_TIPOSE $ "T|O" .and. pOpc <> 0	// Não for follow-up
//		AAdd(aButtons,{"S4WB005N",{||ImpPlan()     },OemToAnsi("Packing List"   ),OemToAnsi("Packing")})
		AAdd(aButtons,{"ANALITIC",{||fDupliTra()     },OemToAnsi("Duplica Viagem" ),OemToAnsi("Dupl. Viagem")})
//	Case ZA0->ZA0_TIPOSE=="L" .and. pOpc <> 0	// Não for follow-up
//		AAdd(aButtons,{"ANALITIC",{||fDupliGui()   },OemToAnsi("Duplica Locação"),OemToAnsi("Locação")})
//		AAdd(aButtons,{"S4WB005N",{||ImpPlan()     },OemToAnsi("Packing List"   ),OemToAnsi("Packing")})
	EndCase  

	
EndIf       

IncProc()

Private oArial12N1:=TFont():New("Arial",12,16,,.T.,,,,.T.,.F.)
Private oArial12N2:=TFont():New("Arial",12,16,,.T.,,,,.T.,.F.)
oFont1:=oArial12N1  //Say
oFont2:=oArial12N2  //Get

//ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
//ºMaximizacao da area de trabalho                                          º
//ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
Private aObjects  := {}
Private aInfo     := {}
Private aPosGet   := {}
Private aPosObj   := {}

aSizeAut 	 := MsAdvSize()

If oMainWnd:nClientWidth > 800
	AAdd( aObjects, {  100, 008, .T., .T. } )  //Enchoice
	AAdd( aObjects, {  100, 092, .T., .T. } )  //MsGetDados
Else
	AAdd( aObjects, {  100, 010, .T., .T. } )  //Enchoice
	AAdd( aObjects, {  100, 090, .T., .T. } )  //MsGetDados
EndIf

aInfo 	:= {aSizeAut[1],aSizeAut[2],aSizeAut[3],aSizeAut[4],3,3}
aPosObj := MsObjSize( aInfo, aObjects, .T. , .F. )
aPosGet := MsObjGetPos((aSizeAut[3]-aSizeAut[1]),315,{{004,024,240,270}} )

//ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
//ºMontagem da tela que sehra apresentada para usuario (lay-out)            º
//ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼

DEFINE MSDIALOG oDlg FROM aSizeAut[7],0           TO aSizeAut[6],aSizeAut[5] TITLE OemToAnsi(cTitJan) Of oMainWnd PIXEL

// Após a digitacao do parametro periodo de/ate, se o usuario der um enter a mais, a msdialog estava congelando
// o get abaixo é para evitar este congelamento.
xxx := Space(5)
@ 2000,01 MsGet xxx Picture "@!" of oDlg Pixel

xTabTuv:={}  //Tabela da TUV
xTabTur:={}  //Tabela da TUR
ZAP->(dbGoTop())
While ZAP->(!Eof())
	ZAP->(AAdd(xTabTuv,{ZAP_DE,ZAP_ATE,ZAP_FATOR}))  //Tabela da TUV
	ZAP->(AAdd(xTabTur,{ZAP_DE,ZAP_ATE,ZAP_FATOR}))  //Tabela da TUR
	ZAP->(dbSkip())
End

ZAX->(dbGoTop())
xTuvTon:=ZAX->ZAX_TUVTON
xTuvUfi:=ZAX->ZAX_TUVUFI
xTapTon:=ZAX->ZAX_TAPTON
xFatTap:=ZAX->ZAX_FATTAP
xValPre:=ZAX->ZAX_VALPRE
xValBat:=ZAX->ZAX_VALBAT
xBatDia:=ZAX->ZAX_BATDIA
xValPla:=ZAX->ZAX_VALPLA
xValInv:=ZAX->ZAX_VALINV
xValAle:=ZAX->ZAX_VALALE

If ZAX->(Type("ZAX_TURTON")<>"U")  //Se o campo existe
	xTurTon:=ZAX->ZAX_TURTON  //TUR Lim.Ton.
	xTurUfi:=ZAX->ZAX_TURUFI  //TUR Ufir
Else
	xTurTon:=ZAX->ZAX_TUVTON  //TUV Lim.Ton.
	xTurUfi:=ZAX->ZAX_TUVUFI  //TUV Ufir
EndIf

xFatPrf:={}
AAdd(xFatPrf,{70,0.65})
AAdd(xFatPrf,{60,0.76})
AAdd(xFatPrf,{50,0.91})
AAdd(xFatPrf,{40,1.14})
AAdd(xFatPrf,{30,1.53})
AAdd(xFatPrf,{20,2.29})
AAdd(xFatPrf,{10,4.59})

xFatBat:={}
AAdd(xFatBat,{70,0.00+0.65})
AAdd(xFatBat,{60,0.76+0.65})
AAdd(xFatBat,{50,0.91+0.65})
AAdd(xFatBat,{40,1.14+0.65})
AAdd(xFatBat,{30,1.53+0.65})
AAdd(xFatBat,{20,2.29+0.65})
AAdd(xFatBat,{10,3.94+0.65})

xPesoInv:=70
xLargInv:=5500
xAltuInv:=5200
xCompInv:=30000

xPesoAle:=70
xLargAle:=5500                                                                          
xAltuAle:=5200
xCompAle:=30000

Private aHeader:={}
Private aCols:={}

Private oGetVT
Private oDlgPro,oFolderPro,nFolderPro
Private oDlgObr,oFolderObr,nFolderObr,oObr_Cols:={},oObr_Cols0:={}
Private oDlgRot,oFolderRot,nFolderRot,oRot_Cols:={},oRot_Cols0:={}
Private oDlgTre,oFolderTre,nFolderTre,oTre_Cols:={},oTre_Cols0:={}
Private oDlgGui,oFolderGui,nFolderGui,oGui_Cols:={},oGui_Cols0:={}
Private oDlgAcG,oFolderAcG,nFolderAcG,oAcG_Cols:={},oAcG_Cols0:={}
Private oDlgAce,oFolderAce,nFolderAce,oAce_Cols:={},oAce_Cols0:={}
Private oDlgGru,oFolderGru,nFolderGru,oGru_Cols:={},oGru_Cols0:={}
Private oDlgPla,oFolderPla,nFolderPla,oPla_Cols:={},oPla_Cols0:={}
Private oDlgMar,oFolderMar,nFolderMar,oMar_Cols:={},oMar_Cols0:={}
Private oDlgTra,oFolderTra,nFolderTra,oTra_Cols:={},oTra_Cols0:={}
Private oDlgCon,oFolderCon,nFolderCon,oCon_Cols:={},oCon_Cols0:={}
Private oDlgCar,oFolderCar,nFolderCar,oCar_Cols:={},oCar_Cols0:={}
Private oDlgRes,oFolderRes,nFolderRes,oRes_Cols:={},oRes_Cols0:={}
Private oDlgCus,oFolderCus,nFolderCus,oCus_Cols:={},oCus_Cols0:={}
Private oDlgCuR,oFolderCuR,nFolderCuR,oCuR_Cols:={},oCuR_Cols0:={}
Private oDlgBdi,oFolderBdi,nFolderBdi,oBdi_Cols:={},oBdi_Cols0:={}
Private oDlgCuT,oFolderCuT,nFolderCuT,oCuT_Cols:={},oCuT_Cols0:={}
Private oDlgFol,oFolderFol,nFolderFol,oFol_Cols:={},oFol_Cols0:={}
Private oDlgRat,oFolderRat,nFolderRat,oRat_Cols:={},oRat_Cols0:={}
Private oDlgMao,oFolderMao,nFolderMao,oMao_Cols:={},oMao_Cols0:={}
Private oDlgLic,oFolderLic,nFolderLic,oLic_Cols:={},oLic_Cols0:={}
Private oDlgDoc,oFolderDoc,nFolderDoc,oDoc_Cols:={},oDoc_Cols0:={}
Private oDlgCnj,oFolderCnj,nFolderCnj,	oCnjaCols						// aba cj. transp. (para acessórios do guindaste) - Cristiam em 18/04/2011
Private oDlgTrN,oFolderTrN,nFolderTrN,oTrN_Cols:={},oTrN_Cols0:={}		// nova aba trechos para Transporte - Cristiam em 20/04/2011
Private cNomArq := "", cCmpArq := "", oSayTrN							// Variáveis do arquivo digitalizado para rota de Transportes - Cristiam em 20/04/2011
Private aResDel:={}

Private oDlgLoc,oFolderLoc,nFolderLoc,oLoc_Cols:={},oLoc_Cols0:={}
Private oDlgEta,oFolderEta,nFolderEta,oEta_Cols:={},oEta_Cols0:={}

Private oOrigemE,cOrigemE:=Space(06)
Private oDestinE,cDestinE:=Space(06)
Private oMunOriE,cMunOriE:=Space(25)
Private oMunDesE,cMunDesE:=Space(25)
Private oEstOriE,cEstOriE:=Space(02)
Private oEstDesE,cEstDesE:=Space(02)
Private oRotaE,cRotaE:=Space(03)

Private oProjet,cProjet
Private oObra,cObra,xObra
Private cTabVen ,cVerTab
Private cTabCom ,cVerTabC
Private oOrigem,cOrigem
Private oDestin,cDestin
Private oMunOri,cMunOri
Private oMunDes,cMunDes
Private oEstOri,cEstOri
Private oEstDes,cEstDes
Private oRota,cRota
Private oSeqGui,cSeqGui
Private oSeqTra,cSeqTra
Private oSeqGru,cSeqGru
Private oSeqCar,cSeqCar

Private cDirProj  := "\System\Projetos\" + Alltrim( ZA0->ZA0_PROJET)

MakeDir("\System\Projetos")
MakeDir(cDirProj)

Private oStatus,cStatus:=ZA0->ZA0_STATUS
Private oCodConco,cCodConco:=ZA0->ZA0_CODCON
Private oNomConco,cNomConco:=Posicione('ZAH',1,xFilial('ZAH')+cCodConco,'ZAH_NOME')
Private oValConco,nValConco:=ZA0->ZA0_VALCON
Private oValConcoL,nValConcoL:=ZA0->ZA0_VALLOC

Private oDataVal,dDataVal:=dDataBase//ZA0->ZA0_DATINC

Private oDataRet,dDataRet:=ZA0->ZA0_DTRETO
Private oFollow ,cFollow :=""
Private oFollow0,cFollow0:=""

Private oComp,nComp
Private oLarg,nLarg
Private oAltu,nAltu
Private oPeso,nPeso

Private oCompConT,nCompConT
Private oLargConT,nLargConT
Private oAltuConT,nAltuConT
Private oPesoConT,nPesoConT
Private oEixoConT,nEixoConT

Private oCompConC,nCompConC
Private oLargConC,nLargConC
Private oAltuConC,nAltuConC
Private oPesoConC,nPesoConC
Private oEixoConC,nEixoConC

Private oCompConG,nCompConG
Private oLargConG,nLargConG
Private oAltuConG,nAltuConG
Private oPesoConG,nPesoConG
Private oEixoConG,nEixoConG

Private oCompCarT,nCompCarT
Private oLargCarT,nLargCarT
Private oAltuCarT,nAltuCarT
Private oPesoCarT,nPesoCarT
Private oEixoCarT,nEixoCarT

Private oCompCarC,nCompCarC
Private oLargCarC,nLargCarC
Private oAltuCarC,nAltuCarC
Private oPesoCarC,nPesoCarC
Private oEixoCarC,nEixoCarC

Private oCompCarG,nCompCarG
Private oLargCarG,nLargCarG
Private oAltuCarG,nAltuCarG
Private oPesoCarG,nPesoCarG
Private oEixoCarG,nEixoCarG

Private oKmV,nKmV,nKmV1,nKmV2
Private oKmC,nKmC,nKmC1,nKmC2
Private oKmT,nKmT,nKmT1,nKmT2

Private nKmVE ,nKmVF ,nKmVSP ,nKmVT
Private nKmVE1,nKmVF1,nKmVSP1,nKmVT1
Private nKmVE2,nKmVF2,nKmVSP2,nKmVT2

Private nKmCE ,nKmCF ,nKmCSP ,nKmCT
Private nKmCE1,nKmCF1,nKmCSP1,nKmCT1
Private nKmCE2,nKmCF2,nKmCSP2,nKmCT2

Private nValPedVE ,nValPedVF ,nValPedVSP ,nValPedVT
Private nValPedVE1,nValPedVF1,nValPedVSP1,nValPedVT1
Private nValPedVE2,nValPedVF2,nValPedVSP2,nValPedVT2

Private nValPedCE ,nValPedCF ,nValPedCSP ,nValPedCT
Private nValPedCE1,nValPedCF1,nValPedCSP1,nValPedCT1
Private nValPedCE2,nValPedCF2,nValPedCSP2,nValPedCT2

Private nValIss

Private oValLsrM,nValLsrM,oVl2LsrM,nVl2LsrM
Private oValPreM,nValPreM,oVl2PreM,nVl2PreM
Private oValPrfM,nValPrfM,oVl2PrfM,nVl2PrfM
Private oValTapM,nValTapM,oVl2TapM,nVl2TapM
Private oValTuvM,nValTuvM,oVl2TuvM,nVl2TuvM
Private oValTurM,nValTurM,oVl2TurM,nVl2TurM
Private oValEscM,nValEscM,oVl2EscM,nVl2EscM
Private oValPedM,nValPedM,oVl2PedM,nVl2PedM
Private oValInvM,nValInvM,oVl2InvM,nVl2InvM
Private oValAleM,nValAleM,oVl2AleM,nVl2AleM
Private oValIptM,nValIptM,oVl2IptM,nVl2IptM
Private oValAcoM,nValAcoM,oVl2AcoM,nVl2AcoM
Private oValCetM,nValCetM,oVl2CetM,nVl2CetM
Private oValSemM,nValSemM,oVl2SemM,nVl2SemM
Private oValTvaM,nValTvaM,oVl2TvaM,nVl2TvaM
Private oValTelM,nValTelM,oVl2TelM,nVl2TelM
Private oValOutM,nValOutM,oVl2OutM,nVl2OutM
Private oValConM,nValConM,oVl2ConM,nVl2ConM
Private oValAdiM,nValAdiM,oVl2AdiM,nVl2AdiM
Private oValAuxM,nValAuxM,oVl2AuxM,nVl2AuxM
Private oValCusM,nValCusM,oVl2CusM,nVl2CusM

Private oValLsrD,nValLsrD,oVl2LsrD,nVl2LsrD
Private oValPreD,nValPreD,oVl2PreD,nVl2PreD
Private oValPrfD,nValPrfD,oVl2PrfD,nVl2PrfD
Private oValTapD,nValTapD,oVl2TapD,nVl2TapD
Private oValTuvD,nValTuvD,oVl2TuvD,nVl2TuvD
Private oValTurD,nValTurD,oVl2TurD,nVl2TurD
Private oValEscD,nValEscD,oVl2EscD,nVl2EscD
Private oValPedD,nValPedD,oVl2PedD,nVl2PedD
Private oValInvD,nValInvD,oVl2InvD,nVl2InvD
Private oValAleD,nValAleD,oVl2AleD,nVl2AleD
Private oValIptD,nValIptD,oVl2IptD,nVl2IptD
Private oValAcoD,nValAcoD,oVl2AcoD,nVl2AcoD
Private oValCetD,nValCetD,oVl2CetD,nVl2CetD
Private oValSemD,nValSemD,oVl2SemD,nVl2SemD
Private oValTvaD,nValTvaD,oVl2TvaD,nVl2TvaD
Private oValTelD,nValTelD,oVl2TelD,nVl2TelD
Private oValOutD,nValOutD,oVl2OutD,nVl2OutD
Private oValConD,nValConD,oVl2ConD,nVl2ConD
Private oValAdiD,nValAdiD,oVl2AdiD,nVl2AdiD
Private oValAuxD,nValAuxD,oVl2AuxD,nVl2AuxD
Private oValCusD,nValCusD,oVl2CusD,nVl2CusD

Private oValLsr,nValLsr,oVl2Lsr,nVl2Lsr
Private oValPre,nValPre,oVl2Pre,nVl2Pre
Private oValPrf,nValPrf,oVl2Prf,nVl2Prf
Private oValTap,nValTap,oVl2Tap,nVl2Tap
Private oValTuv,nValTuv,oVl2Tuv,nVl2Tuv
Private oValTur,nValTur,oVl2Tur,nVl2Tur
Private oValEsc,nValEsc,oVl2Esc,nVl2Esc
Private oValPed,nValPed,oVl2Ped,nVl2Ped
Private oValInv,nValInv,oVl2Inv,nVl2Inv
Private oValAle,nValAle,oVl2Ale,nVl2Ale
Private oValIpt,nValIpt,oVl2Ipt,nVl2Ipt
Private oValAco,nValAco,oVl2Aco,nVl2Aco
Private oValCet,nValCet,oVl2Cet,nVl2Cet
Private oValSem,nValSem,oVl2Sem,nVl2Sem
Private oValTva,nValTva,oVl2Tva,nVl2Tva
Private oValTel,nValTel,oVl2Tel,nVl2Tel
Private oValOut,nValOut,oVl2Out,nVl2Out
Private oValCon,nValCon,oVl2Con,nVl2Con
Private oValAdi,nValAdi,oVl2Adi,nVl2Adi
Private oValAux,nValAux,oVl2Aux,nVl2Aux
Private oValCus,nValCus,oVl2Cus,nVl2Cus

Private oValVis,nValVis
Private oValTcp,nValTcp

Private oValMob,nValMob
Private oValDes,nValDes
Private oValSeg,nValSeg
Private oValEqu,nValEqu

Private oValGui,nValGui
Private oValCuG,nValCuG

Private oValCuT,nValCuT
Private oTipoCaT,cTipoCaT
Private oValDiasV,nValDiasV,oValKmV,nValKmV
Private oValDiasC,nValDiasC,oValKmC,nValKmC
Private oValBase,nValBase,oValBaseI,nValBaseI
Private oValBaseT,nValBaseT
Private oValFreteS,nValFreteS

Private oVadCuT,nVadCuT
Private oVadDiasV,nVadDiasV
Private oVadDiasC,nVadDiasC
Private oVadBase,nVadBase,oVadBaseI,nVadBaseI
Private oVadBaseT,nVadBaseT
Private oVadFreteS,nVadFreteS

Private oVakCuT,nVakCuT
Private oVakDiasV,nVakDiasV
Private oVakDiasC,nVakDiasC
Private oVakBase,nVakBase,oVakBaseI,nVakBaseI
Private oVakBaseT,nVakBaseT
Private oVakFreteS,nVakFreteS

Private oValFrete,nValFrete
Private oValViagem,nValViagem
Private oValPreT,nValPreT 
Private oValFechT,nValFechT 

Private oValAqu,nValAqu
Private oPerRes,nPerRes
Private oValRes,nValRes
Private oValUti,nValUti
Private oValDis,nValDis
Private oValEfe,nValEfe
Private oValJur,nValJur
Private oPerSeg,nPerSeg

Private oValLic,nValLic
Private oValLav,nValLav
Private oFreLav,nFreLav
Private oValCom,nValCom
Private oQtdCom,nQtdCom
Private oValLub,nValLub
Private oIntLub,nIntLub
Private oValPne,nValPne
Private oPrePne,nPrePne
Private oVidPne,nVidPne
Private oValPec,nValPec

Private oValRemFix,nValRemFix
Private oPerResFix,nPerResFix
Private oValResFix,nValResFix
Private oValCasFix,nValCasFix
Private oValLicFix,nValLicFix
Private oValSegFix,nValSegFix

Private oValComFix,nValComFix
Private oValLubFix,nValLubFix
Private oValPneFix,nValPneFix
Private oValLavFix,nValLavFix

Private oValIssBDI,nValIssBDI
Private oValPisBDI,nValPisBDI
Private oValAdmBDI,nValAdmBDI
Private oValLucBDI,nValLucBDI
Private oValSegBDI,nValSegBDI
Private oValJurBDI,nValJurBDI
Private oValCpmBDI,nValCpmBDI
Private oValCslBDI,nValCslBDI
Private oValIrrBDI,nValIrrBDI
Private oValTotBDI,nValTotBDI

Private oPerIssBDI,nPerIssBDI
Private oPerPisBDI,nPerPisBDI
Private oPerAdmBDI,nPerAdmBDI
Private oPerLucBDI,nPerLucBDI
Private oPerSegBDI,nPerSegBDI
Private oPerJurBDI,nPerJurBDI
Private oPerCpmBDI,nPerCpmBDI
Private oPerCslBDI,nPerCslBDI
Private oPerIrrBDI,nPerIrrBDI
Private oPerTotBDI,nPerTotBDI

Private oValTotT,nValTotT
Private oValTotG,nValTotG
Private oValTotX,nValTotX

Private oPreDiaG ,nPreDiaG
Private oValBasG,nValBasG
Private oValTur1,nValTur1
Private oValTur2,nValTur2
Private oValTur3,nValTur3
Private oValBasGT,nValBasGT
Private oValMobG,nValMobG
Private oValDesG,nValDesG
Private oValTAcG,nValTAcG
Private oValIssG,nValIssG
Private oValSegG,nValSegG
Private oValTotG,nValTotG
Private oValCusTG,nValCusTG
Private oValRenTG,nValRenTG
Private nMinDia,nMinMes

Private oValCusIG,nValCusIG//Custo indireto
Private oValCobr,nValCobr//valor a cobrar

Private oVamMobG,nVamMobG
Private oVamDesG,nVamDesG
Private oVamIssG,nVamIssG
Private oVamSegG,nVamSegG
Private oVamTotG,nVamTotG

Private oPreDiaU ,nPreDiaU
Private oValBasU,nValBasU
Private oValBasUT,nValBasUT
Private oValMobU,nValMobU
Private oValDesU,nValDesU

Private oVlEst  ,nVlEst
Private oMontagU,nMontagU
Private oDesmonU,nDesmonU
Private oTelescU,nTelescU
Private oAncoraU,nAncoraU
Private oGuiMonU,nGuiMonU
Private oGuiDesU,nGuiDesU
Private oOperadU,nOperadU
Private oOperadUT,nOperadUT
Private oAcessoU,nAcessoU

Private oDisIssU,cDisIssU

Private oTipIssU,cTipIssU
Private oPerIssU,nPerIssU
Private oBasIssU,nBasIssU,nBaseU
Private oValIssU,nValIssU
Private oTipSegU,cTipSegU
Private oBasSegU,nBasSegU
Private oPerSegU,nPerSegU
Private oValSegU,nValSegU
Private oValTotU,nValTotU

Private oValIssU1,nValIssU1
Private oValSegU1,nValSegU1

Private o1Desc,c1Desc
Private o1Comp,n1Comp
Private o1Larg,n1Larg
Private o1Altu,n1Altu
Private o1Peso,n1Peso

Private o2Desc,c2Desc
Private o2Comp,n2Comp
Private o2Larg,n2Larg
Private o2Altu,n2Altu
Private o2Peso,n2Peso

Private o3Desc,c3Desc
Private o3Comp,n3Comp
Private o3Larg,n3Larg
Private o3Altu,n3Altu
Private o3Peso,n3Peso

Private oInstru, nInstru	// Valores p/ base de cálculo gravados na tabela ZA9 - Cristiam Rossi em 25/04/11
Private oBalsa , nBalsa
Private oDesDTA, nDesDTA
Private oMonDes, nMonDes
Private oApoGui, nApoGui
Private oCavExt, nCavExt

Private oMobEnc, nMobEnc
Private oDmoEnc, nDmoEnc

Private nFoldCr
               
//Total Projeto
Private oValBasT,nValBasT  
Private oValMobT,nValMobT 
Private	oValDesT,nValDesT 
Private	oValSegT,nValSegT 
Private oTipoIssT,cTipoIssT
Private	oTipoSegT,cTipoSegT
Private	oTipoCaT,cTipoCaT 
Private	oPreDiaT,nPreDiaT 
Private	oVrHorT,nVrHorT  
Private	oMinDiaT,nMinDiaT 
Private	oMinMesT,nMinMesT 
Private	oQtMesT,nQtMesT  
Private	oQtDiaT,nQtDiaT  
Private oValEquT,nValEquT
Private oValBasTT,nValBasTT
Private oValTur1T,nValTur1T
Private	oValTur2T,nValTur2T
Private	oValTur3T,nValTur3T
Private oValTAcT,nValTAcT
Private oValISST,nValISST
Private oValCobrT,nValCobrT
Private oValTotT,nValTotT
Private oValCusT,nValCusT
Private oValRenT,nValRenT
               
//Total Obra
Private oValBasOG,nValBasOG  
Private oValMobO,nValMobO 
Private	oValDesO,nValDesO 
Private	oValSegO,nValSegO 
Private oTipoIssO,cTipoIssO
Private	oTipoSegO,cTipoSegO
Private	oTipoCaO,cTipoCaO 
Private	oPreDiaO,nPreDiaO 
Private	oVrHorO,nVrHorO  
Private	oMinDiaO,nMinDiaO 
Private	oMinMesO,nMinMesO 
Private	oQtMesO,nQtMesO  
Private	oQtDiaO,nQtDiaO  
Private oValEquO,nValEquO
Private oValBasTO,nValBasTO
Private oValTur1O,nValTur1O
Private	oValTur2O,nValTur2O
Private	oValTur3O,nValTur3O
Private oValTAcO,nValTAcO
Private oValISSO,nValISSO
Private oValCobrO,nValCobrO
Private oValTotO,nValTotO
Private oValCusO,nValCusO
Private oValRenO,nValRenO

Private cProjetCopy := ""

fZeraTudo()

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Criacao da Interface                                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
nFolderPro:=0
nFolderObr:=0
nFolderRot:=0
nFolderTre:=0
nFolderGui:=0
nFolderAcG:=0
nFolderAce:=0
nFolderGru:=0
nFolderPla:=0
nFolderMar:=0
nFolderTra:=0
nFolderCar:=0
nFolderCon:=0
nFolderCus:=0
nFolderCuR:=0
nFolderBdi:=0
nFolderCuT:=0
nFolderFol:=0

nFolderRes:=0

nFolderLoc:=0
nFolderEta:=0
nFolderRat:=0

nFolderMao:=0
nFolderLic:=0
nFolderDoc:=0

nFolderCnj:=0	// aba cj. transp. (para acessórios de guindastes) - Cristiam em 18/04/2011
nFolderTrN:=0	// nova aba de trechos para Transportes - Cristiam em 20/04/2011

aPages :={}
aTitles:={}

Do Case
Case ZA0->ZA0_TIPOSE $ "T|O" .and. pOpc <> 0	// Não for follow-up
	AAdd(aTitles,"Dados do &Agendamento"    ) ; nFolderPro:=Len(aTitles)
	AAdd(aTitles,"&Viagens"             ) ; nFolderTra:=Len(aTitles)
	AAdd(aTitles,"&Coletas"              ) ; nFolderCar:=Len(aTitles)
	AAdd(aTitles,"&Conj.Transportador"  ) ; nFolderCon:=Len(aTitles)
	if ZA0->ZA0_TIPOSE == 'T'
		//AAdd(aTitles,"&Trechos"         ) ; nFolderTrN:=Len(aTitles)
		AAdd(aTitles,"&Itinerarios"             ) ; nFolderTre:=Len(aTitles)//Alison 11-07-13 (Iduo)
	else
		AAdd(aTitles,"&Itinerarios_old"         ) ; nFolderTre:=Len(aTitles)
	endif
Case ZA0->ZA0_TIPOSE $ "G|R|I" .and. pOpc <> 0	// Não for follow-up
	AAdd(aTitles,"Dados do &Agendamento"    ) ; nFolderPro:=Len(aTitles)
	AAdd(aTitles,"&Obras"               ) ; nFolderObr:=Len(aTitles)
	AAdd(aTitles,"&Locação"             ) ; nFolderGui:=Len(aTitles)
	if ZA0->ZA0_TIPOSE == "G"
		AAdd(aTitles,"C&onj.Transportador"  ) ; nFolderCnj:=Len(aTitles)		// aba p/ cj. transp. (acessórios dos guindastes) - Cristiam em 18/04/2011
	endif
	AAdd(aTitles,"Ori&gem/Destino"      ) ; nFolderRot:=Len(aTitles)
	AAdd(aTitles,"&Itinerários"             ) ; nFolderTre:=Len(aTitles)
Case ZA0->ZA0_TIPOSE $ "U|P|M" .and. pOpc <> 0	// Não for follow-up
	AAdd(aTitles,"Dados do &Agendamento"    ) ; nFolderPro:=Len(aTitles)
	AAdd(aTitles,"&Obras"               ) ; nFolderObr:=Len(aTitles)
	Do Case
	Case ZA0->ZA0_TIPOSE=="U"
		AAdd(aTitles,"&Locação Gruas"       ) ; nFolderGru:=Len(aTitles)
		AAdd(aTitles,"&Conj.Transportador"  ) ; nFolderCnj:=Len(aTitles)		// aba p/ cj. transp. (acessórios dos guindastes) - Cristiam em 18/04/2011
		AAdd(aTitles,"&Acessórios"          ) ; nFolderAce:=Len(aTitles)
	Case ZA0->ZA0_TIPOSE=="P"
		AAdd(aTitles,"&Locação Plataforma"  ) ; nFolderPla:=Len(aTitles)
	Case ZA0->ZA0_TIPOSE=="M"
		AAdd(aTitles,"&Locação Marítima"	) ; nFolderMar:=Len(aTitles)
		AAdd(aTitles,"&Coletas"              ) ; nFolderCar:=Len(aTitles)
	EndCase
Case ZA0->ZA0_TIPOSE=="L" .and. pOpc <> 0	// Não for follow-up
	AAdd(aTitles,"Dados do &Agendamento"    ) ; nFolderPro:=Len(aTitles)
	AAdd(aTitles,"&Viagens"             ) ; nFolderTra:=Len(aTitles)
	AAdd(aTitles,"&Coletas"              ) ; nFolderCar:=Len(aTitles)
	AAdd(aTitles,"&Conj.Transportador"  ) ; nFolderCon:=Len(aTitles)
	AAdd(aTitles,"&Itinerarios"             ) ; nFolderTre:=Len(aTitles)
	AAdd(aTitles,"&Locação"             ) ; nFolderGui:=Len(aTitles)
Otherwise
	If pOpc <> 0	// Não for follow-up
		AAdd(aTitles,"Dados do &Agendamento"    ) ; nFolderPro:=Len(aTitles)
		AAdd(aTitles,"&Obras"               ) ; nFolderObr:=Len(aTitles)
		AAdd(aTitles,"&Locação"             ) ; nFolderGui:=Len(aTitles)
		AAdd(aTitles,"&Origem/Destino"      ) ; nFolderRot:=Len(aTitles)
		AAdd(aTitles,"&Itinerarios"             ) ; nFolderTre:=Len(aTitles)
		AAdd(aTitles,"&Viagens"             ) ; nFolderTra:=Len(aTitles)
		AAdd(aTitles,"&Coletas"              ) ; nFolderCar:=Len(aTitles)
		AAdd(aTitles,"$Conj.Transportador"  ) ; nFolderCon:=Len(aTitles)
		AAdd(aTitles,"&Itinerarios"             ) ; nFolderTre:=Len(aTitles)
	EndIf
EndCase

If pOpc <> 0	// Não for follow-up
	If ZA0->ZA0_TIPOSE<>"P"
		AAdd(aTitles,"&Responsabilidades"   ) ; nFolderRes:=Len(aTitles)
	EndIf
	AAdd(aTitles,"&Base de Cálculo"     ) ; nFolderCus:=Len(aTitles)
	//AAdd(aTitles,"BD&I x Equipamento"   ) ; nFolderBdi:=Len(aTitles) // Alison 16/07/2013
	AAdd(aTitles,"&Documentos"          ) ; nFolderDoc:=Len(aTitles)
EndIf

AAdd(aTitles,"&Follow-up"           ) ; nFolderFol:=Len(aTitles)

IncProc()

nLin1:=aPosObj[2,1]
nCol1:=aPosObj[2,2]
nLin2:=aPosObj[2,4]-aPosObj[2,2]  //Largura
nCol2:=aPosObj[2,3]-aPosObj[2,1]  //Altura

//       TFolder():New(<nRow>,<nCol>,<cPrompt>,<cDlgNameN>,<oWnd> ,<nOption>,<nClrFore>,<nClrBack>,<.lPixel.>,<.lDesign.>,<nWidth>,<nHeight>,<cMsg>)
oFolder:=TFolder():New(nLin1 ,nCol1 ,aTitles  ,aPages     ,oDlg   ,         ,          ,          ,.T.       ,.F.        ,nLin2   ,nCol2    ,      )

For nPos:=1 to Len(aTitles)
	oFolder:aDialogs[nPos]:oFont:=oDlg:oFont
Next

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Consistencia a cada mudanca de pasta do Objeto Folder                     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
oFolder:bSetOption:={|nIndo|U_ZA0MUDA(nIndo,oFolder:nOption,@oDlg,@oFolder)}

If nOpc==3  //3=Inclui
	cProjet:=ZA0->ZA0_PROJET
	ZA0->(dbSeek(xFILIAL("ZA0")+cProjet))
	If ZA0->(!Eof())
		MsgStop("ATENÇÃO: Problemas no número do Agendamento !!")
		Return(.f.)
	EndIf
Else
	cProjet:=ZA0->ZA0_PROJET
EndIf

cAlias:="ZA0"
aSayZA0:={}
aGetZA0:={}

SX3->(dbSetOrder(1))
SX3->(dbSeek(cAlias))
While SX3->(!Eof() .and. X3_ARQUIVO==cAlias)
	If X3Uso(SX3->X3_USADO) .AND. cNivel >= SX3->X3_NIVEL
		AAdd(aSayZA0,SX3->X3_CAMPO)
		If SX3->(!Upper(AllTrim(X3_CAMPO))$Upper("ZA0_PROJET"))
			AAdd(aGetZA0,SX3->X3_CAMPO)
		EndIf
		If SX3->X3_CONTEXT <> "V"
			M->&(SX3->X3_CAMPO) := (cAlias)->&(SX3->X3_CAMPO)
		Else
			M->&(SX3->X3_CAMPO) := CriaVar(SX3->X3_CAMPO)
		EndIf
	EndIf
	SX3->(dbSkip())
End

//Dados do Projeto
nLin1:=aPosObj[1,1]
nCol1:=aPosObj[1,2]
nLin2:=aPosObj[1,3]
nCol2:=aPosObj[1,4]
@ nLin1,nCol1 to nLin2,nCol2 Of oDlg PIXEL
@ nLin1+06,nCol1+005 Say OemToAnsi("Agendamento:") Size 100,8 Of oDlg PIXEL COLOR CLR_BLUE FONT oFont1
@ nLin1+05,nCol1+095 MsGet oProjet Var cProjet Size 110,8 Of oDlg PIXEL COLOR CLR_BLUE FONT oFont2 When fWhen(.f.) 
@ nLin1+06,nCol1+230 Say OemToAnsi("Obra:") Size 050,8 Of oDlg PIXEL COLOR CLR_BLUE FONT oFont1
@ nLin1+05,nCol1+270 MsGet oObra Var xObra Size 200,8 Of oDlg PIXEL COLOR CLR_BLUE FONT oFont2 When fWhen(.f.) 
        
If nOpc == 4
	If lCopyPrj
		cProjetCopy := SubStr(DTOS(DDATABASE),1,4)+GetSxeNum("ZA0","ZA0_COD")//U_ZA0INICI("ZA0_PROJET")
		EvalTrigger()
		ConfirmSX8()
		CopiaZA0(ZA0->(Recno()))//Copia a ZA0 antes de carregar todos os acols dos folders
	EndIf       
EndIf    

IncProc()

If nFolderPro>0  //Dados do Agendamento
	nLin1:=002
	nCol1:=003
	nLin2:=aPosObj[2,3]-62
	nCol2:=aPosObj[2,4]-07
	fFolderPro(nFolderPro,nLin1,nCol1,nLin2,nCol2)
EndIf    

IncProc()

If nFolderObr>0  //Obras
	nLin1:=002
	nCol1:=003
	nLin2:=aPosObj[2,3]-62
	nCol2:=aPosObj[2,4]-07
	fFolderObr(nFolderObr,nLin1,nCol1,nLin2,nCol2)
EndIf    

IncProc()

If nFolderGui>0  //Guindastes
	nLin1:=002
	nCol1:=003
	nLin2:=aPosObj[2,3]-62
	nCol2:=aPosObj[2,4]-07
	fFolderGui(nFolderGui,nLin1,nCol1,nLin2,nCol2)
EndIf    

IncProc()

If nFolderAcG>0  //Acessórios Guindastes
	nLin1:=002
	nCol1:=003
	nLin2:=aPosObj[2,3]-62
	nCol2:=aPosObj[2,4]-07
	fFolderAcG(nFolderAcG,nLin1,nCol1,nLin2,nCol2)
EndIf    

IncProc()

If nFolderCnj>0  // aba de conjunto de transporte para guindastes - Cristiam em 19/04/2011
	nLin1:=002
	nCol1:=003
	nLin2:=aPosObj[2,3]-62
	nCol2:=aPosObj[2,4]-07
	fFolderCnj(nFolderCnj,nLin1,nCol1,nLin2,nCol2)
EndIf    

IncProc()

If nFolderTrN>0  // nova aba trechos para transportes - Cristiam em 20/04/2011
	nLin1:=002
	nCol1:=003
	nLin2:=aPosObj[2,3]-100
	nCol2:=aPosObj[2,4]-07
	fFolderTrN(nFolderTrN,nLin1,nCol1,nLin2,nCol2)
EndIf    

IncProc()

If nFolderGru>0  //Gruas
	nLin1:=002
	nCol1:=003
	nLin2:=aPosObj[2,3]-62
	nCol2:=aPosObj[2,4]-07
	fFolderGru(nFolderGru,nLin1,nCol1,nLin2,nCol2)
EndIf    

IncProc()

If nFolderPla>0  //Plataformas
	nLin1:=002
	nCol1:=003
	nLin2:=aPosObj[2,3]-62
	nCol2:=aPosObj[2,4]-07
	fFolderPla(nFolderPla,nLin1,nCol1,nLin2,nCol2)
EndIf    

IncProc()

If nFolderMar>0  //Maritima
	nLin1:=002
	nCol1:=003
	nLin2:=aPosObj[2,3]-62
	nCol2:=aPosObj[2,4]-07
	fFolderMar(nFolderMar,nLin1,nCol1,nLin2,nCol2)
EndIf    

IncProc()

If nFolderAce>0  //Acessórios
	nLin1:=002
	nCol1:=003
	nLin2:=aPosObj[2,3]-62
	nCol2:=aPosObj[2,4]-07
	fFolderAce(nFolderAce,nLin1,nCol1,nLin2,nCol2)
EndIf    

IncProc()

If nFolderTra>0  //Transportes
	nLin1:=002
	nCol1:=003
	nLin2:=aPosObj[2,3]-62
	nCol2:=aPosObj[2,4]-07
	fFolderObr(nFolderTra,0,0,0,0)
	fFolderTra(nFolderTra,nLin1,nCol1,nLin2,nCol2)
EndIf    

IncProc()

If nFolderRot>0  //Rotas
	nLin1:=002
	nCol1:=003
	nLin2:=aPosObj[2,3]-62
	nCol2:=aPosObj[2,4]-07
	fFolderRot(nFolderRot,nLin1,nCol1,nLin2,nCol2)
EndIf    
/*
IncProc()

If nFolderTre>0  //Trechos   ( ZAM )
	nLin1:=002
	nCol1:=003
	nLin2:=aPosObj[2,3]-62-20
	nCol2:=aPosObj[2,4]-07
	fFolderTre(nFolderTre,nLin1,nCol1,nLin2,nCol2)
EndIf    
*/
IncProc()

If nFolderCar>0  //Cargas   ( ZA7 )
	nLin1:=002
	nCol1:=003
	nLin2:=aPosObj[2,3]-62-Iif(ZA0->ZA0_TIPOSE == "M",0,100)
	nCol2:=aPosObj[2,4]-07
	fFolderCar(nFolderCar,nLin1,nCol1,nLin2,nCol2)
EndIf    

IncProc()

If nFolderTre>0  //Trechos   ( ZAM )
	nLin1:=002
	nCol1:=003
	nLin2:=aPosObj[2,3]-62-20
	nCol2:=aPosObj[2,4]-07
	fFolderTre(nFolderTre,nLin1,nCol1,nLin2,nCol2)
EndIf    

IncProc()

If nFolderCon>0  //Conj.Transportador   ( ZAE  )
	nLin1:=002
	nCol1:=003
	nLin2:=aPosObj[2,3]-62-100
	nCol2:=aPosObj[2,4]-07
	fFolderCon(nFolderCon,nLin1,nCol1,nLin2,nCol2)
EndIf    

IncProc()

If nFolderRes>0  //Responsabilidades   ( ZAA )
	nLin1:=002
	nCol1:=003
	nLin2:=aPosObj[2,3]-62-20
	nCol2:=aPosObj[2,4]-07
	fFolderRes(nFolderRes,nLin1,nCol1,nLin2,nCol2)
EndIf    

IncProc()

If nFolderFol>0  //Follow-up     ( ZAF )
	nLin1:=002
	nCol1:=003
	nLin2:=aPosObj[2,3]-62
	nCol2:=aPosObj[2,4]-07
	fFolderFol(nFolderFol,nLin1,nCol1,nLin2,nCol2)
EndIf    

IncProc()

If nFolderCus>0  //Custos      ( ZA9 )
	nLin1:=002
	nCol1:=003
	nLin2:=aPosObj[2,3]-62
	nCol2:=aPosObj[2,4]-07  
	nFoldCr:= nFolderCus
	fFolderCus(nFolderCus,nLin1,nCol1,nLin2,nCol2)
EndIf    

IncProc()

If nFolderCuR>0  //Resumo
	nLin1:=002
	nCol1:=003
	nLin2:=aPosObj[2,3]-62
	nCol2:=aPosObj[2,4]-07
	fFolderCuR(nFolderCuR,nLin1,nCol1,nLin2,nCol2)
EndIf    

IncProc()

If nFolderBdi>0  //BDI
	nLin1:=002
	nCol1:=003
	nLin2:=aPosObj[2,3]-62
	nCol2:=aPosObj[2,4]-07
	fFolderBdi(nFolderBdi,nLin1,nCol1,nLin2,nCol2)
EndIf    

IncProc()

If nFolderCuT>0  //Custos Total
	nLin1:=002
	nCol1:=003
	nLin2:=aPosObj[2,3]-62
	nCol2:=aPosObj[2,4]-07
	fFolderCuT(nFolderCuT,nLin1,nCol1,nLin2,nCol2)
EndIf    

IncProc()

If nFolderRat>0  //RAT
	nLin1:=002
	nCol1:=003
	nLin2:=aPosObj[2,3]-62
	nCol2:=aPosObj[2,4]-07
	fFolderRat(nFolderRat,nLin1,nCol1,nLin2,nCol2)
EndIf    

IncProc()

If nFolderMao>0  //Mão-de-obra
	nLin1:=002
	nCol1:=003
	nLin2:=aPosObj[2,3]-62
	nCol2:=aPosObj[2,4]-07
	fFolderMao(nFolderMao,nLin1,nCol1,nLin2,nCol2)
EndIf    

IncProc()

If nFolderLic>0  //Licitação
	nLin1:=002
	nCol1:=003
	nLin2:=aPosObj[2,3]-62
	nCol2:=aPosObj[2,4]-07
	fFolderLic(nFolderLic,nLin1,nCol1,nLin2,nCol2)
EndIf    

IncProc()

If nFolderDoc>0  //Documentos   ( ZAI )
	nLin1:=002
	nCol1:=003
	nLin2:=aPosObj[2,3]-62-20
	nCol2:=aPosObj[2,4]-07
	fFolderDoc(nFolderDoc,nLin1,nCol1,nLin2,nCol2)
EndIf    

IncProc()

If nFolderEta>0  //Etapas
	nLin1:=002//+120
	nCol1:=003
	nLin2:=aPosObj[2,3]-62-20
	nCol2:=aPosObj[2,4]-07
	fFolderEta(nFolderEta,nLin1,nCol1,nLin2,nCol2)
EndIf    

IncProc()            

If ZA0->ZA0_TIPOSE == "G" .And. pOpc <> 0
	TurVal(10,oDlgGui)      
EndIf    

IncProc()

If nOpc == 4
	If lCopyPrj
		cProjet := cProjetCopy   // Seta a variavel cProject como o novo Numero de agendamento
		M->ZA0_PROJET := cProjet
		cStatus := "1"		
		
		If ZA0->ZA0_TIPOSE == "T"
			For nX := 1 To Len(oTra_Cols)
				aColsAux := oTra_Cols[nX]
				For nI := 1 To Len(aColsAux)
					aColsAux[Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_AS"})] := ""
				Next nI				
			Next nX
			
			For nX := 1 To Len(oCar_Cols)
				aColsAux := oCar_Cols[nX]
				For nI := 1 To Len(aColsAux)
					aColsAux[Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_AS"})] := ""
				Next nI				
			Next nX
		ElseIf ZA0->ZA0_TIPOSE == "G"
			For nX := 1 To Len(oGui_Cols)
				aColsAux := oGui_Cols[nX]
				For nI := 1 To Len(aColsAux)
					//aColsAux[nI, GdFieldPos("ZA5_AS")] := ""	
					aColsAux[Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_AS"})]     := ""
					aColsAux[Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VIAGEM"})] := ""
				Next nI				
			Next nX
		EndIf
	EndIf       
EndIf    


//Objeto Iniciado
oBjt:= Bobkj() 

IncProc()
                          
Private oTimer := tTimer():New( SuperGetMV("IT_TAGEND",,10000), {|| fTimer( .T. ) }, oDlg )
if nOpc == 4	// Manutenção
	oTimer:Activate()
endif
Activate MsDialog oDlg CENTERED On Init EnchoiceBar(oDlg,{|| VALID( oDlg, oFolder )}, {|| fSair(oDlg)},,aButtons)

Return 


//------------------------- Temporizador, check tabela temporária ZA7
Static Function fTimer( lQuest )
Local   aArea    := getArea()
Local   cQuery

Local   oDlg
Local   oSay
Local   oFont    := TFont():New("Arial",,18,,.T.,,,,.T.,.F.)
Local   _oTimer
Local   _nTempo  := 3
Local   nOpc     := 1

Private aDadTZ   := {}
Private nPosViag := gdFieldPos( "ZA7_VIAGEM", oDlgCar:aHeader )
Default lQuest   := .F.

	oTimer:DeActivate()

	if nPosViag == 0
		return nil
	endif

	TZ_->( dbSetOrder(3) )	// Projeto + Viagem
	TZ_->( dbSeek( cProjet, .T. ) )
	while ! TZ_->( EOF() ) .and. TZ_->TZ__PROJET == cProjet
		aadd( aDadTZ, TZ_->( RECNO() ) )
		TZ_->( dbSkip() )
	end

	if len( aDadTZ ) > 1

		if lQuest
			Define MsDialog oDlg Title "Atualização pendente..." From 0,0 To 100, 300 Pixel
			_oTimer := tTimer():New( 1000, {|| _nTempo--, iif( _nTempo==0, oDlg:End(), oSay:Refresh() ) }, oDlg )
			_oTimer:Activate()

			oSay := tSay():new(10,40, {|| "Refresh em "+Alltrim(Str(_nTempo))+" seg(s)"}, oDlg,,oFont,,,,.T.,CLR_BLUE,,100,20)

			@ 30,010 Button "Cancelar" Size 35,15 of oDlg Pixel Action (nOpc := 0, oDlg:End() )
			@ 30,110 Button "OK"       Size 35,15 of oDlg Pixel Action (nOpc := 1, oDlg:End() )
			Activate MsDialog oDlg Center

			if nOpc != 1
				oTimer:Activate()
				Return nil
			endif
		endif

		_FoldOld := oFolder:nOption
		_atTRA   := oDlgTra:nAT

		Processa( {|| AtuTZ() },"Aguarde... Obtendo dados de coleta")

		if _atTRA > oDlgTra:nAT
			_atTRA := 1
		endif

		oDlgTra:nAT := _atTRA 
		fObra()

		Processa( {|| AtuTela( _FoldOld ) } )
	endif

	restArea( aArea )
	oTimer:Activate()
Return nil


Static Function AtuTela( _FoldOld )
	oFolder:SetOption( _FoldOld )	// TROCAR A ABA PRA FOÇAR A ATUALIZAÇÃO DOS ARRAYS DO BECHANGE
Return nil


//------------------------- Atualiza Array do BeChange da tabela temporária p/ ZA7
Static Function AtuTZ()
Local _i
Local nAT

	oFolder:SetOption(1)	// TROCAR A ABA PRA FOÇAR A ATUALIZAÇÃO DOS ARRAYS DO BECHANGE

	ProcRegua( len( aDadTZ ) )

	for _i := 1 to len( aDadTZ )
		TZ_->( dbGoto( aDadTZ[_i] ) )
		IncProc( "Atualizando... Viagem: " + TZ_->TZ__VIAGEM )

		nAT := aScan( oCar_Cols, { |item| item[nPosViag] == TZ_->TZ__VIAGEM } )				// Pesquisa a Viagem o Array do BeChange (ZA7)
		if nAT > 0
			gdFieldPut(TZ_->TZ__CAMPO , TZ_->TZ__VALOR , nAT, oDlgCar:aHeader, oCar_Cols)	// atualizo aCols do BeChange (ZA7)
		endif

		RecLock( "TZ_", .F. )	// remover o temporário
		TZ_->( dbDelete() )
		TZ_->( MsUnlock() )
	next
Return nil


/*
+================================+
| Faz a Copia da tabela ZA0 e ZBB|
+================================+
*/
Static Function CopiaZA0(nRecno)
	Local aArea		:= GetArea()
	Local aAreaZA0	:= ZA0->(GetArea())
	Local aAreaZBB	:= ZBB->(GetArea())
	Local aZA0		:= {} 
	Local aZBB		:= {}
	Local cTime		:= Time()
	Local aRecnoZBB := {}
	Local nX		:= 1
	
	cTime := SubStr(cTime,1,2)+SubStr(cTime,4,2)
	
	DbSelectArea("ZA0")
	DbGoTo(nRecno)
	
	For nX := 1 To ZA0->(FCount())		// Armazeno os dados para duplicar o registro
		Aadd(aZA0, ZA0->(FieldGet(nX)))
	Next nX        

	ZA0->(RecLock("ZA0", .T.))
	For nX := 1 To ZA0->(FCount())
		ZA0->(FieldPut(nX, aZA0[nX]))
	Next nX
	ZA0->ZA0_PROJET := cProjetCopy 
	ZA0->ZA0_STATUS := "1"
	ZA0->ZA0_DATINC := DDATABASE
	ZA0->ZA0_HORINC := cTime
	ZA0->(MsUnlock())

	DbSelectArea("ZBB")
	DbSetOrder(2)
	DbSeek(xFilial("ZBB")+cProjet)
	While ZBB->(!Eof()) .And. ZBB->ZBB_PROJET == cProjet
		aZBB := {}
		For nX := 1 To ZBB->(FCount())		// Armazeno os dados para duplicar o registro
			Aadd(aZBB, ZBB->(FieldGet(nX)))
		Next nX 

		aAreaZBB := ZBB->(GetArea())
		ZBB->(RecLock("ZBB", .T.))
		For nX := 1 To ZBB->(FCount())
			ZBB->(FieldPut(nX, aZBB[nX]))
		Next nX
		ZBB->ZBB_PROJET := cProjetCopy 
		ZBB->(MsUnlock())
		RestArea(aAreaZBB)

		ZBB->(DbSkip())
	EndDo  

    RestArea(aAreaZA0)
    RestArea(aAreaZBB)
    RestArea(aArea)
Return


//-------------------------- Valida Itinerario x Obra
Static Function ValITxObr( lQuiet )
Local   nX, nW, lFound
Local   cObra
Local   cSeqCar

Local   nPosObra := 0
Local   nPosDe   := 0 // Frank Z Fuga - 26/04/2016
Local cTabVen 	:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TABVEN"})]
Local cVerTab 	:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VERVEN"})]
Local cCodCli	:= AllTrim(M->ZA0_CLI)
Local cLojCli	:= AllTrim(M->ZA0_LOJA)
Local cTpTrans	:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TPTRAN"})]
Local cITTabv	:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABV"})]
Local cTpFluxo	:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TIPFLU"})]	
Local _lJunto


Default lQuiet   := .F.   

ZT0->( dbSetOrder(1) )	//  ZT0_FILIAL+ZT0_CODTAB+ZT0_VERTAB+ZT0_CODCLI+ZT0_LOJCLI+ZT0_TIPTAB+ZT0_ITEMTB
ZT0->( dbSeek( xFilial("ZT0") + cTabVen + cVerTab + cCodCLi + cLojCli + cTpTrans + cITTabV , .T. ) )

//If ZT0->(!Eof()) .and. (ZT0->ZT0_TIPREG == "5" .or. ZT0->ZT0_TIPREG == "4")
//	Return .T.
//EndIF
                   

	If ValType(oDlgTra) == "O" .and. ValType(oDlgTre) == "O"
		nPosObra := Ascan( oDlgTre:aHeader, {|x| AllTrim( x[2] ) == "ZAM_OBRA"} )
		nPosDe	 := Ascan( oDlgTre:aHeader, {|x| AllTrim( x[2] ) == "ZAM_DE"} ) // Frank Zwarg Fuga 26/04/2016
		nPosSeq	 := Ascan( oDlgTre:aHeader, {|x| AllTrim( x[2] ) == "ZAM_SEQCAR"} ) // Frank Zwarg Fuga 26/04/2016
		//nPosTra	 := Ascan( oDlgTre:aHeader, {|x| AllTrim( x[2] ) == "ZAM_SEQTRA"} ) // Frank Zwarg Fuga 26/04/2016
		

		if nPosObra == 0 .or. nPosDe == 0 .or. nPosSeq == 0
			Alert("Nao encontrado aHeader ZAM no objeto oDlgTre")
			Return .F.
		endif             
		
		/*
		// PASSO 1 - VALIDAR OS ELEMENTOS DOS ACOLS
		lFound := .F.
		For nX:=1 to Len(oDlgTra:aCols) // ZA6 oTra_Cols               
			If !oDlgTra:aCols[nX,Len(oDlgTra:aHeader)+1]
				cObra := oDlgTra:Acols[nX][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_OBRA"})]
				For nY:=1 to Len(oDlgCar:aCols) // ZA7 oCar_Cols
					If !oDlgCar:aCols[nY,Len(oDlgCar:aHeader)+1]
						If empty(oDlgCar:aCols[nY][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_JUNTO"})])
							cSeqCar:=oDlgCar:aCols[nY][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SEQCAR"})]
							lFound := .F.
						
							For nZ:=1 to Len(oTre_Cols) // ZAM (acumulado)
								If !oTre_Cols[nZ][len(oDlgTre:aHeader)+1]
									If Alltrim( oTre_Cols[nZ][nPosObra] ) == cObra .and. Alltrim( oTre_Cols[nZ][nPosSeq] ) == cSeqCar .and. !empty( oTre_Cols[nZ][nPosDe] )  // Frank Zwarg Fuga 26/04/2016
										lFound := .T.
										exit
									endif
								EndIF
							Next
							if ! lFound
								if ! lQuiet
									MsgStop("A Obra: "+ cObra +" Seq.Carga: "+cSeqCar+" nao possui Itinerario","Consistencia")
								endif
								Return .F.
							endif
						EndIF
					EndIf
				Next     
			EndIf
		Next
        */

		// PASSO 2 - VALIDAR OS ELEMENTOS DO BECHANGE
		lFound := .F.
		For nX:=1 to Len(oTra_Cols) // ZA6 oTra_Cols               
			If !oTra_Cols[nX,Len(oDlgTra:aHeader)+1]
				If dtos(oTra_Cols[nX][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_DTINI"})]) >= dtos(_dviag1) .and. dtos(oTra_Cols[nX][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_DTFIM"})]) <= dtos(_dviag2)
					_lJunto := .F.
					_lPassou := .F.
					For nY:=1 to Len(oCar_Cols) // ZA7 oCar_Cols
						If !oCar_Cols[nY,Len(oDlgCar:aHeader)+1]
							_lPassou := .T.
							_lJunto := .F.
							If oTra_Cols[nX][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_OBRA"})]	== oCar_Cols[nY][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_OBRA"})]					
								If oTra_Cols[nX][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_SEQTRA"})] == oCar_Cols[nY][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SEQTRA"})]							
									If empty(oCar_Cols[nY][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_JUNTO"})])
									    _lJunto := .T.
										cObra   := oTra_Cols[nX][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_OBRA"})]  
										cSeqCar := oCar_Cols[nY][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SEQCAR"})]
										
					    				lFound := .F.
										For nZ:=1 to Len(oTre_Cols) // ZAM (acumulado)
											If !oTre_Cols[nZ][len(oDlgTre:aHeader)+1]
												If Alltrim( oTre_Cols[nZ][nPosObra] ) == cObra .and. Alltrim( oTre_Cols[nZ][nPosSeq] ) == cSeqCar .and. !empty( oTre_Cols[nZ][nPosDe] )  // Frank Zwarg Fuga 26/04/2016
													lFound := .T.
													exit
												endif
											EndIF
										Next
										
										if ! lFound
											if ! lQuiet
												MsgStop("A Obra: "+ cObra +" Seq.Carga: "+cSeqCar+" nao possui Itinerario","Consistencia")
											endif                            
											
											If AllTrim(SuperGetMV("IT_BLQITI",,"S")) == "S"	
												Return .F.
											EndIf       

											
										endif
									
									
									EndIF
							    EndIF
							EndIF

						EndIF
					Next  
					//If !_lJunto .and. _lPassou
					//	MsgStop("Falha no preenchimento do campo Junto na coleta.","Atenção!")
					//	Return .F.
					//EndIF
					
				EndIF
			EndIf
		Next

	endif

Return .T.


********************************************************************************
STATIC FUNCTION fSalvar900( oFolder, oDlg )
********************************************************************************
Local nPos

If ! fWhen()
	Return nil
EndIf

If MsgYesNo("Confirma a atualização do Agendamento?")
	fTimer()	// Chama o Timer p/ verificar se existe atualização pendente
	oTimer:DeActivate()

	U_ZA0MUDA( oFolder:nOption, oFolder:nOption, oDlg, oFolder)		// SIMULAÇÃO DA MUDANÇA DE ABA
	
	If !VALCEPX()
		If AllTrim(SuperGetMV("IT_BLQCEP",,"S")) == "S"	
			Return .F.
		EndIf
	EndIf

	If !U_ACHAKM()      
		If AllTrim(SuperGetMV("IT_BLQCEP",,"S")) == "S"	
			Return .F.
		EndIf       
	EndIF
	
	U_FIATFTL()

	if ! ValITxObr()	// Exigencia Obra (Viagem) x Itinerario
		Return .F.
	Endif                 
	
	// Atualizacao forcada antes do calculo TRATKM    
	Processa({||fSalvarTra("ZA6",Aclone(oDlgTra:aHeader),Aclone(oDlgTra:aCols))},"Aguarde a gravação das informações.")
	Processa({||fSalvarCar("ZA7",Aclone(oDlgCar:aHeader),Aclone(oDlgCar:aCols))},"Aguarde a gravação das informações.")	
	
	
	Processa( {|| U_TratKM( cProjet, isInCallStack("FSALVAR900") ) },"Aguarde... Calculando KMs")

	if u_CalcZA7V() == .f.
		Return .F.
	Endif	

	If u_CalcZA7C() == .f.
		Return .F.
	Endif
	
	// Frank Zwarg Fuga - Calculo do KM da ZA7 - 10/02/2016
	U_ACHAKM()
	
	U_FIATFTL()

	if ! fSalvar000()
		Return .F.
	endif

	If ValType(oDlgGui)=="O"
		fTrazGui()
		U_MudaGuiB()
		oDlgGui:oBrowse:Refresh()
	EndIf
	If ValType(oDlgAcG)=="O"
		fTrazAcG()
		U_MudaAcGB()
		oDlgAcG:oBrowse:Refresh()
	EndIf
	If ValType(oDlgTra)=="O"
		fTrazTra()
		U_MudaTraB()
		oDlgTra:oBrowse:Refresh()
	EndIf
	If ValType(oDlgAce)=="O"
		fTrazAce()
		U_MudaAceB()
		oDlgAce:oBrowse:Refresh()
	EndIf
	If ValType(oDlgRot)=="O"
		fTrazRot()
		U_MudaRotB()
		oDlgRot:oBrowse:Refresh()
	EndIf
	If ValType(oDlgTre)=="O"
		fTrazTre()
		U_MudaTreB()
		oDlgTre:oBrowse:Refresh()
	EndIf
	If ValType(oDlgGru)=="O"
		fTrazGru()
		U_MudaGruB()
		oDlgGru:oBrowse:Refresh()
	EndIf
	If ValType(oDlgPla)=="O"
		fTrazPla()
		U_MudaPlaB()
		oDlgPla:oBrowse:Refresh()
	EndIf
	If ValType(oDlgCar)=="O"
		fTrazCar()
		U_MudaCarB()
		oDlgCar:oBrowse:Refresh()
	EndIf
	If ValType(oDlgCon)=="O"
		fTrazCon()
		U_MudaConB()
		oDlgCon:oBrowse:Refresh()
	EndIf
	If ValType(oDlgRes)=="O"
		fTrazRes()
		U_MudaResB()
		oDlgRes:oBrowse:Refresh()
	EndIf
	If .f.//ValType(oDlgCus)=="O"
		fTrazCus()
		U_MudaCusB()
		fTrazMem(.t.)  //.t.=Atualiza variáveis/.f.=Atualiza oDlgCus:aCols
		fCalcCus()
		oDlgCus:oBrowse:Refresh()
	EndIf
	If ValType(oDlgDoc)=="O"
		fTrazDoc()
		U_MudaDocB()
		oDlgDoc:oBrowse:Refresh()
	EndIf
	If ValType(oDlgEta)=="O"
		fTrazEta()
		U_MudaEtaB()
		oDlgEta:oBrowse:Refresh()
	EndIf
	
	If ValType(oDlgCnj)=="O"		// atualizar dados BeChange - Cristiam Rossi em 30/08/2011
		oCnjaCols:SetData(oDlgCnj:aCols)
	EndIf

	// Deleta todos os registros relacionados a delecao de um za6 - Frank Zwarg Fuga - 20/07/16
	DeleteViagem()

EndIf

Return .T.

********************************************************************************
Static Function fSalvar(oDlg)
********************************************************************************
Local nPos

	If ! fWhen()
		oDlg:end()
		Return .T.
	EndIf

	U_ZA0MUDA( oFolder:nOption, oFolder:nOption, oDlg, oFolder)

	If !VALCEPX()
		If AllTrim(SuperGetMV("IT_BLQCEP",,"S")) == "S"	
			Return .F.
		EndIf
	EndIf

	If !U_ACHAKM()
		If AllTrim(GetMV("IT_BLQCEP")) == "S"	
			Return .F.
		EndIf       
	EndIF

	if fSalvar000()
		oDlg:end()
	EndIf

Return .T.


********************************************************************************
Static Function fSair(oDlg)
If .t.//MsgYesNo("SAIR SEM GRAVAR. Confirma ??")
	oDlg:end()
ENDIF
Return

//-----------------------------------------------------------------------------
// Salvar - Início
//-----------------------------------------------------------------------------
********************************************************************************
Static Function fSalvar000()
Local lRet := .T.

	If ! fWhen()
		Return .T.
	EndIf

Begin Transaction         
    
    If !VALCEPX()
		If AllTrim(SuperGetMV("IT_BLQCEP",,"S")) == "S"	
			Return .F.
		EndIf
	EndIf
    
    
	// Frank Zwarg Fuga - Calculo do KM da ZA7 - 10/02/2016
	If !U_ACHAKM()     
		If AllTrim(GetMV("IT_BLQCEP")) == "S"	
			DisarmTransaction()
			Return .F.
		EndIf       
	EndIF

	U_FIATFTL()

	Processa( {|| reCalcVi() } ,"Aguarde... Calculando Viagens")			// Cristiam Rossi em 28/01/2016

    // teste 
	// Atualizacao forcada antes do calculo TRATKM
	
	U_ACHAKM()
	U_FIATFTL()
	
	
	Processa({||fSalvarTra("ZA6",Aclone(oDlgTra:aHeader),Aclone(oDlgTra:aCols))},"Aguarde a gravação das informações.")
	Processa({||fSalvarCar("ZA7",Aclone(oDlgCar:aHeader),Aclone(oDlgCar:aCols))},"Aguarde a gravação das informações.")	
	
	
	Processa( {|| U_TratKM( cProjet, isInCallStack("FSALVAR900") ) },"Aguarde... Calculando KMs")

	U_ACHAKM() 
	U_FIATFTL()

	Processa( {|| lRet := fSalvar001()},"Aguarde... Atualizando as tabelas")
    

End Transaction

Return lRet

********************************************************************************
Static Function fSalvar001()
********************************************************************************
Local nPos,cDir
//Data			: 26-03-2012
//Analista		: Maickon Queiroz 
//Ajuste		: Retirado "Local aVer:= Aclone(oCnjaCols:GetData())" pois o sistema apresentava erro.log.
// 				  Identificado no fonte que a Variavel aVer não se referenciava a nada no fonte.
//Solicitação	: Caue Buontempi Poltronieri (Referente ao Chamado aberto pelo CEC)

//Local aVer:= Aclone(oCnjaCols:GetData())


ProcRegua(Len(oFolder:aDialogs))
	if u_CalcZA7V() == .f.
		Return .F.
	Endif	
	If u_CalcZA7C() == .f.
		Return .F.
	Endif


If ZA0->ZA0_TIPOSE$"TLO"
	If ValType(oDlgTra)=="O"  //Se o objeto já foi criado
		If ValType(oDlgObr)=="O"  //Se o objeto já foi criado
			aCols0:={}
			For nPos:=1 to Len(oDlgTra:aCols)
				If !Empty(cSeqTra)
					cSeqTra :=oDlgTra:aCols[nPos][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_SEQTRA"})]
					cMunOriT:=oDlgTra:aCols[nPos][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_MUNORI"})]
					cEstOriT:=oDlgTra:aCols[nPos][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ESTORI"})]
				EndIf
				AAdd(aCols0,Aclone(oDlgObr:aCols[1]))
				aCols0[Len(aCols0)][Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_OBRA"  })]:=cSeqTra
				aCols0[Len(aCols0)][Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_NOMORI"})]:="Obra: "+AllTrim(cMunOriT)+" UF:"+AllTrim(cEstOriT)
			Next
			oDlgObr:aCols:=Aclone(aCols0)
			oDlgObr:oBrowse:Refresh()
		EndIf
	EndIf
EndIf

If ValType(oGetVT) == "O"
	IncProc("Atualizando... Turnos")
	if u_CalcZA7V() == .f.
		Return .F.
	Endif	
	If u_CalcZA7C() == .f.
		Return .F.
	Endif

	fSalvarTur("ZBB",Aclone(oGetVT:aHeader),Aclone(oGetVT:aCols))
EndIf
If nFolderPro>0
	IncProc("Atualizando... Agendamento")
	fSalvarPro("ZA0")  //Projetos
EndIf
If nFolderObr>0
	IncProc("Atualizando... Obras")
	fSalvarObr("ZA1",Aclone(oDlgObr:aHeader),Aclone(oDlgObr:aCols))
EndIf
If nFolderRot>0
	IncProc("Atualizando... Itinerarios")
	fSalvarRot("ZA4",Aclone(oDlgRot:aHeader),Aclone(oDlgRot:aCols))
EndIf
If nFolderTre>0
	IncProc("Atualizando... Itinerarios")
	fSalvarTre("ZAM",Aclone(oDlgTre:aHeader),Aclone(oDlgTre:aCols))
EndIf
If nFolderGui>0
	IncProc("Atualizando... Guindastes")
	fSalvarGui("ZA5",Aclone(oDlgGui:aHeader),Aclone(oDlgGui:aCols))
EndIf

If nFolderTrN>0
	IncProc("Atualizando... Itinerarios, Tarifas e Docto. Digitalizado")
	fSalvarTrN("ZLX",Aclone(oDlgTrN:aHeader),Aclone(oDlgTrN:aCols))
EndIf

If nFolderAcG>0
	IncProc("Atualizando... Configurações Guindastes")
	fSalvarAcG("ZAQ",Aclone(oDlgAcG:aHeader),Aclone(oDlgAcG:aCols))
EndIf
If nFolderGru>0
	IncProc("Atualizando... Gruas")
	fSalvarGru("ZAG",Aclone(oDlgGru:aHeader),Aclone(oDlgGru:aCols))
EndIf
If nFolderPla>0
	IncProc("Atualizando... Plataformas")
	fSalvarPla("ZAG",Aclone(oDlgPla:aHeader),Aclone(oDlgPla:aCols))
EndIf
If nFolderMar>0
	IncProc("Atualizando... Marítima")
	fSalvarMar("ZAG",Aclone(oDlgMar:aHeader),Aclone(oDlgMar:aCols))
EndIf
If nFolderAce>0
	IncProc("Atualizando... Acessórios")
	fSalvarAce("ZAK",Aclone(oDlgAce:aHeader),Aclone(oDlgAce:aCols))
EndIf
If nFolderTra>0
	IncProc("Atualizando... Obras")
	fSalvarObr("ZA1",Aclone(oDlgObr:aHeader),Aclone(oDlgObr:aCols))
	IncProc("Atualizando... Transportes")
	U_ACHAKM()
	U_FIATFTL()
	Processa({||fSalvarTra("ZA6",Aclone(oDlgTra:aHeader),Aclone(oDlgTra:aCols))  },"Aguarde a gravação das informações.") 
	
EndIf
If nFolderCar>0
	IncProc("Atualizando... Coletas")
	Processa({||fSalvarCar("ZA7",Aclone(oDlgCar:aHeader),Aclone(oDlgCar:aCols))},"Aguarde a gravação das informações.")	
EndIf
If nFolderCon>0
	IncProc("Atualizando... Conj.Transportador")
	fSalvarCon("ZAE",Aclone(oDlgCon:aHeader),Aclone(oDlgCon:aCols))
EndIf
If nFolderCus>0
	IncProc("Atualizando... Custos")
	fSalvarCus("ZA9",Aclone(oDlgCus:aHeader),Aclone(oDlgCus:aCols))
EndIf
If nFolderLoc>0
	IncProc("Atualizando... Locais")
	fSalvarLoc("ZA2",Aclone(oDlgLoc:aHeader),Aclone(oDlgLoc:aCols))
EndIf
If nFolderEta>0
	IncProc("Atualizando... Itinerarios")
//	fSalvarEta("ZA3",Aclone(oDlgEta:aHeader),Aclone(oDlgEta:aCols))
EndIf
If nFolderRat>0
	IncProc("Atualizando... RAT")
	fSalvarRat("ZA8",Aclone(oDlgRat:aHeader),Aclone(oDlgRat:aCols))
EndIf
If nFolderFol>0
	IncProc("Atualizando... Follow-up")
	fSalvarFol("ZAF")  //Follow-up
EndIf
If nFolderDoc>0
	IncProc("Atualizando... Documentos")
	fSalvarDoc("ZAI",Aclone(oDlgDoc:aHeader),Aclone(oDlgDoc:aCols))
EndIf

If nFolderCnj>0
	IncProc("Atualizando... Conjunto Transporte p/ Guindastes")
//	fSalvarCnj("ZLW",Aclone(oDlgCnj:aHeader),Aclone(oDlgCnj:aCols))
	if !oCnjaCols:SetData(oDlgCnj:aCols)    //Aparentemente está retornando false para o OK, após clicar
		oCnjaCols:GetData()    
		oCnjaCols:SetData(oDlgCnj:aCols)
	EndIf

	fSalvarCnj("ZLW",Aclone(oDlgCnj:aHeader),Aclone(oCnjaCols:GetData()))		// Salvar BeChange Conjunto Transportador - Cristiam Rossi em 29/08/2011
//	fSalvarDoc("ZLW",Aclone(oDlgCnj:aHeader),Aclone(oDlgCnj:aCols))
EndIf
If nFolderRes>0
	IncProc("Atualizando... Responsabilidades")
	fSalvarRes("ZAA",Aclone(oDlgRes:aHeader),Aclone(oDlgRes:aCols))
EndIf      
              
//Alison 20/03/14
DeleteViagem()   //Verifica se alguma viagem foi deletada, e deleta os registros das outras abas relacionadas a viagem deletada.

Return .T.

********************************************************************************
Static Function fSalvarPro(cAlias)  
// Projetos
********************************************************************************
Local nPos,aGravados:={}  	// Gravados
Local cNumZA0 := Space(22)

dbSelectArea(cAlias)
dbSetOrder(1)  				// ZA0_FILIAL+ZA0_PROJET+ZA0_NUM

dbSeek(xFILIAL(cAlias)+cProjet)

If nOpc==5  //5=Exclui
	(cAlias)->(RECLOCK(cAlias,.F.))
	(cAlias)->(dbDelete())
	(cAlias)->(MsUnLock())
	Return
EndIf

If nOpc==3  //3=Inclui
	(cAlias)->(RECLOCK(cAlias,.T.))
Else
	(cAlias)->(RECLOCK(cAlias,.F.))
EndIf

(cAlias)->ZA0_FILIAL:=xFILIAL(cAlias)
(cAlias)->ZA0_PROJET:=cProjet  //Nro.Projeto
(cAlias)->ZA0_COD   :=Subs(cProjet,7,5)
(cAlias)->ZA0_STATUS:=cStatus  //Status
(cAlias)->ZA0_CODCON:=cCodConco  //Cod.Concorr.
(cAlias)->ZA0_VALCON:=nValConco  //Vr.Concorr.
(cAlias)->ZA0_VALLOC:=nValConcoL  //Vr.Concorr.Locação
For _f := 1 to Len(aCampoZA0)
	cVarAnt := cAlias + "->"	+ aCampoZA0[_f]
	cVarPos := "M->"			+ aCampoZA0[_f]
	&(cVarAnt) := &(cVarPos)
Next _f

(cAlias)->(MSUNLOCK())
If cStatus == "C" .or. cStatus == "B" .or. cStatus == "8" .or. cStatus == "5" .or. cStatus == "" 
    U_bloqClass(ZA0->ZA0_PROJET)  // Daniel em 20/08/08 -> bloqueio da classe de valor do projeto  
Endif 

aCampos := {}
nValTot := 0
aInfos  := TamSX3("ZA0_PROJET")
AADD(aCampos,{ "PROJETO" ,aInfos[3],aInfos[1],aInfos[2] } )
AADD(aCampos,{ "COLUNA1"    ,"C",59,0 } ) // Obra
AADD(aCampos,{ "COLUNA2"    ,"C",57,0 } ) // Equipamentos
AADD(aCampos,{ "COLUNA3"    ,"C",30,0 } ) // Periodo
AADD(aCampos,{ "COLUNA4"    ,"C",18,0 } ) // Vr.Base
AADD(aCampos,{ "COLUNA5"    ,"C",18,0 } ) // Vr.Mob./ Desmob.
AADD(aCampos,{ "COLUNA6"    ,"C",18,0 } ) // Vr.Total
		
cNomArq := CriaTrab(aCampos)
If (Select("TMP") <> 0)
	dbSelectArea("TMP")
	dbCloseArea()
Endif
dbUseArea(.T.,,cNomArq,"TMP",nil,.F.)
	
U_fCalcT((cAlias)->ZA0_PROJET,(cAlias)->ZA0_TIPOSE)
		
TMP->(DBGOTOP())
WHILE TMP->(!EOF())
	nValTot := nValTot+VAL(STRTRAN(STRTRAN(Alltrim(TMP->COLUNA6),".",""),",","."))
	TMP->(DBSKIP())
ENDDO
//Integração Protheus x Dynamics para informar alterações nos status da proposta ao CRM
//u_IntPropCRM((cAlias)->ZA0_ORCAM, (cAlias)->ZA0_STATUS,(cAlias)->ZA0_CLI,(cAlias)->ZA0_LOJA,(cAlias)->ZA0_PROJET,nValTot)
			
Return

********************************************************************************
Static Function fObra()
********************************************************************************
Local lRet

cObra  :=Space(03)
cOrigem:=Space(06)
cDestin:=Space(06)
cMunOri:=Space(25)
cMunDes:=Space(25)

cSeqTra:=Space(03)
cSeqGui:=Space(03)
cSeqGru:=Space(03)
cSeqCar:=Space(03)

xObra  :=Space(03)

Do Case
Case ZA0->ZA0_TIPOSE$"TLO" .and. ValType(oDlgTra)=="O"  //Se o objeto já foi criado
	cObra  :=oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_SEQTRA"})]
	cOrigem:=oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ORIGEM"})]
	cDestin:=oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_DESTIN"})]
	cMunOri:=oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_MUNORI"})]
	cMunDes:=oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_MUNDES"})]
	cEstOri:=oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ESTORI"})]
	cEstDes:=oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ESTDES"})]
	xObra:=cObra+" - "+TRIM(cMunOri)+" - "+cEstOri
Case ValType(oDlgObr)=="O" .and. ValType(oDlgRot)=="O"  //Se o objeto já foi criado
	cObra  :=oDlgObr:aCols[oDlgObr:nAt][Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_OBRA"  })]
	cOrigem:=oDlgRot:aCols[oDlgRot:nAt][Ascan(oDlgRot:aHeader,{|x|AllTrim(x[2])=="ZA4_ORIGEM"})]
	cDestin:=oDlgRot:aCols[oDlgRot:nAt][Ascan(oDlgRot:aHeader,{|x|AllTrim(x[2])=="ZA4_DESTIN"})]
	cMunOri:=oDlgRot:aCols[oDlgRot:nAt][Ascan(oDlgRot:aHeader,{|x|AllTrim(x[2])=="ZA4_MUNORI"})]
	cMunDes:=oDlgRot:aCols[oDlgRot:nAt][Ascan(oDlgRot:aHeader,{|x|AllTrim(x[2])=="ZA4_MUNDES"})]
	cEstOri:=oDlgRot:aCols[oDlgRot:nAt][Ascan(oDlgRot:aHeader,{|x|AllTrim(x[2])=="ZA4_ESTORI"})]
	cEstDes:=oDlgRot:aCols[oDlgRot:nAt][Ascan(oDlgRot:aHeader,{|x|AllTrim(x[2])=="ZA4_ESTDES"})]
	xObra:=cObra+" - "+oDlgObr:aCols[oDlgObr:nAt][Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_NOMORI"})]
Case ValType(oDlgObr)=="O"  //Se o objeto já foi criado
	cObra  :=oDlgObr:aCols[oDlgObr:nAt][Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_OBRA"  })]
	xObra:=cObra+" - "+oDlgObr:aCols[oDlgObr:nAt][Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_NOMORI"})]
Case ValType(oDlgTra)=="O"  //Se o objeto já foi criado
	cObra  :=oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_SEQTRA"})]
	cOrigem:=oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ORIGEM"})]
	cDestin:=oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_DESTIN"})]
	cMunOri:=oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_MUNORI"})]
	cMunDes:=oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_MUNDES"})]
	cEstOri:=oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ESTORI"})]
	cEstDes:=oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ESTDES"})]
	xObra:=cObra+" - "+cMunOri+" - "+cEstOri
Case ValType(oDlgMar)=="O"  //Se o objeto já foi criado
	cObra  :=oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZA6_SEQTRA"})]
	cOrigem:=oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZA6_ORIGEM"})]
	cDestin:=oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZA6_DESTIN"})]
	cMunOri:=oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZA6_MUNORI"})]
	cMunDes:=oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZA6_MUNDES"})]
	cEstOri:=oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZA6_ESTORI"})]
	cEstDes:=oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZA6_ESTDES"})]
	xObra:=cObra+" - "+cMunOri+" - "+cEstOri
Otherwise
	if ValType(oDlgObr)=="O"
		xObra:=cObra+" - .:. - "+oDlgObr:aCols[oDlgObr:nAt][Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_NOMORI"})]
	endif	
EndCase

Do Case
Case ZA0->ZA0_TIPOSE$"TLO" .and. ValType(oDlgTra)=="O"  //Se o objeto já foi criado
	cSeqTra:=oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_SEQTRA"})]
Case ZA0->ZA0_TIPOSE $ "G|R|I" .and. ValType(oDlgGui)=="O"  //Se o objeto já foi criado
	cSeqGui:=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_SEQGUI"})]
Case ZA0->ZA0_TIPOSE=="U" .and. ValType(oDlgGru)=="O"  //Se o objeto já foi criado
	cSeqGru:=oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_SEQGRU"})]
Case ZA0->ZA0_TIPOSE=="P" .and. ValType(oDlgPla)=="O"  //Se o objeto já foi criado
	cSeqGru:=oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_SEQGRU"})]
Case ZA0->ZA0_TIPOSE=="M" .and. ValType(oDlgMar)=="O"  //Se o objeto já foi criado
	cSeqGru:=oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_SEQGRU"})]
	cSeqTra:=oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_SEQGRU"})]
EndCase

Do Case
Case ZA0->ZA0_TIPOSE$"TLO" .and. ValType(oDlgCar)=="O"  //Se o objeto já foi criado
	cSeqCar:=oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SEQCAR"})]
EndCase

If Empty(cObra)
	cObra:="001"
//	xObra:="001"
EndIf

Return(lRet)

********************************************************************************
User Function ZA0MUDA(nIndo,nEstou,oDlg,oFolder)
********************************************************************************
Local nPos,aDir,aCols,aCols0,lRet:=.T.

Do Case
Case nEstou==nFolderGui
	fAcumuGui()
Case nEstou==nFolderAcG
	fAcumuAcG()
Case nEstou==nFolderTra
	fAcumuTra()
Case nEstou==nFolderAce
	fAcumuAce()
Case nEstou==nFolderRot
	fAcumuRot()
Case nEstou==nFolderTre
	fAcumuTre()
	lRet:=fValidaTre()
Case nEstou==nFolderGru
	fAcumuGru()
Case nEstou==nFolderPla
	fAcumuPla()
Case nEstou==nFolderMar
	fAcumuMar()
Case nEstou==nFolderCar
	fAcumuCar()
Case nEstou==nFolderCon
	fAcumuCon()
Case nEstou==nFolderRes
	fAcumuRes()
Case nEstou==nFolderCus
	fTrazMem(.f.)  //.t.=Atualiza variáveis/.f.=Atualiza oDlgCus:aCols
	fAcumuCus()
Case nEstou==nFolderBdi
	fTrazMem(.f.)  //.t.=Atualiza variáveis/.f.=Atualiza oDlgCus:aCols
	fAcumuCus()
Case nEstou==nFolderDoc
	fAcumuDoc()
Case nEstou==nFolderEta
	fAcumuEta()
Case nEstou==nFolderCnj						// BeChange Conjunto Transportador - Cristiam Rossi em 29/08/2011
	oCnjaCols:SetData(oDlgCnj:aCols)
EndCase

If ValType(oDlgGui)=="O"
	fTrazGui()
	U_MudaGuiB()
	ValorAS()
	oDlgGui:oBrowse:Refresh()
EndIf
If ValType(oDlgAcG)=="O"
	fTrazAcG()
	U_MudaAcGB()
	oDlgAcG:oBrowse:Refresh()
EndIf
If ValType(oDlgTra)=="O"
	fTrazTra()
	U_MudaTraB()
	oDlgTra:oBrowse:Refresh()
EndIf
If ValType(oDlgAce)=="O"
	fTrazAce()
	U_MudaAceB()
	oDlgAce:oBrowse:Refresh()
EndIf
If ValType(oDlgRot)=="O"
	fTrazRot()
	U_MudaRotB()
	oDlgRot:oBrowse:Refresh()
EndIf
If ValType(oDlgTre)=="O"
	fTrazTre()
	U_MudaTreB()
	oDlgTre:oBrowse:Refresh()
EndIf
If ValType(oDlgGru)=="O"
	fTrazGru()
	U_MudaGruB()
	oDlgGru:oBrowse:Refresh()
EndIf
If ValType(oDlgPla)=="O"
	fTrazPla()
	U_MudaPlaB()
	oDlgPla:oBrowse:Refresh()
EndIf
If ValType(oDlgCar)=="O"
	fTrazCar()
	U_MudaCarB()
	oDlgCar:oBrowse:Refresh()
EndIf
If ValType(oDlgCon)=="O"
	fTrazCon()
	U_MudaConB()
	oDlgCon:oBrowse:Refresh()
EndIf
If ValType(oDlgRes)=="O"
	fTrazRes()
	U_MudaResB()
	oDlgRes:oBrowse:Refresh()
EndIf
If ValType(oDlgCus)=="O"
	fTrazCus()
	U_MudaCusB()
	fTrazMem(.t.)  //.t.=Atualiza variáveis/.f.=Atualiza oDlgCus:aCols
	fCalcCus()               
	//SumValRes() //Soma valores das responsabilidades - Alison 29/08/13
	oDlgCus:oBrowse:Refresh()
EndIf
If ValType(oDlgDoc)=="O"
	fTrazDoc()
	U_MudaDocB()
	oDlgDoc:oBrowse:Refresh()
EndIf
If ValType(oDlgEta)=="O"
	fTrazEta()
	U_MudaEtaB()
	oDlgEta:oBrowse:Refresh()
EndIf

Do Case
Case nIndo==nFolderCus//Aba Base de Calculo
	//Alison (Iduo Consultoria)
	If ValType(oDlgCar)=="O"  //Se o objeto já foi criado
		fObra()
		cJunto:=oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_JUNTO"})]
		If !Empty(cJunto)
			MsgStop("ATENÇÃO: A carga "+cSeqCar+" vai junto com a carga "+cJunto+" !!")
			Return(.f.)
		EndIf
	EndIf                      
	//===============
	u_CalcZA7C()		// adicao Cristiam Rossi em 04/08/2015
	fCalcTre()
	fCalcTotal()
	fDispTran()
	fDispGuin()
	fDispGrua()
	fCalcCar()
	//oValIpt:SetFocus()
	If ZA0->ZA0_TIPOSE == "G"
		oValCusIG:SetFocus()    
	EndIf
Case nIndo==nFolderCon
	If ValType(oDlgCar)=="O"  //Se o objeto já foi criado
		fObra()
		cJunto:=oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_JUNTO"})]
		If !Empty(cJunto)
			MsgStop("ATENÇÃO: A carga "+cSeqCar+" vai junto com a carga "+cJunto+" !!")
			Return(.f.)
		EndIf
	EndIf
Case nIndo==nFolderCnj		// BeChange Conjunto Transportador - Cristiam Rossi em 29/08/2011
	oDlgCnj:aCols := aClone(oCnjaCols:GetData("ZLW_OBRA=='"+cObra+"' .AND. ZLW_SEQGUI='"+if(ZA0->ZA0_TIPOSE=="G",cSeqGui,cSeqGru)+"'"))
//	oDlgCnj:aCols := aClone(oCnjaCols:GetData("ZLW_OBRA=='"+cObra+"'"))
	u_MudaZLW()
Case nIndo==nFolderTre   // Frank Z Fuga 06/01/2015
	If ValType(oDlgCar)=="O"  //Se o objeto já foi criado
		fObra()
		cJunto:=oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_JUNTO"})]
		If !Empty(cJunto)
			MsgStop("ATENÇÃO: A carga "+cSeqCar+" vai junto com a carga "+cJunto+" !!")
			Return(.f.)
		EndIf
	EndIf
EndCase 

fObra()

fCalcCon()
fDispCon()
fCalcCar()
fDispCar()
fCalcTre()

fObra()
oObra:Refresh()

oFolder:Refresh()
oDlg:Refresh()

SetFocus()

Return(lRet)

********************************************************************************
Static Function fHeader(aCamposSim)
********************************************************************************
Local nPos,aTabAux,aHeader:={}

dbSelectArea("SX3")
dbSetOrder(2)  //X3_CAMPO
For nPos:=1 to Len(aCamposSim)
	If SX3->(dbSeek(PadR(AllTrim(aCamposSim[nPos,1]),Len(X3_CAMPO))))
        aTabAux:={}
		AAdd(aTabAux,TRIM(x3Titulo()))
		AAdd(aTabAux,x3_campo        )
		AAdd(aTabAux,x3_picture      )
		AAdd(aTabAux,x3_tamanho      )
		AAdd(aTabAux,x3_decimal      )
		AAdd(aTabAux,x3_valid        )
		AAdd(aTabAux,x3_usado        )
		AAdd(aTabAux,x3_tipo         )
		AAdd(aTabAux,x3_f3           )
		AAdd(aTabAux,x3_context      )
		AAdd(aTabAux,x3_cbox         )
		AAdd(aTabAux,x3_relacao      )
 		AAdd(aTabAux,x3_when         )

		If !Empty(aCamposSim[nPos,2])
			AAdd(aTabAux,aCamposSim[nPos,2])
		Else
			AAdd(aTabAux,x3_visual       )
		EndIf

		If Empty(AllTrim(x3_vlduser))
			AAdd(aTabAux,"U_ZA0VALID('"+Upper(AllTrim(x3_campo))+"')")
		Else
			AAdd(aTabAux,X3_VLDUSER      )
		EndIf

		AAdd(aTabAux,X3_PICTVAR      )
		AAdd(aTabAux,X3_OBRIGAT      )
		AAdd(aHeader,aTabAux         )
	EndIf
Next

dbSetOrder(1)  //X3_ARQUIVO+X3_ORDEM

Return(AClone(aHeader))

********************************************************************************
Static Function fCols(aHeader,cAlias,nIndice,cChave,cCondicao,cFiltro)
********************************************************************************
Local nPos,aCols0,aCols:={}
Local cAliasAnt:=Alias()

	dbSelectArea(cAlias)

	(cAlias)->(DbSetOrder(nIndice))
	(cAlias)->(DbSeek(cChave,.t.))
	While (cAlias)->(!Eof() .and. &cCondicao)
		If !(cAlias)->(&cFiltro)
			(cAlias)->(DbSkip())
			Loop
		EndIf
		aCols0:={}
		
		For nPos:=1 to Len(aHeader)
			If ! aHeader[nPos,10] == "V"  //x3_context
				(cAlias)->(AAdd(aCols0,FieldGet(FieldPos(aHeader[nPos,2]))))
			Else
				(cAlias)->(AAdd(aCols0,CriaVar(aHeader[nPos,2])))
			EndIf
		Next
		AAdd(aCols0,.F.  )  //Deleted
		AAdd(aCols,aCols0)
		(cAlias)->(DbSkip())
	End

	If Empty(aCols)
		aCols0:={}
		For nPos:=1 to Len(aHeader)
			(cAlias)->(AAdd(aCols0,CriaVar(aHeader[nPos,2])))
		Next
		AAdd(aCols0,.F.  )  //Deleted
		AAdd(aCols,aCols0)
	EndIf

	aCols0:={}
	For nPos:=1 to Len(aHeader)
		(cAlias)->(AAdd(aCols0,CriaVar(aHeader[nPos,2])))
	Next
	AAdd(aCols0,.F.  )  //Deleted

	Do Case
		Case cAlias=="ZA1";oObr_Cols0:={};AAdd(oObr_Cols0,Aclone(aCols0))
		Case cAlias=="ZA4";oRot_Cols0:={};AAdd(oRot_Cols0,Aclone(aCols0))
		Case cAlias=="ZAM";oTre_Cols0:={};AAdd(oTre_Cols0,Aclone(aCols0))
		Case cAlias=="ZA6";oTra_Cols0:={};AAdd(oTra_Cols0,Aclone(aCols0))
		Case cAlias=="ZAG"
			oGru_Cols0:={}
			AAdd(oGru_Cols0,Aclone(aCols0))
		Case cAlias=="ZA5";oGui_Cols0:={};AAdd(oGui_Cols0,Aclone(aCols0))
		Case cAlias=="ZAE";oCon_Cols0:={};AAdd(oCon_Cols0,Aclone(aCols0))
		Case cAlias=="ZA7";oCar_Cols0:={};AAdd(oCar_Cols0,Aclone(aCols0))
		Case cAlias=="ZAA";oRes_Cols0:={};AAdd(oRes_Cols0,Aclone(aCols0))
		Case cAlias=="ZA9";oCus_Cols0:={};AAdd(oCus_Cols0,Aclone(aCols0))
		Case cAlias=="ZA8";oRat_Cols0:={};AAdd(oRat_Cols0,Aclone(aCols0))
		Case cAlias=="ZAI";oDoc_Cols0:={};AAdd(oDoc_Cols0,Aclone(aCols0))
		Case cAlias=="ZAF";oFol_Cols0:={};AAdd(oFol_Cols0,Aclone(aCols0))
		Case cAlias=="ZAD";oLic_Cols0:={};AAdd(oLic_Cols0,Aclone(aCols0))
		Case cAlias=="ZAC";oMao_Cols0:={};AAdd(oMao_Cols0,Aclone(aCols0))
		Case cAlias=="ZA3";oEta_Cols0:={};AAdd(oEta_Cols0,Aclone(aCols0))
		Case cAlias=="ZAK";oAce_Cols0:={};AAdd(oAce_Cols0,Aclone(aCols0))
		Case cAlias=="ZAQ";oAcG_Cols0:={};AAdd(oAcG_Cols0,Aclone(aCols0))
	EndCase

	dbSelectArea(cAliasAnt)

Return(AClone(aCols))

********************************************************************************
Static Function fGravaTudo(cAlias,aHeader,aCols)  
// Grava todos os campos do aCols
********************************************************************************
Local nPos,cCampo
For nPos:=1 to Len(aHeader)
	cCampo:=aHeader[nPos,2]
	(cAlias)->(&cCampo):=aCols[nPos]
Next
Return(.t.)

********************************************************************************
Static Function fGravaPMS(cProjet,cCli,cLoja,dEmissao)
********************************************************************************
Local cProjetPMS

cProjetPMS:=GetSx8Num("AF8","AF8_PROJET")

ConfirmSX8()

dbSelectArea("AF8")
RecLock("AF8",.T.)
AF8->AF8_FILIAL   := xFILIAL("AF8")
AF8->AF8_PROJET   := cProjetPMS
AF8->AF8_DATA     := dEmissao
AF8->AF8_DESCRI   := cProjet
AF8->AF8_CLIENT   := cCli
AF8->AF8_LOJA     := cLoja
AF8->AF8_REVISA   := "0001"
AF8->AF8_TPPRJ    := "0001"
AF8->AF8_CALEND   := "001"
AF8->AF8_FASE     := "01"
AF8->AF8_PRJREV   := "1"
AF8->AF8_CTRUSR   := "1"
AF8->AF8_TPCUS    := "1"
AF8->AF8_DELIM    := "."
AF8->AF8_MASCAR   := "2222222222"
AF8->AF8_RECALC   := "2" 
AF8->AF8_TRUNCA   := "1"
AF8->AF8_AUTCUS   := "1"
AF8->AF8_PRIREA   := "1"
AF8->AF8_CUSOP    := "1"
AF8->AF8_CUSOPE   := "1"
AF8->AF8_REAFIX   := "1"
MsUnlock("AF8")

dbSelectArea("AFC")
RecLock("AFC",.T.)
AFC->AFC_FILIAL   := xFILIAL("AFC")
AFC->AFC_PROJET   := cProjetPMS
AFC->AFC_EDT      := cProjet
AFC->AFC_REVISA   := "0001"
AFC->AFC_NIVEL    := "001"
AFC->AFC_CALEND   := "001"
AFC->AFC_UM       := "UN"
AFC->AFC_QUANT    := 1
AFC->AFC_DESCRI   := cProjet
MsUnlock("AFC")

Return

********************************************************************************
Static Function fTrazComp(cCod)
********************************************************************************
Return(Posicione('ST9',1,xFilial('ST9')+cCod,'T9_COMPRI'))

********************************************************************************
Static Function fTrazAltu(cCod)
********************************************************************************
Return(Posicione('ST9',1,xFilial('ST9')+cCod,'T9_ALTUR'))

********************************************************************************
Static Function fTrazLarg(cCod)
********************************************************************************
Return(Posicione('ST9',1,xFilial('ST9')+cCod,'T9_LARGU'))

********************************************************************************
Static Function fTrazPeso(cCod)
********************************************************************************
Return(Posicione('ST9',1,xFilial('ST9')+cCod,'T9_PESO'))

********************************************************************************
Static Function fTrazEixo(cCod)
********************************************************************************
Return(Val(Posicione('ST9',1,xFilial('ST9')+cCod,'T9_LCEX')))

********************************************************************************
Static Function fTrazVelo(cCod)
********************************************************************************
Return(Val(Posicione('ST9',1,xFilial('ST9')+cCod,'T9_KMHOR')))

********************************************************************************
Static Function fTrazMaoO(cCod)
********************************************************************************
Return(Val(Posicione('ST9',1,xFilial('ST9')+cCod,'T9_PERMO')))

********************************************************************************
Static Function fTrazHrMi(cCod)  //Hr.Mínimo
********************************************************************************
Return(Val(Posicione('ST9',1,xFilial('ST9')+cCod,'T9_VLMIN')))

********************************************************************************
Static Function fTrazHrMa(cCod)  //Vl.Hr.Máxima
********************************************************************************
Return(Val(Posicione('ST9',1,xFilial('ST9')+cCod,'T9_VLMAX')))

********************************************************************************
Static Function fTrazCapP(cCod)  //Carga Ponta
********************************************************************************
Return(Val(Posicione('ST9',1,xFilial('ST9')+cCod,'T9_CAPPON')))

********************************************************************************
Static Function fTrazCapM(cCod)  //Carga Máxima
********************************************************************************
Return(Val(Posicione('ST9',1,xFilial('ST9')+cCod,'T9_CAPMAX')))

********************************************************************************
Static Function fTrazVrHor(cCod)  //Vr.por Hora
********************************************************************************
Return(Posicione('ST9',1,xFilial('ST9')+cCod,'T9_VRHOR'))

********************************************************************************
Static Function fTrazVrDia(cCod)  //Vr.por Dia
********************************************************************************
Return(Posicione('ST9',1,xFilial('ST9')+cCod,'T9_VRDIA'))

********************************************************************************
Static Function fTrazVrKm(cCod)  //Vr.por Km
********************************************************************************
Return(Posicione('ST9',1,xFilial('ST9')+cCod,'T9_VRKM'))

//-----------------------------------------------------------------------------  
// Monta o browse de qualquer tabela - Início
//-----------------------------------------------------------------------------  
********************************************************************************
User Function CADZA0;fCad000("ZA0");Return
User Function CADZA1;fCad000("ZA1");Return
User Function CADZA2;fCad000("ZA2");Return
User Function CADZA3;fCad000("ZA3");Return
User Function CADZA4;fCad000("ZA4");Return
User Function CADZA5;fCad000("ZA5");Return
User Function CADZA6;fCad000("ZA6");Return
User Function CADZA7;fCad000("ZA7");Return
User Function CADZA8;fCad000("ZA8");Return
User Function CADZA9;fCad000("ZA9");Return
User Function CADZAA;fCad000("ZAA");Return
User Function CADZAB;fCad000("ZAB");Return
User Function CADZAC;fCad000("ZAC");Return
User Function CADZAD;fCad000("ZAD");Return
User Function CADZAE;fCad000("ZAE");Return
User Function CADZAF;fCad000("ZAF");Return
User Function CADZAG;fCad000("ZAG");Return
User Function CADZAH;fCad000("ZAH");Return
User Function CADZAI;fCad000("ZAI");Return
User Function CADZAJ;fCad000("ZAJ");Return
User Function CADZAK;fCad000("ZAK");Return
User Function CADZAL;fCad000("ZAL");Return
User Function CADZAM;fCad000("ZAM");Return
//User Function CADZAN;fCad000("ZAN");Return
User Function CADZAN;fCadZAN("ZAN");Return //Alison 26/11/13
User Function CADZAO;fCad000("ZAO");Return
User Function CADZAP;fCad000("ZAP");Return
User Function CADZAQ;fCad000("ZAQ");Return
User Function CADZAR;fCad000("ZAR");Return
User Function CADZAX;fCad000("ZAX");Return
User Function CADST9;fCad000("ST9");Return

********************************************************************************
Static Function fCad000(cAlias)
********************************************************************************
Local pString		:=cAlias,pCadastro:="Arquivos"
Private cCadastro 	:= "Manutenção de "+pCadastro+" ("+pString+")"
Private cString   	:= pString
Private aRotina   	:= fMontaRot0(cAlias)  //Monta o aRotina
Private cDelFunc 	:= ".T." // Validacao para a exclusao. Pode-se utilizar ExecBlock
dbSelectArea(cString)
dbSetOrder(1)
mBrowse(6,1,22,75,cString)
Return

********************************************************************************
Static Function fMontaRot0(cAlias)  
// Monta o aRotina
********************************************************************************
Local aRotina:={}
If cNivel>=5
	AAdd(aRotina,{"Pesquisar"       ,"AxPesqui"  ,0,1})
	AAdd(aRotina,{"Visualizar"      ,"AxVisual"  ,0,2})
	AAdd(aRotina,{"Incluir"         ,"AxInclui"  ,0,3})
	AAdd(aRotina,{"Alterar"         ,"AxAltera"  ,0,4})
	AAdd(aRotina,{"Excluir"         ,"AxDeleta"  ,0,5})
Else
	AAdd(aRotina,{"Pesquisar"       ,"AxPesqui"  ,0,1})
	AAdd(aRotina,{"Visualizar"      ,"AxVisual"  ,0,2})
EndIf    

If Upper(cAlias)==Upper("CADZA3")
	aRotina:={}
	AAdd(aRotina,{"Pesquisar"       ,"AxPesqui"  ,0,1})
	AAdd(aRotina,{"Visualizar"      ,"AxVisual"  ,0,2})
	AAdd(aRotina,{"Incluir"         ,"U_LOCC002I",0,3})
	AAdd(aRotina,{"Alterar"         ,"U_LOCC002A",0,4})
	AAdd(aRotina,{"Excluir"         ,"AxDeleta"  ,0,5})
EndIf

Return(aRotina)

//-----------------------------------------------------------------------------  
// Monta o browse de qualquer tabela - Fim
//-----------------------------------------------------------------------------  

********************************************************************************
Static Function fFolderEta(nFolder,nLin1,nCol1,nLin2,nCol2)
********************************************************************************
Local aCamposNao := {}
Local aCamposSim := {}
Local nStyle:=GD_INSERT + GD_UPDATE + GD_DELETE

Local cAlias,cChave,cCondicao,nIndice,cFiltro

nStyle:=If(nOpcManu==2,0,nStyle)  //2=Visualizar

fObra()

cAlias   :="ZA3"
cChave   :=xFILIAL(cAlias)+cOrigem+cDestin
cCondicao:='ZA3_FILIAL=="'+cChave+'"'
nIndice  :=1  //ZA3_FILIAL+ZA3_ORIGEM+ZA3_DESTIN+ZA3_ROTA+ZA3_ETAPA
cFiltro  :=cCondicao

//Cabeçalho
AAdd(aCamposSim,{"ZA3_ORIGEM",""})
AAdd(aCamposSim,{"ZA3_MUNORI",""})
AAdd(aCamposSim,{"ZA3_ESTORI",""})
AAdd(aCamposSim,{"ZA3_DESTIN",""})
AAdd(aCamposSim,{"ZA3_MUNDES",""})
AAdd(aCamposSim,{"ZA3_ESTDES",""})
AAdd(aCamposSim,{"ZA3_ROTA"  ,""})

//GetDados
AAdd(aCamposSim,{"ZA3_NOMROT",""})
AAdd(aCamposSim,{"ZA3_ETAPA" ,""})
AAdd(aCamposSim,{"ZA3_DE"    ,""})
AAdd(aCamposSim,{"ZA3_MUNDE" ,""})
AAdd(aCamposSim,{"ZA3_ESTDE" ,""})
AAdd(aCamposSim,{"ZA3_ATE"   ,""})
AAdd(aCamposSim,{"ZA3_MUNATE",""})
AAdd(aCamposSim,{"ZA3_ESTATE",""})
AAdd(aCamposSim,{"ZA3_DISTAN",""})
AAdd(aCamposSim,{"ZA3_RODOVI",""})
//AAdd(aCamposSim,{"ZA3_QTDPED",""})
//AAdd(aCamposSim,{"ZA3_VREIXO",""})
AAdd(aCamposSim,{"ZA3_TIPORO",""})
AAdd(aCamposSim,{"ZA3_TIPOPI",""})
AAdd(aCamposSim,{"ZA3_TRANSU",""})
//AAdd(aCamposSim,{"ZA3_TEMTUR",""})
AAdd(aCamposSim,{"ZA3_TEMALE",""})
AAdd(aCamposSim,{"ZA3_TEMBLO",""})
//AAdd(aCamposSim,{"ZA3_FATTAP",""})

aHeader:=fHeader(aCamposSim)
aCols:=fCols(aHeader,cAlias,nIndice,cChave,cCondicao,cFiltro)

If Len(aCols)==1
	cCampo   :="ZA3_ETAPA"
	cCampoGet:=aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]
	If Empty(cCampoGet)
		cRota:=aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])=="ZA3_ROTA"})]
		Posicione('ZA3',1,xFilial('ZA3')+cOrigem+cDestin,'ZA3_ETAPA')
		While ZA3->(!Eof() .and. ZA3_FILIAL+ZA3_ORIGEM+ZA3_DESTIN==xFilial('ZA3')+cOrigem+cDestin)
			cRota:=ZA3->ZA3_ROTA
			ZA3->(dbSkip())
		EndDo
		aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]:=StrZero(1,Len(cCampoGet))
		aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])=="ZA3_ROTA"})]:=StrZero(Val(cRota)+1,Len(cRota))
	EndIf
EndIf

//                           nTop ,nLeft,nBottom,nRight,nStyle,cLinhaOk,cTudoOk,cIniCpos    ,aAlter,nFreeze,nMax,cFieldOk,cSuperDel,cDelOk,oWnd                     ,aHeader,aCols}
oDlgEta:=MsNewGetDados():New(nLin1,nCol1,nLin2  ,nCol2 ,nStyle,        ,       ,"+ZA3_ETAPA",      ,       ,110 ,        ,         ,.t.   ,oFolder:aDialogs[nFolder],aHeader,aCols)
oDlgEta:oBrowse:bChange:={||U_MudaEtaB()}

@ nLin2+005,Int((nCol2-nCol1)/2)-30 BUTTON oButtEta Prompt "Atualiza" SIZE 60,10 ACTION fAtuEtapas() OF oFolder:aDialogs[nFolder] PIXEL

fAcumuEta()
fTrazEta()

If .f.
//Dados da Etapa
//@ nLin1-100,nCol1 to nLin1-05,nCol2 Of oFolder:aDialogs[nFolder] PIXEL
@ nLin1-095,nCol1+005 Say OemToAnsi("Origem:") Size 050,8 Of oFolder:aDialogs[nFolder] PIXEL COLOR CLR_BLUE FONT oFont1
@ nLin1-094,nCol1+055 MsGet oOrigemE Var cOrigemE Size 150,8 Of oFolder:aDialogs[nFolder] PIXEL COLOR CLR_BLUE FONT oFont2 When fWhen(.f.) 
@ nLin1-095,nCol1+220 Say OemToAnsi("Destino:") Size 050,8 Of oFolder:aDialogs[nFolder] PIXEL COLOR CLR_BLUE FONT oFont1
@ nLin1-094,nCol1+260 MsGet oDestinE Var cDestinE Size 200,8 Of oFolder:aDialogs[nFolder] PIXEL COLOR CLR_BLUE FONT oFont2 When fWhen(.f.) 

@ nLin1-075,nCol1+220 Say OemToAnsi("Rota:") Size 050,8 Of oFolder:aDialogs[nFolder] PIXEL COLOR CLR_BLUE FONT oFont1
@ nLin1-074,nCol1+260 MsGet oRotaE Var cRotaE Size 200,8 Of oFolder:aDialogs[nFolder] PIXEL COLOR CLR_BLUE FONT oFont2 //When fWhen(.f.) 
EndIf

Return

********************************************************************************
Static Function fAtuEtapas
********************************************************************************
If nFolderEta>0
	IncProc("Atualizando... Itinerarios")
	fSalvarEta("ZA3",Aclone(oDlgEta:aHeader),Aclone(oDlgEta:aCols))
	oDlgEta:aCols:={}
	AAdd(oDlgEta:aCols,Aclone(oEta_Cols0[1]))
	oDlgEta:oBrowse:Refresh()
EndIf

Return

********************************************************************************
User Function MudaEtaB  
// Muda o Browse
********************************************************************************
Local lRet:=.T.
Local cCampo,cCampoGet

fObra()

If oDlgEta:nAt>Len(oDlgEta:aCols) ; oDlgEta:nAt:=Len(oDlgEta:aCols) ; EndIf

oDlgEta :aCols[oDlgEta:nAt][Ascan(oDlgEta:aHeader,{|x|AllTrim(x[2])=="ZA3_ORIGEM"})]:=cOrigem
oDlgEta :aCols[oDlgEta:nAt][Ascan(oDlgEta:aHeader,{|x|AllTrim(x[2])=="ZA3_MUNORI"})]:=cMunOri
oDlgEta :aCols[oDlgEta:nAt][Ascan(oDlgEta:aHeader,{|x|AllTrim(x[2])=="ZA3_ESTORI"})]:=cEstOri
oDlgEta :aCols[oDlgEta:nAt][Ascan(oDlgEta:aHeader,{|x|AllTrim(x[2])=="ZA3_DESTIN"})]:=cDestin
oDlgEta :aCols[oDlgEta:nAt][Ascan(oDlgEta:aHeader,{|x|AllTrim(x[2])=="ZA3_MUNDES"})]:=cMunDes
oDlgEta :aCols[oDlgEta:nAt][Ascan(oDlgEta:aHeader,{|x|AllTrim(x[2])=="ZA3_ESTDES"})]:=cEstDes

If Len(oDlgEta:aCols)>1 .and. Empty(oDlgEta:aCols[oDlgEta:nAt][Ascan(oDlgEta:aHeader,{|x|AllTrim(x[2])=="ZA3_ROTA"  })])
	cRotaE  :=oDlgEta:aCols[Len(oDlgEta:aCols)-1][Ascan(oDlgEta:aHeader,{|x|AllTrim(x[2])=="ZA3_ROTA"})]
	cAteE   :=oDlgEta:aColas[Len(oDlgEta:aCols)-1][Ascan(oDlgEta:aHeader,{|x|AllTrim(x[2])=="ZA3_ATE"})]
	cMunAteE:=oDlgEta:aCols[Len(oDlgEta:aCols)-1][Ascan(oDlgEta:aHeader,{|x|AllTrim(x[2])=="ZA3_MUNATE"})]
	cEstAteE:=oDlgEta:aCols[Len(oDlgEta:aCols)-1][Ascan(oDlgEta:aHeader,{|x|AllTrim(x[2])=="ZA3_ESTATE"})]
	oDlgEta:aCols[oDlgEta:nAt][Ascan(oDlgEta:aHeader,{|x|AllTrim(x[2])=="ZA3_ROTA"  })]:=cRotaE
	oDlgEta:aCols[oDlgEta:nAt][Ascan(oDlgEta:aHeader,{|x|AllTrim(x[2])=="ZA3_DE"    })]:=cAteE
	oDlgEta:aCols[oDlgEta:nAt][Ascan(oDlgEta:aHeader,{|x|AllTrim(x[2])=="ZA3_MUNDE" })]:=cMunAteE
	oDlgEta:aCols[oDlgEta:nAt][Ascan(oDlgEta:aHeader,{|x|AllTrim(x[2])=="ZA3_ESTDE" })]:=cEstAteE
EndIf

oDlgEta:oBrowse:Refresh()

Return lRet

********************************************************************************
Static Function fSalvarEta(cAlias,aHeader,aCols)  
// Etapas
********************************************************************************
Local nPos,aGravados:={}  //Gravados

// Acumula o aCols corrente no aCols com todos os registros
fAcumuEta()
aCols:=Aclone(oEta_Cols)

dbSelectArea(cAlias)
dbSetOrder(1)  //ZA3_FILIAL+ZA3_ORIGEM+ZA3_DESTIN+ZA3_ROTA+ZA3_ETAPA

If nOpc==5  //5=Exclui
Else
	For nPos:=1 to Len(aCols)
		cOrigem:=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZA3_ORIGEM"})]
		cDestin:=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZA3_DESTIN"})]
		cRota  :=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZA3_ROTA"  })]
		cEtapa :=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZA3_ETAPA" })]
		cDe    :=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZA3_DE"    })]
		cAte   :=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZA3_ATE"   })]
		If !aCols[nPos,Len(aHeader)+1] .and. !Empty(cOrigem+cDestin) .and. !Empty(cRota+cEtapa) .and. !Empty(cDe+cAte)  //!Deleted()
			dbSeek(xFILIAL(cAlias)+cOrigem+cDestin+cRota+cEtapa)
			If Eof()
				RecLock(cAlias,.T.)
			Else
				RecLock(cAlias,.F.)
			EndIf
			fGravaTudo(cAlias,aHeader,aCols[nPos])  //Grava todos os campos do aCols
			(cAlias)->ZA3_FILIAL:=xFILIAL(cAlias)
			(cAlias)->ZA3_ORIGEM:=cOrigem
			(cAlias)->ZA3_DESTIN:=cDestin
			(cAlias)->ZA3_ROTA  :=cRota
			(cAlias)->ZA3_ETAPA :=cEtapa
			(cAlias)->ZA3_DE    :=cDe
			(cAlias)->ZA3_ATE   :=cAte
			AAdd(aGravados,Recno())  //Gravados
			MsUnLock()
	     EndIf
	Next
EndIf

// Exclui os registros alterados
dbSeek(xFILIAL(cAlias)+cOrigem+cDestin+cRota)
While !Eof() .and. ZA3_FILIAL+ZA3_ORIGEM+ZA3_DESTIN+ZA3_ROTA==xFILIAL(cAlias)+cOrigem+cDestin+cRota
	If Ascan(aGravados,{|x|x==Recno()})==0
		RecLock(cAlias,.F.)
		dbDelete()
		MsUnLock()
	EndIf
	dbSkip()
EndDo

Return

********************************************************************************
Static Function fMontaCar(nFolder,nLin1,nCol1,nLin2,nCol2)
********************************************************************************
Local nLinS1,nColS1,nLinG1,nColG1

nLinS1:=nLin2+020
nColS1:=nCol1+020
nLinG1:=nLin2+019
nColG1:=nCol1+077

nColS2:=nColS1+118
nColS3:=nColS2+118
nColS4:=nColS3+118

nColG2:=nColG1+118
nColG3:=nColG2+118
nColG4:=nColG3+118

nLinA :=010
nPos  :=0

fCalcCar()

cLabel:=" Dimensões Conjunto Transportador "

nPos:=0
@ nLinS1+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Comprimento ====>") Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS1+(nLinA*(  nPos-1)),nColS2 Say OemToAnsi("Largura ====>"    ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS1+(nLinA*(  nPos-1)),nColS3 Say OemToAnsi("Altura ====>"     ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS1+(nLinA*(  nPos-1)),nColS4 Say OemToAnsi("Peso ====>"       ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]

//@ nLinS1+(nLinA*(  nPos-1)),nColS4+120 BUTTON "&Pack_List" SIZE 30,9 ACTION ImpPlan() OF oFolder:aDialogs[nFolder] PIXEL      

nPos:=0
@ nLinG1+(nLinA*(++nPos-1)),nColG1 msGet oCompCarT  VAR nCompCarT  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] When fWhen(.f.) PICTURE "@E 999999,999.99"
@ nLinG1+(nLinA*(  nPos-1)),nColG2 msGet oLargCarT  VAR nLargCarT  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] When fWhen(.f.) PICTURE "@E 999999,999.99"
@ nLinG1+(nLinA*(  nPos-1)),nColG3 msGet oAltuCarT  VAR nAltuCarT  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] When fWhen(.f.) PICTURE "@E 999999,999.99"
@ nLinG1+(nLinA*(  nPos-1)),nColG4 msGet oPesoCarT  VAR nPesoCarT  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] When fWhen(.f.) PICTURE "@E 999999,999.99"

@ nLinS1-006,nColS1-002 TO nLinS1+(nLinA*(++nPos-1))+002,nColS4+104 LABEL cLabel PIXEL COLOR CLR_HBLUE OF oFolder:aDialogs[nFolder]

cLabel:=" Dimensões Cargas "

nPos++
nPosAux:=nPos
nLinAux:=nLinS1+(nLinA*(nPosAux))
@ nLinS1+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Comprimento ====>") Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS1+(nLinA*(  nPos-1)),nColS2 Say OemToAnsi("Largura ====>"    ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS1+(nLinA*(  nPos-1)),nColS3 Say OemToAnsi("Altura ====>"     ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS1+(nLinA*(  nPos-1)),nColS4 Say OemToAnsi("Peso ====>"       ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]

nPos:=nPosAux
@ nLinG1+(nLinA*(++nPos-1)),nColG1 msGet oCompCarC  VAR nCompCarC  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] When fWhen(.f.) PICTURE "@E 999999,999.99"
@ nLinG1+(nLinA*(  nPos-1)),nColG2 msGet oLargCarC  VAR nLargCarC  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] When fWhen(.f.) PICTURE "@E 999999,999.99"
@ nLinG1+(nLinA*(  nPos-1)),nColG3 msGet oAltuCarC  VAR nAltuCarC  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] When fWhen(.f.) PICTURE "@E 999999,999.99"
@ nLinG1+(nLinA*(  nPos-1)),nColG4 msGet oPesoCarC  VAR nPesoCarC  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] When fWhen(.f.) PICTURE "@E 999999,999.99"

@ nLinAux-006,nColS1-002 TO nLinS1+(nLinA*(++nPos-1))+002,nColS4+104 LABEL cLabel PIXEL COLOR CLR_HBLUE OF oFolder:aDialogs[nFolder]

cLabel:=" Dimensões Totais "

nPos++
nPosAux:=nPos
nLinAux:=nLinS1+(nLinA*(nPosAux))
@ nLinS1+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Comprimento ====>") Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS1+(nLinA*(  nPos-1)),nColS2 Say OemToAnsi("Largura ====>"    ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS1+(nLinA*(  nPos-1)),nColS3 Say OemToAnsi("Altura ====>"     ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS1+(nLinA*(  nPos-1)),nColS4 Say OemToAnsi("Peso ====>"       ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]

nPos:=nPosAux
@ nLinG1+(nLinA*(++nPos-1)),nColG1 msGet oCompCarG  VAR nCompCarG  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] When fWhen(.f.) PICTURE "@E 999999,999.99"
@ nLinG1+(nLinA*(  nPos-1)),nColG2 msGet oLargCarG  VAR nLargCarG  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] When fWhen(.f.) PICTURE "@E 999999,999.99"
@ nLinG1+(nLinA*(  nPos-1)),nColG3 msGet oAltuCarG  VAR nAltuCarG  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] When fWhen(.f.) PICTURE "@E 999999,999.99"
@ nLinG1+(nLinA*(  nPos-1)),nColG4 msGet oPesoCarG  VAR nPesoCarG  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] When fWhen(.f.) PICTURE "@E 999999,999.99"

@ nLinAux-006,nColS1-002 TO nLinS1+(nLinA*(++nPos-1))+002,nColS4+104 LABEL cLabel PIXEL COLOR CLR_HBLUE OF oFolder:aDialogs[nFolder]




Return

********************************************************************************
Static Function fMontaCon(nFolder,nLin1,nCol1,nLin2,nCol2)
********************************************************************************
Local nLinS1,nColS1,nLinG1,nColG1

nLinS1:=nLin2+020
nColS1:=nCol1+020
nLinG1:=nLin2+019
nColG1:=nCol1+077

nColS2:=nColS1+118
nColS3:=nColS2+118
nColS4:=nColS3+118

nColG2:=nColG1+118
nColG3:=nColG2+118
nColG4:=nColG3+118

nLinA :=010
nPos  :=0

fCalcCon()

cLabel:=" Dimensões Conjunto Transportador "

nPos:=0
@ nLinS1+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Comprimento ====>") Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS1+(nLinA*(  nPos-1)),nColS2 Say OemToAnsi("Largura ====>"    ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS1+(nLinA*(  nPos-1)),nColS3 Say OemToAnsi("Altura ====>"     ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS1+(nLinA*(  nPos-1)),nColS4 Say OemToAnsi("Peso ====>"       ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]

nPos:=0
@ nLinG1+(nLinA*(++nPos-1)),nColG1 msGet oCompConT  VAR nCompConT  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] When fWhen(.f.) PICTURE "@E 999999,999.99"
@ nLinG1+(nLinA*(  nPos-1)),nColG2 msGet oLargConT  VAR nLargConT  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] When fWhen(.f.) PICTURE "@E 999999,999.99"
@ nLinG1+(nLinA*(  nPos-1)),nColG3 msGet oAltuConT  VAR nAltuConT  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] When fWhen(.f.) PICTURE "@E 999999,999.99"
@ nLinG1+(nLinA*(  nPos-1)),nColG4 msGet oPesoConT  VAR nPesoConT  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] When fWhen(.f.) PICTURE "@E 999999,999.99"

@ nLinS1-006,nColS1-002 TO nLinS1+(nLinA*(++nPos-1))+002,nColS4+104 LABEL cLabel PIXEL COLOR CLR_HBLUE OF oFolder:aDialogs[nFolder]

cLabel:=" Dimensões Cargas "

nPos++
nPosAux:=nPos
nLinAux:=nLinS1+(nLinA*(nPosAux))
@ nLinS1+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Comprimento ====>") Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS1+(nLinA*(  nPos-1)),nColS2 Say OemToAnsi("Largura ====>"    ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS1+(nLinA*(  nPos-1)),nColS3 Say OemToAnsi("Altura ====>"     ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS1+(nLinA*(  nPos-1)),nColS4 Say OemToAnsi("Peso ====>"       ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]

nPos:=nPosAux
@ nLinG1+(nLinA*(++nPos-1)),nColG1 msGet oCompConC  VAR nCompConC  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] When fWhen(.f.) PICTURE "@E 999999,999.99"
@ nLinG1+(nLinA*(  nPos-1)),nColG2 msGet oLargConC  VAR nLargConC  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] When fWhen(.f.) PICTURE "@E 999999,999.99"
@ nLinG1+(nLinA*(  nPos-1)),nColG3 msGet oAltuConC  VAR nAltuConC  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] When fWhen(.f.) PICTURE "@E 999999,999.99"
@ nLinG1+(nLinA*(  nPos-1)),nColG4 msGet oPesoConC  VAR nPesoConC  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] When fWhen(.f.) PICTURE "@E 999999,999.99"

@ nLinAux-006,nColS1-002 TO nLinS1+(nLinA*(++nPos-1))+002,nColS4+104 LABEL cLabel PIXEL COLOR CLR_HBLUE OF oFolder:aDialogs[nFolder]

cLabel:=" Dimensões Totais "

nPos++
nPosAux:=nPos
nLinAux:=nLinS1+(nLinA*(nPosAux))
@ nLinS1+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Comprimento ====>") Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS1+(nLinA*(  nPos-1)),nColS2 Say OemToAnsi("Largura ====>"    ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS1+(nLinA*(  nPos-1)),nColS3 Say OemToAnsi("Altura ====>"     ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS1+(nLinA*(  nPos-1)),nColS4 Say OemToAnsi("Peso ====>"       ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]

nPos:=nPosAux
@ nLinG1+(nLinA*(++nPos-1)),nColG1 msGet oCompConG  VAR nCompConG  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] When fWhen(.f.) PICTURE "@E 999999,999.99"
@ nLinG1+(nLinA*(  nPos-1)),nColG2 msGet oLargConG  VAR nLargConG  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] When fWhen(.f.) PICTURE "@E 999999,999.99"
@ nLinG1+(nLinA*(  nPos-1)),nColG3 msGet oAltuConG  VAR nAltuConG  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] When fWhen(.f.) PICTURE "@E 999999,999.99"
@ nLinG1+(nLinA*(  nPos-1)),nColG4 msGet oPesoConG  VAR nPesoConG  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] When fWhen(.f.) PICTURE "@E 999999,999.99"

@ nLinAux-006,nColS1-002 TO nLinS1+(nLinA*(++nPos-1))+002,nColS4+104 LABEL cLabel PIXEL COLOR CLR_HBLUE OF oFolder:aDialogs[nFolder]

Return

********************************************************************************
Static Function fCalcCar
********************************************************************************
fCalcCon()

Return

********************************************************************************
Static Function fCalcCon
********************************************************************************
Local cSeqCar,lVez,nCompCava  //Comprimento do cavalo
Local aAreaZA9 := ZA9->(GetArea())

nCompConC:=0
nLargConC:=0
nAltuConC:=0
nPesoConC:=0
nEixoConC:=0

nCompCava:=0  //Comprimento do cavalo
nCompConT:=0
nLargConT:=0
nAltuConT:=0
nPesoConT:=0
nEixoConT:=0

c1Desc:=""
n1Comp:=0
n1Larg:=0
n1Altu:=0
n1Peso:=0

c2Desc:=""
n2Comp:=0
n2Larg:=0
n2Altu:=0
n2Peso:=0

c3Desc:=""
//n3Comp:=0
//n3Larg:=0
//n3Altu:=0
//n3Peso:=0

If ValType(oDlgCar)=="O"  //Se o objeto já foi criado
	If oDlgCar:aCols[oDlgCar:nAt,Len(oDlgCar:aHeader)+1]  //!Deleted()
		Return
	EndIf

	c1Desc :=oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_CARGA"})]

	cSeqCar:=oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SEQCAR"})]
	
	nCompConC+=oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_COMP"  })]
	nLargConC:=Max(nLargConC,oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_LARG"  })])
	nAltuConC:=Max(nAltuConC,oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_ALTU"  })])
	nPesoConC+=              oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_PESO"  })] * oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_QTD"  })]
	
	For nX := 1 To Len(oDlgCar:aCols)
		If oDlgCar:aCols[nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_JUNTO"  })] == cSeqCar 
			nPesoConC += oDlgCar:aCols[nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_PESO"  })] * oDlgCar:aCols[nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_QTD"  })]
			nLargConC := Max(nLargConC,oDlgCar:aCols[nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_LARG"  })])
			nAltuConC := Max(nAltuConC,oDlgCar:aCols[nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_ALTU"  })])
			nCompConC := Max(nCompConC,oDlgCar:aCols[nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_COMP"  })]) 
		EndIf
	Next nX

	nCompCava:=0  //Comprimento do cavalo
	nCompConT:=0
	nLargConT:=0
	nAltuConT:=0
	nPesoConT:=0
	nEixoConT:=0

	lVez:=.t.

	If ValType(oDlgCon)=="O"  //Se o objeto já foi criado
		For nPos:=1 to Len(oDlgCon:aCols)

			If !cSeqCar==oDlgCon:aCols[nPos][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_SEQCAR"})]
				Loop
			EndIf

			If !oDlgCon:aCols[nPos,Len(oDlgCon:aHeader)+1]  //!Deleted()
				If Empty(nAltuConT)
				//	nAltuConT:=oDlgCon:aCols[nPos][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_ALTU"  })]
				EndIf

				If lVez  //Cavalo tem que ser o primeiro registro
					lVez:=.f.
					nCompCava+=          oDlgCon:aCols[nPos][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_COMP"  })]
				EndIf

				nCompConT+=              oDlgCon:aCols[nPos][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_COMP"  })]
				nLargConT:=Max(nLargConT,oDlgCon:aCols[nPos][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_LARG"  })])
				//nAltuConT+= 			 oDlgCon:aCols[nPos][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_ALTU"  })]//:=Min(nAltuConT,oDlgCon:aCols[nPos][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_ALTU"  })])
				nAltuConT:=Max(nAltuConT,oDlgCon:aCols[nPos][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_ALTU"  })])
				nPesoConT+=              oDlgCon:aCols[nPos][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_PESO"  })]
				nEixoConT+=              oDlgCon:aCols[nPos][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_QTEIXO"})]

				c2Desc+=PadR(oDlgCon:aCols[nPos][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_DESTRA"})],100)

			EndIf
		Next
	EndIf
EndIf

If ValType(oDlgGui)=="O"  //Se o objeto já foi criado
	If oDlgGui:aCols[oDlgGui:nAt,Len(oDlgGui:aHeader)+1]  //!Deleted()
		Return
	EndIf

	cCod:=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_GUINDA"})]

	nCompConT+=fTrazComp(cCod)
	nLargConT:=Max(nLargConC,fTrazLarg(cCod))
	nAltuConT:=Max(nAltuConC,fTrazAltu(cCod))
	nPesoConT+=fTrazPeso(cCod)
	nEixoConT+=fTrazEixo(cCod)
EndIf

nCompConG:=nCompCava+(nCompConT-nCompCava)//Max(nCompConT-nCompCava,nCompConC)

nLargConG:=Max(nLargConT,nLargConC)
nAltuConG:=nAltuConT+nAltuConC
nPesoConG:=nPesoConT+nPesoConC
nEixoConG:=nEixoConT+nEixoConC

nCompCarT:=nCompConT
nLargCarT:=nLargConT
nAltuCarT:=nAltuConT
nPesoCarT:=nPesoConT
nEixoCarT:=nEixoConT
nCompCarC:=nCompConC
nLargCarC:=nLargConC
nAltuCarC:=nAltuConC
nPesoCarC:=nPesoConC
nEixoCarC:=nEixoConC
nCompCarG:=nCompConG
nLargCarG:=nLargConG
nAltuCarG:=nAltuConG
nPesoCarG:=nPesoConG
nEixoCarG:=nEixoConG

n1Comp:=nCompConC
n1Larg:=nLargConC
n1Altu:=nAltuConC
n1Peso:=nPesoConC

n2Comp:=nCompConT
n2Larg:=nLargConT
n2Altu:=nAltuConT
n2Peso:=nPesoConT

If ZA0->ZA0_TIPOSE == "T"
	DbSelectArea("ZA9")
	DbSetOrder(2)
	If DbSeek(xFilial("ZA9")+ZA0->ZA0_PROJET+cObra+cSeqTra+cSeqCar)
		n3Comp:=Iif(n3Comp == 0,ZA9->ZA9_COMPT,n3Comp)
		n3Larg:=Iif(n3Larg == 0,ZA9->ZA9_LARGT,n3Larg)
		n3Altu:=Iif(n3Altu == 0,ZA9->ZA9_ALTUT,n3Altu)
		n3Peso:=Iif(n3Peso == 0,ZA9->ZA9_PESOT,n3Peso)
	EndIf
	
	n3Comp:=Iif(n3Comp == 0, nCompConG, n3Comp)
	n3Larg:=Iif(n3Larg == 0, nLargConG, n3Larg)
	n3Altu:=Iif(n3Altu == 0, nAltuConG, n3Altu)
	n3Peso:=Iif(n3Peso == 0, nPesoConG, n3Peso)
EndIf
      
RestArea(aAreaZA9)
Return

********************************************************************************
Static Function fVerRotas()
********************************************************************************
Local aArea    	:= GetArea()  
Local cTitulo  	:= "Consulta Itinerarios"
Local lOk	   	:= .F.
Local lCancel  	:= .F.
Local oDlg3  	:= Nil 
Local cOriAnt,cDesAnt,cRotAnt,cKMVAnt,cKMCAnt

If ! fWhen()
	Return
EndIf

Private cRotaTRB

DEFINE FONT oFont NAME "Arial" SIZE 0,-11 BOLD  

if ! u_LC1CanEdt('ZA6','ITINERARIOS', .T.)		// Cristiam Rossi em 01/08/2016
	return nil
endif


aCamposSim:={}

//AAdd(aCamposSim,"ZA3_ETAPA" )
//AAdd(aCamposSim,"ZA3_DE"    )
//AAdd(aCamposSim,"ZA3_ATE"   )

AAdd(aCamposSim,"ZA3_ROTA"  )
AAdd(aCamposSim,"ZA3_NOMROT")
AAdd(aCamposSim,"ZA3_MUNORI" )
AAdd(aCamposSim,"ZA3_ESTORI" )
AAdd(aCamposSim,"ZA3_MUNDES")
AAdd(aCamposSim,"ZA3_ESTDES")

AAdd(aCamposSim,"ZA3_TKMVAZ")
AAdd(aCamposSim,"ZA3_TKMCAR")

//AAdd(aCamposSim,"ZA3_DISTAN")
//AAdd(aCamposSim,"ZA3_RODOVI")
//AAdd(aCamposSim,"ZA3_TIPORO")
//AAdd(aCamposSim,"ZA3_TIPOPI")
//AAdd(aCamposSim,"ZA3_QTDPED")
//AAdd(aCamposSim,"ZA3_VREIXO")
//AAdd(aCamposSim,"ZA3_TRANSU")
//AAdd(aCamposSim,"ZA3_TEMTUR")
//AAdd(aCamposSim,"ZA3_TEMALE")
//AAdd(aCamposSim,"ZA3_TEMBLO")
//AAdd(aCamposSim,"ZA3_FATTAP")

aCamposPic:={}
aCamposTit:={}
aCamposTam:={}
For nPos:=1 to Len(aCamposSim)
	AAdd(aCamposPic,AllTrim(GetSx3Cache(aCamposSim[nPos],"X3_PICTURE")))
	AAdd(aCamposTit,AllTrim(GetSx3Cache(aCamposSim[nPos],"X3_TITULO" )))
	AAdd(aCamposTam,30                                                 )
Next

fObra()

cQuery := "SELECT * FROM " + RetSqlName("ZA3")     + " "
cQuery += "WHERE  ZA3_FILIAL = '" + xFilial("ZA3") + "' AND "
cQuery += "       ZA3_ORIGEM = '" + cOrigem        + "' AND "
cQuery += "       ZA3_DESTIN = '" + cDestin        + "' AND "
cQuery += "       D_E_L_E_T_<>'*' "
cQuery += "ORDER BY ZA3_ORIGEM,ZA3_DESTIN,ZA3_ROTA,ZA3_ETAPA"

If Select("TRB") > 0
	TRB->(dbCloseArea())	 
endif

TCQUERY cQuery NEW ALIAS "TRB"

aCamposIte:={}

dbSelectArea("TRB")
TRB->(dbGotop())
While TRB->(!Eof())
	aTabAux:={}
	For nPos:=1 to Len(aCamposSim)
		cCampo:="TRB->"+aCamposSim[nPos]
		AAdd(aTabAux,&cCampo)
	Next
	AAdd(aCamposIte,aTabAux)
	cOriAnt:=TRB->ZA3_ORIGEM
	cDesAnt:=TRB->ZA3_DESTIN
	cRotAnt:=TRB->ZA3_ROTA
    cKMVAnt:=TRB->ZA3_TKMVAZ 
	cKMCAnt:=TRB->ZA3_TKMCAR 	
	While TRB->(!Eof() .and. ZA3_ORIGEM+ZA3_DESTIN+ZA3_ROTA==cOriAnt+cDesAnt+cRotAnt)
		TRB->(DbSkip())
	End
End

If Len(aCamposIte)==0
	aTabAux:={}
	For nPos:=1 to Len(aCamposSim)
		cCampo:="TRB->"+aCamposSim[nPos]
		AAdd(aTabAux,&cCampo)
	Next
	AAdd(aCamposIte,aTabAux)
EndIf

cCab1:=""

posicione("ZA2",1,xFilial("ZA2")+cOrigem,"ZA2_DESCRI")
cCab1+="Origem: " +cOrigem+" - "+AllTrim(ZA2->ZA2_DESCRI)+" / "+ZA2->ZA2_ESTADO+Space(10)

posicione("ZA2",1,xFilial("ZA2")+cDestin,"ZA2_DESCRI")
cCab1+="Destino: " +cDestin+" - "+AllTrim(ZA2->ZA2_DESCRI)+" / "+ZA2->ZA2_ESTADO

Define MsDialog oDlg3 Title cTitulo From 000,000 To 550,758 Of oDlg3 Pixel

@ 020,005 Say cCab1 of oDlg3 Pixel FONT oFont

@ 030,005 ListBox oLbxItens Var cVarItens Fields ;
		Header   aCamposTit[01],aCamposTit[02],aCamposTit[03],aCamposTit[04],aCamposTit[05],aCamposTit[06] ;
		ColSizes aCamposTam[01],aCamposTam[02],aCamposTam[03],aCamposTam[04],aCamposTam[05],aCamposTam[06] ;
		Size 370,200 Of oDlg3 Pixel
	
oLbxItens:SetArray(aCamposIte)
oLbxItens:bLine := { || { 	Transform(aCamposIte[oLbxItens:nAt,01],aCamposPic[01]),;
							Transform(aCamposIte[oLbxItens:nAt,02],aCamposPic[02]),;
							Transform(aCamposIte[oLbxItens:nAt,03],aCamposPic[03]),;
							Transform(aCamposIte[oLbxItens:nAt,04],aCamposPic[04]),;
							Transform(aCamposIte[oLbxItens:nAt,05],aCamposPic[05]),;
							Transform(aCamposIte[oLbxItens:nAt,06],aCamposPic[06])}}
oLbxItens:Refresh()
oDlg3:Refresh()

@ 235,060 BUTTON oButtEta Prompt "Seleciona Itinerario" SIZE 60,10 ACTION (lOk:=.T.,cRotaTRB:=aCamposIte[oLbxItens:nAt,01],close(oDlg3),) Pixel
//@ 235,130 BUTTON oButtEta Prompt "Incluir Itinerario"   SIZE 60,10 ACTION (If(fIncluiEta(cOrigem,cDestin,aCamposIte[oLbxItens:nAt,01],aCamposIte[oLbxItens:nAt,02]),Close(oDlg3),)) Pixel
//@ 235,200 BUTTON oButtEta Prompt "Altera Itinerario"    SIZE 60,10 ACTION (If(fAlteraEta(cOrigem,cDestin,aCamposIte[oLbxItens:nAt,01],aCamposIte[oLbxItens:nAt,02]),Close(oDlg3),)) Pixel
@ 235,270 BUTTON oButtEta Prompt "Cancelar"        SIZE 60,10 ACTION (lOk:=.F.,cRotaTRB:=aCamposIte[oLbxItens:nAt,01],Close(oDlg3),) Pixel

Activate MsDialog oDlg3 Centered On Init EnchoiceBar(oDlg3,{|| lOk:=.T.,cRotaTRB:=aCamposIte[oLbxItens:nAt,01],close(oDlg3) },{|| lOk:=.F.,cRotaTRB:=aCamposIte[oLbxItens:nAt,01],close(oDlg3) }) 

RestArea(aArea)

If lOk
	// Limpar os Itinerários do array do BeChange - Cristiam Rossi em 11/04/2016
	_PsObra  := aScan( oDlgTre:aHeader, {|x| AllTrim(x[2])=="ZAM_OBRA"  })
	_PsSqTra := aScan( oDlgTre:aHeader, {|x| AllTrim(x[2])=="ZAM_SEQTRA"})
	_PsSqCar := aScan( oDlgTre:aHeader, {|x| AllTrim(x[2])=="ZAM_SEQCAR"})

	_Key := oDlgTre:aCols[oDlgTre:nAT][_PsObra ]
	_Key += oDlgTre:aCols[oDlgTre:nAT][_PsSqTra]
	_Key += oDlgTre:aCols[oDlgTre:nAT][_PsSqCar]

	For nPos := 1 to Len(oTre_Cols)
		if oTre_Cols[nPos][_PsObra ] + oTre_Cols[nPos][_PsSqTra ] + oTre_Cols[nPos][_PsSqCar ] == _Key
			oTre_Cols[nPos][_PsObra] := Space(3)
		EndIf
	Next

	oDlgTre:aCols := {}
	oDlgTre:aCols := Aclone( fColsRotas(oDlgTre:aHeader,oDlgTre:aCols,"TRB",cRotaTRB) )
	oDlgTre:oBrowse:Refresh()

	nKmV := GdFieldGet("ZAM_TKMVAZ", 1, .F., oDlgTre:aHeader, oDlgTre:aCols)
	nKmC := GdFieldGet("ZAM_TKMCAR", 1, .F., oDlgTre:aHeader, oDlgTre:aCols)
	nKmT := nKmV + nKmC                               

	// by Frank Zwarg Fuga 18/11/15
	// Somente para a regra 2 de calculo, ao selecionar o itinerario, precisamos atualizar a tabela de venda na pasta viagem
	cTabVen 	:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TABVEN"})]
	cVerTab 	:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VERVEN"})]
	cCodCli		:= AllTrim(ZA0->ZA0_CLI)
	cLojCli		:= AllTrim(ZA0->ZA0_LOJA)
	cTpTrans	:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TPTRAN"})]
	cTpTraC		:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TPTRAC"})]		// Cristiam Rossi em 05/04/2016
	cITTabv		:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABV"})]
	cTpFluxo	:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TIPFLU"})]	
	_cTipLkm	:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TIPLKM"})]	

	ZT0->( dbSetOrder(1) )	//  ZT0_FILIAL+ZT0_CODTAB+ZT0_VERTAB+ZT0_CODCLI+ZT0_LOJCLI+ZT0_TIPTAB+ZT0_ITEMTB
	ZT0->( dbSeek( xFilial("ZT0") + cTabVen + cVerTab + cCodCLi + cLojCli + cTpTrans + cITTabV , .T. ) )
    
	If ZT0->ZT0_TIPREG == "2"

		// PASSO 1 - Localizar a tabela de vendas e a versao, conforme itinerario selecionado
		// ----------------------------------------------------------------------------------
		aAreaZA6  :=ZA6->(GetArea())
		mSQL := ""
		dDtIni		:=  oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_DTINI"})]  
		cTabVen 	:= ""
		cVerTab 	:= ""
		If Select("TZT0") > 0 
			dbSelectArea("TZT0")
			TZT0->(dbCloseArea())
		EndIf
		mSQL := "SELECT MAX(ZT0_CODTAB)TABELA,MAX(ZT0_VERTAB)VERSAO "
		mSQL += " FROM "+RetSQLName("ZT0")+" ZT0 "
		mSQL += " WHERE ZT0_FILIAL='"+xFilial("ZT0")+"' AND ZT0.D_E_L_E_T_=' '  "
		mSQL += " AND ZT0_INIVIG <='"+DtoS(dDtIni)+"' AND (ZT0_FIMVIG >='"+DtoS(dDtIni)+"' OR ZT0_FIMVIG ='' ) "
		mSQL += " AND ZT0_CODCLI='"+cCodCli+"' AND ZT0_LOJCLI='"+cLojCli+"'"  
		mSQL += " AND ZT0_TIPTAB='"+cTpTrans+"' AND ZT0_TIPFLU='"+cTpFluxo+"' AND ZT0_MSBLQL='2' "
		mSQL += " AND ZT0_ITINER='"+cRotaTRB+"' "  
		dbUseArea( .T., "TOPCONN", TCGENQRY(,,mSQL), "TZT0", .F., .T. )
		dbSelectArea("TZT0")
		TZT0->(dbGoTop())
		IF TZT0->(!EoF())
			dbSelectArea("ZT0")
			dbSetOrder(1)
			dbSeek(xFilial("ZT0")+TZT0->TABELA+TZT0->VERSAO)
		
			cTabVen := TZT0->TABELA
			cVerTab := TZT0->VERSAO                         

			// Valida se houve entregas liberando ou bloqueando a atualizacao da tabela de vendas/compras
			If VALQJUE()
				oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TABVEN"})]:=cTabVen
				oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VERVEN"})]:=cVerTab
				oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TABCOM"})]:=ZT0->ZT0_TABCOM
				oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VERCOM"})]:=ZT0->ZT0_VERCOM
				oDlgTra:oBrowse:Refresh()
			EndIF
		Endif
		TZT0->(dbCloseArea())
		RestArea(aAreaZA6)

		// PASSO 2 - Localizar o item da tabela de venda, conforme itinerario selecionado
		// ------------------------------------------------------------------------------
		COrig    :=	oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ORIGEM"})]
		cDestx   :=	oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_DESTIN"})]
		cTpTran  := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TRANSP"})]
	
		ZT0->( dbSetOrder(1) )	//  ZT0_FILIAL+ZT0_CODTAB+ZT0_VERTAB+ZT0_CODCLI+ZT0_LOJCLI+ZT0_TIPTAB+ZT0_ITEMTB
		ZT0->( dbSeek( xFilial("ZT0") + cTabVen + cVerTab + cCodCLi + cLojCli + cTpTrans, .T. ) )
		while ! ZT0->( EOF() ) .and. ZT0->( ZT0_FILIAL+ZT0_CODTAB+ZT0_VERTAB+ZT0_CODCLI+ZT0_LOJCLI+ZT0_TIPTAB ) ==  xFilial("ZT0") + cTabVen + cVerTab + cCodCLi + cLojCli + cTpTrans 
			if ZT0->ZT0_TIPFLU == cTpFluxo .and. ZT0->ZT0_ITINER == cRotaTRB .and. ;
				ZT0->ZT0_INIVIG <= dDtIni .and. ;
				( ZT0->ZT0_FIMVIG >= dDtIni .or. Empty(ZT0->ZT0_FIMVIG) ) .and. ;
				 ZT0->ZT0_CODORI == cOrig .and. ZT0->ZT0_CODDES == cDestx .and. ZT0->ZT0_TIPVEI==cTpTran .and. ZT0->ZT0_MSBLQL=='2' 
				 
				 	If _cTipLkm <> "N"
					 	If ZT0->ZT0_TIPLKM <> _cTipLkm
					 		ZT0->(dbSkip())
					 		Loop
					 	EndIF
					 EndIF
				 
				 	// Valida se houve entregas liberando ou bloqueando a atualizacao da tabela de vendas/compras
					If VALQJUE()
						oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABV"})] := ZT0->ZT0_ITEMTB
						oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABC"})] := ZT0->ZT0_ITTABC
						oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TABCOM"})] := ZT0->ZT0_TABCOM
						oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VERCOM"})] := ZT0->ZT0_VERCOM
						
						If ZT0->ZT0_TIPREG == "5"                                 
							oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_SKMVEN"})]	:= ZT0->ZT0_QTDKM
						EndIf   

						// Posicionar na ZT1 correspondente
						If !empty(ZT0->ZT0_TABCOM) .and. !empty(ZT0->ZT0_VERCOM) .and. !empty(ZT0->ZT0_ITTABC)
							_aTemp := GetArea()   
							dbSelectArea("ZT1")
							dbSetOrder(1)                                                                                
							dbSeek( xFilial("ZT1") + ZT0->ZT0_TABCOM + ZT0->ZT0_VERCOM)
							_lAchou := .F.
							While !Eof() .and. ZT1_FILIAL+ZT1_CODTAB+ZT1_VERTAB == xFilial("ZT1")+ZT0->ZT0_TABCOM + ZT0->ZT0_VERCOM
//								If ZT1_TIPTAB == cTpTrans .and. ZT1_ITEMTB == ZT0->ZT0_ITTABC .and. ZT1_CODCLI == cCodCli .and. ZT1_LOJCLI == cLojCli
//								If ZT1_TIPTAB == cTpTraC  .and. ZT1_ITEMTB == ZT0->ZT0_ITTABC .and. ZT1_CODCLI == cCodCli .and. ZT1_LOJCLI == cLojCli
								If ZT1_ITEMTB == ZT0->ZT0_ITTABC .and. ZT1_CODCLI == cCodCli .and. ZT1_LOJCLI == cLojCli	// Cristiam Rossi em 06/04/2016
									_lAchou := .T.
									Exit
								EndIF
								dbSkip()
							EndDo
							If _lAchou
								If ZT1->ZT1_TIPREG == "5"
									oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_SKMCOM"})]	:= ZT1->ZT1_QTDKM									
								EndIF
							EndIF
							RestArea(_aTemp)
						EndIf
						
					EndIf
				exit
			endif
			ZT0->( dbSkip() )
		end         
		oDlgTra:oBrowse:Refresh()
		// Atualizar o array otra_cols
		If Len(otra_cols) == Len(oDlgTra:aCols)
			// Valida se houve entregas liberando ou bloqueando a atualizacao da tabela de vendas/compras
			If VALQJUE()
				otra_cols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABV"})] := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABV"})] 
				otra_cols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABC"})] := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABC"})]
				otra_cols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_SKMVEN"})] := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_SKMVEN"})]
				otra_cols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_SKMCOM"})] := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_SKMCOM"})]
			EndIF
		Else
			MsgStop("Houve erros técnicos na transição das informações, comunique a ITUP!","Operação inválida!")
		EndIF
	EndIF
EndIf

fAcumuTra()		// Acumula ZA6 p/ guardar as tabelas de Venda e Compra - Cristiam Rossi em 21/07/2016

TRB->(DbCLoseArea())

Return


********************************************************************************
Static Function fIncluiEta(cOrigem,cDestin,cRota,cNomRot)
********************************************************************************
Local   lRet
Private jOrigem:=cOrigem
Private jDestin:=cDestin
Private jRota  :=Space(Len(cRota))
Private jNomRot:=Space(Len(cNomRot))
Private jKMV //   :=cKMV
Private jKMC //   :=cKMC 	 

lRet:=u_locc002()

Return(lRet)

********************************************************************************
Static Function fAlteraEta(cOrigem,cDestin,cRota,cNomRot)
********************************************************************************
Local   lRet
Private jOrigem:=cOrigem
Private jDestin:=cDestin
Private jRota  :=cRota
Private jNomRot:=cNomRot
Private jKMV   //:=cKMV
Private jKMC   //:=cKMC 	 

	
lRet := u_locc002()

Return(lRet)

********************************************************************************
Static Function fColsRotas(aHeader,aCols,cAlias,cRotaTRB)
********************************************************************************
Local nPos,aCols0
Local cAliasAnt:=Alias()

fObra()

//oDlgObr:aCols[oDlgObr:nAt][Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_ROTA"})]:=cRotaTRB
//oDlgObr:oBrowse:Refresh()

dbSelectArea(cAlias)

(cAlias)->(dbGoTop())
While (cAlias)->(!Eof())
	If (cAlias)->(!ZA3_ROTA==cRotaTRB)
		(cAlias)->(dbSkip())
		Loop
	EndIf
	aCols0:={}
	For nPos:=1 to Len(aHeader)
		(cAlias)->(AAdd(aCols0,CriaVar(aHeader[nPos,2])))
	Next
	AAdd(aCols0,.F.  )  //Deleted
	AAdd(aCols,aCols0)

	aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_OBRA"  })]:=cObra
	aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_SEQTRA"})]:=cSeqTra
	aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_SEQGUI"})]:=cSeqGui
	aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_SEQGRU"})]:=cSeqGru
	aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_SEQCAR"})]:=cSeqCar
	aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_ORIGEM"})]:=TRB->ZA3_ORIGEM
	aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_DESTIN"})]:=TRB->ZA3_DESTIN
	aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_ROTA"  })]:=TRB->ZA3_ROTA
	aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_ETAPA" })]:=TRB->ZA3_ETAPA
	aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_DE"    })]:=TRB->ZA3_DE
	aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_MUNDE" })]:=TRB->ZA3_MUNDE
	aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_ESTDE" })]:=TRB->ZA3_ESTDE
	aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_ATE"   })]:=TRB->ZA3_ATE
	aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_MUNATE"})]:=TRB->ZA3_MUNATE
	aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_ESTATE"})]:=TRB->ZA3_ESTATE
	aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]:=TRB->ZA3_DISTAN
	aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_VAZIO" })]:=TRB->ZA3_VAZIO
	aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_IDAVOL"})]:=Space(01)
	aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_RODOVI"})]:=TRB->ZA3_RODOVI
	aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_VALPED"})]:=TRB->ZA3_VREIXO
	aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_QTDPED"})]:=TRB->ZA3_QTDPED
	aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_TIPORO"})]:=TRB->ZA3_TIPORO
	aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_TIPOPI"})]:=TRB->ZA3_TIPOPI
	//aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_TEMTUR"})]:=TRB->ZA3_TEMTUR
	
	aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_CET"   })]:=GetStrZAN(TRB->ZA3_TIPORO,TRB->ZA3_TIPOPI,"ZAM_CET",TRB->ZA3_VAZIO)
	aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_DER"   })]:=GetStrZAN(TRB->ZA3_TIPORO,TRB->ZA3_TIPOPI,"ZAM_DER",TRB->ZA3_VAZIO)
	aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_DNIT"  })]:=GetStrZAN(TRB->ZA3_TIPORO,TRB->ZA3_TIPOPI,"ZAM_DNIT",TRB->ZA3_VAZIO)
	aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_CRED"  })]:=GetIntZAN(TRB->ZA3_TIPORO,TRB->ZA3_TIPOPI,"ZAM_CRED",TRB->ZA3_DISTAN,TRB->ZA3_VAZIO)
	aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_TEMPO" })]:=GetIntZAN(TRB->ZA3_TIPORO,TRB->ZA3_TIPOPI,"ZAM_TEMPO",TRB->ZA3_DISTAN,TRB->ZA3_VAZIO)

	aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_TKMVAZ"})]:=TRB->ZA3_TKMVAZ
	aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_TKMCAR"})]:=TRB->ZA3_TKMCAR

	(cAlias)->(DbSkip())
EndDo

If Empty(aCols)
	aCols0:={}
	For nPos:=1 to Len(aHeader)
		(cAlias)->(AAdd(aCols0,CriaVar(aHeader[nPos,2])))
	Next
	AAdd(aCols0,.F.  )  //Deleted
	AAdd(aCols,aCols0)
EndIf

dbSelectArea(cAliasAnt)

Return(AClone(aCols))

********************************************************************************
Static Function fVerRespo(aHeader,aCols,cAlias,cRotaTRB)
********************************************************************************
If !fWhen() ; Return ; EndIf

If !MsgYesNo("Confirma Carregamento de Todas as Responsabilidades ??")
	Return
EndIf

oDlgRes:aCols:={}
oDlgRes:aCols:=Aclone(fColsRespo(oDlgRes:aHeader,oDlgRes:aCols,"ZAB"))
oDlgRes:oBrowse:Refresh()

//fAcumuRes()
//fTrazRes()
//oDlgRes:oBrowse:Refresh()

Return

********************************************************************************
Static Function fColsRespo(aHeader,aCols,cAlias)
********************************************************************************
Local nPos,aCols0,nPosRes:=0
Local cAliasAnt:=Alias()
Local cCond   := ''

IF ZA0->ZA0_TIPOSE == "L"
   cCond   := 'ZAB->ZAB_TIPOSE $ "L/G/U/T/X/P/M" '
ELSE
   cCond   := 'ZAB->ZAB_TIPOSE == ZA0->ZA0_TIPOSE .Or. ZAB->ZAB_TIPOSE == "X" '
ENDIF

fObra()

dbSelectArea(cAlias)
(cAlias)->(dbGoTop())
While (cAlias)->(!Eof())
	aCols0:={}
	
	If &cCond
		For nPos := 1 to Len(aHeader)
			(cAlias)->(AAdd(aCols0,CriaVar(aHeader[nPos,2])))
		Next
		AAdd(aCols0,.F.  )  //Deleted
		AAdd(aCols,aCols0)

		aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAA_OBRA"  })] := cObra
		aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAA_SEQGUI"})] := If( Empty( cSeqTra ), cSeqGui, cSeqTra )
		aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAA_SEQRES"})] := StrZero(++nPosRes,3)
		aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAA_CODIGO"})] := (cAlias)->ZAB_CODIGO
		aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAA_DESCRI"})] := (cAlias)->ZAB_DESCRI
		aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAA_RESPON"})] := (cAlias)->ZAB_RESPON
		aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAA_DESCCO"})] := (cAlias)->ZAB_DESCCO
	Endif

	(cAlias)->(DbSkip())
End

If Empty(aCols)
	aCols0:={}
	For nPos:=1 to Len(aHeader)
		(cAlias)->(AAdd(aCols0,CriaVar(aHeader[nPos,2])))
	Next
	AAdd(aCols0,.F.  )  //Deleted
	AAdd(aCols,aCols0)
EndIf

dbSelectArea(cAliasAnt)

Return(AClone(aCols))

********************************************************************************
Static Function fFolderRat(nFolder,nLin1,nCol1,nLin2,nCol2)
********************************************************************************
Local aCamposNao := {}
Local aCamposSim := {} 
Local aAreaZL1	 := {}
Local nStyle	 :=GD_INSERT + GD_UPDATE + GD_DELETE
Local cAlias,cChave,cCondicao,nIndice,cFiltro

nStyle := If(nOpcManu==2,0,nStyle)  //2=Visualizar

fObra()

cAlias   := "ZA8"
cChave   := xFILIAL(cAlias) + cProjet
cCondicao:= 'ZA8_FILIAL+ZA8_PROJET=="' + cChave + '"'
nIndice  := 1  //ZA8_FILIAL+ZA8_PROJET+ZA8_OBRA+ZA8_ITEM
cFiltro  := cCondicao

AAdd(aCamposSim,{"ZA8_OBRA"  ,"V"})
AAdd(aCamposSim,{"ZA8_ITEM"  ,""})
AAdd(aCamposSim,{"ZA8_DESC"  ,""})  
AAdd(aCamposSim,{"ZA8_DADOS" ,""})  
AAdd(aCamposSim,{"ZA8_DTVIS" ,""})  
AAdd(aCamposSim,{"ZA8_COMP"  ,""})
AAdd(aCamposSim,{"ZA8_LARG"  ,""})
AAdd(aCamposSim,{"ZA8_ALTU"  ,""})
//AADD(aCamposSim,{"ZA8_DIAM"  ,""})
AADD(aCamposSim,{"ZA8_PESO"  ,""})
AADD(aCamposSim,{"ZA8_OBS"   ,""})
AADD(aCamposSim,{"ZA8_OPER"  ,""})
AADD(aCamposSim,{"ZA8_GESTOR",""})
AADD(aCamposSim,{"ZA8_RESPON",""})
AADD(aCamposSim,{"ZA8_EMISSA",""})
AADD(aCamposSim,{"ZA8_INLOCO",""})
AADD(aCamposSim,{"ZA8_DESEN" ,""})
AADD(aCamposSim,{"ZA8_PRAZO" ,""})

aHeader:=fHeader(aCamposSim)
aCols:=fCols(aHeader,cAlias,nIndice,cChave,cCondicao,cFiltro)
aCols[1,1]:="001"

If Len(aCols)==1
	cCampo   :="ZA8_ITEM"
	cCampoGet:=aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]
	If Empty(cCampoGet)
		aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]:=StrZero(1,Len(cCampoGet))
	EndIf
EndIf

cCampo   :="ZA8_ITEM"
cCampoGet:=oRat_Cols0[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]
If Empty(cCampoGet)
	oRat_Cols0[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]:=StrZero(1,Len(cCampoGet))
EndIf

//                            nTop,nLeft,nBottom,nRight,nStyle,cLinhaOk   ,cTudoOk,cIniCpos   ,aAlter,nFreeze,nMax,cFieldOk,cSuperDel,cDelOk,oWnd                     ,aHeader,aCols}
oDlgRat:=MsNewGetDados():New(nLin1,nCol1,nLin2  ,nCol2 ,nStyle,			  ,  	  ,"+ZA8_ITEM",      ,       ,110 ,        ,         ,.t.   ,oFolder:aDialogs[nFolder],aHeader,aCols)
oDlgRat:oBrowse:bChange:={||U_MudaRatB()}

//fAcumuRat()

Return    

********************************************************************************
Static Function fSalvarRat(cAlias,aHeader,aCols)  //RAT
********************************************************************************
Local nPos,aGravados:={}  //Gravados

fObra()

// Acumula o aCols corrente no aCols com todos os registros
fAcumuRat()
aCols:=Aclone(oRat_Cols)

dbSelectArea(cAlias)  
dbSetOrder(1)  

If nOpc==5  //5=Exclui
Else
	For nPos:=1 to Len(aCols)
		cObra:=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZA8_OBRA"})]
		cItem:=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZA8_ITEM"})]
		If !aCols[nPos,Len(aHeader)+1] .and. !Empty(cObra) .and. !Empty(cItem)  //!Deleted()
			dbSeek(xFILIAL(cAlias)+cProjet+cObra+cItem)
			If Eof()
				RecLock(cAlias,.T.)
			Else
				RecLock(cAlias,.F.)
			EndIf
			fGravaTudo(cAlias,aHeader,aCols[nPos])  //Grava todos os campos do aCols
			(cAlias)->ZA8_FILIAL:=xFILIAL(cAlias)
			(cAlias)->ZA8_PROJET:=cProjet
			(cAlias)->ZA8_OBRA	:=cObra
			(cAlias)->ZA8_ITEM	:=cItem
			AAdd(aGravados,Recno())  //Gravados
			MsUnLock()
	     EndIf
	Next
EndIf

// Exclui os registros alterados
dbSeek(xFILIAL(cAlias)+cProjet)
While !Eof() .and. ZA8_FILIAL+ZA8_PROJET==xFILIAL(cAlias)+cProjet
	If Ascan(aGravados,{|x|x==Recno()})==0
		RecLock(cAlias,.F.)
		dbDelete()
		MsUnLock()
	EndIf
	dbSkip()
End

Return

********************************************************************************
Static Function fFolderCus(nFolder,nLin1,nCol1,nLin2,nCol2)
********************************************************************************
Local aCamposNao := {}
Local aCamposSim := {} 
Local aAreaZL1	 := {}
Local nStyle:=GD_INSERT + GD_UPDATE + GD_DELETE
Local cAlias,cChave,cCondicao,nIndice,cFiltro
Local nLinS1,nColS1,nLinG1,nColG1
Local nLinS2,nColS2,nLinG2,nColG2
Local nLinS3,nColS3,nLinG3,nColG3
Local nLinS4,nColS4,nLinG4,nColG4
Local nLinS9,nColS9,nLinG9,nColG9
Local aAreaZZ5	:= ZZ5->(GetArea())
Local cCodUsr	:= RetCodUsr()
Local _ACESSO	:= .F.
nStyle:=If(nOpcManu==2,0,nStyle)  //2=Visualizar

fObra()

cAlias   :="ZA9"
cChave   :=xFILIAL(cAlias)+cProjet
cCondicao:='ZA9_FILIAL+ZA9_PROJET=="'+cChave+'"'
nIndice  :=1  //ZA9_FILIAL+ZA9_PROJET+ZA9_OBRA+ZA9_SEQTRA+ZA9_SEQGUI+ZA9_SEQGRU+ZA9_SEQCAR
cFiltro  :=cCondicao

For nPos:=1 to (cAlias)->(fCount())
	AAdd(aCamposSim,{(cAlias)->(AllTrim(FieldName(nPos))),""})
Next

aHeader:=fHeader(aCamposSim)
aCols:=fCols(aHeader,cAlias,nIndice,cChave,cCondicao,cFiltro)

//                            nTop,nLeft,nBottom,nRight,nStyle,cLinhaOk   ,cTudoOk,cIniCpos   ,aAlter,nFreeze,nMax,cFieldOk,cSuperDel,cDelOk,oWnd                     ,aHeader,aCols}
nLin1x:=0;nCol1x:=0;nLin2x:=0;nCol2x:=0
oDlgCus:=MsNewGetDados():New(nLin1x,nCol1x,nLin2x    ,nCol2x ,nStyle,			  ,  	  ,""         ,      ,       ,110 ,        ,         ,.t.   ,oFolder:aDialogs[nFolder],aHeader,aCols)
oDlgCus:oBrowse:bChange:={||U_MudaCusB()}

fAcumuCus()
fTrazCus()

fTrazMem(.t.)  //.t.=Atualiza variáveis/.f.=Atualiza oDlgCus:aCols
fCalcCus()

nLinS1:=008
nColS1:=004
nLinG1:=007
nColG1:=061

nLinS2:=nLinS1
nColS2:=nColS1+118
nLinG2:=nLinG1
nColG2:=nColG1+118

//Alison 11-07-13 (Iduo Consultoria)
nLinS3:=nLinS2
nColS3:=nColS2+118
nLinG3:=nLinG2
nColG3:=nColG2+118

//Novo posicionamento do S3 e G3 - Alison 11-07-13 (Iduo Consultoria)
/*nLinS3:=008
nColS3:=004
nLinG3:=007
nColG3:=061*/

nLinS4:=nLinS3
nColS4:=nColS3+118
nLinG4:=nLinG3
nColG4:=nColG3+118

nLinA :=010
nPos  :=0

If ZA0->ZA0_TIPOSE $ "G|R|I"
	cLabel:=" Tarifas Principais Ida-Mobilização "
Else
	cLabel:=" Tarifas Principais "
EndIf

nPos:=0

/*@ nLinS1+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("LSR"              ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS1+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Equip.Auxiliares" ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS1+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("PRE"              ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS1+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("PRF"              ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS1+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("TAP"              ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS1+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("TUV"              ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS1+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("TUR"              ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS1+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Batedor Credenc." ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS1+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Pedágios"         ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS1+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Bloqueio/Inversão") Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS1+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Laudo IPT"        ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS1+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Acomp.Técnico"    ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS1+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Acomp.CET"        ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS1+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Semafórica"       ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS1+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("TV a Cabo"        ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS1+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Cia Telefônica"   ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS1+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Outros"           ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS1+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Concessionárias"  ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS1+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Extra"            ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS1+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Total Tarifas"    ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]

nPos:=0
@ nLinG1+(nLinA*(++nPos-1)),nColG1 msGet oValLsr   VAR nValLsr   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
@ nLinG1+(nLinA*(++nPos-1)),nColG1 msGet oValAux   VAR nValAux   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
@ nLinG1+(nLinA*(++nPos-1)),nColG1 msGet oValPre   VAR nValPre   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
@ nLinG1+(nLinA*(++nPos-1)),nColG1 msGet oValPrf   VAR nValPrf   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
@ nLinG1+(nLinA*(++nPos-1)),nColG1 msGet oValTap   VAR nValTap   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
@ nLinG1+(nLinA*(++nPos-1)),nColG1 msGet oValTuv   VAR nValTuv   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
@ nLinG1+(nLinA*(++nPos-1)),nColG1 msGet oValTur   VAR nValTur   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
@ nLinG1+(nLinA*(++nPos-1)),nColG1 msGet oValEsc   VAR nValEsc   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
@ nLinG1+(nLinA*(++nPos-1)),nColG1 msGet oValPed   VAR nValPed   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
@ nLinG1+(nLinA*(++nPos-1)),nColG1 msGet oValInv   VAR nValInv   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
@ nLinG1+(nLinA*(++nPos-1)),nColG1 msGet oValIpt   VAR nValIpt   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG1+(nLinA*(++nPos-1)),nColG1 msGet oValAco   VAR nValAco   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG1+(nLinA*(++nPos-1)),nColG1 msGet oValCet   VAR nValCet   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG1+(nLinA*(++nPos-1)),nColG1 msGet oValSem   VAR nValSem   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG1+(nLinA*(++nPos-1)),nColG1 msGet oValTva   VAR nValTva   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG1+(nLinA*(++nPos-1)),nColG1 msGet oValTel   VAR nValTel   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG1+(nLinA*(++nPos-1)),nColG1 msGet oValOut   VAR nValOut   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG1+(nLinA*(++nPos-1)),nColG1 msGet oValCon   VAR nValCon   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG1+(nLinA*(++nPos-1)),nColG1 msGet oValAdi   VAR nValAdi   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG1+(nLinA*(++nPos-1)),nColG1 msGet oValCus   VAR nValCus   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
@ nLinS1-006,nColS1-002 TO nLinS1+(nLinA*(++nPos-1))+002,nColS1+104 LABEL cLabel PIXEL COLOR CLR_HBLUE OF oFolder:aDialogs[nFolder]*/

/*If ZA0->ZA0_TIPOSE $ "G|R|I"
	cLabel:=" Tarifas Principais Volta-Desmobilização "

	nPos:=0

	@ nLinS1+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("LSR"              ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS1+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Equip.Auxiliares" ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS1+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("PRE"              ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS1+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("PRF"              ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS1+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("TAP"              ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS1+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("TUV"              ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS1+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("TUR"              ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS1+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Batedor Credenc." ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS1+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Pedágios"         ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS1+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Bloqueio/Inversão") Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS1+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Laudo IPT"        ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS1+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Acomp.Técnico"    ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS1+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Acomp.CET"        ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS1+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Semafórica"       ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS1+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("TV a Cabo"        ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS1+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Cia Telefônica"   ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS1+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Outros"           ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS1+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Concessionárias"  ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS1+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Extra"            ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS1+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Total Tarifas"    ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	
	nPos:=0
	@ nLinG1+(nLinA*(++nPos-1)),nColG2 msGet oVl2Lsr   VAR nVl2Lsr   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG1+(nLinA*(++nPos-1)),nColG2 msGet oVl2Aux   VAR nVl2Aux   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG1+(nLinA*(++nPos-1)),nColG2 msGet oVl2Pre   VAR nVl2Pre   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG1+(nLinA*(++nPos-1)),nColG2 msGet oVl2Prf   VAR nVl2Prf   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG1+(nLinA*(++nPos-1)),nColG2 msGet oVl2Tap   VAR nVl2Tap   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG1+(nLinA*(++nPos-1)),nColG2 msGet oVl2Tuv   VAR nVl2Tuv   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG1+(nLinA*(++nPos-1)),nColG2 msGet oVl2Tur   VAR nVl2Tur   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG1+(nLinA*(++nPos-1)),nColG2 msGet oVl2Esc   VAR nVl2Esc   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG1+(nLinA*(++nPos-1)),nColG2 msGet oVl2Ped   VAR nVl2Ped   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG1+(nLinA*(++nPos-1)),nColG2 msGet oVl2Inv   VAR nVl2Inv   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG1+(nLinA*(++nPos-1)),nColG2 msGet oVl2Ipt   VAR nVl2Ipt   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
	@ nLinG1+(nLinA*(++nPos-1)),nColG2 msGet oVl2Aco   VAR nVl2Aco   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
	@ nLinG1+(nLinA*(++nPos-1)),nColG2 msGet oVl2Cet   VAR nVl2Cet   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
	@ nLinG1+(nLinA*(++nPos-1)),nColG2 msGet oVl2Sem   VAR nVl2Sem   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
	@ nLinG1+(nLinA*(++nPos-1)),nColG2 msGet oVl2Tva   VAR nVl2Tva   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
	@ nLinG1+(nLinA*(++nPos-1)),nColG2 msGet oVl2Tel   VAR nVl2Tel   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
	@ nLinG1+(nLinA*(++nPos-1)),nColG2 msGet oVl2Out   VAR nVl2Out   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
	@ nLinG1+(nLinA*(++nPos-1)),nColG2 msGet oVl2Con   VAR nVl2Con   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
	@ nLinG1+(nLinA*(++nPos-1)),nColG2 msGet oVl2Adi   VAR nVl2Adi   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
	@ nLinG1+(nLinA*(++nPos-1)),nColG2 msGet oVl2Cus   VAR nVl2Cus   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinS1-006,nColS2-002 TO nLinS1+(nLinA*(++nPos-1))+002,nColS2+104 LABEL cLabel PIXEL COLOR CLR_HBLUE OF oFolder:aDialogs[nFolder]
EndIf*/

Do Case
Case ZA0->ZA0_TIPOSE $ "G|R|I"
	cLabel:=" Custos Locação "

	nPos:=0
	@ nLinS2+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Prev.Base"         ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Vr.Base"           ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
    @ nLinS2+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Vr.Turno 1"        ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]	
    @ nLinS2+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Vr.Turno 2"        ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]	
    @ nLinS2+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Vr.Turno 3"        ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]	
	@ nLinS2+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Vr.Base Total"     ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Vr.Mob."           ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Vr.Desmob."        ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Vr.Transp.Acess"   ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Vr.ISS"            ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Vr.Seguro"         ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Valor a cobrar"    ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Vlr.Total AS"      ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Custo"      	     ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Retorno Imediato"  ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("% Custo Indireto"  ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]	

	nPos:=0
	@ nLinG2+(nLinA*(++nPos-1)),nColG1 msGet oPreDiaG   VAR nPreDiaG   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999"    VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG1 msGet oValBasG   VAR nValBasG   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
   
	@ nLinG2+(nLinA*(++nPos-1)),nColG1 msGet oValTur1  VAR nValTur1  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG1 msGet oValTur2  VAR nValTur2  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG1 msGet oValTur3  VAR nValTur3  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	
	@ nLinG2+(nLinA*(++nPos-1)),nColG1 msGet oValBasGT  VAR nValBasGT  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG1 msGet oValMobG   VAR nValMobG   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG1 msGet oValDesG   VAR nValDesG   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG1 msGet oValTAcG   VAR nValTAcG   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG1 msGet oValIssG   VAR nValIssG   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG1 msGet oValSegG   VAR nValSegG   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG1 msGet oValCobr   VAR nValCobr   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" When fWhen(.f.)/*fCalcTotal()*/
	@ nLinG2+(nLinA*(++nPos-1)),nColG1 msGet oValTotG   VAR nValTotG   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG1 msGet oValCusTG  VAR nValCusTG  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG1 msGet oValRenTG  VAR nValRenTG  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99"  When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG1 msGet oValCusIG  VAR nValCusIG  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999.99"		   VALID fCustoInd()                 
	@ nLinS2-006,nColS1-002 TO nLinS2+(nLinA*(++nPos-1))+002,nColS1+104 LABEL cLabel PIXEL COLOR CLR_HBLUE OF oFolder:aDialogs[nFolder]
	
	cLabel:=" Custos Locação ('Obra')"
	//Valor totalizado por Obra
	nPos:=0                    
	nLinS3+(nLinA*(++nPos-1))
	@ nLinS3+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Vr.Base"		     ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS3+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Vr.Turno 1"        ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]	
    @ nLinS3+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Vr.Turno 2"        ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]	
    @ nLinS3+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Vr.Turno 3"        ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS3+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Vr.Base Total"	 ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS3+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Vr.Mob."           ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS3+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Vr.Desmob."	     ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS3+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Vr.Transp.Acess"   ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS3+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Vr.ISS"            ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS3+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Vr.Seguro"         ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]                
	@ nLinS3+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Valor a Cobrar"    ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS3+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Vlr.Total AS"      ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS3+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Custo"		     ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]	
	@ nLinS3+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Retorno Imediato"  ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	
	nPos:=0                    
	nLinG3+(nLinA*(++nPos-1))                                                                                        
	@ nLinG3+(nLinA*(++nPos-1)),nColG2 msGet oValBasOG   VAR nValBasOG   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG3+(nLinA*(++nPos-1)),nColG2 msGet oValTur1O   VAR nValTur1O   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG3+(nLinA*(++nPos-1)),nColG2 msGet oValTur2O   VAR nValTur2O   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG3+(nLinA*(++nPos-1)),nColG2 msGet oValTur3O   VAR nValTur3O   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG3+(nLinA*(++nPos-1)),nColG2 msGet oValBasTO   VAR nValBasTO   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG3+(nLinA*(++nPos-1)),nColG2 msGet oValMobO    VAR nValMobO    Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG3+(nLinA*(++nPos-1)),nColG2 msGet oValDesO    VAR nValDesO    Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG3+(nLinA*(++nPos-1)),nColG2 msGet oValTAcO    VAR nValTAcO    Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG3+(nLinA*(++nPos-1)),nColG2 msGet oValISSO    VAR nValISSO    Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG3+(nLinA*(++nPos-1)),nColG2 msGet oValSegO    VAR nValSegO    Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG3+(nLinA*(++nPos-1)),nColG2 msGet oValCobrO   VAR nValCobrO   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG3+(nLinA*(++nPos-1)),nColG2 msGet oValTotO    VAR nValTotO    Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG3+(nLinA*(++nPos-1)),nColG2 msGet oValCusO    VAR nValCusO    Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG3+(nLinA*(++nPos-1)),nColG2 msGet oValRenO    VAR nValRenO    Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinS3-006,nColS2-002 TO nLinS3+(nLinA*(++nPos-1))+002,nColS2+104 LABEL cLabel PIXEL COLOR CLR_HBLUE OF oFolder:aDialogs[nFolder]
	                          
	cLabel:=" Custos Locação ('Agendamento')"                           
	//Valor Totalizado por Projeto
	nPos:=0
	nLinS4+(nLinA*(++nPos-1))
	@ nLinS4+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Base"		     ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS4+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Turno 1"        ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]	
    @ nLinS4+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Turno 2"        ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]	
    @ nLinS4+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Turno 3"        ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS4+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Base Total"	 ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS4+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Mob."           ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS4+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Desmob."	     ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS4+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Transp.Acess"   ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS4+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.ISS"            ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS4+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Seguro"         ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS4+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Valor a Cobrar"    ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]                
	@ nLinS4+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vlr.Total AS"      ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS4+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Custo"		     ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]	
	@ nLinS4+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Retorno Imediato"  ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	
	nPos:=0                                                                                                            
	nLinG4+(nLinA*(++nPos-1))
	@ nLinG4+(nLinA*(++nPos-1)),nColG3 msGet oValBasT    VAR nValBasT    Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG4+(nLinA*(++nPos-1)),nColG3 msGet oValTur1t   VAR nValTur1T   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG4+(nLinA*(++nPos-1)),nColG3 msGet oValTur2t   VAR nValTur2T   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG4+(nLinA*(++nPos-1)),nColG3 msGet oValTur3t   VAR nValTur3T   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG4+(nLinA*(++nPos-1)),nColG3 msGet oValBasTt   VAR nValBasTT   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG4+(nLinA*(++nPos-1)),nColG3 msGet oValMobt    VAR nValMobT    Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG4+(nLinA*(++nPos-1)),nColG3 msGet oValDest    VAR nValDesT    Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG4+(nLinA*(++nPos-1)),nColG3 msGet oValTAct    VAR nValTAcT    Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG4+(nLinA*(++nPos-1)),nColG3 msGet oValISSt    VAR nValISST    Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG4+(nLinA*(++nPos-1)),nColG3 msGet oValSegt    VAR nValSegT    Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG4+(nLinA*(++nPos-1)),nColG3 msGet oValCobrt   VAR nValCobrT   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG4+(nLinA*(++nPos-1)),nColG3 msGet oValTott    VAR nValTotT    Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG4+(nLinA*(++nPos-1)),nColG3 msGet oValCust    VAR nValCusT    Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG4+(nLinA*(++nPos-1)),nColG3 msGet oValRent    VAR nValRenT    Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinS4-006,nColS3-002 TO nLinS4+(nLinA*(++nPos-1))+002,nColS3+104 LABEL cLabel PIXEL COLOR CLR_HBLUE OF oFolder:aDialogs[nFolder]
	
Case ZA0->ZA0_TIPOSE == "U"
	//Alison 11-07-13
	nColS3 := nColS1
	nColG3 := nColG1
	
	nColS4 := nColS2
	nColG4 := nColG2
	//--------    
	
	cLabel:=" Custos Gruas "

	nPos:=0

	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Qt.Meses"            ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Base"             ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	
	//@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Turno 1"        	) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]	
    //@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Turno 2"       	) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]	
    //@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Turno 3"        	) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
		
	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Base Total"       ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Mob."             ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Desmob."          ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Montagem"         ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Desmontagem"      ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Telescopagem"     ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Ancoragem"        ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Guind.Montagem"   ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Guind.Desmontagem") Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Operador Total"   ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Acessórios"       ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.ISS"              ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Seguro"           ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Gruas Total"      ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]

	nPos:=0
	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oPreDiaU   VAR nPreDiaU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999"    VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oValBasU   VAR nValBasU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	
	//@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oValTur1  VAR nValTur1  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	//@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oValTur2  VAR nValTur2  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	//@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oValTur3  VAR nValTur3  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
		
	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oValBasUT  VAR nValBasUT  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oValMobU   VAR nValMobU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oValDesU   VAR nValDesU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oMontagU   VAR nMontagU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oDesmonU   VAR nDesmonU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oTelescU   VAR nTelescU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oAncoraU   VAR nAncoraU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oGuiMonU   VAR nGuiMonU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oGuiDesU   VAR nGuiDesU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oOperadUT  VAR nOperadUT  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oAcessoU   VAR nAcessoU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oValIssU   VAR nValIssU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oValSegU   VAR nValSegU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oValTotU   VAR nValTotU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinS2-006,nColS3-002 TO nLinS3+(nLinA*(++nPos-1))+002,nColS3+104 LABEL cLabel PIXEL COLOR CLR_HBLUE OF oFolder:aDialogs[nFolder]

	cLabel:=" ISS e Seguro Gruas "

	nPos:=0
	@ nLinS3+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("Tp.ISS"              ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS3+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("Vr.Base ISS"         ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS3+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("%  ISS"              ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS3+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("Vr.ISS"              ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS3+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("Tp.Seguro"           ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS3+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("Vr.Base Seguro"      ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS3+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("%  Seguro"           ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS3+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("Vr.Seguro"           ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]

	nPos:=0
	@ nLinG3+(nLinA*(++nPos-1)),nColG4 msGet oDisIssU   VAR cDisIssU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder]                            VALID fCalcTotal() When fWhen(.f.)
	@ nLinG3+(nLinA*(++nPos-1)),nColG4 msGet oBasIssU   VAR nBasIssU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG3+(nLinA*(++nPos-1)),nColG4 msGet oPerIssU   VAR nPerIssU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG3+(nLinA*(++nPos-1)),nColG4 msGet oValIssU1  VAR nValIssU1  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG3+(nLinA*(++nPos-1)),nColG4 msGet oTipSegU   VAR cTipSegU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder]                            VALID fCalcTotal() When fWhen(.f.)
	@ nLinG3+(nLinA*(++nPos-1)),nColG4 msGet oBasSegU   VAR nBasSegU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG3+(nLinA*(++nPos-1)),nColG4 msGet oPerSegU   VAR nPerSegU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG3+(nLinA*(++nPos-1)),nColG4 msGet oValSegU1  VAR nValSegU1  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)

	@ nLinS3-006,nColS4-002 TO nLinS4+(nLinA*(++nPos-1))+002,nColS4+104 LABEL cLabel PIXEL COLOR CLR_HBLUE OF oFolder:aDialogs[nFolder]
Case ZA0->ZA0_TIPOSE == "P"
	//Alison 11-07-13
	nColS3 := nColS1
	nColG3 := nColG1
	
	nColS4 := nColS2
	nColG4 := nColG2
	//--------    

	cLabel:=" Custos Plataformas "

	nPos:=0

	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Qt.Base"             ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Base"             ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder] 

	//@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Turno 1"        	) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]	
    //@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Turno 2"       	) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]	
    //@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Turno 3"        	) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	
	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Base Total"       ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Mob."             ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Desmob."          ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Estadias"         ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
//	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Montagem"         ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
//	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Desmontagem"      ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
//	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Telescopagem"     ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
//	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Ancoragem"        ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
//	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Guind.Montagem"   ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
//	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Guind.Desmontagem") Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Operador Total"   ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
//	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Acessórios"       ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.ISS"              ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Seguro"           ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Plataforma Total" ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]

	nPos:=0
	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oPreDiaU   VAR nPreDiaU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999"    VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oValBasU   VAR nValBasU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	//Maickon Queiroz - Incluido para apresentação dos Turnos na Base de Calculo.
	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oValTur1  VAR nValTur1  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oValTur2  VAR nValTur2  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oValTur3  VAR nValTur3  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
		
	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oValBasUT  VAR nValBasUT  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oValMobU   VAR nValMobU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oValDesU   VAR nValDesU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oVlEst     VAR nVlEst     Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
//	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oMontagU   VAR nMontagU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
//	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oDesmonU   VAR nDesmonU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
//	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oTelescU   VAR nTelescU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
//	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oAncoraU   VAR nAncoraU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
//	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oGuiMonU   VAR nGuiMonU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
//	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oGuiDesU   VAR nGuiDesU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oOperadUT  VAR nOperadUT  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
//	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oAcessoU   VAR nAcessoU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oValIssU   VAR nValIssU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oValSegU   VAR nValSegU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oValTotU   VAR nValTotU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinS2-006,nColS3-002 TO nLinS3+(nLinA*(++nPos-1))+002,nColS3+104 LABEL cLabel PIXEL COLOR CLR_HBLUE OF oFolder:aDialogs[nFolder]

	cLabel:=" ISS e Seguro Plataformas "

	nPos:=0
	@ nLinS3+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("Tp.ISS"              ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS3+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("Vr.Base ISS"         ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS3+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("%  ISS"              ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS3+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("Vr.ISS"              ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS3+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("Tp.Seguro"           ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS3+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("Vr.Base Seguro"      ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS3+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("%  Seguro"           ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS3+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("Vr.Seguro"           ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]

	nPos:=0
	@ nLinG3+(nLinA*(++nPos-1)),nColG4 msGet oDisIssU   VAR cDisIssU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder]                            VALID fCalcTotal() When fWhen(.f.)
	@ nLinG3+(nLinA*(++nPos-1)),nColG4 msGet oBasIssU   VAR nBasIssU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG3+(nLinA*(++nPos-1)),nColG4 msGet oPerIssU   VAR nPerIssU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG3+(nLinA*(++nPos-1)),nColG4 msGet oValIssU1  VAR nValIssU1  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG3+(nLinA*(++nPos-1)),nColG4 msGet oTipSegU   VAR cTipSegU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder]                            VALID fCalcTotal() When fWhen(.f.)
	@ nLinG3+(nLinA*(++nPos-1)),nColG4 msGet oBasSegU   VAR nBasSegU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG3+(nLinA*(++nPos-1)),nColG4 msGet oPerSegU   VAR nPerSegU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG3+(nLinA*(++nPos-1)),nColG4 msGet oValSegU1  VAR nValSegU1  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)

	@ nLinS3-006,nColS4-002 TO nLinS4+(nLinA*(++nPos-1))+002,nColS4+104 LABEL cLabel PIXEL COLOR CLR_HBLUE OF oFolder:aDialogs[nFolder]
Case ZA0->ZA0_TIPOSE == "M"
	//Alison 11-07-13
	nColS3 := nColS1
	nColG3 := nColG1
	
	nColS4 := nColS2
	nColG4 := nColG2
	//--------    
	
	cLabel:=" Custos Marítima    "

	nPos:=0

	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Qt.Base"             ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Base"             ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Base Total"       ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Mob."             ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Desmob."          ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
//	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Estadias"         ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
//	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Montagem"         ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
//	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Desmontagem"      ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
//	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Telescopagem"     ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
//	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Ancoragem"        ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
//	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Guind.Montagem"   ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
//	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Guind.Desmontagem") Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
//	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Operador Total"   ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
//	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Acessórios"       ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.ISS"              ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Seguro"           ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Vr.Marítima Total"   ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]

	nPos:=0
	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oPreDiaU   VAR nPreDiaU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999"    VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oValBasU   VAR nValBasU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oValBasUT  VAR nValBasUT  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oValMobU   VAR nValMobU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oValDesU   VAR nValDesU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
//	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oVlEst     VAR nVlEst     Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
//	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oMontagU   VAR nMontagU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
//	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oDesmonU   VAR nDesmonU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
//	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oTelescU   VAR nTelescU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
//	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oAncoraU   VAR nAncoraU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
//	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oGuiMonU   VAR nGuiMonU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
//	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oGuiDesU   VAR nGuiDesU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
//	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oOperadUT  VAR nOperadUT  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
//	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oAcessoU   VAR nAcessoU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oValIssU   VAR nValIssU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oValSegU   VAR nValSegU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG3 msGet oValTotU   VAR nValTotU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinS2-006,nColS3-002 TO nLinS3+(nLinA*(++nPos-1))+002,nColS3+104 LABEL cLabel PIXEL COLOR CLR_HBLUE OF oFolder:aDialogs[nFolder]

	cLabel:=" ISS e Seguro Marítima    "

	nPos:=0
	@ nLinS3+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("Tp.ISS"              ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS3+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("Vr.Base ISS"         ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS3+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("%  ISS"              ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS3+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("Vr.ISS"              ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS3+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("Tp.Seguro"           ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS3+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("Vr.Base Seguro"      ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS3+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("%  Seguro"           ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS3+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("Vr.Seguro"           ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]

	nPos:=0
	@ nLinG3+(nLinA*(++nPos-1)),nColG4 msGet oDisIssU   VAR cDisIssU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder]                            VALID fCalcTotal() When fWhen(.f.)
	@ nLinG3+(nLinA*(++nPos-1)),nColG4 msGet oBasIssU   VAR nBasIssU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG3+(nLinA*(++nPos-1)),nColG4 msGet oPerIssU   VAR nPerIssU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG3+(nLinA*(++nPos-1)),nColG4 msGet oValIssU1  VAR nValIssU1  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG3+(nLinA*(++nPos-1)),nColG4 msGet oTipSegU   VAR cTipSegU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder]                            VALID fCalcTotal() When fWhen(.f.)
	@ nLinG3+(nLinA*(++nPos-1)),nColG4 msGet oBasSegU   VAR nBasSegU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG3+(nLinA*(++nPos-1)),nColG4 msGet oPerSegU   VAR nPerSegU   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG3+(nLinA*(++nPos-1)),nColG4 msGet oValSegU1  VAR nValSegU1  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)

	@ nLinS3-006,nColS4-002 TO nLinS4+(nLinA*(++nPos-1))+002,nColS4+104 LABEL cLabel PIXEL COLOR CLR_HBLUE OF oFolder:aDialogs[nFolder]
Case ZA0->ZA0_TIPOSE$"TLO"
	/*cLabel:=" Custos Transportes x Dia"

	nPos:=0
	@ nLinS2+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Vr.Base"           ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Vr.Base SIMULAÇÃO" ) Size 55,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Vr.Frete Total"    ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]

	nPos:=0
	@ nLinG2+(nLinA*(++nPos-1)),nColG2 msGet oVadBase   VAR nVadBase   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG2 msGet oVadBaseI  VAR nVadBaseI  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
	@ nLinG2+(nLinA*(++nPos-1)),nColG2 msGet oVadFreteS VAR nVadFreteS Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)

	@ nLinS2-006,nColS2-002 TO nLinS2+(nLinA*(++nPos-1))+002,nColS2+104 LABEL cLabel PIXEL COLOR CLR_HBLUE OF oFolder:aDialogs[nFolder]

	cLabel:=" Custos Transportes x Km"

	nPosAux:=nPos
	nLinAux:=nLinS2+(nLinA*(nPosAux))
	@ nLinS2+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Vr.Base"           ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Vr.Base SIMULAÇÃO" ) Size 55,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Vr.Frete Total"    ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]

	nPos:=nPosAux
	nLinAux:=nLinS2+(nLinA*(nPosAux))
	@ nLinG2+(nLinA*(++nPos-1)),nColG2 msGet oVakBase   VAR nVakBase   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG2 msGet oVakBaseI  VAR nVakBaseI  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
	@ nLinG2+(nLinA*(++nPos-1)),nColG2 msGet oVakFreteS VAR nVakFreteS Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	
	@ nLinAux-006,nColS2-002 TO nLinS2+(nLinA*(++nPos-1))+002,nColS2+104 LABEL cLabel PIXEL COLOR CLR_HBLUE OF oFolder:aDialogs[nFolder]*/

	cLabel:=" Vr.Frete Informado"

	nPosAux:=nPos
	nLinAux:=nLinS2+(nLinA*(nPosAux))
	@ nLinS2+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Dias Vazio"        ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Dias Carregado"    ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Km Vazio"          ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Km Carregado"      ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Tipo de Cálculo"   ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Vr.Base"           ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Vr.Base Total"     ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Vr.Tarifas"        ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Valor do Frete"    ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	//@ nLinS2+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Vr.Frete Informado") Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Valor Pretendido"  ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Valor Fechado"     ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
    
	//Verificar acesso ao usuario
	
	DbSelectArea("ZZ5")
	DbSetOrder(1)
	If !DbSeek(xFilial("ZZ5")+cCodUsr+"LOCC001FRE")// se o usuário nao tiver na SZ5, faz validação abaixo.
		_Acesso := .F.
	Else
		_Acesso := .T. 
	Endif


	nPos:=nPosAux
	nLinAux:=nLinS2+(nLinA*(nPosAux))
	@ nLinG2+(nLinA*(++nPos-1)),nColG1 msGet oValDiasV  VAR nValDiasV  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999"    VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG1 msGet oValDiasC  VAR nValDiasC  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999"    VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG1 msGet oValKmV    VAR nValKmV    Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999"    VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG1 msGet oValKmC    VAR nValKmC    Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999"    VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG1 msGet oTipoCaT   VAR cTipoCaT   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@X"               VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG1 msGet oValBase   VAR nValBase   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG1 msGet oValBaseT  VAR nValBaseT  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG1 msGet oValCuT    VAR nValCuT    Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	//@ nLinG2+(nLinA*(++nPos-1)),nColG1 msGet oValFreteS VAR nValFreteS Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG1 msGet oValFechT  VAR nValFechT  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(_Acesso)               
	@ nLinG2+(nLinA*(++nPos-1)),nColG1 msGet oValPreT   VAR nValPreT   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)               
	@ nLinG2+(nLinA*(++nPos-1)),nColG1 msGet oValFrete  VAR nValFrete  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(_Acesso)
	
	@ nLinAux-006,nColS1-002 TO nLinS1+(nLinA*(++nPos-1))+002,nColS1+104 LABEL cLabel PIXEL COLOR CLR_HBLUE OF oFolder:aDialogs[nFolder]
	
	cLabel:=" Rentabilidade"

	nPosAux:=nPos
	nLinAux:=nLinS2+(nLinA*(nPosAux))
	@ nLinS2+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Custo"		 ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Retorno Imediato"	 ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS2+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Valor Viagem"		 ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]

	nPos:=nPosAux
	nLinAux:=nLinS2+(nLinA*(nPosAux))       
	@ nLinG2+(nLinA*(++nPos-1)),nColG1 msGet oValCusTG  VAR nValCusTG  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99"  When fWhen(.f.)/*VALID fCalcTotal()*/
	@ nLinG2+(nLinA*(++nPos-1)),nColG1 msGet oValRenTG  VAR nValRenTG  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" /*VALID fCalcTotal()*/ When fWhen(.f.)
	@ nLinG2+(nLinA*(++nPos-1)),nColG1 msGet oValViagem VAR nValViagem Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
	
	@ nLinAux-006,nColS1-002 TO nLinS1+(nLinA*(++nPos-1))+002,nColS1+104 LABEL cLabel PIXEL COLOR CLR_HBLUE OF oFolder:aDialogs[nFolder]

	If ZA0->ZA0_TIPOSE$"L"
		cLabel:=" Custos Locação "

		nPos:=0
		@ nLinS3+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Prev.Base"         ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
		@ nLinS3+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Vr.Base"           ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
		@ nLinS3+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Vr.Base Total"     ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
		@ nLinS3+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Vr.Mob."           ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
		@ nLinS3+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Vr.Desmob."        ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
		@ nLinS3+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Vr.ISS"            ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
		@ nLinS3+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Vr.Seguro"         ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
		@ nLinS3+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Vr.Guindaste"      ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]

		nPos:=0
		@ nLinG3+(nLinA*(++nPos-1)),nColG2 msGet oPreDiaG   VAR nPreDiaG   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999"    VALID fCalcTotal() When fWhen(.f.)
		@ nLinG3+(nLinA*(++nPos-1)),nColG2 msGet oValBasG   VAR nValBasG   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
		@ nLinG3+(nLinA*(++nPos-1)),nColG2 msGet oValBasGT  VAR nValBasGT  Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
		@ nLinG3+(nLinA*(++nPos-1)),nColG2 msGet oValMobG   VAR nValMobG   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
		@ nLinG3+(nLinA*(++nPos-1)),nColG2 msGet oValDesG   VAR nValDesG   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
		@ nLinG3+(nLinA*(++nPos-1)),nColG2 msGet oValIssG   VAR nValIssG   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
		@ nLinG3+(nLinA*(++nPos-1)),nColG2 msGet oValSegG   VAR nValSegG   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
		@ nLinG3+(nLinA*(++nPos-1)),nColG2 msGet oValTotG   VAR nValTotG   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)

		@ nLinS3-006,nColS2-002 TO nLinS2+(nLinA*(++nPos-1))+002,nColS2+104 LABEL cLabel PIXEL COLOR CLR_HBLUE OF oFolder:aDialogs[nFolder]
	EndIf

	If ZA0->ZA0_TIPOSE$"L"
		nLinS9:=nLinS3
		nLinG9:=nLinG3
		nColS9:=nColS3
		nColG9:=nColG3
	Else
		nLinS9:=nLinS2
		nLinG9:=nLinG2
		nColS9:=nColS2
		nColG9:=nColG2
	EndIf 

	cLabel:=" Dimensões do Conj.Transportador"

	nPos:=0

	nPosAux:=nPos
	nLinAux:=nLinS9+(nLinA*(nPosAux))
	@ nLinS9+(nLinA*(++nPos-1)),nColS9+000 Say OemToAnsi("Descrição"         ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	nPos++
	nPos++
	nPos++
	nPos++
	@ nLinS9+(nLinA*(++nPos-1)),nColS9+000 Say OemToAnsi("Comprimento"       ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS9+(nLinA*(  nPos-1)),nColS9+052 Say OemToAnsi("Largura"           ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS9+(nLinA*(  nPos-1)),nColS9+104 Say OemToAnsi("Altura"            ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS9+(nLinA*(  nPos-1)),nColS9+156 Say OemToAnsi("Peso"              ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]

	nPos:=nPosAux
	nLinAux:=nLinS9+(nLinA*(nPosAux))
	@ nLinG9+(nLinA*(++nPos-1)),nColG9-020   Get o2Desc     VAR c2Desc     Size 165,48 PIXEL OF oFolder:aDialogs[nFolder] MEMO                       VALID fCalcTotal() When fWhen(.f.)
	nPos++
	nPos++
	nPos++
	nPos++

	nPos++
	@ nLinG9+(nLinA*(++nPos-1)),nColS9+000 msGet o2Comp     VAR n2Comp     Size 045,08 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 9,999.99"    VALID fCalcTotal() When fWhen(.f.)
	@ nLinG9+(nLinA*(  nPos-1)),nColS9+052 msGet o2Larg     VAR n2Larg     Size 045,08 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 9,999.99"    VALID fCalcTotal() When fWhen(.f.)
	@ nLinG9+(nLinA*(  nPos-1)),nColS9+104 msGet o2Altu     VAR n2Altu     Size 045,08 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 9,999.99"    VALID fCalcTotal() When fWhen(.f.)
	@ nLinG9+(nLinA*(  nPos-1)),nColS9+156 msGet o2Peso     VAR n2Peso     Size 045,08 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999.999"  VALID fCalcTotal() When fWhen(.f.)

	@ nLinAux-006,nColS9-002 TO nLinS9+(nLinA*(++nPos-1))+002,nColS9+104+100 LABEL cLabel PIXEL COLOR CLR_HBLUE OF oFolder:aDialogs[nFolder]

	cLabel:=" Dimensões da Carga"

	nPosAux:=nPos
	nLinAux:=nLinS9+(nLinA*(nPosAux))
	@ nLinS9+(nLinA*(++nPos-1)),nColS9+000 Say OemToAnsi("Descrição"         ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS9+(nLinA*(++nPos-1)),nColS9+000 Say OemToAnsi("Comprimento"       ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS9+(nLinA*(  nPos-1)),nColS9+052 Say OemToAnsi("Largura"           ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS9+(nLinA*(  nPos-1)),nColS9+104 Say OemToAnsi("Altura"            ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS9+(nLinA*(  nPos-1)),nColS9+156 Say OemToAnsi("Peso"              ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]

	nPos:=nPosAux
	nLinAux:=nLinS9+(nLinA*(nPosAux))
	@ nLinG9+(nLinA*(++nPos-1)),nColG9-020 msGet o1Desc     VAR c1Desc     Size 165,08 PIXEL OF oFolder:aDialogs[nFolder]                            VALID fCalcTotal() When fWhen(.f.)
	nPos++
	@ nLinG9+(nLinA*(++nPos-1)),nColS9+000 msGet o1Comp     VAR n1Comp     Size 045,08 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 9,999.99"    VALID fCalcTotal() When fWhen(.f.)
	@ nLinG9+(nLinA*(  nPos-1)),nColS9+052 msGet o1Larg     VAR n1Larg     Size 045,08 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 9,999.99"    VALID fCalcTotal() When fWhen(.f.)
	@ nLinG9+(nLinA*(  nPos-1)),nColS9+104 msGet o1Altu     VAR n1Altu     Size 045,08 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 9,999.99"    VALID fCalcTotal() When fWhen(.f.)
	@ nLinG9+(nLinA*(  nPos-1)),nColS9+156 msGet o1Peso     VAR n1Peso     Size 045,08 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999.999"  VALID fCalcTotal() When fWhen(.f.)
	@ nLinAux-006,nColS9-002 TO nLinS9+(nLinA*(++nPos-1))+002,nColS9+104+100 LABEL cLabel PIXEL COLOR CLR_HBLUE OF oFolder:aDialogs[nFolder]

	cLabel:=" Dimensões Totais"

	nPosAux:=nPos
	nLinAux:=nLinS9+(nLinA*(nPosAux))
	@ nLinS9+(nLinA*(++nPos-1)),nColS9+000 Say OemToAnsi("Comprimento"       ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS9+(nLinA*(  nPos-1)),nColS9+052 Say OemToAnsi("Largura"           ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS9+(nLinA*(  nPos-1)),nColS9+104 Say OemToAnsi("Altura"            ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS9+(nLinA*(  nPos-1)),nColS9+156 Say OemToAnsi("Peso"              ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]

	nPos:=nPosAux
	nLinAux:=nLinS9+(nLinA*(nPosAux))
	nPos++
	@ nLinG9+(nLinA*(++nPos-1)),nColS9+000 msGet o3Comp     VAR n3Comp     Size 045,08 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 9,999.99"    VALID fCalcTotal() //When fWhen(.f.)
	@ nLinG9+(nLinA*(  nPos-1)),nColS9+052 msGet o3Larg     VAR n3Larg     Size 045,08 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 9,999.99"    VALID fCalcTotal() //When fWhen(.f.)
	@ nLinG9+(nLinA*(  nPos-1)),nColS9+104 msGet o3Altu     VAR n3Altu     Size 045,08 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 9,999.99"    VALID fCalcTotal() //When fWhen(.f.)
	@ nLinG9+(nLinA*(  nPos-1)),nColS9+156 msGet o3Peso     VAR n3Peso     Size 045,08 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999.999"  VALID fCalcTotal() //When fWhen(.f.)
	
	@ nLinAux-006,nColS9-002 TO nLinS9+(nLinA*(++nPos-1))+002,nColS9+104+100 LABEL cLabel PIXEL COLOR CLR_HBLUE OF oFolder:aDialogs[nFolder]
	
	
	
	
	/*cLabel:=" Despesas"

	nPosAux:=nPos
	nLinAux:=nLinS9+(nLinA*(nPosAux))
	@ nLinS9+(nLinA*(++nPos-1)),nColS9+000 Say OemToAnsi("Instrumentação"  ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS9+(nLinA*(  nPos-1)),nColS9+052 Say OemToAnsi("Balse"           ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS9+(nLinA*(  nPos-1)),nColS9+104 Say OemToAnsi("Despachante DTA" ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS9+(nLinA*(  nPos-1)),nColS9+156 Say OemToAnsi("Montagem/Desmont") Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
	nPos += 1
	@ nLinS9+(nLinA*(++nPos-1)),nColS9+000 Say OemToAnsi("Car Apoio/Guindauto") Size 60,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS9+(nLinA*(  nPos-1)),nColS9+052 Say OemToAnsi("Cavalo Extra"       ) Size 60,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS9+(nLinA*(  nPos-1)),nColS9+104 Say OemToAnsi("Mob Encarretado"    ) Size 60,8 PIXEL OF oFolder:aDialogs[nFolder]
	@ nLinS9+(nLinA*(  nPos-1)),nColS9+156 Say OemToAnsi("DesMob Encarretado" ) Size 60,8 PIXEL OF oFolder:aDialogs[nFolder]

	nPos:=nPosAux
	nLinAux:=nLinS9+(nLinA*(nPosAux))
	nPos++
	@ nLinG9+(nLinA*(++nPos-1)),nColS9+000 msGet oInstru  VAR nInstru    Size 045,08 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 99999999.99" VALID fCalcTotal() When fWhen(.t.)
	@ nLinG9+(nLinA*(  nPos-1)),nColS9+052 msGet oBalsa   VAR nBalsa     Size 045,08 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 99999999.99" VALID fCalcTotal() When fWhen(.t.)
	@ nLinG9+(nLinA*(  nPos-1)),nColS9+104 msGet oDesDTA  VAR nDesDTA    Size 045,08 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 99999999.99" VALID fCalcTotal() When fWhen(.t.)
	@ nLinG9+(nLinA*(  nPos-1)),nColS9+156 msGet oMonDes  VAR nMonDes    Size 045,08 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 99999999.99" VALID fCalcTotal() When fWhen(.t.)
	nPos += 1
	@ nLinG9+(nLinA*(++nPos-1)),nColS9+000 msGet oApoGui  VAR nApoGui    Size 045,08 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 99999999.99" VALID fCalcTotal() When fWhen(.t.)
	@ nLinG9+(nLinA*(  nPos-1)),nColS9+052 msGet oCavExt  VAR nCavExt    Size 045,08 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 99999999.99" VALID fCalcTotal() When fWhen(.t.)
	@ nLinG9+(nLinA*(  nPos-1)),nColS9+104 msGet oMobEnc  VAR nMobEnc    Size 045,08 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 99999999.99" VALID fCalcTotal() When fWhen(.t.)
	@ nLinG9+(nLinA*(  nPos-1)),nColS9+156 msGet oDmoEnc  VAR nDmoEnc    Size 045,08 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 99999999.99" VALID fCalcTotal() When fWhen(.t.)

	@ nLinAux-006,nColS9-002 TO nLinS9+(nLinA*(++nPos-1))+002,nColS9+104+100 LABEL cLabel PIXEL COLOR CLR_HBLUE OF oFolder:aDialogs[nFolder]*/

EndCase

//@ nLin2-015,Int((nCol2-nCol1)/2)-180 BUTTON oButtCalc Prompt "Calcula" SIZE 60,15 ACTION fCalcItem() OF oFolder:aDialogs[nFolder] PIXEL
@ nLin2-015,iif(ZA0->ZA0_TIPOSE $ "G|R|I",nColS1,nColS2)-002 BUTTON oButtCalc Prompt "Calcula" SIZE 60,15 ACTION fCalcItem() OF oFolder:aDialogs[nFolder] PIXEL


Return

********************************************************************************
Static Function fDispGuin
********************************************************************************
If !ValType(oPrediaG)=="O"  //Se o objeto já foi criado
	Return
EndIf

oPreDiaG:Refresh()
oValBasG:Refresh()
oValBasGT:Refresh()
oValMobG:Refresh()
oValDesG:Refresh()
oValIssG:Refresh()
oValSegG:Refresh()
oValTotG:Refresh()
oValRenTG:Refresh()

Return

********************************************************************************
Static Function fDispTran
********************************************************************************
If !ValType(oValDiasV)=="O"  //Se o objeto já foi criado
	Return
EndIf

oValDiasV:Refresh()
oValDiasC:Refresh()
oValKmV:Refresh()
oValKmC:Refresh()
oTipoCaT:Refresh()
oValBase:Refresh()
oValBaseT:Refresh()
oValCuT:Refresh()
//oValFreteS:Refresh()
oValRenTG:Refresh()

//oVadBase:Refresh()
//oVadBaseI:Refresh()
//oVadFreteS:Refresh()

//oVakBase:Refresh()
//oVakBaseI:Refresh()
//oVakFreteS:Refresh()

Return

********************************************************************************
User Function MudaCusB  //Muda o Browse
********************************************************************************
Local lRet:=.T.
Local cCampo,cCampoGet

fObra()

If oDlgCus:nAt>Len(oDlgCus:aCols) ; oDlgCus:nAt:=Len(oDlgCus:aCols) ; EndIf

oDlgCus:aCols[oDlgCus:nAt][Ascan(oDlgCus:aHeader,{|x|AllTrim(x[2])=="ZA9_OBRA"  })]:=cObra
oDlgCus:aCols[oDlgCus:nAt][Ascan(oDlgCus:aHeader,{|x|AllTrim(x[2])=="ZA9_SEQTRA"})]:=cSeqTra
oDlgCus:aCols[oDlgCus:nAt][Ascan(oDlgCus:aHeader,{|x|AllTrim(x[2])=="ZA9_SEQGUI"})]:=cSeqGui
oDlgCus:aCols[oDlgCus:nAt][Ascan(oDlgCus:aHeader,{|x|AllTrim(x[2])=="ZA9_SEQGRU"})]:=cSeqGru
oDlgCus:aCols[oDlgCus:nAt][Ascan(oDlgCus:aHeader,{|x|AllTrim(x[2])=="ZA9_SEQCAR"})]:=cSeqCar
oDlgCus:oBrowse:Refresh()

Return lRet

********************************************************************************
Static Function fSalvarCus(cAlias,aHeader,aCols)  
// Cus
********************************************************************************
Local nPos,aGravados:={}  //Gravados

// Acumula o aCols corrente no aCols com todos os registros
If oFolder:nOption==nFolderCus
	fTrazMem(.f.)  //.t.=Atualiza variáveis/.f.=Atualiza oDlgCus:aCols
	fAcumuCus()
EndIf
aCols:=Aclone(oCus_Cols)

dbSelectArea(cAlias)  
dbSetOrder(1)  

If nOpc==5  //5=Exclui
Else
	For nPos:=1 to Len(aCols)
		cObra  :=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZA9_OBRA"  })]
		cSeqTra:=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZA9_SEQTRA"})]
		cSeqGui:=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZA9_SEQGUI"})]
		cSeqGru:=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZA9_SEQGRU"})]
		cSeqCar:=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZA9_SEQCAR"})]
		If !aCols[nPos,Len(aHeader)+1] .and. !Empty(cObra) .and. !Empty(cSeqTra+cSeqGui+cSeqGru+cSeqCar)  //!Deleted()
			dbSeek(xFILIAL(cAlias)+cProjet+cObra+cSeqTra+cSeqGui+cSeqGru+cSeqCar)
			If Eof()
				RecLock(cAlias,.T.)
			Else
				RecLock(cAlias,.F.)
			EndIf
			fGravaTudo(cAlias,aHeader,aCols[nPos])  //Grava todos os campos do aCols
			(cAlias)->ZA9_FILIAL:=xFILIAL(cAlias)
			(cAlias)->ZA9_PROJET:=cProjet
			(cAlias)->ZA9_OBRA	:=cObra
			(cAlias)->ZA9_SEQTRA:=cSeqTra
			(cAlias)->ZA9_SEQGUI:=cSeqGui
			(cAlias)->ZA9_SEQGRU:=cSeqGru
			(cAlias)->ZA9_SEQCAR:=cSeqCar
			AAdd(aGravados,Recno())  //Gravados
			MsUnLock()
	     Endif
	Next
EndIf

// Exclui os registros alterados
dbSeek(xFILIAL(cAlias)+cProjet)
While !Eof() .and. ZA9_FILIAL+ZA9_PROJET==xFILIAL(cAlias)+cProjet
	If Ascan(aGravados,{|x|x==Recno()})==0
		RecLock(cAlias,.F.)
		dbDelete()
		MsUnLock()
	EndIf
	dbSkip()
End

Return

********************************************************************************
Static Function fFolderCuT(nFolder)  
// Custos Total
********************************************************************************
Local nLinS1,nColS1,nLinG1,nColG1

nLinS1:=008
nColS1:=004
nLinG1:=007
nColG1:=061

nLinA :=010
nPos  :=0

cLabel:=" Total dos Custos "

nPos:=0
@ nLinS1+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Total Transporte" ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS1+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Total Guindaste"  ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS1+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("Total Geral"      ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]

nPos:=0
@ nLinG1+(nLinA*(++nPos-1)),nColG1 msGet oValTotT   VAR nValTotT   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
@ nLinG1+(nLinA*(++nPos-1)),nColG1 msGet oValTotG   VAR nValTotG   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)
@ nLinG1+(nLinA*(++nPos-1)),nColG1 msGet oValTotX   VAR nValTotX   Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen(.f.)

@ nLinS1-006,nColS1-002 TO nLinS1+(nLinA*(++nPos-1))+002,nColS1+104 LABEL cLabel PIXEL COLOR CLR_HBLUE OF oFolder:aDialogs[nFolder]

Return

********************************************************************************
Static Function fZeraTudo
********************************************************************************
Local lRet:=.t.

nValLsrM:=nVl2LsrM:=0
nValPreM:=nVl2PreM:=0
nValPrfM:=nVl2PrfM:=0
nValTapM:=nVl2TapM:=0
nValTuvM:=nVl2TuvM:=0
nValTurM:=nVl2TurM:=0
nValEscM:=nVl2EscM:=0
nValPedM:=nVl2PedM:=0
nValInvM:=nVl2InvM:=0
nValAleM:=nVl2AleM:=0

nValIptM:=nVl2IptM:=0
nValAcoM:=nVl2AcoM:=0
nValCetM:=nVl2CetM:=0
nValSemM:=nVl2SemM:=0
nValTvaM:=nVl2TvaM:=0
nValTelM:=nVl2TelM:=0
nValOutM:=nVl2OutM:=0
nValConM:=nVl2ConM:=0
nValAdiM:=nVl2AdiM:=0
nValAuxM:=nVl2AuxM:=0
nValCusM:=nVl2CusM:=0

nValLsrD:=nVl2LsrD:=0
nValPreD:=nVl2PreD:=0
nValPrfD:=nVl2PrfD:=0
nValTapD:=nVl2TapD:=0
nValTuvD:=nVl2TuvD:=0
nValTurD:=nVl2TurD:=0
nValEscD:=nVl2EscD:=0
nValPedD:=nVl2PedD:=0
nValInvD:=nVl2InvD:=0
nValAleD:=nVl2AleD:=0

nValIptD:=nVl2IptD:=0
nValAcoD:=nVl2AcoD:=0
nValCetD:=nVl2CetD:=0
nValSemD:=nVl2SemD:=0
nValTvaD:=nVl2TvaD:=0
nValTelD:=nVl2TelD:=0
nValOutD:=nVl2OutD:=0
nValConD:=nVl2ConD:=0
nValAdiD:=nVl2AdiD:=0
nValAuxD:=nVl2AuxD:=0
nValCusD:=nVl2CusD:=0

nValLsr :=nVl2Lsr :=0
nValPre :=nVl2Pre :=0
nValPrf :=nVl2Prf :=0
nValTap :=nVl2Tap :=0
nValTuv :=nVl2Tuv :=0
nValTur :=nVl2Tur :=0
nValEsc :=nVl2Esc :=0
nValPed :=nVl2Ped :=0
nValInv :=nVl2Inv :=0
nValAle :=nVl2Ale :=0

nValIpt :=nVl2Ipt :=0
nValAco :=nVl2Aco :=0
nValCet :=nVl2Cet :=0
nValSem :=nVl2Sem :=0
nValTva :=nVl2Tva :=0
nValTel :=nVl2Tel :=0
nValOut :=nVl2Out :=0
nValCon :=nVl2Con :=0
nValAdi :=nVl2Adi :=0
nValAux :=nVl2Aux :=0
nValCus :=nVl2Cus :=0

nValVis :=0
nValTcp :=0

nValGui :=0
nValCuG :=0

nValCuT   :=0
nValDiasV :=0
nValDiasC :=0
nValBase  :=0
nValBaseT :=0
nValFreteS:=0

nValBaseI :=0
nVadBaseI :=0
nVakBaseI :=0

nVadCuT   :=0
nVadDiasV :=0
nVadDiasC :=0
nVadBase  :=0
nVadBaseT :=0
nVadFreteS:=0

nVakCuT   :=0
nVakDiasV :=0
nVakDiasC :=0
nVakBase  :=0
nVakBaseT :=0
nVakFreteS:=0

nValFrete :=0  
nValPreT  :=0	

nValAqu :=0
nPerRes :=0
nValRes :=0
nValUti :=0
nValDis :=0
nValEfe :=0
nValJur :=0
nPerSeg :=0

nValLic:=0
nValLav:=0
nFreLav:=0
nValCom:=0
nQtdCom:=0
nValLub:=0
nIntLub:=0
nValPne:=0
nPrePne:=0
nVidPne:=0
nValPec:=0

nValRemFix:=0
nPerResFix:=0
nValResFix:=0
nValCasFix:=0
nValLicFix:=0
nValSegFix:=0

nValComFix:=0
nValLubFix:=0
nValPneFix:=0
nValLavFix:=0

nValIssBDI:=0
nValPisBDI:=0
nValAdmBDI:=0
nValLucBDI:=0
nValSegBDI:=0
nValJurBDI:=0
nValCpmBDI:=0
nValCslBDI:=0
nValIrrBDI:=0
nValTotBDI:=0

nPerIssBDI:=0
nPerPisBDI:=0
nPerAdmBDI:=0
nPerLucBDI:=0
nPerSegBDI:=0
nPerJurBDI:=0
nPerCpmBDI:=0
nPerCslBDI:=0
nPerIrrBDI:=0
nPerTotBDI:=0

nValTotT:=0
nValTotG:=0
nValTotX:=0

nPreDiaG :=0

nValTur1 :=0
nValTur2 :=0
nValTur3 :=0

nValBasG :=0
nValBasGT:=0
nValMobG :=0
nValDesG :=0
nValTAcG :=0
nValIssG :=0
nValSegG :=0
nValTotG :=0
nMinDia	 :=0
nMinMes	 :=0

nVamMobG :=0
nVamDesG :=0
nVamIssG :=0
nVamSegG :=0
nVamTotG :=0

nPreDiaU :=0
nValBasU :=0
nValBasUT:=0
nValMobU :=0
nValDesU :=0
nValChumb:=0
nVlEst	 :=0
nMontagU :=0
nDesmonU :=0
nTelescU :=0
nAncoraU :=0
nGuiMonU :=0
nGuiDesU :=0
nOperadU :=0
nOperadUT:=0
nAcessoU :=0

cDisIssU :=Space(01)

cTipIssU :=Space(01)
nPerIssU :=0
nBasIssU := nBaseU := 0
nValIssU :=0
cTipSegU :=Space(01)
nPerSegU :=0
nBasSegU :=0
nValSegU :=0
nValTotU :=0

nValCusIG:=0
n3Comp:=0
n3Larg:=0
n3Altu:=0
n3Peso:=0

Return(lRet)

********************************************************************************
Static Function fTrazMem(lTraz)
********************************************************************************
Local nPos,aTabAux,cCampo,cVar
Local lRet:=.t.

aTabAux:={}

//TARIFAS PRINCIPAIS
/*AAdd(aTabAux,{"nValEsc"   ,"ZA9_VALESC"})
AAdd(aTabAux,{"nValPre"   ,"ZA9_VALPRE"})
AAdd(aTabAux,{"nValPrf"   ,"ZA9_VALPRF"})
AAdd(aTabAux,{"nValTap"   ,"ZA9_VALTAP"})
AAdd(aTabAux,{"nValTuv"   ,"ZA9_VALTUV"})
AAdd(aTabAux,{"nValTur"   ,"ZA9_VALTUR"})
AAdd(aTabAux,{"nValPed"   ,"ZA9_VALPED"})
AAdd(aTabAux,{"nValInv"   ,"ZA9_VALINV"})

AAdd(aTabAux,{"nValIpt"   ,"ZA9_VALIPT"})
AAdd(aTabAux,{"nValAco"   ,"ZA9_VALACO"})
//AAdd(aTabAux,{"nValTra"   ,"ZA9_VALTRA"})
AAdd(aTabAux,{"nValCet"   ,"ZA9_VALCET"})
AAdd(aTabAux,{"nValSem"   ,"ZA9_VALSEM"})
AAdd(aTabAux,{"nValTva"   ,"ZA9_VALTVA"})
AAdd(aTabAux,{"nValTel"   ,"ZA9_VALTEL"})
AAdd(aTabAux,{"nValOut"   ,"ZA9_VALOUT"})
AAdd(aTabAux,{"nValCon"   ,"ZA9_VALCON"})
AAdd(aTabAux,{"nValAdi"   ,"ZA9_VALADI"})
AAdd(aTabAux,{"nValAux"   ,"ZA9_VALAUX"})

AAdd(aTabAux,{"nValLsr"   ,"ZA9_VALLSR"})
AAdd(aTabAux,{"nValTcp"   ,"ZA9_VALTCP"})
AAdd(aTabAux,{"nValVis"   ,"ZA9_VALVIS"})

AAdd(aTabAux,{"nValMob"   ,"ZA9_VALMOB"})
AAdd(aTabAux,{"nValDes"   ,"ZA9_DESMOB"})
AAdd(aTabAux,{"nValSeg"   ,"ZA9_SEGGUI"})
AAdd(aTabAux,{"nValGui"   ,"ZA9_VALGUI"})
AAdd(aTabAux,{"nValEqu"   ,"ZA9_VALEQU"})*/

AAdd(aTabAux,{"nValLsr"   ,"ZA9_VALLSR"})
AAdd(aTabAux,{"nValPre"   ,"ZA9_VALPRE"})
AAdd(aTabAux,{"nValPrf"   ,"ZA9_VALPRF"})
AAdd(aTabAux,{"nValTap"   ,"ZA9_VALTAP"})
AAdd(aTabAux,{"nValTuv"   ,"ZA9_VALTUV"})
AAdd(aTabAux,{"nValTur"   ,"ZA9_VALTUR"})
AAdd(aTabAux,{"nValEsc"   ,"ZA9_VALESC"})
AAdd(aTabAux,{"nValPed"   ,"ZA9_VALPED"})
AAdd(aTabAux,{"nValInv"   ,"ZA9_VALINV"})

AAdd(aTabAux,{"nValIpt"   ,"ZA9_VALIPT"})
AAdd(aTabAux,{"nValAco"   ,"ZA9_VALACO"})
AAdd(aTabAux,{"nValCet"   ,"ZA9_VALCET"})
AAdd(aTabAux,{"nValSem"   ,"ZA9_VALSEM"})
AAdd(aTabAux,{"nValTva"   ,"ZA9_VALTVA"})
AAdd(aTabAux,{"nValTel"   ,"ZA9_VALTEL"})
AAdd(aTabAux,{"nValOut"   ,"ZA9_VALOUT"})
AAdd(aTabAux,{"nValCon"   ,"ZA9_VALCON"})
AAdd(aTabAux,{"nValAdi"   ,"ZA9_VALADI"})
AAdd(aTabAux,{"nValAux"   ,"ZA9_VALAUX"})

AAdd(aTabAux,{"nVl2Lsr"   ,"ZA9_VL2LSR"})
AAdd(aTabAux,{"nVl2Pre"   ,"ZA9_VL2PRE"})
AAdd(aTabAux,{"nVl2Prf"   ,"ZA9_VL2PRF"})
AAdd(aTabAux,{"nVl2Tap"   ,"ZA9_VL2TAP"})
AAdd(aTabAux,{"nVl2Tuv"   ,"ZA9_VL2TUV"})
AAdd(aTabAux,{"nVl2Tur"   ,"ZA9_VL2TUR"})
AAdd(aTabAux,{"nVl2Esc"   ,"ZA9_VL2ESC"})
AAdd(aTabAux,{"nVl2Ped"   ,"ZA9_VL2PED"})
AAdd(aTabAux,{"nVl2Inv"   ,"ZA9_VL2INV"})

AAdd(aTabAux,{"nVl2Ipt"   ,"ZA9_VL2IPT"})
AAdd(aTabAux,{"nVl2Aco"   ,"ZA9_VL2ACO"})
AAdd(aTabAux,{"nVl2Cet"   ,"ZA9_VL2CET"})
AAdd(aTabAux,{"nVl2Sem"   ,"ZA9_VL2SEM"})
AAdd(aTabAux,{"nVl2Tva"   ,"ZA9_VL2TVA"})
AAdd(aTabAux,{"nVl2Tel"   ,"ZA9_VL2TEL"})
AAdd(aTabAux,{"nVl2Out"   ,"ZA9_VL2OUT"})
AAdd(aTabAux,{"nVl2Con"   ,"ZA9_VL2CON"})
AAdd(aTabAux,{"nVl2Adi"   ,"ZA9_VL2ADI"})
AAdd(aTabAux,{"nVl2Aux"   ,"ZA9_VL2AUX"})

AAdd(aTabAux,{"nValTcp"   ,"ZA9_VALTCP"})
AAdd(aTabAux,{"nValVis"   ,"ZA9_VALVIS"})

AAdd(aTabAux,{"nValMob"   ,"ZA9_VALMOB"})
AAdd(aTabAux,{"nValDes"   ,"ZA9_DESMOB"})
AAdd(aTabAux,{"nValSeg"   ,"ZA9_SEGGUI"})
AAdd(aTabAux,{"nValGui"   ,"ZA9_VALGUI"})
AAdd(aTabAux,{"nValEqu"   ,"ZA9_VALEQU"})

//BDI
AAdd(aTabAux,{"nValAqu"   ,"ZA9_AQUISI"})
AAdd(aTabAux,{"nPerRes"   ,"ZA9_PERRSD"})
AAdd(aTabAux,{"nValRes"   ,"ZA9_VALRSD"})
AAdd(aTabAux,{"nValUti"   ,"ZA9_VIDAUT"})
AAdd(aTabAux,{"nValDis"   ,"ZA9_DISPVE"})
AAdd(aTabAux,{"nValEfe"   ,"ZA9_VIDAEF"})
AAdd(aTabAux,{"nValJur"   ,"ZA9_JUROSM"})
AAdd(aTabAux,{"nPerSeg"   ,"ZA9_SEGURP"})
AAdd(aTabAux,{"nValLic"   ,"ZA9_LICENP"})
AAdd(aTabAux,{"nValLav"   ,"ZA9_LAVAGE"})
AAdd(aTabAux,{"nFreLav"   ,"ZA9_FREQLA"})
AAdd(aTabAux,{"nValCom"   ,"ZA9_COMBUS"})
AAdd(aTabAux,{"nQtdCom"   ,"ZA9_QTDCOM"})
AAdd(aTabAux,{"nValLub"   ,"ZA9_LUBRIF"})
AAdd(aTabAux,{"nIntLub"   ,"ZA9_INTLUB"})
AAdd(aTabAux,{"nValPne"   ,"ZA9_QTDPNE"})
AAdd(aTabAux,{"nPrePne"   ,"ZA9_PREPNE"})
AAdd(aTabAux,{"nVidPne"   ,"ZA9_VIDAPN"})
AAdd(aTabAux,{"nValPec"   ,"ZA9_CONSER"})

// Custo Fixo
AAdd(aTabAux,{"nValRemFix","ZA9_REMCAP"})
AAdd(aTabAux,{"nPerResFix","ZA9_PERRES"})
AAdd(aTabAux,{"nValResFix","ZA9_VALRES"})
AAdd(aTabAux,{"nValCasFix","ZA9_CASCO" })
AAdd(aTabAux,{"nValLicFix","ZA9_LICENC"})
AAdd(aTabAux,{"nValSegFix","ZA9_SEGURO"})

// Custo Variável
AAdd(aTabAux,{"nValComFix","ZA9_VALCOM"})
AAdd(aTabAux,{"nValLubFix","ZA9_VALLUB"})
AAdd(aTabAux,{"nValPneFix","ZA9_VALPNE"})
AAdd(aTabAux,{"nValLavFix","ZA9_VALLAV"})

//  Tarifas
AAdd(aTabAux,{"nPerIssBDI","ZA9_PERISS"})
AAdd(aTabAux,{"nPerPisBDI","ZA9_PERPIS"})
AAdd(aTabAux,{"nPerAdmBDI","ZA9_PERADM"})
AAdd(aTabAux,{"nPerLucBDI","ZA9_PERLUC"})
AAdd(aTabAux,{"nPerSegBDI","ZA9_PERSEG"})
AAdd(aTabAux,{"nPerJurBDI","ZA9_PERJUR"})
AAdd(aTabAux,{"nPerCpmBDI","ZA9_PERCPM"})
AAdd(aTabAux,{"nPerCslBDI","ZA9_PERCSL"})
AAdd(aTabAux,{"nPerIrrBDI","ZA9_PERIRR"})
AAdd(aTabAux,{"nPerTotBDI","ZA9_PERTOT"})

AAdd(aTabAux,{"nValIssBDI","ZA9_VALISS"})
AAdd(aTabAux,{"nValPisBDI","ZA9_VALPIS"})
AAdd(aTabAux,{"nValAdmBDI","ZA9_VALADM"})
AAdd(aTabAux,{"nValLucBDI","ZA9_VALLUC"})
AAdd(aTabAux,{"nValSegBDI","ZA9_VALSEG"})
AAdd(aTabAux,{"nValJurBDI","ZA9_VALJUR"})
AAdd(aTabAux,{"nValCpmBDI","ZA9_VALCPM"})
AAdd(aTabAux,{"nValCslBDI","ZA9_VALCSL"})
AAdd(aTabAux,{"nValIrrBDI","ZA9_VALIRR"})
AAdd(aTabAux,{"nValTotBDI","ZA9_VALTOT"})

AAdd(aTabAux,{"nValFrete" ,"ZA9_VRFRET"})

//Alison 25/11/2013 ======
AAdd(aTabAux,{"n3Comp"    ,"ZA9_COMPT" })
AAdd(aTabAux,{"n3Larg"    ,"ZA9_LARGT" })
AAdd(aTabAux,{"n3Altu"    ,"ZA9_ALTUT" })
AAdd(aTabAux,{"n3Peso" 	  ,"ZA9_PESOT" })
AAdd(aTabAux,{"nValFechT" ,"ZA9_VALFEC"})//valor fechado
//========================

// Despesas diversas - base de cálculo - Cristiam Rossi em 25/04/2011
AAdd(aTabAux,{"nInstru" ,"ZA9_INSTRU"})
AAdd(aTabAux,{"nBalsa"  ,"ZA9_BALSA"})
AAdd(aTabAux,{"nDesDTA" ,"ZA9_DESDTA"})
AAdd(aTabAux,{"nMonDes" ,"ZA9_MONDES"})
AAdd(aTabAux,{"nApoGui" ,"ZA9_APOGUI"})
AAdd(aTabAux,{"nCavExt" ,"ZA9_CAVEXT"})
AAdd(aTabAux,{"nMobEnc" ,"ZA9_MODENC"})
AAdd(aTabAux,{"nDmoEnc" ,"ZA9_DMOENC"})

For nPos:=1 to Len(aTabAux)
	cVar  :=aTabAux[nPos,1]
	cCampo:=aTabAux[nPos,2]
	If .t.//Ascan(oDlgCus:aHeader,{|x|AllTrim(x[2])==cCampo})>0
		If lTraz
			&cVar:=oDlgCus:aCols[oDlgCus:nAt][Ascan(oDlgCus:aHeader,{|x|AllTrim(x[2])==cCampo})]
		Else
			oDlgCus:aCols[oDlgCus:nAt][Ascan(oDlgCus:aHeader,{|x|AllTrim(x[2])==cCampo})]:=&cVar
		EndIf
	EndIf
Next
Return(lRet)

********************************************************************************
Static Function fTrazZA9(cAlias,aHeader,lTraz)
********************************************************************************
Local nPos,cCampo,cVar
Local lRet:=.t.

For nPos:=1 to Len(aHeader)
	cCampo:=AllTrim(aHeader[nPos,2])
	cVar  :="M->"+cCampo
	If lTraz
		&cVar:=(cAlias)->(&cCampo)
	Else
		(cAlias)->(&cCampo):=&cVar
	EndIf
Next                                        

Return(lRet)

********************************************************************************
Static Function fCalcTotal()
********************************************************************************
// Calculo para Custo Fixo
nValRemFix:=0
nValResFix:=0
nValCasFix:=0
nValLicFix:=0

nValRes   :=(((nValAqu*nPerRes)/100)/01)

nValRemFix:=(((nValAqu-nValRes)*nValJur)/100)

nValResFix:=(((nValAqu*nPerRes)/100)/01)
nValCasFix:=(((nValAqu*nPerSeg)/100)/12)
nValLicFix:=(((nValAqu*nValLic)/100)/12)

// Calculo para Custo Variável
nValComFix:=0
nValLubFix:=0
nValPneFix:=0
nValLavFix:=0

nValComFix:=(nQtdCom*nValCom*nValEfe)
nValLubFix:=((nValLub*nValEfe)/nValDis)
nValPneFix:=((nValPne*nPrePne)/(nVidPne))*nValEfe
nValLavFix:=((nValLav*nFreLav*nValEfe)/nValDis)
                             
// Calculo para Totalizadores
nTotCusFix:=0
nTotCusVar:=0
nTotCusMan:=0
nTotCusMao:=0
nTotHorPar:=0
nTotValHor:=0
nMaoObra  :=100.00  //recebe o valor do grid

nTotCusFix:=nValRemFix+nValResFix+nValCasFix+nValLicFix+nValSegFix
nTotCusVar:=nValComFix+nValLubFix+nValPneFix+nValLavFix  //Custo Variável
nTotCusMan:=nTotCusFix+nTotCusVar
nTotCusMao:=nMaoObra
nTotMaoMan:=nTotCusMao+nTotCusMan
nTotCusOpe:=(((nTotCusMan+nTotCusMao)*nValPec)/100)
nTotMaoEqu:=(nTotCusFix+nTotCusVar+nTotCusOpe+nTotCusMao)
nTotHorPar:=(nTotCusFix/nValEfe)+(nTotCusOpe/nValEfe)

nValIssBDI:=nTotMaoEqu-(nTotMaoEqu*(1-nPerIssBDI/100))
nValPisBDI:=((nTotMaoEqu*nPerPisBDI)/100)
nValAdmBDI:=((nTotMaoEqu*nPerAdmBDI)/100)
nValLucBDI:=((nTotMaoEqu*nPerLucBDI)/100)
nValSegBDI:=((nTotMaoEqu*nPerSegBDI)/100)
nValJurBDI:=((nTotMaoEqu*nPerJurBDI)/100)
nValCpmBDI:=((nTotMaoEqu*nPerCpmBDI)/100)
nValCslBDI:=((nTotMaoEqu*nPerCslBDI)/100)
nValIrrBDI:=((nTotMaoEqu*nPerIrrBDI)/100)
nPerTotBDI:=(nPerIssBDI+nPerPisBDI+nPerAdmBDI+nPerLucBDI+nPerSegBDI+nPerJurBDI+nPerCpmBDI+nPerCslBDI+nPerIrrBDI)
nValTotBDI:=(nTotMaoEqu+nValIssBDI+nValPisBDI+nValAdmBDI+nValLucBDI+nValSegBDI+nValJurBDI+nValCpmBDI+nValCslBDI+nValIrrBDI)

nTotValHor:=(nValTotBDI/nValEfe)*(nValDis/nValEfe)

nValTotX:=nValTotT+nValTotG

fCalcCus()
fCalcGui()
fCalcGru(.t.)
fCalcPla()
fCalcMar()
fCalcTra()

fTrazMem(.f.)  //.t.=Atualiza variáveis/.f.=Atualiza oDlgCus:aCols   


fCalcGuiObra()
fCalcGuiTot()

Return

********************************************************************************
Static Function fFolderMao(nFolder,nLin1,nCol1,nLin2,nCol2)
********************************************************************************
Local   aSize  := MsAdvSize()
Local   nStyle := 0

nStyle:=If(nOpcManu==2,0,nStyle)  //2=Visualizar

Private oProjeto,cProjeto:=ZA1->ZA1_PROJET//SUBSTR(cProjObra,1,22)
//Private oObra,cObra      :=ZA1->ZA1_OBRA//SUBSTR(cProjObra,23,3)
Private nusado   := 0
Private aCampos  := {}
Private aCposnao := {"ZAC_COD","ZAC_SOT"}
Private aHeader  := {}
Private aCols    := {}
Private aTemp    := {}
Private aTELA[0][0],aGETS[0]                             
 
Private cTitulo  := "Mão de Obra"

Private oFont1:=TFont():New("Arial",12,16,,.T.,,,,.T.,.F.)
Private oFont2:=TFont():New("Arial",12,16,,.T.,,,,.T.,.F.)

cProjeto:=cProjet

fObra()

aAreaZA0:=ZA0->(GetArea())
aAreaZA1:=ZA1->(GetArea())

Do Case           
	Case nOpc == 2 .Or. nOpc == 5 
		nStyle := 0     
	Case nOpc == 6       
		nStyle := 0     
	Case nOpc == 3 .Or. nOpc == 4
		nStyle := GD_INSERT+GD_UPDATE+GD_DELETE                     
EndCase

nStyle := GD_INSERT+GD_UPDATE+GD_DELETE                     
nStyle := If(nOpcManu==2,0,nStyle)  //2=Visualizar

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Montando aHeader para Getdados³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aTemp   :=  U_AHEAD_LOCF("ZAC",aCposnao)
aHeader := aClone(aTemp[1])

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Montando aCols  para Getdados³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ   
aTemp   :=  U_Cols_LOCF("ZAC",aHeader,nOpc,1,xFilial("ZAC")+ZAC->ZAC_SOT+ZAC->ZAC_OBRA, )
aCols   := aClone(aTemp[1])

If nOpc==3
	Dbselectarea("ZAC")
	DbSetorder(1)
	cCodProg := GetSxeNum("ZAC","ZAC_COD")
	While (MsSeek(xFilial("ZAC")+cCodProg))
	  cCodProg := Soma1(cCodProg,Len(cCodProg))
    EndDo
Endif   

oDlgMao:=MsNewGetDados():New(nLin1,nCol1,nLin2  ,nCol2 , nStyle, "AllwaysTrue()", "AllwaysTrue()","+ZAC_ITEM" ,,,,, 9999 ,, oFolder:aDialogs[nFolder], aHeader, aCols)
oDlgMao:oBrowse:bChange:={||U_MudaMaoB()}
//   oGetZAC:oBrowse:Align:= CONTROL_ALIGN_ALLCLIENT

//fAcumuMao()
    
//   oPanel3:= TPanel():New(0, 0, "", oTela, NIL, .T., .F., NIL, NIL, 0,50, .T., .F. )
//   oPanel3:Align:= CONTROL_ALIGN_BOTTOM

Return




/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³fFolderCnjºAutor  ³M&S Consultoria     º Data ³  30/06/07   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function fFolderCnj(nFolder,nLin1,nCol1,nLin2,nCol2)
Local aCamposNao := {}
Local aCamposSim := {}
Local nStyle     := If(nOpcManu==2,0,GD_INSERT+GD_UPDATE+GD_DELETE)
Local cAlias,cChave,cCondicao,nIndice,cFiltro

	cAlias    := "ZLW"
	cChave    := xFILIAL(cAlias)+cProjet
	cCondicao := 'ZLW_FILIAL+ZLW_PROJET=="'+cChave+'"'
	nIndice   := 2  //ZLW_FILIAL+ZLW_PROJET+ZLW_OBRA+ZLW_SEQGUI+ZLW_ITEM
	cFiltro   := cCondicao

	AAdd(aCamposSim,{"ZLW_ITEM"  ,"V"})
	AAdd(aCamposSim,{"ZLW_X5COD" ,""})
	AAdd(aCamposSim,{"ZLW_DESCRI","V"})
	AAdd(aCamposSim,{"ZLW_PROJET","V"})
	AAdd(aCamposSim,{"ZLW_OBRA"  ,"V"})
	AAdd(aCamposSim,{"ZLW_CC"    ,""})
//	AAdd(aCamposSim,{"ZLW_VALOR" ,""})
	AAdd(aCamposSim,{"ZLW_SEQGUI","V"})
	AAdd(aCamposSim,{"ZLW_PRECUS",""})
	AAdd(aCamposSim,{"ZLW_VIAGEM",""})
	AAdd(aCamposSim,{"ZLW_DTLIM" ,""})
	AAdd(aCamposSim,{"ZLW_OBS"   ,""})

    AAdd(aCamposSim,{"ZLW_LCCORI",""}) //10-04-12 - Maickon Queiroz - Incluido para apresentar o Cliente origem'
	AAdd(aCamposSim,{"ZLW_LCLORI","V"}) //10-04-12 - Maickon Queiroz - Incluido para apresentar o Cliente Destino
	
	AAdd(aCamposSim,{"ZLW_LOCCAR",""})
	AAdd(aCamposSim,{"ZLW_ENDORI",""})
	AAdd(aCamposSim,{"ZLW_BRRORI",""})
	AAdd(aCamposSim,{"ZLW_MUNORI",""})
	AAdd(aCamposSim,{"ZLW_CIDORI",""})
	AAdd(aCamposSim,{"ZLW_UFORI" ,""})
	AAdd(aCamposSim,{"ZLW_CEPORI",""})


	AAdd(aCamposSim,{"ZLW_LCCDES",""}) //10-04-12 - Maickon Queiroz - Incluido para apresentar o Cliente Destino
	AAdd(aCamposSim,{"ZLW_LCLDES","V"}) //10-04-12 - Maickon Queiroz - Incluido para apresentar o Cliente Destino
	
	AAdd(aCamposSim,{"ZLW_LOCDES",""})
	AAdd(aCamposSim,{"ZLW_ENDEST",""})
	AAdd(aCamposSim,{"ZLW_BRRDES",""})
	AAdd(aCamposSim,{"ZLW_MUNDES",""})
	AAdd(aCamposSim,{"ZLW_CIDEST",""})
	AAdd(aCamposSim,{"ZLW_UFDEST",""})
	AAdd(aCamposSim,{"ZLW_CEPDES",""})
	AAdd(aCamposSim,{"ZLW_VIAORI",""})

	aHeader := fHeader(aCamposSim)
	aCols   := fCols(aHeader,cAlias,nIndice,cChave,cCondicao,cFiltro)

	oCnjaCols := BeChange():create(aHeader, aCols, "ZLW_ITEM")
	aCols     := oCnjaCols:GetData("ZLW_OBRA=='"+cObra+"' .AND. ZLW_SEQGUI='"+if(ZA0->ZA0_TIPOSE=="G",cSeqGui,cSeqGru)+"'")
//	aCols     := oCnjaCols:GetData("ZLW_OBRA=='"+cObra+"'")

	If Len(aCols) == 0
		aTmp := {}
		For nPos:=1 to Len(aHeader)
			(cAlias)->(AAdd(aTmp,CriaVar(aHeader[nPos,2],.T.)))
		Next
		AAdd(aTmp,.F.  )  //Deleted
		aadd(aCols, aTmp)
		aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])=="ZLW_ITEM"  })] := "01"
		aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])=="ZLW_OBRA"  })] := cObra
		aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])=="ZLW_SEQGUI"})] := if(ZA0->ZA0_TIPOSE=="G",cSeqGui,cSeqGru)
		aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])=="ZLW_PROJET"})] := cProjet
		aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])=="ZLW_DTLIM" })] := DDATABASE
	EndIf

	//                           nTop ,nLeft,nBottom,nRight,nStyle,cLinhaOk      ,cTudoOk,cIniCpos     ,aAlter,nFreeze,nMax,cFieldOk,cSuperDel,cDelOk,oWnd                     ,aHeader,aCols}
	oDlgCnj:=MsNewGetDados():New(nLin1,nCol1,nLin2  ,nCol2 ,nStyle,     ,  ,"+ZLW_ITEM"  ,      ,       ,110 ,        ,         ,.t.   ,oFolder:aDialogs[nFolder],aHeader,aCols)

	oDlgCnj:oBrowse:bChange:={||U_MudaZLW()}
Return


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³fFolderTrNºAutor  ³M&S Consultoria     º Data ³  30/06/07   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function fFolderTrN(nFolder,nLin1,nCol1,nLin2,nCol2)
Local oFont    :=TFont():New("Arial",6,14,,.T.,,,,.T.,.F.)
Local aCamposNao := {}
Local aCamposSim := {}
Local nStyle     := If(nOpcManu==2,0,GD_INSERT+GD_UPDATE+GD_DELETE)
Local cAlias,cChave,cCondicao,nIndice,cFiltro
Local oBtn1, oBtn2

	cAlias    := "ZLX"
	cChave    := xFILIAL(cAlias)+cProjet
	cCondicao := 'ZLX_FILIAL+ZLX_PROJET=="'+cChave+'"'
	nIndice   := 1  //ZLX_FILIAL+ZLX_PROJET+ZLX_ITEM
	cFiltro   := cCondicao

	cNomArq := ""
	if ZLX->(dbSeek(cChave, .T.))
		cNomArq := ZLX->ZLX_DOCTO
	endif

	AAdd(aCamposSim,{"ZLX_ITEM"  ,"V"})
	AAdd(aCamposSim,{"ZLX_RODOVI","" })
	AAdd(aCamposSim,{"ZLX_PISTA" ,"" })
	AAdd(aCamposSim,{"ZLX_PEDAGI","" })
	AAdd(aCamposSim,{"ZLX_KM"    ,"" })
	AAdd(aCamposSim,{"ZLX_VAZCAR","" })

	aHeader := fHeader(aCamposSim)
	aCols   := fCols(aHeader,cAlias,nIndice,cChave,cCondicao,cFiltro)
	if Len(aCols) > 0
		aCols[1,1] := "001"
	endif

	//                           nTop ,nLeft,nBottom,nRight,nStyle,cLinhaOk      ,cTudoOk,cIniCpos     ,aAlter,nFreeze,nMax,cFieldOk,cSuperDel,cDelOk,oWnd                     ,aHeader,aCols}
	oDlgTrN:=MsNewGetDados():New(nLin1,nCol1,nLin2  ,nCol2 ,nStyle,              ,       ,"+ZLX_ITEM"  ,      ,       ,110 ,        ,         ,.t.   ,oFolder:aDialogs[nFolder],aHeader,aCols)

	@ nLin2+8 , nCol1 Say "Docto Rota Traçada:" Pixel of oFolder:aDialogs[nFolder]
	@ nLin2+18, nCol1 Say iif(Empty(cNomArq),'não há arquivo vinculado',cNomArq) font oFont Color CLR_BLUE Pixel of oFolder:aDialogs[nFolder]

	oSayTrN := tSay():New(nLin2+18,nCol1,{|| iif(Empty(cNomArq),'não há arquivo vinculado',cNomArq)},oFolder:aDialogs[nFolder],,oFont,,,,.T.,CLR_BLUE,,200,20)

	oBtn1:=tButton():New(nLin2+10,210,'Vincular Docto',oFolder:aDialogs[nFolder],{|| if(fVincArq(),oBtn2:Enable(),)},45,20,,,,.T.) 
	oBtn2:=tButton():New(nLin2+10,270,'Visualizar Docto',oFolder:aDialogs[nFolder],{||fVisualArq()},45,20,,,,.T.) 

	if Empty(cNomArq)
		oBtn2:Disable()
	endif

	if nOpcManu == 2
		oBtn1:Disable()
	endif
Return


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³fVincArq  ºAutor  ³M&S Consultoria     º Data ³  30/06/07   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Vincula arquivo+localização completa do espelho da rota    º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ Proposta de Transportes                                    º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function fVincArq()
	cCmpArq := cGetFile('Arquivos (*.*)|*.*' , 'Selecione o Documento Digitalizado',1,'C:\',.F.,GETF_LOCALHARD+GETF_LOCALFLOPPY+GETF_NETWORKDRIVE)

    if Empty(cCmpArq)
    	Return .F.
    endif

	cNomArq := fNomArq(cCmpArq, "\")	// Retorna o nome do arquivo

	oSayTrN:SetText(cNomArq)
	oSayTrN:Refresh()
Return .T.


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³fNomArq   ºAutor  ³M&S Consultoria     º Data ³  30/06/07   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Retorna parte do nome do arquivo digitalizado              º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ Proposta de Transportes                                    º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function fNomArq(cPar, cToken)
Local nPos  := 0
Local cFile := ""

	if (nPos := RAT(cToken, StrTran(cPar,"/","\"))) != 0
		cFile := SubStr(cPar, nPos+1)
	endif
Return cFile


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³fVisualArqºAutor  ³M&S Consultoria     º Data ³  30/06/07   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Visualiza arquivo do espelho da rota                       º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ Proposta de Transportes                                    º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function fVisualArq()
Local cTempPath := AllTrim(GetTempPath())
Local cArqSalvo

	if !Empty(cCmpArq)	// Exibe arquivo não salvo
		ShellExecute("open",cCmpArq,"","",1)
		Return .T.
	endif

	cArqSalvo := Alltrim(Strtran(cProjet,"/","")) + "." + fNomArq(cNomArq, ".")  // Retorna a extensão do arquivo

    if ! __CopyFile(cCaminho+"\"+cArqSalvo, cTempPath+cNomArq)
    	MsgStop("Ocorreu um erro na cópia p/ Remote!","Vínculo de Documento Digitalizado")
    	Return .F.
    endif

	ShellExecute("open",cTempPath + "\" + cNomArq,"","",1)
Return Nil


********************************************************************************
Static Function fFolderLic(nFolder,nLin1,nCol1,nLin2,nCol2)
********************************************************************************
Local   aSize  := MsAdvSize()
Local   nStyle := 0

nStyle:=If(nOpcManu==2,0,nStyle)  //2=Visualizar

Private oProjeto,cProjeto:=ZA1->ZA1_PROJET//SUBSTR(cProjObra,1,22)
//Private oObra,cObra      :=ZA1->ZA1_OBRA//SUBSTR(cProjObra,23,3)
Private nusado   := 0
Private aCampos  := {}
Private aCposnao := {"ZAD_COD","ZAD_SOT"}
Private aHeader  := {}
Private aCols    := {}
Private aTemp    := {}
Private aTELA[0][0],aGETS[0]                             
 
Private cTitulo  := "Licitação"

Private oFont1:=TFont():New("Arial",12,16,,.T.,,,,.T.,.F.)
Private oFont2:=TFont():New("Arial",12,16,,.T.,,,,.T.,.F.)

cProjeto:=cProjet

fObra()

aAreaZA0:=ZA0->(GetArea())
aAreaZA1:=ZA1->(GetArea())

Do Case           
	Case nOpc == 2 .Or. nOpc == 5 
		nStyle := 0     
	Case nOpc == 6       
		nStyle := 0     
	Case nOpc == 3 .Or. nOpc == 4
		nStyle := GD_INSERT+GD_UPDATE+GD_DELETE                     
End Case

nStyle := GD_INSERT+GD_UPDATE+GD_DELETE                     

nStyle:=If(nOpcManu==2,0,nStyle)  //2=Visualizar

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Montando aHeader para Getdados³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aTemp   :=  U_AHEAD_LOCF("ZAD",aCposnao)
aHeader := aClone(aTemp[1])

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Montando aCols  para Getdados³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ   
aTemp   :=  U_Cols_LOCF("ZAD",aHeader,nOpc,1,xFilial("ZAD")+ZAD->ZAD_SOT+ZAD->ZAD_OBRA, )
aCols   := aClone(aTemp[1])

If nOpc==3
	Dbselectarea("ZAD")
	DbSetorder(1)
	cCodProg := GetSxeNum("ZAD","ZAD_COD")
	While (MsSeek(xFilial("ZAD")+cCodProg))
	  cCodProg := Soma1(cCodProg,Len(cCodProg))
    EndDo
Endif   

oDlgLic:=MsNewGetDados():New(nLin1,nCol1,nLin2  ,nCol2 ,nStyle, "AllwaysTrue()", "AllwaysTrue()","+ZAD_ITEM" ,,,,, 9999 ,, oFolder:aDialogs[nFolder], aHeader, aCols)
oDlgLic:oBrowse:bChange:={||U_MudaLicB()}
//   oGetZAD:oBrowse:Align:= CONTROL_ALIGN_ALLCLIENT

//fAcumuLic()

//   oPanel3:= TPanel():New(0, 0, "", oTela, NIL, .T., .F., NIL, NIL, 0,50, .T., .F. )
//   oPanel3:Align:= CONTROL_ALIGN_BOTTOM

Return

//"BRSP"+ALLTRIM(XFILIAL())+GETSX8NUM("ZA0","ZA0_ORCA")
********************************************************************************
User Function ZA0NUM(cCampo)
********************************************************************************
Local cRota := ""

MsgStop("ATENÇÃO: Favor falar com a Proativa Tecnologia ==> ["+cCampo+"]")
Return .t.

//nPos := Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_ROTA"})
//cRota := GdFieldGet("ZA1_ROTA", oDlgObr:oBrowse:nAt, .F., oDlgObr:aHeader, oDlgObr:aCols)
//cRota := StrZero(Val(cRota),3)
//oDlgObr:aCols[oDlgObr:oBrowse:nAt][nPos] := cRota
//Return .T.
//-----------------------------------------------------------------------------

********************************************************************************
User Function ZA0INICI(cCampo)
********************************************************************************
Local cCod
Local cAno := DTOS(DDATABASE)

RestArea(aAreaSm0)
cFilAnt := SM0->M0_CODFIL

Do Case
Case Upper(cCampo)==Upper("ZA0_PROJET")
	//cCod:=Upper(Subs(cPaisLoc,1,2))+Upper(SM0->M0_ESTENT)+cFilAnt+GetSxeNum("ZA0","ZA0_COD")
	cCod := SubStr(cAno,1,4)+GetSxeNum("ZA0","ZA0_COD") //Alison 17/07/2013
Case Upper(cCampo)==Upper("ZA0_RECEIT")
	If Type("ZA0Receit")<>"U"  //Se a variável existe
		cCod := ZA0Receit
	Else
		cCod:=Space(Len(M->ZA0_RECEIT))
	EndIf
Case Upper(cCampo)==Upper("ZA0_TIPOSE")
	If Type("ZA0TipoSe")<>"U"  //Se a variável existe
		cCod := ZA0TipoSe
	Else
		cCod:=Space(Len(M->ZA0_TIPOSE))
	EndIf
EndCase   

Return(cCod)

********************************************************************************
Static Function fDispCon()
********************************************************************************
If ValType(oDlgCon)=="O"  //Se o objeto já foi criado
	oCompConC:Refresh();oLargConC:Refresh();oAltuConC:Refresh();oPesoConC:Refresh()
	oCompConT:Refresh();oLargConT:Refresh();oAltuConT:Refresh();oPesoConT:Refresh()
	oCompConG:Refresh();oLargConG:Refresh();oAltuConG:Refresh();oPesoConG:Refresh()
EndIf

Return

********************************************************************************
Static Function fDispCar()
********************************************************************************
If ValType(oDlgCon)=="O"  //Se o objeto já foi criado
	oCompCarC:Refresh();oLargCarC:Refresh();oAltuCarC:Refresh();oPesoCarC:Refresh()
	oCompCarT:Refresh();oLargCarT:Refresh();oAltuCarT:Refresh();oPesoCarT:Refresh()
	oCompCarG:Refresh();oLargCarG:Refresh();oAltuCarG:Refresh();oPesoCarG:Refresh()
EndIf

Return

********************************************************************************
Static Function fDispTre()
********************************************************************************
If ValType(oDlgTre)=="O"  //Se o objeto já foi criado
	oKmV:Refresh()
	oKmC:Refresh()
	oKmT:Refresh()
EndIf

Return

********************************************************************************
User Function MudaRatB  
// Muda o Browse
********************************************************************************
Local lRet:=.T.
Local cCampo,cCampoGet

fObra()

If oDlgRat:nAt>Len(oDlgRat:aCols) ; oDlgRat:nAt:=Len(oDlgRat:aCols) ; EndIf

oDlgRat:aCols[oDlgRat:nAt][Ascan(oDlgRat:aHeader,{|x|AllTrim(x[2])=="ZA8_OBRA"  })]:=cObra
oDlgRat:oBrowse:Refresh()

Return lRet

********************************************************************************
User Function MudaMaoB  
// Muda o Browse
********************************************************************************
Local lRet:=.T.
Local cCampo,cCampoGet

fObra()

If oDlgMao:nAt>Len(oDlgMao:aCols) ; oDlgMao:nAt:=Len(oDlgMao:aCols) ; EndIf

oDlgMao:aCols[oDlgMao:nAt][Ascan(oDlgMao:aHeader,{|x|AllTrim(x[2])=="ZAC_OBRA"  })]:=cObra
//oDlgMao:aCols[oDlgMao:nAt][Ascan(oDlgMao:aHeader,{|x|AllTrim(x[2])=="ZAC_SEQTRA"})]:=cSeqTra
oDlgMao:oBrowse:Refresh()

Return lRet

********************************************************************************
User Function MudaZLW
// Muda o Browse
********************************************************************************
Local lRet:=.T.
Local cCampo,cCampoGet
//Local xSeqGui := "001"

fObra()

if Len(oDlgCnj:aCols) == 0
	aTmp := {}
	For nPos:=1 to Len(oDlgCnj:aHeader)
		(cAlias)->(AAdd(aTmp,CriaVar(oDlgCnj:aHeader[nPos,2],.T.)))
	Next
	AAdd(aTmp,.F.  )  //Deleted
	aadd(oDlgCnj:aCols, aTmp)
	oDlgCnj:aCols[1][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_ITEM"  })] := "01"
	oDlgCnj:aCols[1][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_OBRA"  })] := cObra
	oDlgCnj:aCols[1][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_SEQGUI"})] := if(ZA0->ZA0_TIPOSE=="G",cSeqGui,cSeqGru)	// xSeqGui
	oDlgCnj:aCols[1][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_PROJET"})] := cProjet
	oDlgCnj:aCols[1][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_DTLIM" })] := dDatabase

EndIf

if oDlgCnj:nAt>Len(oDlgCnj:aCols) 
	oDlgCnj:nAt:=Len(oDlgCnj:aCols)
EndIf

if Empty(oDlgCnj:aCols[oDlgCnj:nAt][2]) .and. oDlgCnj:nAt > 1
	oDlgCnj:aCols[oDlgCnj:nAt][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_OBRA"    })]:= cObra
	oDlgCnj:aCols[oDlgCnj:nAt][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_SEQGUI"  })]:= if(ZA0->ZA0_TIPOSE=="G",cSeqGui,cSeqGru)
	oDlgCnj:aCols[oDlgCnj:nAt][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_PROJET"  })]:= cProjet
	
	//Antonio Carlos - Connit - Inclusão dos campos ZLW_LCCORI/ZLW_LCLORI 
	oDlgCnj:aCols[oDlgCnj:nAt][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_LCCORI" })] := oDlgCnj:aCols[oDlgCnj:nAt-1][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_LCCORI" })]
	oDlgCnj:aCols[oDlgCnj:nAt][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_LCLORI" })] := oDlgCnj:aCols[oDlgCnj:nAt-1][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_LCLORI" })]
	
	oDlgCnj:aCols[oDlgCnj:nAt][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_LOCCAR" })] := oDlgCnj:aCols[oDlgCnj:nAt-1][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_LOCCAR" })]
	oDlgCnj:aCols[oDlgCnj:nAt][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_ENDORI" })] := oDlgCnj:aCols[oDlgCnj:nAt-1][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_ENDORI" })]
	oDlgCnj:aCols[oDlgCnj:nAt][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_BRRORI" })] := oDlgCnj:aCols[oDlgCnj:nAt-1][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_BRRORI" })]
	oDlgCnj:aCols[oDlgCnj:nAt][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_MUNORI" })] := oDlgCnj:aCols[oDlgCnj:nAt-1][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_MUNORI" })]
	oDlgCnj:aCols[oDlgCnj:nAt][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_CIDORI" })] := oDlgCnj:aCols[oDlgCnj:nAt-1][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_CIDORI" })]
	oDlgCnj:aCols[oDlgCnj:nAt][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_UFORI"  })] := oDlgCnj:aCols[oDlgCnj:nAt-1][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_UFORI"  })]
	oDlgCnj:aCols[oDlgCnj:nAt][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_CEPORI" })] := oDlgCnj:aCols[oDlgCnj:nAt-1][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_CEPORI" })]
	//Antonio Carlos - Connit - Inclusão dos campos ZLW_LCCDES/ZLW_LCLDES 
	oDlgCnj:aCols[oDlgCnj:nAt][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_LCCDES" })] := oDlgCnj:aCols[oDlgCnj:nAt-1][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_LCCDES" })]
	oDlgCnj:aCols[oDlgCnj:nAt][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_LCLDES" })] := oDlgCnj:aCols[oDlgCnj:nAt-1][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_LCLDES" })]

	oDlgCnj:aCols[oDlgCnj:nAt][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_LOCDES" })] := oDlgCnj:aCols[oDlgCnj:nAt-1][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_LOCDES" })]
	oDlgCnj:aCols[oDlgCnj:nAt][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_ENDEST" })] := oDlgCnj:aCols[oDlgCnj:nAt-1][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_ENDEST" })]
	oDlgCnj:aCols[oDlgCnj:nAt][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_BRRDES" })] := oDlgCnj:aCols[oDlgCnj:nAt-1][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_BRRDES" })]
	oDlgCnj:aCols[oDlgCnj:nAt][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_MUNDES" })] := oDlgCnj:aCols[oDlgCnj:nAt-1][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_MUNDES" })]
	oDlgCnj:aCols[oDlgCnj:nAt][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_CIDEST" })] := oDlgCnj:aCols[oDlgCnj:nAt-1][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_CIDEST" })]
	oDlgCnj:aCols[oDlgCnj:nAt][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_UFDEST" })] := oDlgCnj:aCols[oDlgCnj:nAt-1][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_UFDEST" })]
	oDlgCnj:aCols[oDlgCnj:nAt][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_CEPDES" })] := oDlgCnj:aCols[oDlgCnj:nAt-1][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_CEPDES" })]
	oDlgCnj:aCols[oDlgCnj:nAt][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_CC"     })] := oDlgCnj:aCols[oDlgCnj:nAt-1][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_CC"     })]
Endif


//ZLW->ZLW_LCCORI := aCols[nPos, 12]
//ZLW->ZLW_LCLORI := aCols[nPos, 13]


//ZLW->ZLW_LCCDES := aCols[nPos, 21]
//ZLW->ZLW_LCLDES := aCols[nPos, 22]
oDlgCnj:oBrowse:Refresh()

Return lRet

//======
********************************************************************************
User Function MudaLicB  
// Muda o Browse
********************************************************************************
Local lRet:=.T.
Local cCampo,cCampoGet

fObra()

If oDlgLic:nAt>Len(oDlgLic:aCols) ; oDlgLic:nAt:=Len(oDlgLic:aCols) ; EndIf

oDlgLic:aCols[oDlgLic:nAt][Ascan(oDlgLic:aHeader,{|x|AllTrim(x[2])=="ZAD_OBRA"  })]:=cObra
//oDlgLic:aCols[oDlgLic:nAt][Ascan(oDlgLic:aHeader,{|x|AllTrim(x[2])=="ZAD_SEQTRA"})]:=cSeqTra
oDlgLic:oBrowse:Refresh()

Return lRet

********************************************************************************
User Function ZAJINICI(cCampo)
********************************************************************************
Local cCod

Do Case
Case Upper(cCampo)==Upper("ZAJ_CODIGO")
	If Type(cCampo)<>"U"  //Se a variável existe
		cCod:=GETSX8NUM("ZAJ",cCampo)
		Posicione('ZAJ',1,xFilial('ZAJ')+cCod,cCampo)
		If ZAJ->(!Eof())
			ZAJ->(dbGoBottom())
			cCod:=ZA0->ZA0_PROJET
			cCod:=StrZero(Val(cCod)+1,5)
			Posicione('ZAJ',1,xFilial('ZAJ')+cCod,cCampo)
			If ZAJ->(!Eof())
				MsgStop("ERRO: Problemas na inclusão do codigo ("+cCod+").")
				cCod:=Space(Len(ZAJ->ZAJ_CODIGO))
			EndIf
		EndIf
	EndIf
EndCase

Return(cCod)

********************************************************************************
Static Function fMontaKm(nFolder,nLin1,nCol1,nLin2,nCol2)
********************************************************************************
Local nLinS1,nColS1,nLinG1,nColG1
Local nLinS2,nColS2,nLinG2,nColG2
Local nLinS3,nColS3,nLinG3,nColG3
Local nLinS4,nColS4,nLinG4,nColG4

nLinS1:=nLin2+008
nColS1:=nCol1+004
nLinG1:=nLin2+007
nColG1:=nCol1+061

nLinS2:=nLinS1
nColS2:=nColS1+118
nLinG2:=nLinG1
nColG2:=nColG1+118

nLinS3:=nLinS2
nColS3:=nColS2+118
nLinG3:=nLinG2
nColG3:=nColG2+118

nLinS4:=nLinS3
nColS4:=nColS3+118
nLinG4:=nLinG3
nColG4:=nColG3+118

nLinA :=010
nPos  :=0

fCalcTre()

cLabel:=" KM Vazio "

nPos:=0
@ nLinS1+(nLinA*(++nPos-1)),nColS1 Say OemToAnsi("KM Vazio ===>    ") Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
nPos:=0
@ nLinG1+(nLinA*(++nPos-1)),nColG1 msGet oKmV       VAR nKmV       Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] When fWhen(.f.) PICTURE "@E 999,999"
@ nLinS1-006,nColS1-002 TO nLinS1+(nLinA*(++nPos-1))+002,nColS1+104 LABEL cLabel PIXEL COLOR CLR_HBLUE OF oFolder:aDialogs[nFolder]

cLabel:=" KM Carregado "
nPos:=0
@ nLinS1+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("KM Carregado ===>") Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
nPos:=0
@ nLinG1+(nLinA*(++nPos-1)),nColG2 msGet oKmC       VAR nKmC       Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] When fWhen(.f.) PICTURE "@E 999,999"
@ nLinS1-006,nColS2-002 TO nLinS1+(nLinA*(++nPos-1))+002,nColS2+104 LABEL cLabel PIXEL COLOR CLR_HBLUE OF oFolder:aDialogs[nFolder]

cLabel:=" KM Total "
nPos:=0
@ nLinS1+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("KM Total ===>    ") Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
nPos:=0
@ nLinG1+(nLinA*(++nPos-1)),nColG3 msGet oKmT       VAR nKmT       Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] When fWhen(.f.) PICTURE "@E 999,999"
@ nLinS1-006,nColS3-002 TO nLinS1+(nLinA*(++nPos-1))+002,nColS3+104 LABEL cLabel PIXEL COLOR CLR_HBLUE OF oFolder:aDialogs[nFolder]

Return

********************************************************************************
Static Function fTemVazio(cTipoSe)
********************************************************************************
Local lRet
Do Case
Case cTipoSe=="T" ; lRet:=.t.
Case cTipoSe=="L" ; lRet:=.t.
Case cTipoSe=="G" ; lRet:=.f.
Case cTipoSe=="U" ; lRet:=.f.
Case cTipoSe=="R" ; lRet:=.f.
Case cTipoSe=="I" ; lRet:=.f.
Case cTipoSe=="O" ; lRet:=.f.
Case cTipoSe=="P" ; lRet:=.f.
Case cTipoSe=="M" ; lRet:=.f.
Otherwise         ; lRet:=.t.
EndCase
Return(lRet)

********************************************************************************
Static Function fTemIdaVol(cTipoSe)
********************************************************************************
Local lRet
Do Case
Case cTipoSe=="T" ; lRet:=.f.
Case cTipoSe=="L" ; lRet:=.f.
Case cTipoSe=="G" ; lRet:=.t.
Case cTipoSe=="U" ; lRet:=.t.
Case cTipoSe=="R" ; lRet:=.t.
Case cTipoSe=="I" ; lRet:=.t.
Case cTipoSe=="O" ; lRet:=.t.
Case cTipoSe=="P" ; lRet:=.t.
Case cTipoSe=="M" ; lRet:=.t.
Otherwise         ; lRet:=.t.
EndCase
Return(lRet)

********************************************************************************
Static Function fValidaTre()
********************************************************************************
Local nPos,cEtapa,cDe,cVazio,cIdaVol
Local lRet:=.t.

If ValType(oDlgTre)=="O"  //Se o objeto já foi criado
	For nPos:=1 to Len(oDlgTre:aCols)
		If !oDlgTre:aCols[nPos,Len(oDlgTre:aHeader)+1]  //!Deleted()
			cEtapa :=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_ETAPA"})]
			cDe    :=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DE"   })]
			cVazio :=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VAZIO"})]
			cIdaVol:=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_IDAVOL"})]

			If !Empty(cEtapa) .and. !Empty(cDe)
				If fTemVazio(ZA0->ZA0_TIPOSE)
					If !cVazio$"VC"
						MsgStop("ATENÇÃO: Falta preencher VAZIO ou CARREGADO !!")
						lRet:=.f.
						Exit
					EndIf
				EndIf
				If fTemIdaVol(ZA0->ZA0_TIPOSE)
					If !cIdaVol$"IV"
						MsgStop("ATENÇÃO: Falta preencher se a direção do trecho é IDA ou VOLTA !!")
						lRet:=.f.
						Exit
					EndIf
				EndIf
			EndIf
		EndIf
	Next
EndIf

Return(lRet)

********************************************************************************
Static Function fVerDocum(aHeader,aCols,cAlias,cRotaTRB)
********************************************************************************
If !fWhen() ; Return ; EndIf

If !MsgYesNo("Confirma Carregamento de todos os documentos ??")
	Return
EndIf

oDlgDoc:aCols:={}
oDlgDoc:aCols:=Aclone(fColsDocum(oDlgDoc:aHeader,oDlgDoc:aCols,"ZAJ"))
oDlgDoc:oBrowse:Refresh()

Return

********************************************************************************
Static Function fColsDocum(aHeader,aCols,cAlias)
********************************************************************************
Local nPos,aCols0,nPosDoc:=0
Local cAliasAnt:=Alias()

fObra()

dbSelectArea(cAlias)

(cAlias)->(dbGoTop())
While (cAlias)->(!Eof())
	aCols0:={}
	For nPos:=1 to Len(aHeader)
		(cAlias)->(AAdd(aCols0,CriaVar(aHeader[nPos,2])))
	Next
	AAdd(aCols0,.F.  )  //Deleted
	AAdd(aCols,aCols0)

	aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAI_OBRA"  })]:=cObra
	//aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAI_SEQTRA"})]:=cSeqTra
	aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAI_SEQDOC"})]:=StrZero(++nPosDoc,3)
	aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAI_CODIGO"})]:=(cAlias)->ZAJ_CODIGO
	aCols[Len(aCols)][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAI_DESCRI"})]:=(cAlias)->ZAJ_DESCRI

	(cAlias)->(DbSkip())
EndDo

If Empty(aCols)
	aCols0:={}
	For nPos:=1 to Len(aHeader)
		(cAlias)->(AAdd(aCols0,CriaVar(aHeader[nPos,2])))
	Next
	AAdd(aCols0,.F.  )  //Deleted
	AAdd(aCols,aCols0)
EndIf

dbSelectArea(cAliasAnt)

Return(AClone(aCols))

********************************************************************************
Static Function fCalcLsr
********************************************************************************
nValLsr:=nVl2Lsr:=0

If ZA0->ZA0_TIPOSE=="L"
	Return(.t.)
EndIf

If ValType(oDlgGui)=="O"  //Se o objeto já foi criado
	fCalcTre()
	nVelMedi :=30//fTrazVelo(oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_GUINDA"})])
	nValHora :=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRHOR"})]

	nMinDia  :=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_MINDIA"})]
	nMinMes  :=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_MINMES"})]

	cTipoCa:=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_TIPOCA"})]
	Do Case
	Case cTipoCa=="H"
	Case cTipoCa=="D" ; nValHora/=nMinDia
	Case cTipoCa=="M" ; nValHora/=nMinMes
	EndCase

	nHorViag :=((nKmV +nKmC )/nVelMedi)
	nHorViag1:=((nKmV1+nKmC1)/nVelMedi)
	nHorViag2:=((nKmV2+nKmC2)/nVelMedi)
	oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_HORVIA"})]:=nHorViag
	If ZA0->ZA0_TIPOSE $ "G|R|I|U|P|M"
		nVl2Lsr:=nHorViag2*nValHora
		nValLsr:=nHorViag1*nValHora
	Else
		nValLsr:=nHorViag*nValHora
	EndIf

	nValAux:=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRPESO"})]
	nVl2Aux:=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRPESO"})]

EndIf

Return(.t.)

********************************************************************************
Static Function fCalcTre
********************************************************************************
Local nPos

nKmVE  :=nKmVE1 :=nKmVE2 :=0  //Vazio Estadual
nKmVF  :=nKmVF1 :=nKmVF2 :=0  //Vazio Federal
nKmVSP :=nKmVSP1:=nKmVSP2:=0  //Vazio SP
nKmVT  :=nKmVT1 :=nKmVT2 :=0  //Vazio Total

nKmCE  :=nKmCE1 :=nKmCE2 :=0  //Carregado Estadual
nKmCF  :=nKmCF1 :=nKmCF2 :=0  //Carregado Federal
nKmCSP :=nKmCSP1:=nKmCSP2:=0  //Carregado SP
nKmCT  :=nKmCT1 :=nKmCT2 :=0  //Carregado Total

nValPedVE  :=nValPedVE1 :=nValPedVE2 :=0
nValPedVF  :=nValPedVF1 :=nValPedVF2 :=0
nValPedVSP :=nValPedVSP1:=nValPedVSP2:=0
nValPedVT  :=nValPedVT1 :=nValPedVT2 :=0

nValPedCE  :=nValPedCE1 :=nValPedCE2 :=0
nValPedCF  :=nValPedCF1 :=nValPedCF2 :=0
nValPedCSP :=nValPedCSP1:=nValPedCSP2:=0
nValPedCT  :=nValPedCT1 :=nValPedCT2 :=0

nKmV1:=nKmV2:=0
nKmC1:=nKmC2:=0
nKmT1:=nKmT2:=0

If ValType(oDlgTre)=="O"  //Se o objeto já foi criado
	For nPos:=1 to Len(oDlgTre:aCols)
		_cIdaVol := oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_IDAVOL"})]
		If !oDlgTre:aCols[nPos,Len(oDlgTre:aHeader)+1]  //!Deleted()
			If oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VAZIO"})]=="V"
				If _cIdaVol == "V"
					nKmV2+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
				Else
					nKmV1+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
				EndIf
				nKmV+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
				If oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_TIPORO"})]=="E"
					If _cIdaVol == "V"
						nKmVE2+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
//						nValPedVE2+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VALPED"})]
					Else
						nKmVE1+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
//						nValPedVE1+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VALPED"})]
					EndIf
					nKmVE+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
//					nValPedVE+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VALPED"})]
				Else
					If _cIdaVol == "V"
						nKmVF2+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
//						nValPedVE2+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VALPED"})]
					Else
						nKmVF1+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
//						nValPedVE1+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VALPED"})]
					EndIf
					nKmVF+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
//					nValPedVE+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VALPED"})]
				EndIf
				If _cIdaVol == "V"
					nKmVT2+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
//					nValPedVT2+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VALPED"})]
				Else
					nKmVT1+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
//					nValPedVT1+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VALPED"})]
				EndIf
				nKmVT+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
//				nValPedVT+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VALPED"})]
			Else
				If _cIdaVol == "V"
					nKmC2+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
				Else
					nKmC1+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
				EndIf
				nKmC+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
				If oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_TIPORO"})]=="E"
					If _cIdaVol == "V"
						nKmCE2+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
//						nValPedCE2+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VALPED"})]
					Else
						nKmCE1+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
//						nValPedCE1+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VALPED"})]
					EndIf
					nKmCE+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
//					nValPedCE+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VALPED"})]
				Else
					If _cIdaVol == "V"
						nKmCF2+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
//						nValPedCF2+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VALPED"})]
					Else
						nKmCF1+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
//						nValPedCF1+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VALPED"})]
					EndIf
					nKmCF+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
//					nValPedCF+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VALPED"})]
				EndIf
				If _cIdaVol == "V"
					nKmCT2+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
//					nValPedCT2+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VALPED"})]
				Else
					nKmCT1+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
//					nValPedCT1+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VALPED"})]
				EndIf
				nKmCT+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
//				nValPedCT+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VALPED"})]
			EndIf
		EndIf
	Next
EndIf


If ValType(oDlgTrN)=="O"  //Se o objeto já foi criado
	For nPos:=1 to Len(oDlgTrN:aCols)
		If ! oDlgTrN:aCols[nPos,Len(oDlgTrN:aHeader)+1]  //!Deleted()
			If oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_VAZCAR"})] == "V"
				nKmV1+=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_KM"})]
				nKmV +=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_KM"})]

				If oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_RODOVI"})] == "E"
					nKmVE1    +=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_KM"})]
					nValPedVE1+=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_PEDAGI"})]

					nKmVE     +=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_KM"})]
					nValPedVE +=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_PEDAGI"})]
				Endif

				If oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_RODOVI"})] == "F"
					nKmVF1    +=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_KM"})]
					nValPedVE1+=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_PEDAGI"})]

					nKmVF     +=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_KM"})]
					nValPedVE +=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_PEDAGI"})]
				EndIf
				nKmVT1    +=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_KM"})]
				nValPedVT1+=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_PEDAGI"})]

				nKmVT     +=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_KM"})]
				nValPedVT +=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_PEDAGI"})]
			Else
				nKmC1+=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_KM"})]
				nKmC +=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_KM"})]
				
				If oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_RODOVI"})] == "E"
					nKmCE1    +=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_KM"})]
					nValPedCE1+=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_PEDAGI"})]

					nKmCE     +=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_KM"})]
					nValPedCE +=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_PEDAGI"})]
				Endif

				If oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_RODOVI"})] == "F"
					nKmCF1    +=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_KM"})]
					nValPedCF1+=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_PEDAGI"})]

					nKmCF     +=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_KM"})]
					nValPedCF +=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_PEDAGI"})]
				EndIf
				nKmCT1    +=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_KM"})]
				nValPedCT1+=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_PEDAGI"})]

				nKmCT     +=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_KM"})]
				nValPedCT +=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_PEDAGI"})]
			EndIf
		EndIf
	Next
EndIf

nKmT :=nKmV +nKmC
nKmT1:=nKmV1+nKmC1
nKmT2:=nKmV2+nKmC2

Return

********************************************************************************
Static Function fCalcTuv
********************************************************************************
Local nPos

nValTuv:=0
nVl2Tuv:=0

If nKmVF>0
	If nPesoConT>xTuvTon
		For nPos:=1 to Len(xTabTuv)
			If ZA0->ZA0_TIPOSE $ "G|R|I|U|P|M"
				If nKmVF1>=xTabTuv[nPos,1] .and. nKmVF1<=xTabTuv[nPos,2]
					nValTuv+=Round(Int(nPesoConT-xTuvTon)*xTabTuv[nPos,3]*xTuvUfi*nKmVF1,2)
				EndIf
				If nKmVF2>=xTabTuv[nPos,1] .and. nKmVF2<=xTabTuv[nPos,2]
					nVl2Tuv+=Round(Int(nPesoConT-xTuvTon)*xTabTuv[nPos,3]*xTuvUfi*nKmVF2,2)
				EndIf
			Else
				If nKmVF>=xTabTuv[nPos,1] .and. nKmVF<=xTabTuv[nPos,2]
					nValTuv+=Round(Int(nPesoConT-xTuvTon)*xTabTuv[nPos,3]*xTuvUfi*nKmVF,2)
				EndIf
			EndIf
		Next
	EndIf
EndIf

If nKmCF>0
	If nPesoConG>xTuvTon
		For nPos:=1 to Len(xTabTuv)
			If ZA0->ZA0_TIPOSE $ "G|R|I|U|P|M"
				If nKmCF1>=xTabTuv[nPos,1] .and. nKmCF1<=xTabTuv[nPos,2]
					nValTuv+=Round(Int(nPesoConG-xTuvTon)*xTabTuv[nPos,3]*xTuvUfi,2)
				EndIf
				If nKmCF2>=xTabTuv[nPos,1] .and. nKmCF2<=xTabTuv[nPos,2]
					nVl2Tuv+=Round(Int(nPesoConG-xTuvTon)*xTabTuv[nPos,3]*xTuvUfi,2)
				EndIf
			Else
				If nKmCF>=xTabTuv[nPos,1] .and. nKmCF<=xTabTuv[nPos,2]
					nValTuv+=Round(Int(nPesoConG-xTuvTon)*xTabTuv[nPos,3]*xTuvUfi,2)
				EndIf
			EndIf
		Next
	EndIf
EndIf

Return

********************************************************************************
Static Function fCalcTur
********************************************************************************
Local nPos

nValTur:=0

If ValType(oDlgTre)=="O"  //Se o objeto já foi criado
	For nPos:=1 to Len(oDlgTre:aCols)
		If !oDlgTre:aCols[nPos,Len(oDlgTre:aHeader)+1]  //!Deleted()
			If !oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_TIPORO"})]=="E"
				Loop
			EndIf
//			If !Subs(oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_RODOVI"})],1,2)$"PR,RS"
			If !oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_TEMTUR"})]=="S"
				Loop
			EndIf
			nKmVE :=nKmVE1:=nKmVE2:=0
			nKmCE :=nKmCE1:=nKmCE2:=0
			nValPedVE :=nValPedVE1:=nValPedVE2:=0
			nValPedCE :=nValPedCE1:=nValPedCE2:=0
			cTipAnt:=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_TIPORO"})]
			For nPos1:=nPos to Len(oDlgTre:aCols)
				_cIdaVol := oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_IDAVOL"})]
				nPos:=nPos1
				If !oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_TIPORO"})]=="E"
					Loop
				EndIf
				If !oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_TIPORO"})]==cTipAnt
					nPos--
					Exit
				EndIf

				If oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VAZIO"})]=="V"
					If oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_TIPORO"})]=="E"
//						If Subs(oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_RODOVI"})],1,2)$"PR,RS"
						If oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_TEMTUR"})]=="S"
							If ZA0->ZA0_TIPOSE $ "G|R|I|U|P|M"
								If _cIdaVol == "V"
									nKmVE2+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
//									nValPedVE2+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VALPED"})]
								Else
									nKmVE1+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
//									nValPedVE1+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VALPED"})]
								EndIf
							Else
								nKmVE1+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
//								nValPedVE1+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VALPED"})]
							EndIf                
							nKmVE+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
//							nValPedVE+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VALPED"})]
						EndIf
					EndIf
				Else
					If oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_TIPORO"})]=="E"
//						If Subs(oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_RODOVI"})],1,2)$"PR,RS"
						If oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_TEMTUR"})]=="S"
							If ZA0->ZA0_TIPOSE $ "G|R|I|U|P|M"
								If _cIdaVol == "V"
									nKmCE2+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
//									nValPedCE2+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VALPED"})]
								Else
									nKmCE1+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
//									nValPedCE1+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VALPED"})]
								EndIf
							Else
								nKmCE1+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
//								nValPedCE1+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VALPED"})]
							EndIf
							nKmCE+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
//							nValPedCE+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VALPED"})]
						EndIf
					EndIf
				EndIf
			Next

			If nKmVE>0
				If nPesoConT>xTurTon
					For nPos:=1 to Len(xTabTur)
						If ZA0->ZA0_TIPOSE $ "G|R|I|U|P|M"
							If nKmVE1>=xTabTur[nPos,1] .and. nKmVE1<=xTabTur[nPos,2]
								nValTur+=Round(Int(nPesoConT-xTurTon)*xTabTur[nPos,3]*xTurUfi,2)
							EndIf
							If nKmVE2>=xTabTur[nPos,1] .and. nKmVE2<=xTabTur[nPos,2]
								nVl2Tur+=Round(Int(nPesoConT-xTurTon)*xTabTur[nPos,3]*xTurUfi,2)
							EndIf
						Else
							If nKmVE>=xTabTur[nPos,1] .and. nKmVE<=xTabTur[nPos,2]
								nValTur+=Round(Int(nPesoConT-xTurTon)*xTabTur[nPos,3]*xTurUfi,2)
							EndIf
						EndIf
					Next
				EndIf
			EndIf

			If nKmCE>0
				If nPesoConG>xTurTon
					For nPos:=1 to Len(xTabTur)
						If ZA0->ZA0_TIPOSE $ "G|R|I|U|P|M"
							If nKmCE1>=xTabTur[nPos,1] .and. nKmCE1<=xTabTur[nPos,2]
								nValTur+=Round(Int(nPesoConG-xTurTon)*xTabTur[nPos,3]*xTurUfi,2)
							EndIf
							If nKmCE2>=xTabTur[nPos,1] .and. nKmCE2<=xTabTur[nPos,2]
								nVl2Tur+=Round(Int(nPesoConG-xTurTon)*xTabTur[nPos,3]*xTurUfi,2)
							EndIf
						Else
							If nKmCE>=xTabTur[nPos,1] .and. nKmCE<=xTabTur[nPos,2]
								nValTur+=Round(Int(nPesoConG-xTurTon)*xTabTur[nPos,3]*xTurUfi,2)
							EndIf
						EndIf
					Next
				EndIf
			EndIf

		EndIf
	Next
EndIf

// a Gabriela disse que não precisa calcular o TUR

Return

********************************************************************************
Static Function fCalcTap
********************************************************************************
Local nPos,nPos1,cTipAnt,xFatTapAux
Local nKmVE :=0,nKmCE :=0,nValPedVE :=0,nValPedCE :=0
Local nKmVE1:=0,nKmCE1:=0,nValPedVE1:=0,nValPedCE1:=0
Local nKmVE2:=0,nKmCE2:=0,nValPedVE2:=0,nValPedCE2:=0

nValTap:=0

If ValType(oDlgTre)=="O"  //Se o objeto já foi criado
	For nPos:=1 to Len(oDlgTre:aCols)
		If !oDlgTre:aCols[nPos,Len(oDlgTre:aHeader)+1]  //!Deleted()
			If !oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_TIPORO"})]=="E"
				Loop
			EndIf
			nKmVE :=nKmVE1:=nKmVE2:=0
			nKmCE :=nKmCE1:=nKmCE2:=0
			nValPedVE :=nValPedVE1:=nValPedVE2:=0
			nValPedCE :=nValPedCE1:=nValPedCE2:=0
			cTipAnt:=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_TIPORO"})]
			For nPos1:=nPos to Len(oDlgTre:aCols)
				_cIdaVol := oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_IDAVOL"})]
				nPos:=nPos1
				If !oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_TIPORO"})]=="E"
					Loop
				EndIf
				If !oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_TIPORO"})]==cTipAnt
					nPos--
					Exit
				EndIf

				cOrigem:=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_ORIGEM"})]
				cDestin:=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DESTIN"})]
				cRota  :=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_ROTA"  })]
				cEtapa :=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_ETAPA" })]

				ZA3->(dbSeek(xFILIAL("ZA3")+cOrigem+cDestin+cRota+cEtapa))
				If ZA3->(ZA3_FATTAP==0)
					xFatTapAux:=xFatTap
				Else
					xFatTapAux:=ZA3->ZA3_FATTAP
				EndIf

				If oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VAZIO"})]=="V"
					If oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_TIPORO"})]=="E"
						If ZA0->ZA0_TIPOSE $ "G|R|I|U|P|M"
							If _cIdaVol == "V"
								nKmVE2+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
//								nValPedVE2+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VALPED"})]
							Else
								nKmVE1+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
//								nValPedVE1+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VALPED"})]
							EndIf
						Else
							nKmVE1+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
//							nValPedVE1+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VALPED"})]
						EndIf
						nKmVE+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
//						nValPedVE+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VALPED"})]
					EndIf
				Else
					If oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_TIPORO"})]=="E"
						If ZA0->ZA0_TIPOSE $ "G|R|I|U|P|M"
							If _cIdaVol == "V"
								nKmCE2+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
//								nValPedCE2+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VALPED"})]
							Else
								nKmCE1+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
//								nValPedCE1+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VALPED"})]
							EndIf
						Else
							nKmCE1+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
//							nValPedCE1+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VALPED"})]
						EndIf
						nKmCE+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
//						nValPedCE+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VALPED"})]
					EndIf
				EndIf
			Next

			If nKmCE>0
				If nPesoConG>xTapTon
					// MsgStop("Peso Conj: "+StrZero(nPesoConG,12,2)+"   Ton.TAP: "+StrZero(xTapTon,12,2)+"  Fator TAP: "+StrZero(xFatTapAux,12,2)+"   Pedágio: "+StrZero(nValPedCE,12,2))
					nValTap+=Round(Int(nPesoConG-xTapTon)*xFatTapAux*nValPedCE1,2)
					nVl2Tap+=Round(Int(nPesoConG-xTapTon)*xFatTapAux*nValPedCE2,2)
				EndIf
			EndIf
		EndIf
	Next
EndIf



If ValType(oDlgTrN)=="O"  //Se o objeto já foi criado
	For nPos:=1 to Len(oDlgTrN:aCols)
		If ! oDlgTrN:aCols[nPos,Len(oDlgTrN:aHeader)+1]  //!Deleted()
			If oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_RODOVI"})] != "E"
				Loop
			EndIf

			nKmVE :=nKmVE1:=nKmVE2:=0
			nKmCE :=nKmCE1:=nKmCE2:=0
			nValPedVE :=nValPedVE1:=nValPedVE2:=0
			nValPedCE :=nValPedCE1:=nValPedCE2:=0

			cTipAnt:=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_RODOVI"})]
			
			For nPos1:=nPos to Len(oDlgTrN:aCols)
//				_cIdaVol := oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_IDAVOL"})]
				nPos:=nPos1                                                                
				
				If oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_RODOVI"})] != "E"
					Loop
				EndIf
				
				If oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_RODOVI"})] != cTipAnt
					nPos--
					Exit
				EndIf

				xFatTapAux:=xFatTap

				If oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_VAZCAR"})]=="V"
					nKmVE1+=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_KM"})]
					nValPedVE1+=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_PEDAGI"})]

					nKmVE+=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_KM"})]
					nValPedVE+=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_PEDAGI"})]
				Else
					nKmCE1+=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_KM"})]
					nValPedCE1+=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_PEDAGI"})]

					nKmCE+=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_KM"})]
					nValPedCE+=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_PEDAGI"})]
				EndIf
			Next

			If nKmCE>0
				If nPesoConG>xTapTon
					nValTap+=Round(Int(nPesoConG-xTapTon)*xFatTapAux*nValPedCE1,2)
					nVl2Tap+=Round(Int(nPesoConG-xTapTon)*xFatTapAux*nValPedCE2,2)
				EndIf
			EndIf
		EndIf
	Next
EndIf

Return

********************************************************************************
Static Function fCalcPed
********************************************************************************
Local nPos

nValPed:=nVl2Ped:=0

nValPedagi:=nVal1Pedagi:=nVal2Pedagi:=0
nQtdEixos :=0

If ValType(oDlgTre)=="O"  //Se o objeto já foi criado
	For nPos:=1 to Len(oDlgTre:aCols)
		_cIdaVol := oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_IDAVOL"})]
		If !oDlgTre:aCols[nPos,Len(oDlgTre:aHeader)+1]  //!Deleted()
			If ZA0->ZA0_TIPOSE $ "G|R|I|U|P|M"
				If _cIdaVol == "V"
//					nVal2Pedagi+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VALPED"})]
				Else
//					nVal1Pedagi+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VALPED"})]
				EndIf
			Else
//				nVal1Pedagi+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VALPED"})]
			EndIf
//			nValPedagi+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VALPED"})]
		EndIf
	Next
EndIf

If ValType(oDlgTrN)=="O"  // Pega valor do Pedágio da nova aba Trechos 
	For nPos:=1 to Len(oDlgTrN:aCols)
		If !oDlgTrN:aCols[nPos,Len(oDlgTrN:aHeader)+1]  //!Deleted()
			nVal1Pedagi+=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_PEDAGI"})]
			nValPedagi +=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_PEDAGI"})]
		EndIf
	next
endif

If ValType(oDlgCon)=="O"  //Se o objeto já foi criado
	For nPos:=1 to Len(oDlgCon:aCols)
		If !oDlgCon:aCols[nPos,Len(oDlgCon:aHeader)+1]  //!Deleted()
			nQtdEixos+=oDlgCon:aCols[nPos][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_QTEIXO"})]
		EndIf
	Next
EndIf

If ValType(oDlgGui)=="O"  //Se o objeto já foi criado
	If !oDlgGui:aCols[oDlgGui:nAt,Len(oDlgGui:aHeader)+1]  //!Deleted()
//		nQtdEixos+=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_QTEIXO"})]
		nQtdEixos+=fTrazEixo(oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_GUINDA"})])
	EndIf
EndIf

nValPed+=Round(nVal1Pedagi*nQtdEixos,2)
nVl2Ped+=Round(nVal2Pedagi*nQtdEixos,2)

Return

********************************************************************************
Static Function fEscolta(cDime,nDime)
********************************************************************************
Local nRet1:=0,nRet2:=0,nRet3:=0,nRet4:=0,nRet5:=0,nRet6:=0
ZAN->(DbSetOrder(1))
ZAN->(DbSeek(xFILIAL("ZAN")+cDime))
While ZAN->(!Eof() .and. ZAN_DIME==cDime)
	If ZAN->(nDime>=ZAN_DE .and. nDime<=ZAN_ATE)
		nRet1+=ZAN->ZAN_CREDE1
		nRet2+=ZAN->ZAN_PRF1
		nRet3+=ZAN->ZAN_VELOC1
		nRet4+=ZAN->ZAN_CREDE2
		nRet5+=ZAN->ZAN_PRF2
		nRet6+=ZAN->ZAN_VELOC2
	EndIf
	ZAN->(DbSkip())
End
Return({nRet1,nRet2,nRet3,nRet4,nRet5,nRet6})

********************************************************************************
Static Function fEscoltaSP(cDime,nDime)
********************************************************************************
Local nRet1:=0,nRet2:=0,nRet3:=0,nRet4:=0,nRet5:=0,nRet6:=0
ZAO->(DbSetOrder(1))
ZAO->(DbSeek(xFILIAL("ZAO")+cDime))
While ZAO->(!Eof() .and. ZAO_DIME==cDime)
	If ZAO->(nDime>=ZAO_DE .and. nDime<=ZAO_ATE)
		nRet1+=ZAO->ZAO_CREDE1
		nRet2+=ZAO->ZAO_PRF1
		nRet3+=ZAO->ZAO_VELOC1
		nRet4+=ZAO->ZAO_CREDE2
		nRet5+=ZAO->ZAO_PRF2
		nRet6+=ZAO->ZAO_VELOC2
	EndIf
	ZAO->(DbSkip())
End
Return({nRet1,nRet2,nRet3,nRet4,nRet5,nRet6})

********************************************************************************
Static Function fDiasCon()  //Atualiza nDiasV,nDiasC,cTipoCa baseado no Conjunto Transportador (oDlgCon)
********************************************************************************
Local nPos

If ValType(oDlgCon)=="O"  //Se o objeto já foi criado
	cTipoCa:=Space(Len(oDlgCon:aCols[oDlgCon:nAt][Ascan(oDlgCon:aHeader,{|x|Alltrim(x[2])=="ZAE_TIPOCA"})]))
	nDiasV :=0
	nDiasC :=0
	For nPos:=1 to Len(oDlgCon:aCols)
		If !oDlgCon:aCols[nPos,Len(oDlgCon:aHeader)+1]  //!Deleted()
			nDiasV+=oDlgCon:aCols[nPos][Ascan(oDlgCon:aHeader,{|x|Alltrim(x[2])=="ZAE_DIASV" })]
			nDiasC+=oDlgCon:aCols[nPos][Ascan(oDlgCon:aHeader,{|x|Alltrim(x[2])=="ZAE_DIASC" })]
			If oDlgCon:aCols[nPos][Ascan(oDlgCon:aHeader,{|x|Alltrim(x[2])=="ZAE_DIASV" })]>0 .or.;
			   oDlgCon:aCols[nPos][Ascan(oDlgCon:aHeader,{|x|Alltrim(x[2])=="ZAE_DIASC" })]>0
				cTipoCa:=oDlgCon:aCols[nPos][Ascan(oDlgCon:aHeader,{|x|Alltrim(x[2])=="ZAE_TIPOCA"})]
			EndIf
		EndIf
	Next
EndIf

Return

********************************************************************************
Static Function fCalcPre
********************************************************************************
Local nPos,nPosBat

Private nDiasV,nDiasC,cTipoCa

Do Case
Case ValType(oDlgCon)=="O"  //Se o objeto já foi criado
	fDiasCon()  //Atualiza nDiasV,nDiasC,cTipoCa baseado no Conjunto Transportador (oDlgCon)
Case ValType(oDlgGui)=="O"  //Se o objeto já foi criado
	cTipoCa:=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|Alltrim(x[2])=="ZA5_TIPOCA"})]
	nDiasV :=0
	nDiasC :=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|Alltrim(x[2])=="ZA5_HORVIA"})]
Otherwise
	Return
EndCase

nValEsc:=nVl2Esc:=0
nValPre:=nVl2Pre:=0

If ValType(oDlgTre)=="O"  //Se o objeto já foi criado
	For nPos:=1 to Len(oDlgTre:aCols)
		_cIdaVol := oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_IDAVOL"})]
		If !oDlgTre:aCols[nPos,Len(oDlgTre:aHeader)+1]  //!Deleted()
			If !oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_TIPORO"})]=="E"
				Loop
			EndIf
			nKmVE :=nKmVE1:=nKmVE2:=0
			nKmCE :=nKmCE1:=nKmCE2:=0
			cTipAnt:=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_TIPORO"})]
			For nPos1:=nPos to Len(oDlgTre:aCols)
				nPos:=nPos1
				If !oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_TIPORO"})]=="E"
					Loop
				EndIf
				If !oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_TIPORO"})]==cTipAnt
					nPos--
					Exit
				EndIf
				If oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VAZIO"})]=="V"
					If ZA0->ZA0_TIPOSE $ "G|R|I|U|P|M"
						If _cIdaVol == "V"
							nKmVE2+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
						Else
							nKmVE1+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
						EndIF
					Else
						nKmVE1+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
					EndIf
					nKmVE+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
				Else
					If ZA0->ZA0_TIPOSE $ "G|R|I|U|P|M"
						If _cIdaVol == "V"
							nKmCE2+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
						Else
							nKmCE1+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
						EndIf
					Else
						nKmCE1+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
					EndIf
					nKmCE+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
				EndIf
			Next

			If nKmVE>0
				aBatQtd:={}
				For nPosBat:=1 to 6
					AAdd(aBatQtd,{0,0,0,0,0,0})
				Next
				aBatQtd[1]:=fEscoltaSP("1",nLargConT/1000)  //1=Largura
				aBatQtd[2]:=fEscoltaSP("2",nCompConT/1000)  //2=Comprimento
				aBatQtd[3]:=fEscoltaSP("3",nAltuConT/1000)  //3=Altura
//				aBatQtd[4]:=fEscoltaSP("4",nLargConT/1000)  //4=Excesso Anterior
//				aBatQtd[5]:=fEscoltaSP("5",nLargConT/1000)  //5=Excesso Posterior
				aBatQtd[6]:=fEscoltaSP("6",nPesoConT     )  //6=Peso

				nBatQtd:=0
				nBatPre:=0
				nVelQtd:=0
				nVelPre:=0
				For nPosBat:=1 to Len(aBatQtd)
					If aBatQtd[nPosBat,1]>nBatQtd
						nBatQtd:=aBatQtd[nPosBat,1]
						nVelQtd:=aBatQtd[nPosBat,3]
					EndIf
					If aBatQtd[nPosBat,2]>nBatPre
						nBatPre:=aBatQtd[nPosBat,2]
						nVelPre:=aBatQtd[nPosBat,3]
					EndIf
					If aBatQtd[nPosBat,4]>nBatQtd
						nBatQtd:=aBatQtd[nPosBat,4]
						nVelQtd:=aBatQtd[nPosBat,6]
					EndIf
					If aBatQtd[nPosBat,5]>nBatPre
						nBatPre:=aBatQtd[nPosBat,5]
						nVelPre:=aBatQtd[nPosBat,6]
					EndIf
				Next

				If nBatPre>0
					nValPre+=nBatPre*(nKmVE1*xValPre)
					nVl2Pre+=nBatPre*(nKmVE2*xValPre)
				EndIf
			EndIf

			If nKmCE>0
				aBatQtd:={}
				For nPosBat:=1 to 6
					AAdd(aBatQtd,{0,0,0,0,0,0})
				Next
				aBatQtd[1]:=fEscoltaSP("1",nLargConG/1000)  //1=Largura
				aBatQtd[2]:=fEscoltaSP("2",nCompConG/1000)  //2=Comprimento
				aBatQtd[3]:=fEscoltaSP("3",nAltuConG/1000)  //3=Altura
//				aBatQtd[4]:=fEscoltaSP("4",nLargConG/1000)  //4=Excesso Anterior
//				aBatQtd[5]:=fEscoltaSP("5",nLargConG/1000)  //5=Excesso Posterior
				aBatQtd[6]:=fEscoltaSP("6",nPesoConG     )  //6=Peso
			
				nBatQtd:=0
				nBatPre:=0
				nVelQtd:=0
				nVelPre:=0
				For nPosBat:=1 to Len(aBatQtd)
					If aBatQtd[nPosBat,1]>nBatQtd
						nBatQtd:=aBatQtd[nPosBat,1]
						nVelQtd:=aBatQtd[nPosBat,3]
					EndIf
					If aBatQtd[nPosBat,2]>nBatPre
						nBatPre:=aBatQtd[nPosBat,2]
						nVelPre:=aBatQtd[nPosBat,3]
					EndIf
					If aBatQtd[nPosBat,4]>nBatQtd
						nBatQtd:=aBatQtd[nPosBat,4]
						nVelQtd:=aBatQtd[nPosBat,6]
					EndIf
					If aBatQtd[nPosBat,5]>nBatPre
						nBatPre:=aBatQtd[nPosBat,5]
						nVelPre:=aBatQtd[nPosBat,6]
					EndIf
				Next

				If nBatQtd>0
					Do Case
					Case cTipoCa=="K"
						nValEsc:=nBatQtd*(nKmCE1*xValBat)
						nVl2Esc:=nBatQtd*(nKmCE2*xValBat)
					Case cTipoCa=="D"	// Não deverá existir cTipoCa == "D" para Guincho ou Grua
						nValEsc:=xBatDia*nDiasC
					EndCase
				EndIf
			
				If nBatPre>0
					nValPre+=nBatPre*(nKmCE1*xValPre)
					nVl2Pre+=nBatPre*(nKmCE2*xValPre)
				EndIf
			EndIf
		EndIf  //If !oDlgTre:aCols[nPos,Len(oDlgTre:aHeader)+1]  //!Deleted()
	Next
EndIf



If ValType(oDlgTrN)=="O"  //Se o objeto já foi criado
	For nPos:=1 to Len(oDlgTrN:aCols)

		If ! oDlgTrN:aCols[nPos,Len(oDlgTrN:aHeader)+1]  //!Deleted()
			If oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_RODOVI"})] != "E"
				Loop
			EndIf                            

			nKmVE :=nKmVE1:=nKmVE2:=0
			nKmCE :=nKmCE1:=nKmCE2:=0

			cTipAnt:=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_RODOVI"})]

			For nPos1:=nPos to Len(oDlgTrN:aCols)
				nPos:=nPos1
				If oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_RODOVI"})] != "E"
					Loop
				EndIf
				
				If oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_RODOVI"})] != cTipAnt
					nPos--
					Exit
				EndIf
				
				If oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_VAZCAR"})] == "V"
					nKmVE1+=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_KM"})]
					nKmVE +=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_KM"})]
				Else
					nKmCE1+=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_KM"})]
					nKmCE +=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_KM"})]
				EndIf
			Next

			If nKmVE>0
				aBatQtd:={}
				For nPosBat:=1 to 6
					AAdd(aBatQtd,{0,0,0,0,0,0})
				Next
				aBatQtd[1]:=fEscoltaSP("1",nLargConT/1000)  //1=Largura
				aBatQtd[2]:=fEscoltaSP("2",nCompConT/1000)  //2=Comprimento
				aBatQtd[3]:=fEscoltaSP("3",nAltuConT/1000)  //3=Altura
//				aBatQtd[4]:=fEscoltaSP("4",nLargConT/1000)  //4=Excesso Anterior
//				aBatQtd[5]:=fEscoltaSP("5",nLargConT/1000)  //5=Excesso Posterior
				aBatQtd[6]:=fEscoltaSP("6",nPesoConT     )  //6=Peso

				nBatQtd:=0
				nBatPre:=0
				nVelQtd:=0
				nVelPre:=0
				For nPosBat:=1 to Len(aBatQtd)
					If aBatQtd[nPosBat,1]>nBatQtd
						nBatQtd:=aBatQtd[nPosBat,1]
						nVelQtd:=aBatQtd[nPosBat,3]
					EndIf
					If aBatQtd[nPosBat,2]>nBatPre
						nBatPre:=aBatQtd[nPosBat,2]
						nVelPre:=aBatQtd[nPosBat,3]
					EndIf
					If aBatQtd[nPosBat,4]>nBatQtd
						nBatQtd:=aBatQtd[nPosBat,4]
						nVelQtd:=aBatQtd[nPosBat,6]
					EndIf
					If aBatQtd[nPosBat,5]>nBatPre
						nBatPre:=aBatQtd[nPosBat,5]
						nVelPre:=aBatQtd[nPosBat,6]
					EndIf
				Next

				If nBatPre>0
					nValPre+=nBatPre*(nKmVE1*xValPre)
					nVl2Pre+=nBatPre*(nKmVE2*xValPre)
				EndIf
			EndIf

			If nKmCE>0
				aBatQtd:={}
				For nPosBat:=1 to 6
					AAdd(aBatQtd,{0,0,0,0,0,0})
				Next
				aBatQtd[1]:=fEscoltaSP("1",nLargConG/1000)  //1=Largura
				aBatQtd[2]:=fEscoltaSP("2",nCompConG/1000)  //2=Comprimento
				aBatQtd[3]:=fEscoltaSP("3",nAltuConG/1000)  //3=Altura
//				aBatQtd[4]:=fEscoltaSP("4",nLargConG/1000)  //4=Excesso Anterior
//				aBatQtd[5]:=fEscoltaSP("5",nLargConG/1000)  //5=Excesso Posterior
				aBatQtd[6]:=fEscoltaSP("6",nPesoConG     )  //6=Peso
			
				nBatQtd:=0
				nBatPre:=0
				nVelQtd:=0
				nVelPre:=0
				For nPosBat:=1 to Len(aBatQtd)
					If aBatQtd[nPosBat,1]>nBatQtd
						nBatQtd:=aBatQtd[nPosBat,1]
						nVelQtd:=aBatQtd[nPosBat,3]
					EndIf
					If aBatQtd[nPosBat,2]>nBatPre
						nBatPre:=aBatQtd[nPosBat,2]
						nVelPre:=aBatQtd[nPosBat,3]
					EndIf
					If aBatQtd[nPosBat,4]>nBatQtd
						nBatQtd:=aBatQtd[nPosBat,4]
						nVelQtd:=aBatQtd[nPosBat,6]
					EndIf
					If aBatQtd[nPosBat,5]>nBatPre
						nBatPre:=aBatQtd[nPosBat,5]
						nVelPre:=aBatQtd[nPosBat,6]
					EndIf
				Next

				If nBatQtd>0
					Do Case
					Case cTipoCa=="K"
						nValEsc:=nBatQtd*(nKmCE1*xValBat)
						nVl2Esc:=nBatQtd*(nKmCE2*xValBat)
					Case cTipoCa=="D"	// Não deverá existir cTipoCa == "D" para Guincho ou Grua
						nValEsc:=xBatDia*nDiasC
					EndCase
				EndIf
			
				If nBatPre>0
					nValPre+=nBatPre*(nKmCE1*xValPre)
					nVl2Pre+=nBatPre*(nKmCE2*xValPre)
				EndIf
			EndIf
		EndIf  //If !oDlgTre:aCols[nPos,Len(oDlgTre:aHeader)+1]  //!Deleted()
	Next
EndIf

Return

********************************************************************************
Static Function fCalcPrf
********************************************************************************
Local   nPos,nPosBat
Private nDiasV,nDiasC,cTipoCa

//If !ValType(oDlgTre)=="O"  //Se o objeto já foi criado
//	Return
//EndIf

Do Case
Case ValType(oDlgCon)=="O"  //Se o objeto já foi criado
	fDiasCon()  //Atualiza nDiasV,nDiasC,cTipoCa baseado no Conjunto Transportador (oDlgCon)
Case ValType(oDlgGui)=="O"  //Se o objeto já foi criado
	cTipoCa:=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|Alltrim(x[2])=="ZA5_TIPOCA"})]
	nDiasV :=0
	nDiasC :=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|Alltrim(x[2])=="ZA5_HORVIA"})]
Otherwise
	Return
EndCase

//nValEsc:=0  //Não zera porque junta os batedores Estadual e Federal na mesma variável !!
nValPrf:=nVl2Prf:=0

If ValType(oDlgTre)=="O"  //Se o objeto já foi criado
	For nPos:=1 to Len(oDlgTre:aCols)
		_cIdaVol := oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_IDAVOL"})]
		If !oDlgTre:aCols[nPos,Len(oDlgTre:aHeader)+1]  //!Deleted()
			If !oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_TIPORO"})]=="F"
				Loop
			EndIf
			nKmVF :=nKmVF1:=nKmVF2:=0
			nKmCF :=nKmCF1:=nKmCF2:=0
			cTipAnt:=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_TIPORO"})]
			For nPos1:=nPos to Len(oDlgTre:aCols)
				nPos:=nPos1
				If !oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_TIPORO"})]=="F"
					Loop
				EndIf
				If !oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_TIPORO"})]==cTipAnt
					nPos--
					Exit
				EndIf
				If oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VAZIO"})]=="V"
					If ZA0->ZA0_TIPOSE $ "G|R|I|U|P|M"
						If _cIdaVol == "V"
							nKmVF2+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
						Else
							nKmVF1+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
						EndIf
					Else
						nKmVF1+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
					EndIf
					nKmVF+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
				Else
					If ZA0->ZA0_TIPOSE $ "G|R|I|U|P|M"
						If _cIdaVol == "V"
							nKmCF2+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
						Else
							nKmCF1+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
						EndIf
					Else
						nKmCF1+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
					EndIf
					nKmCF+=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
				EndIf
			Next

			If nKmVF>0
				aBatQtd:={}
				For nPosBat:=1 to 6
					AAdd(aBatQtd,{0,0,0,0,0,0})
				Next
				aBatQtd[1]:=fEscolta("1",nLargConT/1000)  //1=Largura
				aBatQtd[2]:=fEscolta("2",nCompConT/1000)  //2=Comprimento
				aBatQtd[3]:=fEscolta("3",nAltuConT/1000)  //3=Altura
//				aBatQtd[4]:=fEscolta("4",nLargConT/1000)  //4=Excesso Anterior
//				aBatQtd[5]:=fEscolta("5",nLargConT/1000)  //5=Excesso Posterior
				aBatQtd[6]:=fEscolta("6",nPesoConT     )  //6=Peso
				nBatQtd:=0
				nBatPrf:=0
				nVelQtd:=0
				nVelPrf:=0
				For nPosBat:=1 to Len(aBatQtd)
					If aBatQtd[nPosBat,4]>nBatQtd
						nBatQtd:=aBatQtd[nPosBat,4]
						If nVelQtd==0 .or. nVelQtd>aBatQtd[nPosBat,6]
							nVelQtd:=aBatQtd[nPosBat,6]
						EndIf
					EndIf
					If aBatQtd[nPosBat,5]>0
						nBatPrf:=aBatQtd[nPosBat,5]
						If nVelPrf==0 .or. nVelPrf>aBatQtd[nPosBat,6]
							nVelPrf:=aBatQtd[nPosBat,6]
						EndIf
					EndIf
				Next
				If nBatPrf > 0
					nFatPrf:=0
					For nPosBat:=1 to Len(xFatPrf)
						If nVelPrf==xFatPrf[nPosBat,1]
							nFatPrf:=xFatPrf[nPosBat,2]
							Exit
						EndIf
					Next
					nVl2Prf+=nBatPrf*(nKmVF2*nFatPrf)
					nValPrf+=nBatPrf*(nKmVF1*nFatPrf)
				EndIf
			EndIf
		
			If nKmCF>0
				nFatPrf:=0
				aBatQtd:={}
				For nPosBat:=1 to 6
					AAdd(aBatQtd,{0,0,0,0,0,0})
				Next
				aBatQtd[1]:=fEscolta("1",nLargConG/1000)  //1=Largura
				aBatQtd[2]:=fEscolta("2",nCompConG/1000)  //2=Comprimento
				aBatQtd[3]:=fEscolta("3",nAltuConG/1000)  //3=Altura
//				aBatQtd[4]:=fEscolta("4",nLargConG/1000)  //4=Excesso Anterior
//				aBatQtd[5]:=fEscolta("5",nLargConG/1000)  //5=Excesso Posterior
				aBatQtd[6]:=fEscolta("6",nPesoConG     )  //6=Peso
				nBatQtd:=0
				nBatPrf:=0
				nVelQtd:=0
				nVelPrf:=0
				For nPosBat:=1 to Len(aBatQtd)
					If aBatQtd[nPosBat,1]>nBatQtd
						nBatQtd:=aBatQtd[nPosBat,1]
						If nVelQtd==0 .or. nVelQtd>aBatQtd[nPosBat,3]
							nVelQtd:=aBatQtd[nPosBat,3]
						EndIf
					EndIf
					If aBatQtd[nPosBat,2]>nBatPrf
						nBatPrf:=aBatQtd[nPosBat,2]
						If nVelPrf==0 .or. nVelPrf>aBatQtd[nPosBat,3]
							nVelPrf:=aBatQtd[nPosBat,3]
						EndIf
					EndIf
					If aBatQtd[nPosBat,4]>nBatQtd
						nBatQtd:=aBatQtd[nPosBat,4]
						If nVelQtd==0 .or. nVelQtd>aBatQtd[nPosBat,6]
							nVelQtd:=aBatQtd[nPosBat,6]
						EndIf
					EndIf
					If aBatQtd[nPosBat,5]>nBatPrf
						nBatPrf:=aBatQtd[nPosBat,5]
						If nVelPrf==0 .or. nVelPrf>aBatQtd[nPosBat,6]
							nVelPrf:=aBatQtd[nPosBat,6]
						EndIf
					EndIf
				Next
				If nBatQtd>0
					Do Case
					Case cTipoCa=="K"
						If ZA0->ZA0_TIPOSE $ "G|R|I|U|P|M"
							If _cIdaVol == "V"
								nVl2Esc+=nBatQtd*(nKmCF2*xValBat)
							Else
								nValEsc+=nBatQtd*(nKmCF1*xValBat)
							EndIf
						Else
							nValEsc+=nBatQtd*(nKmCF*xValBat)
						EndIf
					Case cTipoCa=="H"
						If ZA0->ZA0_TIPOSE $ "G|R|I|U|P|M"
							If _cIdaVol == "V"
								nVl2Esc:=nBatQtd*(nKmCF2*xValBat)
							Else
								nValEsc:=nBatQtd*(nKmCF1*xValBat)
							EndIf
						Else
							nValEsc:=nBatQtd*(nKmCF*xValBat)
						EndIf
					Case cTipoCa=="D"	// Não deverá existir cTipoCa == "D" para Guincho ou Grua
						nValEsc:=xBatDia*nDiasC    
					Case cTipoCa=="M"
						If ZA0->ZA0_TIPOSE $ "G|R|I|U|P|M"
							If _cIdaVol == "V"
								nVl2Esc:=nBatQtd*(nKmCF2*xValBat)				
							Else
								nValEsc:=nBatQtd*(nKmCF1*xValBat)				
							EndIf
						Else
							nValEsc:=nBatQtd*(nKmCF*xValBat)				
						EndIf
					Case cTipoCa=="F"
						If ZA0->ZA0_TIPOSE $ "G|R|I|U|P|M"
							If _cIdaVol == "V"
								nVl2Esc:=nBatQtd*(nKmCF2*xValBat)			
							Else
								nValEsc:=nBatQtd*(nKmCF1*xValBat)			
							EndIf
						Else
							nValEsc:=nBatQtd*(nKmCF*xValBat)			
						EndIf
					EndCase
				EndIf
				If nBatPrf>0
					nFatPrf:=0
					For nPosBat:=1 to Len(xFatPrf)
						If nVelPrf==xFatPrf[nPosBat,1]
							nFatPrf:=xFatPrf[nPosBat,2]
							Exit
						EndIf
					Next
					nVl2Prf+=nBatPrf*(nKmCF2*nFatPrf)
					nValPrf+=nBatPrf*(nKmCF1*nFatPrf)
				EndIf
			EndIf
		EndIf  //If !oDlgTre:aCols[nPos,Len(oDlgTre:aHeader)+1]  //!Deleted()
	Next
EndIf


If ValType(oDlgTrN)=="O"  //Pega valores da nova Aba Trechos - Transporte
	For nPos:=1 to Len(oDlgTrN:aCols)
		If ! oDlgTrN:aCols[nPos,Len(oDlgTrN:aHeader)+1]  //!Deleted()
			If oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_RODOVI"})] != "F"
				Loop
			EndIf             
			
			nKmVF :=nKmVF1:=nKmVF2:=0
			nKmCF :=nKmCF1:=nKmCF2:=0
			
			cTipAnt:=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_RODOVI"})]
			
			For nPos1:=nPos to Len(oDlgTrN:aCols)
				nPos:=nPos1
				If oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_RODOVI"})] != "F"
					Loop
				EndIf
				If oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_RODOVI"})] != cTipAnt
					nPos--
					Exit
				EndIf
				If oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_VAZCAR"})] == "V"
					nKmVF1+=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_KM"})]
					nKmVF +=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_KM"})]
				Else
					nKmCF1+=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_KM"})]
					nKmCF +=oDlgTrN:aCols[nPos][Ascan(oDlgTrN:aHeader,{|x|AllTrim(x[2])=="ZLX_KM"})]
				EndIf
			Next

			If nKmVF>0
				aBatQtd:={}
				For nPosBat:=1 to 6
					AAdd(aBatQtd,{0,0,0,0,0,0})
				Next
				aBatQtd[1]:=fEscolta("1",nLargConT/1000)  //1=Largura
				aBatQtd[2]:=fEscolta("2",nCompConT/1000)  //2=Comprimento
				aBatQtd[3]:=fEscolta("3",nAltuConT/1000)  //3=Altura
//				aBatQtd[4]:=fEscolta("4",nLargConT/1000)  //4=Excesso Anterior
//				aBatQtd[5]:=fEscolta("5",nLargConT/1000)  //5=Excesso Posterior
				aBatQtd[6]:=fEscolta("6",nPesoConT     )  //6=Peso
				nBatQtd:=0
				nBatPrf:=0
				nVelQtd:=0
				nVelPrf:=0
				For nPosBat:=1 to Len(aBatQtd)
					If aBatQtd[nPosBat,4]>nBatQtd
						nBatQtd:=aBatQtd[nPosBat,4]
						If nVelQtd==0 .or. nVelQtd>aBatQtd[nPosBat,6]
							nVelQtd:=aBatQtd[nPosBat,6]
						EndIf
					EndIf
					If aBatQtd[nPosBat,5]>0
						nBatPrf:=aBatQtd[nPosBat,5]
						If nVelPrf==0 .or. nVelPrf>aBatQtd[nPosBat,6]
							nVelPrf:=aBatQtd[nPosBat,6]
						EndIf
					EndIf
				Next
				If nBatPrf > 0
					nFatPrf:=0
					For nPosBat:=1 to Len(xFatPrf)
						If nVelPrf==xFatPrf[nPosBat,1]
							nFatPrf:=xFatPrf[nPosBat,2]
							Exit
						EndIf
					Next
					nVl2Prf+=nBatPrf*(nKmVF2*nFatPrf)
					nValPrf+=nBatPrf*(nKmVF1*nFatPrf)
				EndIf
			EndIf
		
			If nKmCF>0
				nFatPrf:=0
				aBatQtd:={}
				For nPosBat:=1 to 6
					AAdd(aBatQtd,{0,0,0,0,0,0})
				Next
				aBatQtd[1]:=fEscolta("1",nLargConG/1000)  //1=Largura
				aBatQtd[2]:=fEscolta("2",nCompConG/1000)  //2=Comprimento
				aBatQtd[3]:=fEscolta("3",nAltuConG/1000)  //3=Altura
//				aBatQtd[4]:=fEscolta("4",nLargConG/1000)  //4=Excesso Anterior
//				aBatQtd[5]:=fEscolta("5",nLargConG/1000)  //5=Excesso Posterior
				aBatQtd[6]:=fEscolta("6",nPesoConG     )  //6=Peso
				nBatQtd:=0
				nBatPrf:=0
				nVelQtd:=0
				nVelPrf:=0
				For nPosBat:=1 to Len(aBatQtd)
					If aBatQtd[nPosBat,1]>nBatQtd
						nBatQtd:=aBatQtd[nPosBat,1]
						If nVelQtd==0 .or. nVelQtd>aBatQtd[nPosBat,3]
							nVelQtd:=aBatQtd[nPosBat,3]
						EndIf
					EndIf
					If aBatQtd[nPosBat,2]>nBatPrf
						nBatPrf:=aBatQtd[nPosBat,2]
						If nVelPrf==0 .or. nVelPrf>aBatQtd[nPosBat,3]
							nVelPrf:=aBatQtd[nPosBat,3]
						EndIf
					EndIf
					If aBatQtd[nPosBat,4]>nBatQtd
						nBatQtd:=aBatQtd[nPosBat,4]
						If nVelQtd==0 .or. nVelQtd>aBatQtd[nPosBat,6]
							nVelQtd:=aBatQtd[nPosBat,6]
						EndIf
					EndIf
					If aBatQtd[nPosBat,5]>nBatPrf
						nBatPrf:=aBatQtd[nPosBat,5]
						If nVelPrf==0 .or. nVelPrf>aBatQtd[nPosBat,6]
							nVelPrf:=aBatQtd[nPosBat,6]
						EndIf
					EndIf
				Next
				If nBatQtd>0
					Do Case
					Case cTipoCa=="K"
						If ZA0->ZA0_TIPOSE $ "G|R|I|U|P|M"
							nValEsc+=nBatQtd*(nKmCF1*xValBat)
						Else
							nValEsc+=nBatQtd*(nKmCF*xValBat)
						EndIf
					Case cTipoCa=="H"
						If ZA0->ZA0_TIPOSE $ "G|R|I|U|P|M"
							nValEsc:=nBatQtd*(nKmCF1*xValBat)
						Else
							nValEsc:=nBatQtd*(nKmCF*xValBat)
						EndIf
					Case cTipoCa=="D"	// Não deverá existir cTipoCa == "D" para Guincho ou Grua
						nValEsc:=xBatDia*nDiasC    
					Case cTipoCa=="M"
						If ZA0->ZA0_TIPOSE $ "G|R|I|U|P|M"
							nValEsc:=nBatQtd*(nKmCF1*xValBat)				
						Else
							nValEsc:=nBatQtd*(nKmCF*xValBat)				
						EndIf
					Case cTipoCa=="F"
						If ZA0->ZA0_TIPOSE $ "G|R|I|U|P|M"
							nValEsc:=nBatQtd*(nKmCF1*xValBat)			
						Else
							nValEsc:=nBatQtd*(nKmCF*xValBat)			
						EndIf
					EndCase
				EndIf
				If nBatPrf>0
					nFatPrf:=0
					For nPosBat:=1 to Len(xFatPrf)
						If nVelPrf==xFatPrf[nPosBat,1]
							nFatPrf:=xFatPrf[nPosBat,2]
							Exit
						EndIf
					Next
					nVl2Prf+=nBatPrf*(nKmCF2*nFatPrf)
					nValPrf+=nBatPrf*(nKmCF1*nFatPrf)
				EndIf
			EndIf
		EndIf  //If !oDlgTre:aCols[nPos,Len(oDlgTre:aHeader)+1]  //!Deleted()
	Next
EndIf

Return

********************************************************************************
Static Function fCalcInv
********************************************************************************
Local nPos

nValInv:=nVl2Inv:=0

If ValType(oDlgTre)=="O"  //Se o objeto já foi criado
	For nPos:=1 to Len(oDlgTre:aCols)
		_cIdaVol :=  oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_IDAVOL"})]
		If !oDlgTre:aCols[nPos,Len(oDlgTre:aHeader)+1]  //!Deleted()
			cOrigem:=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_ORIGEM"})]
			cDestin:=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DESTIN"})]
			cRota  :=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_ROTA"  })]
			cEtapa :=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_ETAPA" })]
			ZA3->(dbSeek(xFILIAL("ZA3")+cOrigem+cDestin+cRota+cEtapa))
			If ZA3->(!Eof() .and. ZA3_TEMBLO=="S")
			Else
				Loop
			EndIf
			If oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VAZIO"})]=="V"
				If nPesoConT>xPesoInv .or. nLargConT>xLargInv .or. nAltuConT>xAltuInv .or. nCompConT>xCompInv
					If ZA0->ZA0_TIPOSE $ "G|R|I|U|P|M"
						If _cIdaVol == "V"
							nVl2Inv+=xValInv
						Else
							nValInv+=xValInv
						EndIf
					Else
						nValInv+=xValInv
					EndIf
				EndIf
			Else
				If nPesoConG>xPesoInv .or. nLargConG>xLargInv .or. nAltuConG>xAltuInv .or. nCompConG>xCompInv
					If ZA0->ZA0_TIPOSE $ "G|R|I|U|P|M"
						If _cIdaVol == "V"
							nVl2Inv+=xValInv
						Else
							nValInv+=xValInv
						EndIf
					Else
						nValInv+=xValInv
					EndIf
				EndIf
			EndIf
		EndIf
	Next
EndIf
                        

If ValType(oDlgTrN)=="O"  // cálculo pela nova aba de Trechos - Transportes
	if ValType(oDlgTRA)=="O"  // Verifica a aba da Viagem
		For nPos:=1 to Len(oDlgTRA:aCols)
			If ! oDlgTRA:aCols[nPos,Len(oDlgTRA:aHeader)+1]  //!Deleted()
				cOrigem  := Alltrim(oDlgTRA:aCols[nPos][Ascan(oDlgTRA:aHeader,{|x|AllTrim(x[2])=="ZA6_MUNORI"})]) + "/" + ;
						    Alltrim(oDlgTRA:aCols[nPos][Ascan(oDlgTRA:aHeader,{|x|AllTrim(x[2])=="ZA6_ESTORI"})])

				cDestino := Alltrim(oDlgTRA:aCols[nPos][Ascan(oDlgTRA:aHeader,{|x|AllTrim(x[2])=="ZA6_MUNDES"})]) + "/" + ;
						    Alltrim(oDlgTRA:aCols[nPos][Ascan(oDlgTRA:aHeader,{|x|AllTrim(x[2])=="ZA6_ESTDES"})])

				If cOrigem == "SANTOS/SP" .and. cOrigem != cDestino
					If nPesoConG > 45 .or. nLargConG > 4000 .or. nAltuConG > 5200 .or. nCompConG > 30000
						nValInv+=xValInv + xValAle
					EndIf
				EndIf

				If cDestino == "SANTOS/SP" .and. cOrigem != cDestino
					If nPesoConG > 70 .or. nLargConG > 5500 .or. nAltuConG > 5300 .or. nCompConG > 30000
						nValInv+=xValInv + xValAle
					EndIf
				EndIf
			EndIf
		Next
	endif
EndIf

Return

********************************************************************************
Static Function fCalcAle
********************************************************************************
Local nPos

nValAle:=nVl2Ale:=0

If ValType(oDlgTre)=="O"  //Se o objeto já foi criado
	For nPos:=1 to Len(oDlgTre:aCols)
		_cIdaVol :=  oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_IDAVOL"})]
		If !oDlgTre:aCols[nPos,Len(oDlgTre:aHeader)+1]  //!Deleted()
			cOrigem:=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_ORIGEM"})]
			cDestin:=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DESTIN"})]
			cRota  :=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_ROTA"  })]
			cEtapa :=oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_ETAPA" })]
			ZA3->(dbSeek(xFILIAL("ZA3")+cOrigem+cDestin+cRota+cEtapa))
			If ZA3->(!Eof() .and. ZA3_TEMALE=="S")
			Else
				Loop
			EndIf
			If oDlgTre:aCols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VAZIO"})]=="V"
				If nPesoConT>xPesoAle .or. nLargConT>xLargAle .or. nAltuConT>xAltuAle .or. nCompConT>xCompAle
					If ZA0->ZA0_TIPOSE $ "G|R|I|U|P|M"
						If _cIdaVol == "V"
							nVl2Ale+=xValAle
						Else
							nValAle+=xValAle
						EndIf
					Else
						nValAle+=xValAle
					EndIf
				EndIf
			Else
				If nPesoConG>xPesoAle .or. nLargConG>xLargAle .or. nAltuConG>xAltuAle .or. nCompConG>xCompAle
					If ZA0->ZA0_TIPOSE $ "G|R|I|U|P|M"
						If _cIdaVol == "V"
							nVl2Ale+=xValAle
						Else
							nValAle+=xValAle
						EndIf
					Else
						nValAle+=xValAle
					EndIf
				EndIf
			EndIf
		EndIf
	Next
EndIf

// a Gabriela disse que não precisa calcular separado as taxas de Inversão da Alemoa

Return

********************************************************************************
Static Function fAcumuGui
********************************************************************************
Local nPos,aCols0:={}

If ZA0->ZA0_TIPOSE=="L"
	fAcumuGu1()
	Return
EndIf

fObra()

For nPos:=1 to Len(oGui_Cols)
	wObra:=oGui_Cols[nPos][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_OBRA"})]
	If cObra<>wObra
		AAdd(aCols0,Aclone(oGui_Cols[nPos]))
	EndIf
Next

For nPos:=1 to Len(oDlgGui:aCols)
	AAdd(aCols0,Aclone(oDlgGui:aCols[nPos]))
Next

If Empty(aCols0)
	AAdd(aCols0,Aclone(oGui_Cols0[1]))
EndIf

oGui_Cols:=Aclone(aCols0)

Return

********************************************************************************
Static Function fTrazGui
********************************************************************************
Local nPos,aCols0:={},aIt:={},aColsAux:={},nCont:=0

If ZA0->ZA0_TIPOSE=="L"
	fTrazGu1()
	Return
EndIf

fObra()

For nPos:=1 to Len(oGui_Cols)
	wObra:=oGui_Cols[nPos][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_OBRA"})]
	If cObra==wObra
		AAdd(aCols0,Aclone(oGui_Cols[nPos]))
	EndIf
Next

If Empty(aCols0)
	AAdd(aCols0,Aclone(oGui_Cols0[1]))
EndIf

oDlgGui:aCols:=Aclone(aCols0)
oDlgGui:oBrowse:Refresh()

//Alison   
aCols0:={}  
nCont:=0
For nX := 1 To Len(oTurno_Cols)
	aIt := oTurno_Cols[nX]
//	Aadd(aCols0,{})
	aColsAux:={}
	For nY := 1 To Len(aIt)
		wObra:=aIt[nY][Ascan(oGetVT:aHeader,{|x|AllTrim(x[2])=="ZBB_OBRA"})]
		If cObra==wObra
			AAdd(aColsAux,Aclone(aIt[nY]))
		EndIf                  
	Next nY
	If Len(aColsAux) > 0
		nCont++
		Aadd(aCols0,{})
		aCols0[nCont] := aColsAux
	EndIf
Next nX

//If !Empty(aCols0)
	//AAdd(aCols0,Aclone(oTurno_Cols[1]))
	aColsTurno := Aclone(aCols0)
	
//EndIf


//===

Return

********************************************************************************
Static Function fAcumuGu1
********************************************************************************
Local nPos,aCols0:={}

fObra()

For nPos:=1 to Len(oGui_Cols)
	wObra  :=oGui_Cols[nPos][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_OBRA"  })]
	wSeqTra:=oGui_Cols[nPos][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_SEQTRA"})]
	wSeqCar:=oGui_Cols[nPos][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_SEQCAR"})]
	If cObra+cSeqTra+cSeqCar<>wObra+wSeqTra+wSeqCar
		AAdd(aCols0,Aclone(oGui_Cols[nPos]))
	EndIf
Next

For nPos:=1 to Len(oDlgGui:aCols)
	AAdd(aCols0,Aclone(oDlgGui:aCols[nPos]))
Next

If Empty(aCols0)
	AAdd(aCols0,Aclone(oGui_Cols0[1]))
EndIf

oGui_Cols:=Aclone(aCols0)

Return

********************************************************************************
Static Function fTrazGu1
********************************************************************************
Local nPos,aCols0:={}

fObra()

For nPos:=1 to Len(oGui_Cols)
	wObra  :=oGui_Cols[nPos][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_OBRA"  })]
	wSeqTra:=oGui_Cols[nPos][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_SEQTRA"})]
	wSeqCar:=oGui_Cols[nPos][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_SEQCAR"})]
	If cObra+cSeqTra+cSeqCar==wObra+wSeqTra+wSeqCar
		AAdd(aCols0,Aclone(oGui_Cols[nPos]))
	EndIf
Next

If Empty(aCols0)
	AAdd(aCols0,Aclone(oGui_Cols0[1]))
EndIf

oDlgGui:aCols:=Aclone(aCols0)
oDlgGui:oBrowse:Refresh()

Return

********************************************************************************
Static Function fAcumuAcG
********************************************************************************
Local nPos,aCols0:={}

fObra()

For nPos:=1 to Len(oAcG_Cols)
	wObra  :=oAcG_Cols[nPos][Ascan(oDlgAcG:aHeader,{|x|AllTrim(x[2])=="ZAQ_OBRA"  })]
	wSeqGui:=oAcG_Cols[nPos][Ascan(oDlgAcG:aHeader,{|x|AllTrim(x[2])=="ZAQ_SEQGUI"})]
	If cObra+cSeqGui<>wObra+wSeqGui
		AAdd(aCols0,Aclone(oAcG_Cols[nPos]))
	EndIf
Next

For nPos:=1 to Len(oDlgAcG:aCols)
	AAdd(aCols0,Aclone(oDlgAcG:aCols[nPos]))
Next

If Empty(aCols0)
	AAdd(aCols0,Aclone(oAcG_Cols0[1]))
EndIf

oAcG_Cols:=Aclone(aCols0)

Return

********************************************************************************
Static Function fTrazAcG
********************************************************************************
Local nPos,aCols0:={}

fObra()

For nPos:=1 to Len(oAcG_Cols)
	wObra  :=oAcG_Cols[nPos][Ascan(oDlgAcG:aHeader,{|x|AllTrim(x[2])=="ZAQ_OBRA"  })]
	wSeqGui:=oAcG_Cols[nPos][Ascan(oDlgAcG:aHeader,{|x|AllTrim(x[2])=="ZAQ_SEQGUI"})]
	If cObra+cSeqGui==wObra+wSeqGui
		AAdd(aCols0,Aclone(oAcG_Cols[nPos]))
	EndIf
Next

If Empty(aCols0)
	AAdd(aCols0,Aclone(oAcG_Cols0[1]))
EndIf

oDlgAcG:aCols:=Aclone(aCols0)
oDlgAcG:oBrowse:Refresh()

Return

********************************************************************************
Static Function fAcumuGru
********************************************************************************
Local nPos,aCols0:={}

fObra()

For nPos := 1 to Len(oGru_Cols)
	wObra:=oGru_Cols[nPos][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_OBRA"})]
	If cObra<>wObra
		AAdd(aCols0,Aclone(oGru_Cols[nPos]))
	EndIf
Next

For nPos := 1 to Len(oDlgGru:aCols)
	AAdd(aCols0,Aclone(oDlgGru:aCols[nPos]))
Next

If Empty(aCols0)
	AAdd(aCols0,Aclone(oGru_Cols0[1]))
EndIf

oGru_Cols:=Aclone(aCols0)

Return

********************************************************************************
Static Function fAcumuPla
********************************************************************************
Local nPos,aCols0:={}

fObra()

For nPos := 1 to Len(oGru_Cols)
	wObra:=oGru_Cols[nPos][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_OBRA"})]
	If cObra<>wObra
		AAdd(aCols0,Aclone(oGru_Cols[nPos]))
	EndIf
Next

For nPos := 1 to Len(oDlgPla:aCols)
	AAdd(aCols0,Aclone(oDlgPla:aCols[nPos]))
Next

If Empty(aCols0)
	AAdd(aCols0,Aclone(oGru_Cols0[1]))
EndIf

oGru_Cols:=Aclone(aCols0)

Return


********************************************************************************
Static Function fAcumuMar
********************************************************************************
Local nPos,aCols0:={}

fObra()

For nPos := 1 to Len(oGru_Cols)
	wObra:=oGru_Cols[nPos][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_OBRA"})]
	If cObra<>wObra
		AAdd(aCols0,Aclone(oGru_Cols[nPos]))
	EndIf
Next

For nPos := 1 to Len(oDlgMar:aCols)
	AAdd(aCols0,Aclone(oDlgMar:aCols[nPos]))
Next

If Empty(aCols0)
	AAdd(aCols0,Aclone(oGru_Cols0[1]))
EndIf

oGru_Cols:=Aclone(aCols0)

Return

********************************************************************************
Static Function fTrazGru
********************************************************************************
Local nPos,aCols0:={}

fObra()

For nPos:=1 to Len(oGru_Cols)
	wObra:=oGru_Cols[nPos][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_OBRA"})]
	If cObra==wObra
		AAdd(aCols0,Aclone(oGru_Cols[nPos]))
	EndIf
Next

If Empty(aCols0)
	AAdd(aCols0,Aclone(oGru_Cols0[1]))
EndIf

oDlgGru:aCols:=Aclone(aCols0)
oDlgGru:oBrowse:Refresh()

Return

********************************************************************************
Static Function fTrazPla
********************************************************************************
Local nPos,aCols0:={}

fObra()

For nPos:=1 to Len(oGru_Cols)
	wObra:=oGru_Cols[nPos][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_OBRA"})]
	If cObra==wObra
		AAdd(aCols0,Aclone(oGru_Cols[nPos]))
	EndIf
Next

If Empty(aCols0)
	AAdd(aCols0,Aclone(oGru_Cols0[1]))
EndIf

oDlgPla:aCols:=Aclone(aCols0)
oDlgPla:oBrowse:Refresh()

Return

********************************************************************************
Static Function fTrazMar
********************************************************************************
Local nPos,aCols0:={}
                  
fObra()

For nPos:=1 to Len(oGru_Cols)
	wObra:=oGru_Cols[nPos][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_OBRA"})]
	If cObra==wObra
		AAdd(aCols0,Aclone(oGru_Cols[nPos]))
	EndIf
Next

If Empty(aCols0)
	AAdd(aCols0,Aclone(oGru_Cols0[1]))
EndIf

oDlgMar:aCols:=Aclone(aCols0)
oDlgMar:oBrowse:Refresh()

Return

********************************************************************************
Static Function fAcumuTra
********************************************************************************
Local nPos,aCols0:={}

For nPos:=1 to Len(oDlgTra:aCols)
	AAdd(aCols0,Aclone(oDlgTra:aCols[nPos]))
Next

If Empty(aCols0)
	AAdd(aCols0,Aclone(oTra_Cols0[1]))
	_nProxLn := Soma1( _nProxLn )
EndIf

oTra_Cols:=Aclone(aCols0)


Return

********************************************************************************
Static Function fTrazTra
********************************************************************************
Local nPos,aCols0:={}

For nPos:=1 to Len(oTra_Cols)
	AAdd(aCols0,Aclone(oTra_Cols[nPos]))
Next

If Empty(aCols0)
	AAdd(aCols0,Aclone(oTra_Cols0[1]))
EndIf

oDlgTra:aCols:=Aclone(aCols0)
oDlgTra:oBrowse:Refresh()

                                                
Return

********************************************************************************
Static Function fAcumuAce
********************************************************************************
Local nPos,aCols0:={}

fObra()

For nPos:=1 to Len(oAce_Cols)
	wObra  :=oAce_Cols[nPos][Ascan(oDlgAce:aHeader,{|x|AllTrim(x[2])=="ZAK_OBRA"})]
	wSeqGru:=oAce_Cols[nPos][Ascan(oDlgAce:aHeader,{|x|AllTrim(x[2])=="ZAK_SEQGRU"})]
	If cObra+cSeqGru<>wObra+wSeqGru
		AAdd(aCols0,Aclone(oAce_Cols[nPos]))
	EndIf
Next

For nPos:=1 to Len(oDlgAce:aCols)
	AAdd(aCols0,Aclone(oDlgAce:aCols[nPos]))
Next

If Empty(aCols0)
	AAdd(aCols0,Aclone(oAce_Cols0[1]))
EndIf

oAce_Cols:=Aclone(aCols0)

Return

********************************************************************************
Static Function fTrazAce
********************************************************************************
Local nPos,aCols0:={}

fObra()

For nPos:=1 to Len(oAce_Cols)
	wObra  :=oAce_Cols[nPos][Ascan(oDlgAce:aHeader,{|x|AllTrim(x[2])=="ZAK_OBRA"})]
	wSeqGru:=oAce_Cols[nPos][Ascan(oDlgAce:aHeader,{|x|AllTrim(x[2])=="ZAK_SEQGRU"})]
	If cObra+cSeqGru==wObra+wSeqGru
		AAdd(aCols0,Aclone(oAce_Cols[nPos]))
	EndIf
Next

If Empty(aCols0)
	AAdd(aCols0,Aclone(oAce_Cols0[1]))
EndIf

oDlgAce:aCols:=Aclone(aCols0)
oDlgAce:oBrowse:Refresh()

Return

********************************************************************************
Static Function fAcumuRot
********************************************************************************
Local nPos,aCols0:={}

fObra()

For nPos:=1 to Len(oRot_Cols)
	wObra  :=oRot_Cols[nPos][Ascan(oDlgRot:aHeader,{|x|AllTrim(x[2])=="ZA4_OBRA"})]
	wSeqTra:=oRot_Cols[nPos][Ascan(oDlgRot:aHeader,{|x|AllTrim(x[2])=="ZA4_SEQTRA"})]
	wSeqGui:=oRot_Cols[nPos][Ascan(oDlgRot:aHeader,{|x|AllTrim(x[2])=="ZA4_SEQGUI"})]
	wSeqGru:=oRot_Cols[nPos][Ascan(oDlgRot:aHeader,{|x|AllTrim(x[2])=="ZA4_SEQGRU"})]
	If cObra+cSeqTra+cSeqGui+cSeqGru<>wObra+wSeqTra+wSeqGui+wSeqGru
		AAdd(aCols0,Aclone(oRot_Cols[nPos]))
	EndIf
Next

For nPos:=1 to Len(oDlgRot:aCols)
	AAdd(aCols0,Aclone(oDlgRot:aCols[nPos]))
Next

If Empty(aCols0)
	AAdd(aCols0,Aclone(oRot_Cols0[1]))
EndIf

oRot_Cols:=Aclone(aCols0)

Return

********************************************************************************
Static Function fTrazRot
********************************************************************************
Local nPos,aCols0:={}

fObra()

For nPos:=1 to Len(oRot_Cols)
	wObra  :=oRot_Cols[nPos][Ascan(oDlgRot:aHeader,{|x|AllTrim(x[2])=="ZA4_OBRA"})]
	wSeqTra:=oRot_Cols[nPos][Ascan(oDlgRot:aHeader,{|x|AllTrim(x[2])=="ZA4_SEQTRA"})]
	wSeqGui:=oRot_Cols[nPos][Ascan(oDlgRot:aHeader,{|x|AllTrim(x[2])=="ZA4_SEQGUI"})]
	wSeqGru:=oRot_Cols[nPos][Ascan(oDlgRot:aHeader,{|x|AllTrim(x[2])=="ZA4_SEQGRU"})]
	If cObra+cSeqTra+cSeqGui+cSeqGru==wObra+wSeqTra+wSeqGui+wSeqGru
		AAdd(aCols0,Aclone(oRot_Cols[nPos]))
	EndIf
Next

If Empty(aCols0)
	AAdd(aCols0,Aclone(oRot_Cols0[1]))
EndIf

oDlgRot:aCols:=Aclone(aCols0)
oDlgRot:oBrowse:Refresh()

Return

********************************************************************************
Static Function fAcumuTre
********************************************************************************
Local nPos
Local aCols0   := {}

Local _PsObra  := aScan( oDlgTre:aHeader, {|x| AllTrim(x[2])=="ZAM_OBRA"  })
Local _PsSqTra := aScan( oDlgTre:aHeader, {|x| AllTrim(x[2])=="ZAM_SEQTRA"})
Local _PsSqCar := aScan( oDlgTre:aHeader, {|x| AllTrim(x[2])=="ZAM_SEQCAR"})
Local _PsRota  := aScan( oDlgTre:aHeader, {|x| AllTrim(x[2])=="ZAM_ROTA"  })
Local _PsEtapa := aScan( oDlgTre:aHeader, {|x| AllTrim(x[2])=="ZAM_ETAPA"})
Local _Key     := ""
Local _bSeek   := {|item| (item[_PsObra] + item[_PsSqTra] + item[_PsSqCar] + item[_PsRota] + item[_PsEtapa]) == _Key }

fObra()                                                                                                           

If Empty( oDlgTre:aCols[1][_PsRota] )
	fTrazTre()
EndIf

For nPos := 1 to Len( oDlgTre:aCols )				// se existir algo no aCols, armazenamos
	aadd( aCols0, aClone(oDlgTre:aCols[nPos]) )
Next

For nPos:=1 to Len(oTre_Cols)
	_Key := oTre_Cols[nPos][_PsObra ]
	_Key += oTre_Cols[nPos][_PsSqTra]
	_Key += oTre_Cols[nPos][_PsSqCar]
	_Key += oTre_Cols[nPos][_PsRota ]
	_Key += oTre_Cols[nPos][_PsEtapa]
	if ! Empty( Left(_Key, 3) ) .and. aScan( aCols0, _bSeek ) == 0 
		AAdd( aCols0, aClone(oTre_Cols[nPos]) )
	EndIf
Next

If Empty(aCols0)
	AAdd(aCols0,Aclone(oTre_Cols0[1]))
EndIf

oTre_Cols := Aclone(aCols0)

oDlgTre:oBrowse:Refresh()

Return

********************************************************************************
Static Function fTrazTre
********************************************************************************
Local nPos,aCols0:={}

fObra()

// Forcar a identificacao do seqcar - Frank Zwarg Fuga 26/04/2016
If ValType(oDlgCar)=="O"
	If oDlgCar:nAt == 1
		fTrazCar()
		oDlgCar:oBrowse:Refresh()
		aCols0:={}
		cSeqCar:=oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SEQCAR"})]
	EndIF
EndIF

If _lExclZAM // Frank Z Fuga 04/04/2016 - controle para zerar os itinerarios
	For nPos:=1 to Len(oTre_Cols) 
		wObra  :=oTre_Cols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_OBRA"})]
		wSeqTra:=oTre_Cols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_SEQTRA"})]
		wSeqGui:=oTre_Cols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_SEQGUI"})]
		wSeqGru:=oTre_Cols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_SEQGRU"})]
		wSeqCar:=oTre_Cols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_SEQCAR"})]
		If cObra+cSeqTra+cSeqGui+cSeqGru+cSeqCar==wObra+wSeqTra+wSeqGui+wSeqGru+wSeqCar
			oTre_Cols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_OBRA"})] := ""
		EndIf
	Next
EndIF

For nPos:=1 to Len(oTre_Cols) 
	wObra  :=oTre_Cols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_OBRA"})]
	wSeqTra:=oTre_Cols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_SEQTRA"})]
	wSeqGui:=oTre_Cols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_SEQGUI"})]
	wSeqGru:=oTre_Cols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_SEQGRU"})]
	wSeqCar:=oTre_Cols[nPos][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_SEQCAR"})]
	If cObra+cSeqTra+cSeqGui+cSeqGru+cSeqCar==wObra+wSeqTra+wSeqGui+wSeqGru+wSeqCar
		AAdd(aCols0,Aclone(oTre_Cols[nPos]))
	EndIf
Next

If Empty(aCols0)
	AAdd(aCols0,Aclone(oTre_Cols0[1]))
EndIf

oDlgTre:aCols:=Aclone(aCols0)

oDlgTre:oBrowse:Refresh() 

	nKmV := GDFieldGet ( "ZAM_TKMVAZ", 1, .F., oDlgTre:aHeader, oDlgTre:aCols )
	nKmC := GDFieldGet ( "ZAM_TKMCAR", 1, .F., oDlgTre:aHeader, oDlgTre:aCols )
	nKmT := nKmV + nKmC
	
	if Type("oKmv") == "O" // Se o Objeto estiver criado
		oKmV:Refresh()
		oKmC:Refresh()
		oKmT:Refresh()
	endif

_lExclZAM := .F. // Frank Z Fuga - 04/04/2016

Return

********************************************************************************
Static Function fAcumuCon
********************************************************************************
Local nPos,aCols0:={}

fObra()

//If ValType(oCon_Cols) == "O" 
For nPos:=1 to Len(oCon_Cols)
	wObra  :=oCon_Cols[nPos][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_OBRA"  })]
	wSeqTra:=oCon_Cols[nPos][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_SEQTRA"})]
	wSeqCar:=oCon_Cols[nPos][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_SEQCAR"})]
	If cObra+cSeqTra+cSeqCar<>wObra+wSeqTra+wSeqCar
		AAdd(aCols0,Aclone(oCon_Cols[nPos]))
	EndIf
Next

For nPos:=1 to Len(oDlgCon:aCols)
	AAdd(aCols0,Aclone(oDlgCon:aCols[nPos]))
Next

If Empty(aCols0)
	AAdd(aCols0,Aclone(oCon_Cols0[1]))
	aCols0[Len(aCols0)][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_OBRA"  })]:=cObra
	aCols0[Len(aCols0)][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_SEQTRA"})]:=cSeqTra
	aCols0[Len(aCols0)][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_SEQCAR"})]:=cSeqCar
EndIf

oCon_Cols:=Aclone(aCols0)
//EndIf	
Return

********************************************************************************
Static Function fTrazCon
********************************************************************************
Local nPos,aCols0:={}

fObra()
If ValType(oDlgCon) == "O" // Se o Objeto estiver criado

For nPos:=1 to Len(oCon_Cols)
	wObra  :=oCon_Cols[nPos][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_OBRA"  })]
	wSeqTra:=oCon_Cols[nPos][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_SEQTRA"})]
	wSeqCar:=oCon_Cols[nPos][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_SEQCAR"})]
	If cObra+cSeqTra+cSeqCar==wObra+wSeqTra+wSeqCar
		AAdd(aCols0,Aclone(oCon_Cols[nPos]))
	EndIf
Next

If Empty(aCols0)
	AAdd(aCols0,Aclone(oCon_Cols0[1]))
	aCols0[Len(aCols0)][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_OBRA"  })]:=cObra
	aCols0[Len(aCols0)][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_SEQTRA"})]:=cSeqTra
	aCols0[Len(aCols0)][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_SEQCAR"})]:=cSeqCar
EndIf

oDlgCon:aCols:=Aclone(aCols0)
oDlgCon:oBrowse:Refresh()

EndIf
Return

********************************************************************************
Static Function fAcumuCar
********************************************************************************
Local nPos,aCols0:={}
Local cObraCar,cTraCar := "" 

//cObraCar:= oDlgCar:Acols[1][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_OBRA"})]
//cTraCar := oDlgCar:Acols[1][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SEQTRA"})]

cObraCar:= oDlgTra:Acols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_OBRA"})]   // by Frank Z Fuga
cTraCar := oDlgTra:Acols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_SEQTRA"})] // by Frank Z Fuga


fObra()

For nPos:=1 to Len(oCar_Cols)
	wObra  :=oCar_Cols[nPos][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_OBRA"})]
	wSeqTra:=oCar_Cols[nPos][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SEQTRA"})]	
	If (cObra+cSeqTra<>wObra+wSeqTra .And. !Empty(wObra)) .Or. (cObra+cSeqTra<>cObraCar+cTraCar)
		AAdd(aCols0,Aclone(oCar_Cols[nPos]))
	EndIf
Next

For nPos:=1 to Len(oDlgCar:aCols) 
	If cObra+cSeqTra==cObraCar+cTraCar
		AAdd(aCols0,Aclone(oDlgCar:aCols[nPos]))
	EndIf
Next

If Empty(aCols0)
	AAdd(aCols0,Aclone(oCar_Cols0[1]))
	aCols0[Len(aCols0)][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_OBRA"  })]:=cObra
	aCols0[Len(aCols0)][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SEQTRA"})]:=cSeqTra
EndIf

oCar_Cols:=Aclone(aCols0)

Return

********************************************************************************
Static Function fTrazCar
********************************************************************************
Local nPos,aCols0:={}

fObra()

For nPos:=1 to Len(oCar_Cols)
	wObra  :=oCar_Cols[nPos][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_OBRA"})]
	wSeqTra:=oCar_Cols[nPos][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SEQTRA"})]
	If cObra+cSeqTra==wObra+wSeqTra
		AAdd(aCols0,Aclone(oCar_Cols[nPos]))
	EndIf
Next

If Empty(aCols0)
	AAdd(aCols0,Aclone(oCar_Cols0[1]))
	aCols0[Len(aCols0)][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_OBRA"  })]:=cObra
	aCols0[Len(aCols0)][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SEQTRA"})]:=cSeqTra
EndIf              

oDlgCar:aCols:=Aclone(aCols0)
oDlgCar:oBrowse:Refresh()

Return

********************************************************************************
Static Function fAcumuCus
********************************************************************************
Local nPos,aCols0:={}

fObra()

For nPos:=1 to Len(oCus_Cols)
	wObra  :=oCus_Cols[nPos][Ascan(oDlgCus:aHeader,{|x|AllTrim(x[2])=="ZA9_OBRA"})]
	wSeqTra:=oCus_Cols[nPos][Ascan(oDlgCus:aHeader,{|x|AllTrim(x[2])=="ZA9_SEQTRA"})]
	wSeqGui:=oCus_Cols[nPos][Ascan(oDlgCus:aHeader,{|x|AllTrim(x[2])=="ZA9_SEQGUI"})]
	wSeqGru:=oCus_Cols[nPos][Ascan(oDlgCus:aHeader,{|x|AllTrim(x[2])=="ZA9_SEQGRU"})]
	wSeqCar:=oCus_Cols[nPos][Ascan(oDlgCus:aHeader,{|x|AllTrim(x[2])=="ZA9_SEQCAR"})]
	If cObra+cSeqTra+cSeqGui+cSeqGru+cSeqCar<>wObra+wSeqTra+wSeqGui+wSeqGru+wSeqCar
		AAdd(aCols0,Aclone(oCus_Cols[nPos]))
	EndIf
Next

For nPos:=1 to Len(oDlgCus:aCols)
	AAdd(aCols0,Aclone(oDlgCus:aCols[nPos]))
Next

If Empty(aCols0)
	AAdd(aCols0,Aclone(oCus_Cols0[1]))
EndIf

oCus_Cols:=Aclone(aCols0)

Return

********************************************************************************
Static Function fTrazCus
********************************************************************************
Local nPos,aCols0:={}

fObra()

For nPos:=1 to Len(oCus_Cols)
	wObra  :=oCus_Cols[nPos][Ascan(oDlgCus:aHeader,{|x|AllTrim(x[2])=="ZA9_OBRA"})]
	wSeqTra:=oCus_Cols[nPos][Ascan(oDlgCus:aHeader,{|x|AllTrim(x[2])=="ZA9_SEQTRA"})]
	wSeqGui:=oCus_Cols[nPos][Ascan(oDlgCus:aHeader,{|x|AllTrim(x[2])=="ZA9_SEQGUI"})]
	wSeqGru:=oCus_Cols[nPos][Ascan(oDlgCus:aHeader,{|x|AllTrim(x[2])=="ZA9_SEQGRU"})]
	wSeqCar:=oCus_Cols[nPos][Ascan(oDlgCus:aHeader,{|x|AllTrim(x[2])=="ZA9_SEQCAR"})]
	If cObra+cSeqTra+cSeqGui+cSeqGru+cSeqCar==wObra+wSeqTra+wSeqGui+wSeqGru+wSeqCar
		AAdd(aCols0,Aclone(oCus_Cols[nPos]))
	EndIf
Next

If Empty(aCols0)
	AAdd(aCols0,Aclone(oCus_Cols0[1]))
EndIf

oDlgCus:aCols:=Aclone(aCols0)
oDlgCus:oBrowse:Refresh()

Return

********************************************************************************
Static Function fAcumuDoc
********************************************************************************
Local nPos,aCols0:={}

fObra()

For nPos:=1 to Len(oDoc_Cols)
	wObra  :=oDoc_Cols[nPos][Ascan(oDlgDoc:aHeader,{|x|AllTrim(x[2])=="ZAI_OBRA"})]
	If cObra<>wObra
		AAdd(aCols0,Aclone(oDoc_Cols[nPos]))
	EndIf
Next

For nPos:=1 to Len(oDlgDoc:aCols)
	AAdd(aCols0,Aclone(oDlgDoc:aCols[nPos]))
Next

If Empty(aCols0)
	AAdd(aCols0,Aclone(oDoc_Cols0[1]))
EndIf

oDoc_Cols:=Aclone(aCols0)

Return

********************************************************************************
Static Function fTrazDoc
********************************************************************************
Local nPos,aCols0:={}

fObra()

For nPos:=1 to Len(oDoc_Cols)
	wObra  :=oDoc_Cols[nPos][Ascan(oDlgDoc:aHeader,{|x|AllTrim(x[2])=="ZAI_OBRA"})]
	If cObra==wObra
		AAdd(aCols0,Aclone(oDoc_Cols[nPos]))
	EndIf
Next

If Empty(aCols0)
	AAdd(aCols0,Aclone(oDoc_Cols0[1]))
EndIf

oDlgDoc:aCols:=Aclone(aCols0)
oDlgDoc:oBrowse:Refresh()

Return

********************************************************************************
Static Function fAcumuRes
********************************************************************************

Local nPos,aCols0:={}

fObra()

For nPos:=1 to Len(oRes_Cols)
	wObra  		:= oRes_Cols[nPos][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_OBRA"})]
	wLocacao	:= oRes_Cols[nPos][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_SEQGUI" })]
	
	//If IsInCallStack("fSalvar900") .Or. !Empty(cSeqGru) 
	//If cObra<>wObra .or. wLocacao <> If( Empty( cSeqGru ), cSeqGui, cSeqGru ) 
	If IsInCallStack("fSalvar900") .Or. (!Empty(cSeqTra) .Or. !Empty(cSeqGui))
	If cObra<>wObra .or. wLocacao <> If( Empty( cSeqTra ), cSeqGui, cSeqTra )
		AAdd(aCols0,Aclone(oRes_Cols[nPos]))
	EndIf
	Else
	AAdd(aCols0,Aclone(oRes_Cols[nPos]))
	EndIf
Next

For nPos:=1 to Len(oDlgRes:aCols)
	If !oDlgRes:aCols[nPos][11]
		AAdd(aCols0,Aclone(oDlgRes:aCols[nPos]))
	Else
		AAdd(aResDel,Aclone(oDlgRes:aCols[nPos]))
	EndIf
Next

If Empty(aCols0)
	AAdd(aCols0,Aclone(oRes_Cols0[1]))
EndIf

oRes_Cols:=Aclone(aCols0)

Return

********************************************************************************
Static Function fTrazRes
********************************************************************************
Local nPos,aCols0:={}

fObra()

For nPos:=1 to Len(oRes_Cols)

	wObra  		:= oRes_Cols[nPos][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_OBRA"   })]
	wLocacao	:= oRes_Cols[nPos][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_SEQGUI" })]
	
	//If cObra == wObra .and. wLocacao == If( Empty( cSeqGru ), cSeqGui, cSeqGru )
	If cObra == wObra .and. wLocacao == If( Empty( cSeqTra ), cSeqGui, cSeqTra )
		AAdd(aCols0,Aclone(oRes_Cols[nPos]))
	EndIf
Next

If Empty(aCols0)
	AAdd(aCols0,Aclone(oRes_Cols0[1]))
EndIf

oDlgRes:aCols:=Aclone(aCols0)
oDlgRes:oBrowse:Refresh()

Return

********************************************************************************
Static Function fAcumuEta
********************************************************************************
Local nPos,aCols0:={}

fObra()

For nPos:=1 to Len(oEta_Cols)
	wRota:=oEta_Cols[nPos][Ascan(oDlgEta:aHeader,{|x|AllTrim(x[2])=="ZA3_ROTA"})]
	If .f.//cRota<>wRota
		AAdd(aCols0,Aclone(oEta_Cols[nPos]))
	EndIf
Next

For nPos:=1 to Len(oDlgEta:aCols)
	AAdd(aCols0,Aclone(oDlgEta:aCols[nPos]))
Next

If Empty(aCols0)
	AAdd(aCols0,Aclone(oEta_Cols0[1]))
EndIf

oEta_Cols:=Aclone(aCols0)

Return

********************************************************************************
Static Function fTrazEta
********************************************************************************
Local nPos,aCols0:={}

fObra()

For nPos:=1 to Len(oEta_Cols)
	wRota:=oEta_Cols[nPos][Ascan(oDlgEta:aHeader,{|x|AllTrim(x[2])=="ZA3_ROTA"})]
	If .t.//cRota==wRota
		AAdd(aCols0,Aclone(oEta_Cols[nPos]))
	EndIf
Next

If Empty(aCols0)
	AAdd(aCols0,Aclone(oEta_Cols0[1]))
EndIf

oDlgEta:aCols:=Aclone(aCols0)
oDlgEta:oBrowse:Refresh()

Return

********************************************************************************
Static Function fFolderBdi(nFolder,nLin1,nCol1,nLin2,nCol2)
********************************************************************************
Local nLinS1,nColS1,nLinG1,nColG1
Local nLinS2,nColS2,nLinG2,nColG2
Local nLinS3,nColS3,nLinG3,nColG3
Local nLinS4,nColS4,nLinG4,nColG4

nLinS1:=008
nColS1:=004
nLinG1:=007
nColG1:=061

nLinS2:=nLinS1
nColS2:=nColS1+118
nLinG2:=nLinG1
nColG2:=nColG1+118

nLinS3:=nLinS2
nColS3:=nColS2+118
nLinG3:=nLinG2
nColG3:=nColG2+118

nLinS4:=nLinS3
nColS4:=nColS3+118
nLinG4:=nLinG3
nColG4:=nColG3+118

nLinS4:=nLinS3
nColS4:=nColS3
nLinG4:=nLinG3
nColG4:=nColG3

nLinS3:=nLinS2
nColS3:=nColS2
nLinG3:=nLinG2
nColG3:=nColG2

nLinS2:=nLinS1
nColS2:=nColS1
nLinG2:=nLinG1
nColG2:=nColG1

nLinA :=010
nPos  :=0

cLabel:=" BDI - Composição de Custos "

nPos:=0
@ nLinS2+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Aquisição"        ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS2+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Residual (%)"     ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS2+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Residual (R$)"    ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS2+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Vida Útil"        ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS2+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Disp.Veículo"     ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS2+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Útil Efetiva"     ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS2+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Juros Mês"        ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS2+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Seguro"           ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS2+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Licenciamento"    ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS2+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Custo Lavagem"    ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS2+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Freq.Lavagem"     ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS2+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Combustível"      ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS2+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Consumo Combust." ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS2+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Custo Lubrific."  ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS2+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Interv.Lubrific." ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS2+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Pneus"            ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS2+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Preço pneu"       ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS2+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Vida útil pneu"   ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS2+(nLinA*(++nPos-1)),nColS2 Say OemToAnsi("Cons.peça"        ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]

nPos:=0
@ nLinG2+(nLinA*(++nPos-1)),nColG2 msGet oValAqu    VAR nValAqu    Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG2+(nLinA*(++nPos-1)),nColG2 msGet oPerRes    VAR nPerRes    Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG2+(nLinA*(++nPos-1)),nColG2 msGet oValRes    VAR nValRes    Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG2+(nLinA*(++nPos-1)),nColG2 msGet oValUti    VAR nValUti    Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG2+(nLinA*(++nPos-1)),nColG2 msGet oValDis    VAR nValDis    Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG2+(nLinA*(++nPos-1)),nColG2 msGet oValEfe    VAR nValEfe    Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG2+(nLinA*(++nPos-1)),nColG2 msGet oValJur    VAR nValJur    Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG2+(nLinA*(++nPos-1)),nColG2 msGet oPerSeg    VAR nPerSeg    Size 45,7 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG2+(nLinA*(++nPos-1)),nColG2 msGet oValLic    VAR nValLic    Size 45,7 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG2+(nLinA*(++nPos-1)),nColG2 msGet oValLav    VAR nValLav    Size 45,7 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG2+(nLinA*(++nPos-1)),nColG2 msGet oFreLav    VAR nFreLav    Size 45,7 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG2+(nLinA*(++nPos-1)),nColG2 msGet oValCom    VAR nValCom    Size 45,7 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG2+(nLinA*(++nPos-1)),nColG2 msGet oQtdCom    VAR nQtdCom    Size 45,7 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG2+(nLinA*(++nPos-1)),nColG2 msGet oValLub    VAR nValLub    Size 45,7 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG2+(nLinA*(++nPos-1)),nColG2 msGet oIntLub    VAR nIntLub    Size 45,7 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG2+(nLinA*(++nPos-1)),nColG2 msGet oValPne    VAR nValPne    Size 45,7 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG2+(nLinA*(++nPos-1)),nColG2 msGet oPrePne    VAR nPrePne    Size 45,7 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG2+(nLinA*(++nPos-1)),nColG2 msGet oVidPne    VAR nVidPne    Size 45,7 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG2+(nLinA*(++nPos-1)),nColG2 msGet oValPec    VAR nValPec    Size 45,7 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()

@ nLinS2-006,nColS2-002 TO nLinS2+(nLinA*(++nPos-1))+002,nColS2+104 LABEL cLabel PIXEL COLOR CLR_HBLUE OF oFolder:aDialogs[nFolder]

cLabel:=" Custo Fixo "

nPos:=0
@ nLinS3+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Remun.Capital"    ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS3+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Reserva (%)"      ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS3+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Reserva (R$)"     ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS3+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Seguro Casco"     ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS3+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Licenciamento"    ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS3+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Seguro Obrigat."  ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]

nPos:=0
@ nLinG3+(nLinA*(++nPos-1)),nColG3 msGet oValRemFix VAR nValRemFix Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG3+(nLinA*(++nPos-1)),nColG3 msGet oPerResFix VAR nPerResFix Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG3+(nLinA*(++nPos-1)),nColG3 msGet oValResFix VAR nValResFix Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG3+(nLinA*(++nPos-1)),nColG3 msGet oValCasFix VAR nValCasFix Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG3+(nLinA*(++nPos-1)),nColG3 msGet oValLicFix VAR nValLicFix Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG3+(nLinA*(++nPos-1)),nColG3 msGet oValSegFix VAR nValSegFix Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()

@ nLinS3-006,nColS3-002 TO nLinS3+(nLinA*(++nPos-1))+002,nColS3+104 LABEL cLabel PIXEL COLOR CLR_HBLUE OF oFolder:aDialogs[nFolder]

cLabel:=" Custo Variável "

nPosAux:=nPos
nLinAux:=nLinS3+(nLinA*(nPosAux))
@ nLinS3+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Combustível"      ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS3+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Lubrificação"     ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS3+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Pneus"            ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS3+(nLinA*(++nPos-1)),nColS3 Say OemToAnsi("Lavagem"          ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]

nPos:=nPosAux
@ nLinG3+(nLinA*(++nPos-1)),nColG3 msGet oValComFix VAR nValComFix Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG3+(nLinA*(++nPos-1)),nColG3 msGet oValLubFix VAR nValLubFix Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG3+(nLinA*(++nPos-1)),nColG3 msGet oValPneFix VAR nValPneFix Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG3+(nLinA*(++nPos-1)),nColG3 msGet oValLavFix VAR nValLavFix Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()

@ nLinAux-006,nColS3-002 TO nLinS3+(nLinA*(++nPos-1))+002,nColS3+104 LABEL cLabel PIXEL COLOR CLR_HBLUE OF oFolder:aDialogs[nFolder]

cLabel:=" Tarifas (%) "

nPos:=0
@ nLinS4+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("ISS"              ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS4+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("PIS/COFINS"       ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS4+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("ADMIN"            ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS4+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("Lucro"            ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS4+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("Seguro"           ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS4+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("Juros Mensais"    ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS4+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("CPMF"             ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS4+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("CSLL"             ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS4+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("Imposto de Renda" ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS4+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("Total BDI"        ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]

nPos:=0
@ nLinG4+(nLinA*(++nPos-1)),nColG4 msGet oPerIssBDI VAR nPerIssBDI Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG4+(nLinA*(++nPos-1)),nColG4 msGet oPerPisBDI VAR nPerPisBDI Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG4+(nLinA*(++nPos-1)),nColG4 msGet oPerAdmBDI VAR nPerAdmBDI Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG4+(nLinA*(++nPos-1)),nColG4 msGet oPerLucBDI VAR nPerLucBDI Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG4+(nLinA*(++nPos-1)),nColG4 msGet oPerSegBDI VAR nPerSegBDI Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG4+(nLinA*(++nPos-1)),nColG4 msGet oPerJurBDI VAR nPerJurBDI Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG4+(nLinA*(++nPos-1)),nColG4 msGet oPerCpmBDI VAR nPerCpmBDI Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG4+(nLinA*(++nPos-1)),nColG4 msGet oPerCslBDI VAR nPerCslBDI Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG4+(nLinA*(++nPos-1)),nColG4 msGet oPerIrrBDI VAR nPerIrrBDI Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG4+(nLinA*(++nPos-1)),nColG4 msGet oPerTotBDI VAR nPerTotBDI Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()

@ nLinS4-006,nColS4-002 TO nLinS4+(nLinA*(++nPos-1))+002,nColS4+104 LABEL cLabel PIXEL COLOR CLR_HBLUE OF oFolder:aDialogs[nFolder]

cLabel:=" Tarifas (R$) "

nPosAux:=nPos
nLinAux:=nLinS3+(nLinA*(nPosAux))
@ nLinS4+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("ISS"              ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS4+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("PIS/COFINS"       ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS4+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("ADMIN"            ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS4+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("Lucro"            ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS4+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("Seguro"           ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS4+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("Juros Mensais"    ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS4+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("CPMF"             ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS4+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("CSLL"             ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS4+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("Imposto de Renda" ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]
@ nLinS4+(nLinA*(++nPos-1)),nColS4 Say OemToAnsi("Total BDI"        ) Size 50,8 PIXEL OF oFolder:aDialogs[nFolder]

nPos:=nPosAux
@ nLinG4+(nLinA*(++nPos-1)),nColG4 msGet oValIssBDI VAR nValIssBDI Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG4+(nLinA*(++nPos-1)),nColG4 msGet oValPisBDI VAR nValPisBDI Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG4+(nLinA*(++nPos-1)),nColG4 msGet oValAdmBDI VAR nValAdmBDI Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG4+(nLinA*(++nPos-1)),nColG4 msGet oValLucBDI VAR nValLucBDI Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG4+(nLinA*(++nPos-1)),nColG4 msGet oValSegBDI VAR nValSegBDI Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG4+(nLinA*(++nPos-1)),nColG4 msGet oValJurBDI VAR nValJurBDI Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG4+(nLinA*(++nPos-1)),nColG4 msGet oValCpmBDI VAR nValCpmBDI Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG4+(nLinA*(++nPos-1)),nColG4 msGet oValCslBDI VAR nValCslBDI Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG4+(nLinA*(++nPos-1)),nColG4 msGet oValIrrBDI VAR nValIrrBDI Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()
@ nLinG4+(nLinA*(++nPos-1)),nColG4 msGet oValTotBDI VAR nValTotBDI Size 45,8 PIXEL OF oFolder:aDialogs[nFolder] PICTURE "@E 999999,999.99" VALID fCalcTotal() When fWhen()

@ nLinAux-006,nColS4-002 TO nLinS4+(nLinA*(++nPos-1))+002,nColS4+104 LABEL cLabel PIXEL COLOR CLR_HBLUE OF oFolder:aDialogs[nFolder]

//@ 000+200,057+240 Button oCalcula Prompt OemToAnsi("Calcula Item") Size 70,11 PIXEL Of oFolder:aDialogs[nFolder] Action fCalc777(.t.)
//@ 000+200,057+315 Button oCalcTot   Prompt OemToAnsi("Calcula Tudo") Size 70,11 PIXEL Of oFolder:aDialogs[nFolder] Action fCalc888(.t.)

Return


********************************************************************************
Static Function fCalcItem( lPergunta )
Default lPergunta := .T.		// Cristiam Rossi em 28/01/2016
********************************************************************************
	If !fWhen() ; Return ; EndIf

	If lPergunta .and. ! MsgYesNo("Confirma Cálculo ??")	// Cristiam Rossi em 28/01/2016
		Return nil
	EndIf                
	
	// Frank Zwarg Fuga - Calculo do KM da ZA7 - 10/02/2016
	If !U_ACHAKM()
		//Return
	EndIf      
	U_FIATFTL()

	if u_CalcZA7V() == .f.
		Return .F. 
	Endif	
	If u_CalcZA7C() == .f.
		Return .F.
	Endif

fCalcCar()
fCalcPed()
fCalcLsr()
fCalcTuv()
//fCalcTur() Alison 16/07/13
fCalcTap()
fCalcPre()
fCalcPrf()
fCalcInv()
fCalcAle()
nValInv+=nValAle  //Junta Bloq.Serra com Alemoa
nVl2Inv+=nVl2Ale  //Junta Bloq.Serra com Alemoa

//fCalcCus(.t.)
fCalcGui(.t.)
fCalcGru(.t.)
fCalcPla(.t.)
fCalcMar(.t.)
fCalcTra(.t.)

//fCalcTaxaAdm()

//TabPreco()

Return        

Static Function fCalcTaxaAdm()
	Local aArea		:= GetArea()
	Local aAreaZAB	:= ZAB->(GetArea())
    Local nValCob 	:= 0        
    Local nTxAdm  	:= 0 
    Local nResult 	:= 0
	//Taxa Adm 
	nValCob := 0         
	nTxAdm	:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TXADM"})]
	
	For nX := 1 To Len(oDlgRes:aCols)
		DbSelectArea("ZAB")
		DbSetOrder(1)//
		DbSeek(xFilial("ZAB")+oDlgRes:aCols[nX, GdFieldPos("ZAA_CODIGO",oDlgRes:aHeader)])
		
		If ZAB->ZAB_ID <> "12"  .And. !oDlgRes:aCols[nX,Len(oDlgRes:aHeader)+1]
			nValCob += oDlgRes:aCols[nX, GdFieldPos("ZAA_VALCOB",oDlgRes:aHeader)]		
		EndIf
	Next nX
	nResult := (nValCob * nTxAdm) / 100
	//If nResult > 0
		AddResp("12",nResult,"")
	//EndIf         
	Aadd(oRes_Cols,Aclone(oDlgRes:aCols[Len(oDlgRes:aCols)]))//Add no AcolsGeral
	
	n3Comp:=nCompConG
	n3Larg:=nLargConG
	n3Altu:=nAltuConG
	n3Peso:=nPesoConG
	
	RestArea(aAreaZAB)
	RestArea(aArea)
Return

********************************************************************************
Static Function fCalcCus(lCalcItem)
********************************************************************************
If !lCalcItem==.t. ; lCalcItem:=.f. ; EndIf

nValCus:=nValLsr+nValPre+nValPrf+nValTap+nValTuv+nValTur+nValEsc+nValPed+nValInv+nValIpt+nValAco+nValCet
nValCus+=nValSem+nValTva+nValTel+nValOut+nValCon+nValAdi+nValAux

nValCus+=nInstru + nBalsa + nDesDTA + nMonDes + nApoGui + nCavExt	// adiciona os valores Instrumentação, Balsa, Despachante DTA, 
nValCus+=nMobEnc + nDmoEnc											// Montagem/Desmontagem, Carro Apoio/Guindauto e Cavalo Extra no Total das Tarifas

nVl2Cus:=nVl2Lsr+nVl2Pre+nVl2Prf+nVl2Tap+nVl2Tuv+nVl2Tur+nVl2Esc+nVl2Ped+nVl2Inv+nVl2Ipt+nVl2Aco+nVl2Cet
nVl2Cus+=nVl2Sem+nVl2Tva+nVl2Tel+nVl2Out+nVl2Con+nVl2Adi+nVl2Aux

nValCuG:=nValCus+nVl2Cus
nValCuT:=nValCus+nVl2Cus

Return

********************************************************************************
Static Function fCalcTra(lCalcItem)
********************************************************************************
Local cTipoCa,nPreDia,nVrHor
Local nBaseDia,nBaseKm

If !lCalcItem==.t. ; lCalcItem:=.f. ; EndIf

If !ValType(oDlgCon)=="O"  //Se o objeto já foi criado
	Return
EndIf

nValDiasV:=0
nValDiasC:=0
nValBase :=0
nValBaseT:=0

nVadDiasV:=0
nVadDiasC:=0
nVadBase :=0
nVadBaseT:=0

nVakDiasV:=0
nVakDiasC:=0
nVakBase :=0
nVakBaseT:=0

nValKmV  :=nKmV
nValKmC  :=nKmC

For nPos:=1 to Len(oDlgCon:aCols)
	If !oDlgCon:aCols[nPos,Len(oDlgCon:aHeader)+1]  //!Deleted()
	nPosicao := 0
	nPosicao := nPos
		nValDiasV+=oDlgCon:aCols[nPos][Ascan(oDlgCon:aHeader,{|x|Alltrim(x[2])=="ZAE_DIASV"})]
		nValDiasC+=oDlgCon:aCols[nPos][Ascan(oDlgCon:aHeader,{|x|Alltrim(x[2])=="ZAE_DIASC"})]

		cTipoCa :=oDlgCon:aCols[nPos][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_TIPOCA"})]
		cTipoCaT:=fTrazCboX("ZAE_TIPOCA",oDlgCon:aCols[nPos][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_TIPOCA"})])

		nValBase+=oDlgCon:aCols[nPos][Ascan(oDlgCon:aHeader,{|x|Alltrim(x[2])=="ZAE_VRDIA"})]
		nVakBase+= fTrazVrKm(oDlgCon:aCols[nPos][Ascan(oDlgCon:aHeader,{|x|Alltrim(x[2])=="ZAE_TRANSP"})])
		nVadBase+=fTrazVrDia(oDlgCon:aCols[nPosicao][Ascan(oDlgCon:aHeader,{|x|Alltrim(x[2])=="ZAE_TRANSP"})])
		
	EndIf
Next

If lCalcItem
	nVadBaseI:=0
	nVakBaseI:=0
EndIf

nVadBaseT :=(nValDiasV+nValDiasC)*nVadBaseI
nVadFreteS:=nVadBaseT+nValCus

nVakBaseT :=(nValKmV+nValKmC)*nVakBaseI
nVakFreteS:=nVakBaseT+nValCus

If cTipoCa=="K"
	nValBaseT :=(nValKmV+nValKmC)*nValBase
	nValFreteS:=nValBaseT+nValCus
ElseIf cTipoCa=="F"//Fechado
	nValBaseT :=nValBase
	nValFreteS:=nValBaseT
Else
	nValBaseT :=(nValDiasV+nValDiasC)*nValBase
	nValFreteS:=nValBaseT+nValCus
EndIf                                                               

//nValFechT := nValBaseT
//nValFrete := nValBaseT

//oValFechT:Refresh()
//oValFrete:Refresh()
           
fAcumuCus()
//SumValRes()
U_fCusIndT(.T.)                       
//SumValRes()
//LoadValViag(nValFrete)
//nValRenTG := nValViagem-nValCusTG

//Valor a cobrar 'Responsabilidades'
nValCuT := 0
For nX := 1 To Len(oDlgRes:aCols)
	nValCuT += oDlgRes:aCols[nX, GdFieldPos("ZAA_VALCOB",oDlgRes:aHeader)]
Next nX
oValCuT:Refresh()

nValPreT := nValCuT+nValFechT
oValPreT:Refresh() 

Return

********************************************************************************
Static Function fCalcGui(lCalcItem)
********************************************************************************
Local cTipoCa,nPreDia,nVrHor,nQtMes,nQtDia,nDiaTurno,nHrsTurno
Private oDlgVT

If !lCalcItem==.t. ; lCalcItem:=.f. ; EndIf

If !ValType(oDlgGui)=="O"  //Se o objeto já foi criado
	Return
EndIf                   
                       
If !(ValType(oGetVT)=='O')
	TurVal(10,oDlgGui)
EndIf

//nValMob:=nValCus	//oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRMOB" })]
//nValDes:=nVl2Cus	//oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRDES" })]
nValMob:=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRMOB" })]
nValDes:=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRDES" })]
nValSeg:=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRSEGU"})]

//nValMob:=nValCusM
//nValDes:=nValCusD

cTipoIss:=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_TPISS" })]
cTipoSeg:=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_TPSEGU"})]
cTipoCa :=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_TIPOCA"})]
nPreDia :=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_PREDIA"})]
nVrHor  :=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRHOR" })]  
nMinDia :=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_MINDIA"})] 	// Cleuber 28-05
nMinMes :=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_MINMES"})]	// Cleuber 28-05
nQtMes  :=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_QTMES" })] //Exibir Campo - Renato Ruy - 12/04/12// inibir o uso - Cristiam em 18/04/11
nQtDia  :=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_QTDIA" })] //Exibir Campo - Renato Ruy - 12/04/12// inibir o uso - Cristiam em 18/04/11

nDiaTurno:="0.00"
nHrsTurno:=0
//Valores de Turnos
If ValType(oGetVT)=='O' .and.  Len(oGetVT:aCols) >= 1 .And. cObra==oGetVT:aCols[1, GdFieldPos("ZBB_OBRA",oGetVT:aHeader)] .And. cSeqGui==oGetVT:aCols[1, GdFieldPos("ZBB_SEQGUI",oGetVT:aHeader)]
nDiaTurno := GDFieldGet ( "ZBB_MINDIT", 1, .F., oGetVT:aHeader, oGetVT:aCols )
nHrsTurno := GetHorasTurno(GDFieldGet("ZBB_HRINIT",1,.F.,oGetVT:aHeader,oGetVT:aCols),GDFieldGet("ZBB_HOFIMT",1,.F.,oGetVT:aHeader,oGetVT:aCols))   
EndIf   
nValTur1 := IIF( ValType(oGetVT)=='O' .and.  Len(oGetVT:aCols) >= 1 , ((Val(nDiaTurno) * nHrsTurno) * GDFieldGet ( "ZBB_VALTUR", 1, .F., oGetVT:aHeader, oGetVT:aCols )),nValTur1) 


If ValType(oGetVT)=='O' .and.  Len(oGetVT:aCols) >= 2 .And. cObra==oGetVT:aCols[2, GdFieldPos("ZBB_OBRA",oGetVT:aHeader)] .And. cSeqGui==oGetVT:aCols[2, GdFieldPos("ZBB_SEQGUI",oGetVT:aHeader)]
nDiaTurno := GDFieldGet ( "ZBB_MINDIT", 2, .F., oGetVT:aHeader, oGetVT:aCols )
nHrsTurno := GetHorasTurno(GDFieldGet("ZBB_HRINIT",2,.F.,oGetVT:aHeader,oGetVT:aCols),GDFieldGet("ZBB_HOFIMT",2,.F.,oGetVT:aHeader,oGetVT:aCols))
EndIf   
nValTur2 := IIF( ValType(oGetVT)=='O' .and.  Len(oGetVT:aCols) >= 2 , ((Val(nDiaTurno) * nHrsTurno) * GDFieldGet ( "ZBB_VALTUR", 2, .F., oGetVT:aHeader, oGetVT:aCols )),nValTur2) 
     
If ValType(oGetVT)=='O' .and.  Len(oGetVT:aCols) >= 3 .And. cObra==oGetVT:aCols[3, GdFieldPos("ZBB_OBRA",oGetVT:aHeader)] .And. cSeqGui==oGetVT:aCols[3, GdFieldPos("ZBB_SEQGUI",oGetVT:aHeader)]
nDiaTurno := GDFieldGet ( "ZBB_MINDIT", 3, .F., oGetVT:aHeader, oGetVT:aCols )
nHrsTurno := GetHorasTurno(GDFieldGet("ZBB_HRINIT",3,.F.,oGetVT:aHeader,oGetVT:aCols),GDFieldGet("ZBB_HOFIMT",3,.F.,oGetVT:aHeader,oGetVT:aCols))
EndIf
nValTur3 := IIF( ValType(oGetVT)=='O' .and.  Len(oGetVT:aCols) >= 3 , ((Val(nDiaTurno) * nHrsTurno) * GDFieldGet ( "ZBB_VALTUR", 3, .F., oGetVT:aHeader, oGetVT:aCols )),nValTur3) 

//nValTur2 :=IIF( ValType(oGetVT)=='O' .and.  Len(oGetVT:aCols) >= 2 , (nPreDia * GDFieldGet ( "ZBB_VALTUR", 2, .F., oGetVT:aHeader, oGetVT:aCols )),0)
//nValTur3 :=IIF( ValType(oGetVT)=='O' .and.  Len(oGetVT:aCols) >= 3 , (nPreDia * GDFieldGet ( "ZBB_VALTUR", 3, .F., oGetVT:aHeader, oGetVT:aCols )),0)
cNumAcT  :=IIF( ValType(oGetVT)=='O' , Len(oGetVT:aCols),1)
                               
// 8500 - retirei o comentário para validar se os campos ZA5_QTMES e ZA5_QTDIA estão preenchidos, caso sim será executado calculo conforme validação da 8508 a 8516 - Renato Ruy - 12/04/12
If nQtMes==0 .and. nQtDia==0  
Do Case
	Case cTipoCa=="H" ; nValEqu:= (nPreDia*nVrHor)	//*nMinDia
	Case cTipoCa=="D" ; nValEqu:= (nPreDia*nVrHor)	//*nMinDia
	Case cTipoCa=="M" ; nValEqu:= (nPreDia*nVrHor) //*nMinMes
	Case cTipoCa=="F" ; nValEqu:= nVrHor
	Otherwise         ; nValEqu:= 0
EndCase
Else //8508 a 8516 - retirado comentário para executar o calculo - Renato Ruy - 12/04/12
	Do Case
	Case cTipoCa=="H" ; nValEqu:=(nQtMes*nMinMes*nVrHor)+(nQtDia*nMinDia*nVrHor)
	Case cTipoCa=="D" ; nValEqu:=(nQtMes*nMinMes*nVrHor)+(nQtDia*nMinDia*nVrHor) 
	Case cTipoCa=="M" ; nValEqu:=(nQtMes*nMinMes*nVrHor)+(nQtDia*nMinDia*nVrHor)
	Case cTipoCa=="F" ; nValEqu:=nVrHor
	Otherwise         ; nValEqu:=0
	EndCase
EndIf
// fim do comentário

nValEqu += nValTur1+nValTur2+nValTur3

nValBasGT:=nValEqu  //Vr.Base Total (Guindaste)

//Valor a cobrar 'Responsabilidades'
nValCobr := 0
For nX := 1 To Len(oDlgRes:aCols)
	nValCobr += oDlgRes:aCols[nX, GdFieldPos("ZAA_VALCOB",oDlgRes:aHeader)]
Next nX
oValCobr:Refresh()

nValTcp:=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRPESO"})]
nValGui:=(nValEqu+nValMob+nValDes)+nValCus+nValTcp+nValVis

nPerIss:=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_PERISS"})]
If oFolder:nOption == nFolderGui//Verificar se está no folder guindaste, para verificar condição abaixo - Alison(17/10/13)
	if Valtype(M->ZA5_PERISS) == "N" .And. AllTrim(SX3->X3_CAMPO) == "ZA5_PERISS"//verificar se ta posicionado no campo(Alison)	// Se o campo estiver sendo editado o valor atual não está atualizado no aCols - Cristiam Rossi em 15/04/2011
		nPerIss := M->ZA5_PERISS
	endif
EndIf

nBasIss:=nValEqu+nValMob+nValDes+nValTcp+nValSeg+nValCobr
//nValIss:=Round(nPerIss*(nValEqu+nValMob+nValDes+nValTcp+nValSeg)/100,2)

//Se o ISS estiver incluso no valor, calculo o valor do ISS pura e simplesmente
//Chamado 8514 - Nilza - Executado por Marcos Proativa em 03/08/09
nValISS :=U_fCalcIssG(nBasIss,nPerIss,cTipoIss)  //Calcula o ISS dos Guindastes

//Linhas abaixo comentada foram alteradas por conta do chamado 8514 citado acima
/*if alltrim(cTipoIss) == "X"
	nValISS:= 0
else
	nValIss:=((nValEqu+nValMob+nValDes+nValTcp+nValSeg) / ((100-nPerISS)/100)) - nBasIss //Cleuber 28-05
endif	*/

nPreDiaG :=nPreDia
nValBasG :=nVrHor

//nValMobG:=nValCus	//oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRMOB" })]
//nValDesG:=nVl2Cus	//oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRDES" })]
nValMobG:=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRMOB" })]
nValDesG:=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRDES" })]
//nValTAcG:=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRUNIT"})] 
nValTAcG:=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRPESO"})]//Alison 17/07/2013

nValIssG :=nValIss
nValSegG :=nValSeg

If cTipoIss=="I"  //I=Incluso, N=N/A, C=Cliente
	nValTotG :=nValMobG+nValDesG+nValSegG+nValBasGT+nValTAcG+nValCobr
Else
	nValTotG :=nValMobG+nValDesG+nValIssG+nValSegG+nValBasGT+nValTAcG+nValCobr
EndIf       

//SumValRes()
nValRenTG := nValTotG-nValCusTG
nValCusIG := oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_CUSIND" })]
oValRenTG:Refresh()   
oValCusIG:Refresh()

If lCalcItem
	nVamMobG :=nValMobG
	nVamDesG :=nValDesG
	nVamIssG :=nValIssG
	nVamSegG :=nValSegG
	nVamTAcG :=nValTAcG
	Do Case
	Case cTipoIss=="I" ; nVamIssG :=0
	Case cTipoIss=="N" ; nVamIssG :=nValIssG
	Case cTipoIss=="C" ; nVamIssG :=nValIssG
	Case cTipoIss=="X" ; nVamIssG :=0
	EndCase
	Do Case
	Case cTipoSeg=="I" ; nVamSegG :=0
	Case cTipoSeg=="N" ; nVamSegG :=nValSegG
	Case cTipoSeg=="C" ; nVamSegG :=nValSegG
	Case cTipoSeg=="X" ; nVamSegG :=0
	EndCase
EndIf


nVamTotG :=nVamMobG+nVamDesG+nVamIssG+nVamSegG+nValBasGT+nValTAcG

oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VALAS" })] := nValTotG

Return

********************************************************************************
Static Function fCalcGru(lCalcItem)
********************************************************************************
Local cTipoCa,nPreDia,nVrHor

If !lCalcItem==.t. ; lCalcItem:=.f. ; EndIf

If !ValType(oDlgGru)=="O"  //Se o objeto já foi criado
	Return
EndIf

nPreDiaU :=oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_PREDIA"})]  //Qtd.Meses
nValBasU :=oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_VRHOR" })]  //Vr.Base
nValBasUT:=nPreDiaU*nValBasU
nValMobU :=oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_VRMOB" })]	// nValCus
nValDesU :=oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_VRDES" })]	// nVl2Cus
nValChumb:=oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_CHUMBA" })]	// Valor do Cumbador

nMontagU :=oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_MONTAG"})]
nDesmonU :=oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_DESMON"})]
nTelescU :=oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_TELESC"})]
nAncoraU :=oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_ANCORA"})]
nGuiMonU :=oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_GUIMON"})]
nGuiDesU :=oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_GUIDES"})]
nOperadU :=oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_OPERAD"})]

//nOperadUT:=nOperadU+nPreDiaU
nOperadUT:=nOperadU*nPreDiaU

nAcessoU :=0
For nPos:=1 to Len(oDlgAce:aCols)
	If !oDlgAce:aCols[nPos,Len(oDlgAce:aHeader)+1]  //!Deleted()
		nAcessoU+=oDlgAce:aCols[nPos][Ascan(oDlgAce:aHeader,{|x|AllTrim(x[2])=="ZAK_VRDIA"})]
	EndIf
Next

cDisIssU :=fTrazCboX("ZAG_TPISS",oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_TPISS"})])

cTipIssU :=oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_TPISS"})]
nBasIssU := nBaseU := 0
nPerIssU :=oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_PERISS"})]
nValIssU :=oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_VRISS" })]
cTipSegU :=fTrazCboX("ZAG_TPSEGU",oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_TPSEGU"})])
//nBasSegU :=oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_VRCARG"})]
//nPerSegU :=oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_PERSEG"})]
nValSegU :=oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_VRSEGU"})]

nValTotU :=0
nValTotU +=nValBasUT+nValMobU+nValDesU
nValTotU +=nMontagU+nDesmonU+nTelescU+nAncoraU+nGuiMonU+nGuiDesU+nOperadU+nAcessoU
//nValTotU += nValBasU + nOperadU * (nPreDiaU + nValChumb + nValMobU + nValDesU + nMontagU + nDesmonU + nTelescU)
nBaseU   := nValTotU
nValTotU +=nValIssU+nValSegU
/*
Do Case
Case cTipIssU=="I"; nBasIssU :=(nValTotU-nValIssU)	//*nPreDiaU
Case cTipIssU=="N"; nBasIssU :=(nValTotU-nValIssU)	//*nPreDiaU
Case cTipIssU=="X"
Case cTipIssU=="M"; nBasIssU :=(nOperadU         )*nPreDiaU
EndCase
*/
If lCalcItem
	nBaseU 	 := (nValBasU + nOperadU) * nPreDiaU + (nValChumb + nValMobU + nValDesU + nMontagU + nDesmonU + nTelescU)
	nValIssU :=U_fCalcIssG(nBaseU,nPerIssU,cTipIssU)  //Calcula o ISS das Gruas
	oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_VRISS" })]:=nValIssU

//	nValSegU :=fCalcSegG(nBasSegU,nPerSegU)  //Calcula o Seguro das Gruas
//	oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_VRSEGU"})]:=nValSegU

	nValTotU :=0
	nValTotU +=nValBasUT+nValMobU+nValDesU
	nValTotU +=nMontagU+nDesmonU+nTelescU+nAncoraU+nGuiMonU+nGuiDesU+nOperadU+nAcessoU
	nValTotU +=Iif((cTipIssU == "N" .oR. cTipIssU ==  "M"),nValIssU+nValSegU,nValSegU)
EndIf 

//nValTur1 :=IIF( ValType(oGetVT)=='O' .and.  Len(oGetVT:aCols) >= 1 , (nPreDia * GDFieldGet ( "ZBB_VALTUR", 1, .F., oGetVT:aHeader, oGetVT:aCols )),0)
//nValTur2 :=IIF( ValType(oGetVT)=='O' .and.  Len(oGetVT:aCols) >= 2 , (nPreDia * GDFieldGet ( "ZBB_VALTUR", 2, .F., oGetVT:aHeader, oGetVT:aCols )),0)
//nValTur3 :=IIF( ValType(oGetVT)=='O' .and.  Len(oGetVT:aCols) >= 3 , (nPreDia * GDFieldGet ( "ZBB_VALTUR", 3, .F., oGetVT:aHeader, oGetVT:aCols )),0)
//cNumAcT  :=IIF( ValType(oGetVT)=='O' , Len(oGetVT:aCols),1)

Do Case
Case cTipIssU=="I"; nBasIssU :=nValTotU-nValIssU
Case cTipIssU=="N"; nBasIssU :=nValTotU
Case cTipIssU=="X"
Case cTipIssU=="M"; nBasIssU :=nOperadU*nPreDiaU
EndCase

nValIssU1:=nValIssU
nValSegU1:=nValSegU

Return

********************************************************************************
Static Function fCalcPla(lCalcItem)
********************************************************************************
Local cTipoCa,nPreDia,nVrHor

If !lCalcItem==.t. ; lCalcItem:=.f. ; EndIf

If !ValType(oDlgPla)=="O"  //Se o objeto já foi criado
	Return
EndIf

nPreDiaU :=oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_PREDIA"})]  //Qtd.Base
nValBasU :=oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_VRHOR" })]  //Vr.Base
nValBasUT:=nPreDiaU*nValBasU
//nValMobU :=oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_VRMOB" })]	// nValCus
//nValDesU :=oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_VRDES" })]	// nVl2Cus

nVlEst   :=oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_VLEST"})]
//nMontagU :=oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_MONTAG"})]
//nDesmonU :=oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_DESMON"})]
//nTelescU :=oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_TELESC"})]
//nAncoraU :=oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_ANCORA"})]
//nGuiMonU :=oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_GUIMON"})]
//nGuiDesU :=oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_GUIDES"})]
nOperadU :=oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_OPERAD"})]

nOperadUT:=nOperadU*nPreDiaU

cDisIssU :=fTrazCboX("ZAG_TPISS",oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_TPISS"})])

cTipIssU :=oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_TPISS"})]
nBasIssU := nBaseU := 0
nPerIssU :=oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_PERISS"})]
nValIssU :=oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_VRISS" })]
cTipSegU :=fTrazCboX("ZAG_TPSEGU",oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_TPSEGU"})])
nBasSegU :=oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_VRCARG"})]
nPerSegU :=oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_PERSEG"})]
nValSegU :=oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_VRSEGU"})]

nValTotU :=0
nValTotU +=nValBasUT //+nValMobU+nValDesU
//nValTotU +=nMontagU+nDesmonU+nTelescU+nAncoraU+nGuiMonU+nGuiDesU+nOperadU+nAcessoU
nValTotU +=nOperadU
nBaseU	 :=nValTotU
nValTotU +=nValIssU+nValSegU
/*
Do Case
Case cTipIssU=="I"; nBasIssU :=(nValTotU-nValIssU)	//*nPreDiaU
Case cTipIssU=="N"; nBasIssU :=(nValTotU-nValIssU)	//*nPreDiaU
Case cTipIssU=="X"
Case cTipIssU=="M"; nBasIssU :=(nOperadU         )*nPreDiaU
EndCase
*/
If lCalcItem
	nValIssU :=U_fCalcIssG(nBaseU,nPerIssU,cTipIssU)  //Calcula o ISS das Plataformas
	oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_VRISS" })]:=nValIssU

	nValSegU :=fCalcSegG(nBasSegU,nPerSegU)  //Calcula o Seguro das Plataformas
	oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_VRSEGU"})]:=nValSegU

	nValTotU :=0
	nValTotU +=nValBasUT //+nValMobU+nValDesU
//	nValTotU +=nMontagU+nDesmonU+nTelescU+nAncoraU+nGuiMonU+nGuiDesU+nOperadU+nAcessoU
	nValTotU +=nOperadU
	nValTotU +=nValIssU+nValSegU
EndIf
// Incluido para Calcular os valores de Turnos
nValTur1 :=IIF( ValType(oGetVT)=='O' .and.  Len(oGetVT:aCols) >= 1 , (nPreDiaU * GDFieldGet ( "ZBB_VALTUR", 1, .F., oGetVT:aHeader, oGetVT:aCols )),0)
nValTur2 :=IIF( ValType(oGetVT)=='O' .and.  Len(oGetVT:aCols) >= 2 , (nPreDiaU * GDFieldGet ( "ZBB_VALTUR", 2, .F., oGetVT:aHeader, oGetVT:aCols )),0)
nValTur3 :=IIF( ValType(oGetVT)=='O' .and.  Len(oGetVT:aCols) >= 3 , (nPreDiaU * GDFieldGet ( "ZBB_VALTUR", 3, .F., oGetVT:aHeader, oGetVT:aCols )),0)
cNumAcT  :=IIF( ValType(oGetVT)=='O' , Len(oGetVT:aCols),1)

Do Case
Case cTipIssU=="I"; nBasIssU :=nValTotU-nValIssU
Case cTipIssU=="N"; nBasIssU :=nValTotU
Case cTipIssU=="X"
Case cTipIssU=="M"; nBasIssU :=nOperadU*nPreDiaU
EndCase

nValIssU1:=nValIssU
nValSegU1:=nValSegU

Return

********************************************************************************
Static Function fCalcMar(lCalcItem)
********************************************************************************
Local cTipoCa,nPreDia,nVrHor

If !lCalcItem==.t. ; lCalcItem:=.f. ; EndIf

If !ValType(oDlgMar)=="O"  //Se o objeto já foi criado
	Return
EndIf

nPreDiaU :=oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_PREDIA"})]  //Qtd.Base
nValBasU :=oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_VRHOR" })]  //Vr.Base
nValBasUT:=nPreDiaU*nValBasU
//nValMobU :=oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_VRMOB" })]	// nValCus
//nValDesU :=oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_VRDES" })]	// nVl2Cus

//nVlEst   :=oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_VLEST"})]
//nMontagU :=oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_MONTAG"})]
//nDesmonU :=oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_DESMON"})]
//nTelescU :=oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_TELESC"})]
//nAncoraU :=oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_ANCORA"})]
//nGuiMonU :=oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_GUIMON"})]
//nGuiDesU :=oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_GUIDES"})]
//nOperadU :=oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_OPERAD"})]

nOperadUT:=nOperadU*nPreDiaU

cDisIssU :=fTrazCboX("ZAG_TPISS",oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_TPISS"})])

cTipIssU :=oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_TPISS"})]
nBasIssU := nBaseU := 0
nPerIssU :=oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_PERISS"})]
nValIssU :=oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_VRISS" })]
cTipSegU :=fTrazCboX("ZAG_TPSEGU",oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_TPSEGU"})])
nBasSegU :=oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_VRCARG"})]
nPerSegU :=oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_PERSEG"})]
nValSegU :=oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_VRSEGU"})]

nValTotU :=0
nValTotU +=nValBasUT //+nValMobU+nValDesU
//nValTotU +=nMontagU+nDesmonU+nTelescU+nAncoraU+nGuiMonU+nGuiDesU+nOperadU+nAcessoU
nValTotU +=nOperadU
nBaseU	 :=nValTotU
nValTotU +=nValIssU+nValSegU
/*
Do Case
Case cTipIssU=="I"; nBasIssU :=(nValTotU-nValIssU)	//*nPreDiaU
Case cTipIssU=="N"; nBasIssU :=(nValTotU-nValIssU)	//*nPreDiaU
Case cTipIssU=="X"
Case cTipIssU=="M"; nBasIssU :=(nOperadU         )*nPreDiaU
EndCase
*/
If lCalcItem
	nValIssU :=U_fCalcIssG(nBaseU,nPerIssU,cTipIssU)  //Calcula o ISS Maritima
	oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_VRISS" })]:=nValIssU

	nValSegU :=fCalcSegG(nBasSegU,nPerSegU)  //Calcula o Seguro Maritima
	oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_VRSEGU"})]:=nValSegU

	nValTotU :=0
	nValTotU +=nValBasUT //+nValMobU+nValDesU
//	nValTotU +=nMontagU+nDesmonU+nTelescU+nAncoraU+nGuiMonU+nGuiDesU+nOperadU+nAcessoU
	nValTotU +=nOperadU
	nValTotU +=nValIssU+nValSegU
EndIf

Do Case
Case cTipIssU=="I"; nBasIssU :=nValTotU-nValIssU
Case cTipIssU=="N"; nBasIssU :=nValTotU
Case cTipIssU=="X"
Case cTipIssU=="M"; nBasIssU :=nOperadU*nPreDiaU
EndCase

nValIssU1:=nValIssU
nValSegU1:=nValSegU

Return

********************************************************************************
Static Function fTrazCboX(cCampo,cCod)  
// Traz somente o texto do X3_CBOX do campo informado
********************************************************************************
Local nPos,cCombo,cRet

cCombo:=AllTrim(GetSx3Cache(cCampo,"X3_CBOX"))

cRet:=cCod

nPos:=At(cRet+"=",cCombo)
If nPos>0
	cRet:=Subs(cCombo,nPos+2,Len(cCombo))
	nPos:=At(";",cRet)
	If nPos>0
		cRet:=Subs(cRet,1,nPos-1)
	EndIf
EndIf

Return(cRet)

********************************************************************************
Static Function fMontaCboX(cCampo)  
// Retorna o array com os textos do X3_CBOX do campo informado
********************************************************************************
Local nPos,cCombo,cRet

cCombo:=AllTrim(GetSx3Cache(cCampo,"X3_CBOX"))

aRet:={}

While !Empty(cCombo)
	nPos:=At(";",cCombo)
	If nPos>0
		AAdd(aRet,Subs(cCombo,1,nPos-1))
		cCombo:=Subs(cCombo,nPos+1,Len(cCombo)-nPos)
	Else
		AAdd(aRet,cCombo)
		cCombo:=""
	EndIf
End

Return(aRet)

********************************************************************************
Static Function fDispGrua
********************************************************************************
If !ValType(oPrediaU)=="O"  //Se o objeto já foi criado
	Return
EndIf

oPreDiaU:Refresh()
oValBasU:Refresh()
oValBasUT:Refresh()
oValMobU:Refresh()
oValDesU:Refresh()

If ZA0->ZA0_TIPOSE == "U"
	oMontagU:Refresh()
	oDesmonU:Refresh()
	oTelescU:Refresh()
	oAncoraU:Refresh()
	oGuiMonU:Refresh()
	oGuiDesU:Refresh()
EndIf

If ZA0->ZA0_TIPOSE <> "M"
	oOperadUT:Refresh()
EndIf
	
If ZA0->ZA0_TIPOSE <> "P" .and. ZA0->ZA0_TIPOSE <> "M"
	oAcessoU:Refresh()
EndIf	

oDisIssU:Refresh()
oPerIssU:Refresh()
oBasIssU:Refresh()
oValIssU:Refresh()
oTipSegU:Refresh()
oPerSegU:Refresh()
oBasSegU:Refresh()
oValSegU:Refresh()
oValTotU:Refresh()

oValIssU1:Refresh()
oValSegU1:Refresh()

Return

********************************************************************************
Static Function fFolderPro(nFolder,nLin1,nCol1,nLin2,nCol2)
// Folder Dados da Proposta
********************************************************************************
Local cAlias :="ZA0"
Local nPos,aCampos:={},aCamposGet:={}
Local aCamposNao := {}
Local aCamposSim := {}
Local pOpc		 := nOpc     

//Validação (Alison 16/07/13)
DbSelectArea("DTQ")
DbSetOrder(8)//Projeto
If !DbSeek(xFilial("DTQ")+SubStr(ZA0->ZA0_PROJET,1,9))
	U_CriaMV("MV_CAMPOZ1")
	cCamposGet := Upper(AllTrim(GetMv("MV_CAMPOZ1")))
	U_CriaMV("MV_CAMPOZ2")
	cCamposGet += "|" + Upper(AllTrim(GetMv("MV_CAMPOZ2")))
Else
	cCamposGet := ""
EndIf

/*U_CriaMV("MV_CAMPOZ1")
cCamposGet := Upper(AllTrim(GetMv("MV_CAMPOZ1")))
U_CriaMV("MV_CAMPOZ2")
cCamposGet += "|" + Upper(AllTrim(GetMv("MV_CAMPOZ2")))*/

SX3->(dbSetOrder(1))
SX3->(dbSeek(cAlias))
While SX3->(!Eof() .and. X3_ARQUIVO==cAlias)
	If X3Uso(SX3->X3_USADO) .AND. cNivel >= SX3->X3_NIVEL
		AAdd(aCampos,SX3->X3_CAMPO)
		If SX3->X3_CONTEXT <> "V"
			M->&(SX3->X3_CAMPO) := (cAlias)->&(SX3->X3_CAMPO)
			If SX3->(Upper(AllTrim(X3_CAMPO))$cCamposGet)
				AAdd(aCamposGet,SX3->X3_CAMPO)
				AAdd(aCampoZA0 ,SX3->X3_CAMPO)
			EndIf                                                 
		Else
			M->&(SX3->X3_CAMPO) := CriaVar(SX3->X3_CAMPO)
		EndIf
	EndIf
	SX3->(dbSkip())
End

//         MSMGET():NEW(cAlias,nReg               ,nOpc, [ uPar1 ], [ uPar2 ], [ uPar3 ], [ aACho ], [ aPos ]                , [ aCpos ], [uPar4 ] , [ uPar5 ], [ uPar6 ], [ uPar7 ], [ oWnd ]                , [ uPar8 ], [ lMemoria ], [ lColuna ], [ uPar9 ], [lSemPastas ] )
oEnChoice:=MSMGet():New(cAlias,(cAlias)->(Recno()),pOpc,          ,          ,          ,aCampos   ,{nLin1,nCol1,nLin2,nCol2},aCamposGet,3         ,1         ,          ,          ,oFolder:aDialogs[nFolder],          ,             ,            ,          ,               )

Return

********************************************************************************
Static Function fFolderTra(nFolder,nLin1,nCol1,nLin2,nCol2)
// Folder Transportes
********************************************************************************
Local aCamposNao := {}
Local aCamposSim := {}
Local nStyle:=GD_INSERT + GD_UPDATE + GD_DELETE
Local cAlias,cChave,cCondicao,nIndice,cFiltro

nStyle:=If(nOpcManu==2,0,nStyle)  //2=Visualizar

cAlias   :="ZA6"
cChave   :=xFILIAL(cAlias)+cProjet

cCondicao:='ZA6_FILIAL+ZA6_PROJET=="'+cChave+'"' 

nIndice  :=1  //ZA6_FILIAL+ZA6_PROJET+ZA6_OBRA+ZA6_SEQTRA

// cFiltro  :=cCondicao // alterado por Frank Zwarg Fuga
cFiltro   :='ZA6_FILIAL+ZA6_PROJET=="'+cChave+'" .and. dtos(ZA6_DTINI) >= "'+dtos(_dviag1)+'" .and. dtos(ZA6_DTFIM) <= "'+dtos(_dviag2)+'"' // alterado por Frank Z Fuga

_cFilViag := cFiltro // uso para nao deletar os registros do ZA6 que nao fazem parte do filtro no momento da gravacao - by Frank Zwarg Fuga

// by Frank Zwarg Fuga - Procedimento para encontrar a numeracao da proxima linha da getdados
// O procedimento padrao é a apresentacao da ZA6 sem filtros adicionais, como houve a necessidade do uso dos filtros por data, faz-se necessario verificar
// qual seria a proxima linha sem o uso dos filtros, para manter a integridade das demais tabelas
(cAlias)->(DbSetOrder(nIndice))
(cAlias)->(DbSeek(cChave,.t.))
_nProxLn := StrZero( 0, len(ZA6->ZA6_OBRA) )
While (cAlias)->(!Eof() .and. &cCondicao)
	_nProxLn := ZA6->ZA6_OBRA

	(cAlias)->(DbSkip())
EndDo         

_nProxLn := Soma1( _nProxLn )


AAdd(aCamposSim,{"ZA6_OBRA"  ,"V"})
AAdd(aCamposSim,{"ZA6_SEQTRA","V"}) 

AAdd(aCamposSim,{"ZA6_AS"    ,"V"})
AAdd(aCamposSim,{"ZA6_CVA"    ,"V"})//GEFCO JONI

AAdd(aCamposSim,{"ZA6_VIAGEM","V"})

AAdd(aCamposSim,{"ZA6_TPTRAC",""})// Tp.Transp(Convencional ou Excedente) p/ COMPRA - solicitação FIAT (Anderson) por Cristiam Rossi em 05/04/2016
AAdd(aCamposSim,{"ZA6_TPTRAN",""})// Tp.Transp(Convencional ou Excedente)      *

AAdd(aCamposSim,{"ZA6_EMERGE",""})//GEFCO
AAdd(aCamposSim,{"ZA6_EMERG2",""})//GEFCO
    
AAdd(aCamposSim,{"ZA6_FERIAV",""})     
AAdd(aCamposSim,{"ZA6_FERIAC",""}) 

AAdd(aCamposSim,{"ZA6_TIPFLU",""})//GEFCO                        *
AAdd(aCamposSim,{"ZA6_TRANSP",""})
AAdd(aCamposSim,{"ZA6_DTINI" ,""})
AAdd(aCamposSim,{"ZA6_DTFIM" ,""})

AAdd(aCamposSim,{"ZA6_ORIGEM",""})
AAdd(aCamposSim,{"ZA6_MUNORI",""})
AAdd(aCamposSim,{"ZA6_ESTORI",""})
AAdd(aCamposSim,{"ZA6_DESTIN",""})
AAdd(aCamposSim,{"ZA6_MUNDES",""})
AAdd(aCamposSim,{"ZA6_ESTDES",""})

AAdd(aCamposSim,{"ZA6_DESCRO",""})//GEFCO
AAdd(aCamposSim,{"ZA6_MONITO",""})//GEFCO

AAdd(aCamposSim,{"ZA6_OBSVIA",""})
//AAdd(aCamposSim,{"ZA6_EHTERC",""})

AAdd(aCamposSim,{"ZA6_CCGEFC",""})//GEFCO
AAdd(aCamposSim,{"ZA6_CCCLIE",""})//GEFCO
AAdd(aCamposSim,{"ZA6_OI"	 ,""})//GEFCO
AAdd(aCamposSim,{"ZA6_CONTA" ,""})//GEFCO
AAdd(aCamposSim,{"ZA6_TIPDES",""})//GEFCO

AAdd(aCamposSim,{"ZA6_REFGEF",""})//GEFCO

AAdd(aCamposSim,{"ZA6_OBSTRA",""})

//GEFCO
//AAdd(aCamposSim,{"ZA6_CGCORI",""})
//AAdd(aCamposSim,{"ZA6_ENDORI",""})
//AAdd(aCamposSim,{"ZA6_INSORI",""})
//AAdd(aCamposSim,{"ZA6_BAIORI",""})
//AAdd(aCamposSim,{"ZA6_MUNOR2",""})
//AAdd(aCamposSim,{"ZA6_ESTOR2",""})
//AAdd(aCamposSim,{"ZA6_CONORI",""})
//AAdd(aCamposSim,{"ZA6_DEPORI",""})
//AAdd(aCamposSim,{"ZA6_EMAORI",""})
//AAdd(aCamposSim,{"ZA6_DDDORI",""})
//AAdd(aCamposSim,{"ZA6_TELORI",""})
//AAdd(aCamposSim,{"ZA6_FAXORI",""}) 
//GEFCO

AAdd(aCamposSim,{"ZA6_CLIORI",""})
AAdd(aCamposSim,{"ZA6_LOJORI",""})
AAdd(aCamposSim,{"ZA6_NOMORI",""})  
AAdd(aCamposSim,{"ZA6_CEPORI",""})

AAdd(aCamposSim,{"ZA6_CLIDES",""})
AAdd(aCamposSim,{"ZA6_LOJDES",""})
AAdd(aCamposSim,{"ZA6_NOMDES",""})
AAdd(aCamposSim,{"ZA6_CGCDES",""})
AAdd(aCamposSim,{"ZA6_ENDDES",""})
AAdd(aCamposSim,{"ZA6_INSDES",""})
AAdd(aCamposSim,{"ZA6_BAIDES",""})
AAdd(aCamposSim,{"ZA6_MUNDE2",""})
AAdd(aCamposSim,{"ZA6_ESTDE2",""})
AAdd(aCamposSim,{"ZA6_CEPDES",""})
AAdd(aCamposSim,{"ZA6_CONDES",""})
AAdd(aCamposSim,{"ZA6_DEPDES",""})
AAdd(aCamposSim,{"ZA6_EMADES",""})
AAdd(aCamposSim,{"ZA6_DDDDES",""})
AAdd(aCamposSim,{"ZA6_TELDES",""})
//AAdd(aCamposSim,{"ZA6_FAXDES",""})//GEFCO 

AAdd(aCamposSim,{"ZA6_PEDCLI",""})// Pedido Cliente
AAdd(aCamposSim,{"ZA6_PROTOC",""})// Pedido Cliente
AAdd(aCamposSim,{"ZA6_SOLICT",""})// Solicitante

//AAdd(aCamposSim,{"ZA6_TES"	 ,""}) // CRIADO 22/05/2015 ROBERTO MARQUES
AAdd(aCamposSim,{"ZA6_CONPAG",""})
AAdd(aCamposSim,{"ZA6_TPFRET",""}) // CRIADO 22/05/2015 ROBERTO MARQUES
AAdd(aCamposSim,{"ZA6_TIPPAG",""})

AAdd(aCamposSim,{"ZA6_TIPLKM",""})
AAdd(aCamposSim,{"ZA6_SKMVEN",""})
AAdd(aCamposSim,{"ZA6_EKMVEN",""})
AAdd(aCamposSim,{"ZA6_SKMCOM",""})
AAdd(aCamposSim,{"ZA6_EKMCOM",""})

AAdd(aCamposSim,{"ZA6_THORAS",""})  //ALTERADO POR RRM - 21/04/11 - INCLUSO NOVO CAMPO NA GETDADOS  
//AAdd(aCamposSim,{"ZA6_INTMUN",""})  //Alterado 19/05/2011 - Claudino(Biale).
//AAdd(aCamposSim,{"ZA6_VLHRAD",""})  //Alterado 19/05/2011 - Claudino(Biale).
//GEFCO
//AAdd(aCamposSim,{"ZA6_CUSIND",""})// % Custo Indireto - Alison (30/08/13)
//AAdd(aCamposSim,{"ZA6_TXADM" ,""})// % Taxa Administr - Alison (29/11/13)
//AAdd(aCamposSim,{"ZA6_QTVIAG",""})// % Taxa Administr - Alison (20/12/13)

//AAdd(aCamposSim,{"ZA6_TEMVIS",""})
//AAdd(aCamposSim,{"ZA6_DTVIS" ,""})
//AAdd(aCamposSim,{"ZA6_EMARAT",""})
//AAdd(aCamposSim,{"ZA6_TIPRAT",""}) 
//GEFCO
AAdd(aCamposSim,{"ZA6_TABVEN","V"}) 
AAdd(aCamposSim,{"ZA6_VERVEN","V"}) 
AAdd(aCamposSim,{"ZA6_ITTABV","V"})     
AAdd(aCamposSim,{"ZA6_TABCOM","V"})                                
AAdd(aCamposSim,{"ZA6_VERCOM","V"})
AAdd(aCamposSim,{"ZA6_ITTABC","V"})      

aHeader:=fHeader(aCamposSim)
aCols:=fCols(aHeader,cAlias,nIndice,cChave,cCondicao,cFiltro)

If Len(aCols)==1
	cCampo   :="ZA6_SEQTRA"
	cCampoGet:=aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]
	If Empty(cCampoGet)                                                  
		aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo    })] := _nProxLn  // by Frank Zwarg Fuga - anteriormente iniciava-se com 1
		aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])=="ZA6_OBRA"})] := _nProxLn  // by Frank Zwarg Fuga - anteriormente iniciava-se com 1
	EndIf
EndIf

cCampo   :="ZA6_SEQTRA"
cCampoGet:=oTra_Cols0[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]
If Empty(cCampoGet)
	oTra_Cols0[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo    })] := _nProxLn  // by Frank Zwarg Fuga - anteriormente iniciava-se com 1
	oTra_Cols0[1][Ascan(aHeader,{|x|AllTrim(x[2])=="ZA6_OBRA"})] := _nProxLn  // by Frank Zwarg Fuga - anteriormente iniciava-se com 1
EndIf                    

for nZ := 1 to len(aHeader)			// Bloquear edição dos campos - Cristiam Rossi em 26/07/2016
	if aHeader[nZ][14] != "V" .and. ( Alltrim(aHeader[nZ][2]) $ "ZA6_TRANSP;ZA6_ORIGEM;ZA6_DESTINO" )
		aHeader[nZ][13] := "u_LC1CanEdt('ZA6')" + iif( Empty(aHeader[nZ][13]), "", ".and." ) + Alltrim(aHeader[nZ][13])
	endif
next

//                           nTop ,nLeft,nBottom,nRight,nStyle,cLinhaOk      	,cTudoOk			,cIniCpos     ,aAlter,nFreeze,nMax,cFieldOk,cSuperDel,cDelOk,oWnd                     ,aHeader,aCols}
oDlgTra:=MsNewGetDados():New(nLin1,nCol1,nLin2  ,nCol2 ,nStyle,"AllwaysTrue()" ,"AllwaysTrue()" 	,"+ZA6_SEQTRA",      ,       ,9999 ,        ,         ,.t.   ,oFolder:aDialogs[nFolder],aHeader,aCols)
oDlgTra:oBrowse:bChange:={||U_MudaTraB()}
//oDlgTra:bFieldOk:={|| fValidZA6() }
oDlgTra:oBrowse:bAdd	:= {|| Iif(U_fValiCli(ZA0->ZA0_CLI, ZA0->ZA0_LOJA),oDlgTra:AddLine(),)}
oDlgTra:oBrowse:bDelete := {|| VALDELZ6() } // Frank Zwarg Fuga 10/12/2015
fAcumuTra()
fTrazTra()

Return

********************************************************************************
User Function MudaTraB  
// Muda o Browse - Folder Transportes
********************************************************************************
Local  lRet:=.T.
Local  cCampo,cCampoGet
Static cOldVia := ""

fObra()

If oDlgTra:nAt>Len(oDlgTra:aCols) 
	oDlgTra:nAt:=Len(oDlgTra:aCols) 
EndIf          

// by Frank Zwarg Fuga
// Na inclusao de uma viagem a getdados deve levar em consideracao a variavel _nProxLn, pois existe um filtro por datas nesta rotina
// que pode diferenciar o sequencial
If empty(oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_OBRA"})])
	If cObra < _nProxLN
		cObra    := _nProxLN
		cOldVia  := _nProxLN	
		_nProxLN := Soma1( _nProxLN )
		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_SEQTRA"})] := cObra
	EndIf
else
	if !Empty( cOldVia )
		if oDlgTra:aCols[ len(oDlgTra:aCols) ][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_OBRA"})] != cOldVia
			_nProxLN := cOldVia
		endif
		cOldVia  := ""
	endif
EndIF

oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_OBRA"})] := cObra
oDlgTra:oBrowse:Refresh()

Return lRet

********************************************************************************
Static Function fSalvarTra(cAlias,aHeader,aCols)  
// Transportes - Folder Transportes
********************************************************************************
Local nPos,aGravados:={}  //Gravados
Local aVistoria := {}
Local I := 1   
Local lModo    
Local nCompl := nRevis := nAuxC := nAuxR := 0

// Acumula o aCols corrente no aCols com todos os registros
fAcumuTra()
aCols:=Aclone(oTra_Cols)

dbSelectArea(cAlias)
dbSetOrder(1)

If nOpc==5  //5=Exclui
Else                 
	ProcRegua(Len(aCols))
	For nPos:=1 to Len(aCols)
		IncProc()
		cObra  :=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZA6_OBRA"  })]
		cSeqTra:=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZA6_SEQTRA"})]
		If !aCols[nPos,Len(aHeader)+1] .and. !Empty(cObra) .and. !Empty(cSeqTra)  //!Deleted()
			dbSeek(xFILIAL(cAlias)+cProjet+cObra+cSeqTra)
			If Eof()
				RecLock(cAlias,.T.)
			Else
				RecLock(cAlias,.F.)
			EndIf
			fGravaTudo(cAlias,aHeader,aCols[nPos])  //Grava todos os campos do aCols
			(cAlias)->ZA6_FILIAL:=xFILIAL(cAlias)
			(cAlias)->ZA6_PROJET:=cProjet
			(cAlias)->ZA6_OBRA  :=cObra
			(cAlias)->ZA6_SEQTRA:=cSeqTra
			AAdd(aGravados,Recno())  //Gravados
			MsUnLock()
			
			/*
			// Tratamento especial para FIAT - FTL
			// ------------------------------------
			_cCompra 	:= "N"
			_cVenda		:= "N"               
			_lErro		:= .F.
			_cRatPV   	:= ""
			_cRatPC   	:= ""
			_cTipVV   	:= ""
			_cTipVC   	:= ""

			// Validacao se em todas as sequencias informadas, a tabela de vendas, ou compras permitem esta indicação
			ZT0->(dbSetOrder(1))                                                                                                       
			ZT0->( dbSeek( xFilial("ZT0") + ZA6->ZA6_TABVEN + ZA6->ZA6_VERVEN + ZA0->ZA0_CLI + ZA0->ZA0_LOJA + ZA6->ZA6_TPTRAN + ZA6->ZA6_ITTABV , .T. ) )
			If ZT0->(Eof())
				_lProc := .F.
			Else
				If ZT0->ZT0_KMPTRE == "S"
					_cVenda := "S"
					_cTipVV := ZT0->ZT0_TIPVEI
				Else
					_cVenda := "N"
				EndIF    
		
				If ZT0->ZT0_RATPES == "S"
					_cRatPV := "S"
				Else
					_cRatPV := "N"
				EndIf                     
				_cTipVV := ZT0->ZT0_TIPVEI
	
			EndIF                 

			_aAreaX := GetArea()
			dbSelectArea("ZT1")
			dbSetOrder(1)                                                                                
			dbSeek( xFilial("ZT1") + ZT0->ZT0_TABCOM + ZT0->ZT0_VERCOM)
			_lAchou := .F.
			While !Eof() .and. ZT1_FILIAL+ZT1_CODTAB+ZT1_VERTAB == xFilial("ZT1")+ZT0->ZT0_TABCOM + ZT0->ZT0_VERCOM
				If ZT1_ITEMTB == ZT0->ZT0_ITTABC .and. ZT1_CODCLI == ZA0->ZA0_CLI .and. ZT1_LOJCLI == ZA0->ZA0_LOJA   
					_lAchou := .T.
					Exit
				EndIF
				dbSkip()
			EndDo
			
			If Eof()
				_lProc := .F.
			Else
				If ZT1->ZT1_KMPTRE == "S"
					_cCompra := "S"
					_cTipVC := ZT1->ZT1_TIPVEI
			 	Else
					_cCompra := "N"
				EndIF                     
	
				If ZT1->ZT1_RATPES == "S"
					_cRatPC := "S"
				Else
					_cRatPC := "N"
				EndIf
				_cTipVC := ZT1->ZT1_TIPVEI
				
			EndIf	

			// Verificar na tabela de vendas se utilizaremos o tipo de calculo FIAT - FTL (Frank 05/04/2016) 
			// ---------------------------------------------------------------------------------------------
			_lFtlv := .F.           
			If _cVenda == "N" .and. _cRatPV == "S"
				dbSelectArea("ZTC")
				DbOrderNickName("ITUPZTC001")
				dbSeek(xFilial("ZTC")+ZT0->ZT0_CODTAB+ZT0->ZT0_VERTAB+ZT0->ZT0_ITEMTB)
				While !Eof() .and. ZTC_FILIAL+ZTC_TABVEN+ZTC_VERVEN+ZTC_ITTABV == xFilial("ZTC")+ZT0->ZT0_CODTAB+ZT0->ZT0_VERTAB+ZT0->ZT0_ITEMTB
					If ZTC_FAIXAA > 0
						_lFtlv := .T.
						Exit
					EndIF
				    dbSkip()                                           
				EndDo                                                  
			EndIf
			
			// Verificar na tabela de compras se utilizaremos o tipo de calculo FIAT - FTL (Frank 05/04/2016)
			// ----------------------------------------------------------------------------------------------
			_lFtlc := .F.                                         
			If _cCompra == "N" .and. _cRatPC == "S"
				dbSelectArea("ZTD")
				DbOrderNickName("ITUPZTD001")
				dbSeek(xFilial("ZTD")+ZT1->ZT1_CODTAB+ZT1->ZT1_VERTAB+ZT1->ZT1_ITEMTB)
				While !Eof() .and. ZTD_FILIAL+ZTD_TABCOM+ZTD_VERCOM+ZTD_ITTABC == xFilial("ZTD")+ZT1->ZT1_CODTAB+ZT1->ZT1_VERTAB+ZT1->ZT1_ITEMTB
					If ZTD_FAIXAA > 0 
						_lFtlc := .T.							
						exit
					EndIF
				    dbSkip()                            
				EndDo                                   
			EndIF
			
			If _lFtlc .or. _lFtlv
	
				_cOrigem := ZA6->ZA6_CLIORI + ZA6->ZA6_LOJORI
				_cDestin := ZA6->ZA6_CLIDES + ZA6->ZA6_LOJDES
		
				dbSelectArea("SA1")
				dbSetOrder(1)
				dbSeek(xFilial("SA1")+_cOrigem)				
				_cCepD := SA1->A1_CEP
			                     
				dbSelectArea("SA1")
				dbSetOrder(1)
				dbSeek(xFilial("SA1")+_cDestin)				
				_cCepA := SA1->A1_CEP
		
				cQuery := "SELECT ZT2_QTDKMU, ZT2_QTDKMA FROM " + RetSqlName("ZT2")
				cQuery += " WHERE ZT2_FILIAL = '" + xFilial("ZT2") + "' AND "
				cQuery += "       ZT2_BLOQUE <> 'S' AND "
				cQuery += "       ZT2_CEPD = '" + _cCepD + "' AND "
				cQuery += "       ZT2_CEPA = '" + _cCepA + "' AND "
				cQuery += "       D_E_L_E_T_<>'*' "
			
				If Select("TRBX") > 0
					TRBX->(dbCloseArea())	 
				endif
				TCQUERY cQuery NEW ALIAS "TRBX"
					
				If !(TRBX->(Eof()))
					RecLock("ZA6",.F.)
					DUT->( dbSetOrder(1) )
					If DUT->( dbSeek( xFilial("DUT") + _cTipVV ) ) .and. _lFtlv
						If DUT->DUT_TIPVEI == "05"
							ZA6->ZA6_EKMVEN := TRBX->ZT2_QTDKMU
						Else
							ZA6->ZA6_EKMVEN := TRBX->ZT2_QTDKMA
						EndIF          
					EndIF
					DUT->( dbSetOrder(1) )
					If DUT->( dbSeek( xFilial("DUT") + _cTipVC ) ) .and. _lFtlc
						If DUT->DUT_TIPVEI == "05"
							ZA6->ZA6_EKMVEN := TRBX->ZT2_QTDKMU
						Else
							ZA6->ZA6_EKMVEN := TRBX->ZT2_QTDKMA
						EndIF
					EndIF             
					MsUnlock()
				Else
					RecLock("ZA6",.F.)
					If _lFtlv
						ZA6->ZA6_EKMVEN := 0
					EndIF
					If _lFtlc
						ZA6->ZA6_EKMVEN := 0
					EndIF             
					Msunlock()
				EndIF
			
            EndIf
            */
			

			//Se tem vistoria, cria um registro no ZA8 (Rat)
			If ZA6->(ZA6_TEMVIS=="S")
	            cEnvMail := aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZA6_EMARAT"})]
	            If cEnvMail == "S"
			        aAdd(aVistoria,ZA6->(Recno()) )
			    Endif
					
				cTipoRat := aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZA6_TIPRAT"})]
				cTipoRat := Iif(cTipoRat==NIL,"",cTipoRat)	// Jõao, o sistema não tinha o aCols[1][8] (só tem até 7) e estava se perdendo. Marcos.
					
				If ZA8->(dbSeek(xFilial("ZA8")+cProjet+cObra))
					IF cTipoRat $ "R/C"
						While !Eof() .And. ZA8->ZA8_PROJET + ZA8->ZA8_OBRA == cProjet + cObra
							   
						   	nAuxC := IIF(!Empty(ZA8->ZA8_COMPLE),Val(ZA8->ZA8_COMPLE)+1,1)
						   	If nAuxC > nCompl 
						      	nCompl := nAuxC
						   	Endif   
							   
						   	nAuxR := IIF(!Empty(ZA8->ZA8_REVISA),Val(ZA8->ZA8_REVISA)+1,1)
						   	If nAuxR > nRevis
						      	nRevis := nAuxR
						   	Endif
							 	ZA8->(DbSkip())
						EndDo
				  	  	lModo := .T.
					Else 
					  	lModo := .F.
				    Endif
				Else	
						lModo := .T.
				Endif						
				
				 For I := 1 To Len(oDlgCar:aCols)
					 ZA8->(RecLock("ZA8",lModo))
					 ZA8->ZA8_FILIAL:=xFILIAL("ZA8")
					 ZA8->ZA8_PROJET:=cProjet
					 ZA8->ZA8_OBRA  :=cObra
					 ZA8->ZA8_OBSERV:=ZA6->ZA6_OBSVIA
			         ZA8->ZA8_GESTOR:=ZA0->ZA0_VENDED 
					 ZA8->ZA8_ITEM  :=StrZero(I,3)
					 ZA8->ZA8_DESC  :=oDlgCar:aCols[I][Ascan(oDlgCar:aHeader,{|x|Alltrim(x[2]) == "ZA7_CARGA"}) ]
					 ZA8->ZA8_COMP  :=oDlgCar:aCols[I][Ascan(oDlgCar:aHeader,{|x|Alltrim(x[2]) == "ZA7_COMP" }) ]
				     ZA8->ZA8_LARG  :=oDlgCar:aCols[I][Ascan(oDlgCar:aHeader,{|x|Alltrim(x[2]) == "ZA7_LARG" }) ]
				     ZA8->ZA8_ALTU  :=oDlgCar:aCols[I][Ascan(oDlgCar:aHeader,{|x|Alltrim(x[2]) == "ZA7_ALTU" }) ]
				     ZA8->ZA8_PESO  :=oDlgCar:aCols[I][Ascan(oDlgCar:aHeader,{|x|Alltrim(x[2]) == "ZA7_PESO" }) ]
				     If  cTipoRat == "R"
	                     ZA8->ZA8_REVISA	:=StrZero(nRevis,3)
				     Elseif cTipoRat == "C"
				        ZA8->ZA8_COMPLE :=StrZero(nCompl,3) 
				     Endif
				ZA8->(MsUnLock())
				Next
			EndIf
		EndIf
	Next
EndIf

// Exclui os registros alterados
//aDelViag := {}
dbSeek(xFILIAL(cAlias)+cProjet)
While !Eof() .and. ZA6_FILIAL+ZA6_PROJET==xFILIAL(cAlias)+cProjet

	If Ascan(aGravados,{|x|x==Recno()})==0
	
	
		// protecao contra o filtro da data para nao deletar os registros que nao faziam parte do acols - by Frank Zwarg Fuga
		_lDeleta := .T.
		If !(cAlias)->(&_cFilViag)
			_lDeleta := .F.
		EndIF
	
	    If _lDeleta
	    	U_LIMPAZTJ() // Tabela do monitoramento dos EDI
			RecLock(cAlias,.F.)
			dbDelete()
			MsUnLock()        
			Aadd(aDelViag,{ZA6_PROJET,ZA6_OBRA,ZA6_SEQTRA})//Alison 20/03/14
		EndIF
		
	EndIf
	dbSkip()
End

nVis := Len(aVistoria)

If nVis > 0
   U_Mailing(aVistoria,2) // Envia e-mail com aviso de vistoria
Endif

Return

********************************************************************************
STATIC FUNCTION fFolderCon(nFolder,nLin1,nCol1,nLin2,nCol2)
// Folder Conj.Transportador
********************************************************************************
Local aCamposNao := {}
Local aCamposSim := {}
Local nStyle:=GD_INSERT + GD_UPDATE + GD_DELETE
Local cAlias,cChave,cCondicao,nIndice,cFiltro

nStyle:=If(nOpcManu==2,0,nStyle)  //2=Visualizar

cAlias   :="ZAE"
cChave   :=xFILIAL(cAlias)+cProjet
cCondicao:='ZAE_FILIAL+ZAE_PROJET=="'+cChave+'"'
nIndice  :=1  //ZAE_FILIAL+ZAE_PROJET+ZAE_OBRA+ZAE_SEQTRA+ZAE_SEQCAR+ZAE_SEQCON
cFiltro  :=cCondicao

AAdd(aCamposSim,{"ZAE_OBRA"  ,"V"})
AAdd(aCamposSim,{"ZAE_SEQTRA","V"})
AAdd(aCamposSim,{"ZAE_SEQCAR","V"})
AAdd(aCamposSim,{"ZAE_SEQCON","V"})
AAdd(aCamposSim,{"ZAE_TRANSP",""})
AAdd(aCamposSim,{"ZAE_DESTRA",""})
AAdd(aCamposSim,{"ZAE_COMP"  ,"V"})
AAdd(aCamposSim,{"ZAE_LARG"  ,"V"})
AAdd(aCamposSim,{"ZAE_ALTU"  ,"V"})
AAdd(aCamposSim,{"ZAE_PESO"  ,"V"})
AAdd(aCamposSim,{"ZAE_QTEIXO","V"})
AAdd(aCamposSim,{"ZAE_TIPOCA",""})
AAdd(aCamposSim,{"ZAE_DIASV" ,""})
AAdd(aCamposSim,{"ZAE_DIASC" ,""})
AAdd(aCamposSim,{"ZAE_OCD"   ,""})
AAdd(aCamposSim,{"ZAE_VRDIA" ,""})
AAdd(aCamposSim,{"ZAE_VRESTA",""})
AAdd(aCamposSim,{"ZAE_OBSTRA",""})

aHeader:=fHeader(aCamposSim)
aCols:=fCols(aHeader,cAlias,nIndice,cChave,cCondicao,cFiltro)

If Len(aCols)==1
	cCampo   :="ZAE_SEQCON"
	cCampoGet:=aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]
	If Empty(cCampoGet)
		aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo      })]:=StrZero(1,Len(cCampoGet))
		aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAE_SEQTRA"})]:=StrZero(1,Len(cCampoGet))
		aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAE_SEQCAR"})]:=StrZero(1,Len(cCampoGet))
	EndIf
EndIf

cCampo   :="ZAE_SEQCON"
cCampoGet:=oCon_Cols0[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]
If Empty(cCampoGet)
	oCon_Cols0[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo      })]:=StrZero(1,Len(cCampoGet))
	oCon_Cols0[1][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAE_SEQTRA"})]:=StrZero(1,Len(cCampoGet))
	oCon_Cols0[1][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAE_SEQCAR"})]:=StrZero(1,Len(cCampoGet))
EndIf

//                           nTop ,nLeft,nBottom,nRight,nStyle,cLinhaOk      ,cTudoOk,cIniCpos     ,aAlter,nFreeze,nMax,cFieldOk,cSuperDel,cDelOk,oWnd                     ,aHeader,aCols}
oDlgCon:=MsNewGetDados():New(nLin1,nCol1,nLin2  ,nCol2 ,nStyle,              ,       ,"+ZAE_SEQCON",      ,       ,110 ,        ,         ,.t.   ,oFolder:aDialogs[nFolder],aHeader,aCols)
oDlgCon:oBrowse:bChange:={||U_MudaConB()}

fAcumuCon()
fTrazCon()

fMontaCon(nFolder,nLin1,nCol1,nLin2,nCol2)

Return

********************************************************************************
User Function MudaConB  
// Muda o Browse - Folder Conj.Transportador
********************************************************************************
Local lRet:=.T.
Local cCampo,cCampoGet

fObra()

If ValType(oDlgCon) == "O"
If oDlgCon:nAt>Len(oDlgCon:aCols) ; oDlgCon:nAt:=Len(oDlgCon:aCols) ; EndIf

oDlgCon:aCols[oDlgCon:nAt][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_OBRA"  })]:=cObra
oDlgCon:aCols[oDlgCon:nAt][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_SEQTRA"})]:=cSeqTra
oDlgCon:aCols[oDlgCon:nAt][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_SEQCAR"})]:=cSeqCar
oDlgCon:oBrowse:Refresh()

fCalcCon()
fDispCon()
EndIf

Return lRet

********************************************************************************
Static Function fSalvarCon(cAlias,aHeader,aCols)
// Folder Conj.Transportador
********************************************************************************
Local nPos,aGravados:={}  //Gravados

// Acumula o aCols corrente no aCols com todos os registros
If oFolder:nOption==nFolderCon
	fAcumuCon()
EndIf
aCols:=Aclone(oCon_Cols)

dbSelectArea(cAlias)
dbSetOrder(1)

If nOpc==5  //5=Exclui
Else
	For nPos:=1 to Len(aCols)
		cObra  :=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAE_OBRA"  })]
		cSeqTra:=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAE_SEQTRA"})]
		cSeqCar:=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAE_SEQCAR"})]
		cSeqCon:=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAE_SEQCON"})]
		cTransp:=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAE_TRANSP"})]
		If !aCols[nPos,Len(aHeader)+1] .and. !Empty(cObra) .and. !Empty(cSeqTra) .and. !Empty(cSeqCar) .and. !Empty(cSeqCon) .and. !Empty(cTransp) //!Deleted()
			dbSeek(xFILIAL(cAlias)+cProjet+cObra+cSeqTra+cSeqCar+cSeqCon)
			If Eof()
				RecLock(cAlias,.T.)
			Else
				RecLock(cAlias,.F.)
			EndIf
			fGravaTudo(cAlias,aHeader,aCols[nPos])  //Grava todos os campos do aCols
			(cAlias)->ZAE_FILIAL:=xFILIAL(cAlias)
			(cAlias)->ZAE_PROJET:=cProjet
			(cAlias)->ZAE_OBRA  :=cObra
			(cAlias)->ZAE_SEQTRA:=cSeqTra
			(cAlias)->ZAE_SEQCAR:=cSeqCar
			(cAlias)->ZAE_SEQCON:=cSeqCon
			AAdd(aGravados,Recno())  //Gravados
			MsUnLock()
	     EndIf
	Next
EndIf

// Exclui os registros alterados
dbSeek(xFILIAL(cAlias)+cProjet)
While !Eof() .and. ZAE_FILIAL+ZAE_PROJET==xFILIAL(cAlias)+cProjet
	If Ascan(aGravados,{|x|x==Recno()})==0
		RecLock(cAlias,.F.)
		dbDelete()
		MsUnLock()
	EndIf
	dbSkip()
End

Return

********************************************************************************
Static Function fFolderCar(nFolder,nLin1,nCol1,nLin2,nCol2)
// Folder Cargas
********************************************************************************
Local aCamposNao := {}
Local aCamposSim := {}
Local nStyle:=GD_INSERT + GD_UPDATE + GD_DELETE
Local cAlias,cChave,cCondicao,nIndice,cFiltro

nStyle:=If(nOpcManu==2,0,nStyle)  //2=Visualizar

cAlias   :="ZA7"
cChave   :=xFILIAL(cAlias)+cProjet
cCondicao:='ZA7_FILIAL+ZA7_PROJET=="'+cChave+'"'
nIndice  :=1  //ZA7_FILIAL+ZA7_PROJET+ZA7_OBRA+ZA7_SEQTRA+ZA7_SEQCAR
//cFiltro  :=cCondicao 
cFiltro  := 'inViagem( ZA7_OBRA )'	// Cristiam Rossi em 02/08/2016 - só trazer CARGAS das Viagens filtradas

AAdd(aCamposSim,{"ZA7_OBRA"  ,"V"})
AAdd(aCamposSim,{"ZA7_SEQTRA","V"})
AAdd(aCamposSim,{"ZA7_SEQCAR","V"})
AAdd(aCamposSim,{"ZA7_EHTERC",""})
AAdd(aCamposSim,{"ZA7_QUANT" ,""})
AAdd(aCamposSim,{"ZA7_EMERGE",""})	// Frank Fuga 16/11/2015
AAdd(aCamposSim,{"ZA7_EMERG2",""})	// Frank Fuga 16/11/2015
AAdd(aCamposSim,{"ZA7_FILREG",""})//GEFCO	
AAdd(aCamposSim,{"ZA7_DEVEMB",""})//GEFCO	
AAdd(aCamposSim,{"ZA7_SEQCOL",""})
AAdd(aCamposSim,{"ZA7_ADICIO",""})
AAdd(aCamposSim,{"ZA7_CODCLI",""})//GEFCO	
AAdd(aCamposSim,{"ZA7_LOJCLI",""})//GEFCO
AAdd(aCamposSim,{"ZA7_DESCLI",""})//GEFCO
AAdd(aCamposSim,{"ZA7_MUNICI",""})//GEFCO
AAdd(aCamposSim,{"ZA7_DESMUN",""})//GEFCO
AAdd(aCamposSim,{"ZA7_UFCARG",""})//GEFCO	
//AAdd(aCamposSim,{"ZA7_TPCARG",""})

AAdd(aCamposSim,{"ZA7_CLIDES",""})//GEFCO
AAdd(aCamposSim,{"ZA7_LOJDES",""})//GEFCO
AAdd(aCamposSim,{"ZA7_NOMDES",""})//GEFCO

AAdd(aCamposSim,{"ZA7_CARGA" ,""})
AAdd(aCamposSim,{"ZA7_PICKIN",""})		// Adição pedido Mr. Pedrassi - Cristiam Rossi em 22/02/2016
AAdd(aCamposSim,{"ZA7_QTD" 	 ,""})
AAdd(aCamposSim,{"ZA7_JUNTO" ,""})
AAdd(aCamposSim,{"ZA7_COMP"  ,""})
AAdd(aCamposSim,{"ZA7_LARG"  ,""})
AAdd(aCamposSim,{"ZA7_ALTU"  ,""})
AAdd(aCamposSim,{"ZA7_PESO"  ,""})
//AAdd(aCamposSim,{"ZA7_DIAM",""})
AAdd(aCamposSim,{"ZA7_VRCARG",""})
AAdd(aCamposSim,{"ZA7_CARENC",""})
AAdd(aCamposSim,{"ZA7_TIPCAR",""})
AAdd(aCamposSim,{"ZA7_CAREND",""})
AAdd(aCamposSim,{"ZA7_TPCARD",""})
AAdd(aCamposSim,{"ZA7_FORMAS",""})
//AAdd(aCamposSim,{"ZA7_VIAVEL",""}) GEFCO
AAdd(aCamposSim,{"ZA7_VRMOB" ,""})
AAdd(aCamposSim,{"ZA7_PERADV",""})
AAdd(aCamposSim,{"ZA7_VALADV",""})
AAdd(aCamposSim,{"ZA7_INCADV",""})
//AAdd(aCamposSim,{"ZA7_PERICM",""})GEFCO
//AAdd(aCamposSim,{"ZA7_VALICM",""})GEFCO
//AAdd(aCamposSim,{"ZA7_INCICM",""})GEFCO
AAdd(aCamposSim,{"ZA7_RESPC" ,""})
AAdd(aCamposSim,{"ZA7_DTCAR" ,""})
AAdd(aCamposSim,{"ZA7_HRCAR" ,""})
//AAdd(aCamposSim,{"ZA7_VRCAR" ,""})
AAdd(aCamposSim,{"ZA7_RESPD" ,""})
AAdd(aCamposSim,{"ZA7_DTDES" ,""})
AAdd(aCamposSim,{"ZA7_HRDES" ,""})
//AAdd(aCamposSim,{"ZA7_VRDES" ,""})

AAdd(aCamposSim,{"ZA7_CCGEFC",""})//GEFCO
AAdd(aCamposSim,{"ZA7_CCCLIE",""})//GEFCO
AAdd(aCamposSim,{"ZA7_OI"	 ,""})//GEFCO
AAdd(aCamposSim,{"ZA7_CONTA" ,""})//GEFCO
AAdd(aCamposSim,{"ZA7_TIPDES",""})//GEFCO
AAdd(aCamposSim,{"ZA7_REFGEF",""})//GEFCO

AAdd(aCamposSim,{"ZA7_OBS" 		,""})
AAdd(aCamposSim,{"ZA7_REVNAS" 	,""})
AAdd(aCamposSim,{"ZA7_AS" 		,""})
AAdd(aCamposSim,{"ZA7_VIAGEM" 	,""})
AAdd(aCamposSim,{"ZA7_VALESC"	,""})//GEFCO
AAdd(aCamposSim,{"ZA7_VALBAL"	,""})//GEFCO
AAdd(aCamposSim,{"ZA7_VALAJU"	,""})//GEFCO
AAdd(aCamposSim,{"ZA7_VALCD"	,""})//GEFCO
AAdd(aCamposSim,{"ZA7_KMDESL"	,""})
AAdd(aCamposSim,{"ZA7_VALDES"	,""})//GEFCO	
AAdd(aCamposSim,{"ZA7_VRDESC"	,""})

AAdd(aCamposSim,{"ZA7_VALLIC"	,""})//GEFCO
AAdd(aCamposSim,{"ZA7_VALOR"	,""})
AAdd(aCamposSim,{"ZA7_CUSTO"	,""})

AAdd(aCamposSim,{"ZA7_SKMVEN"	,""})
AAdd(aCamposSim,{"ZA7_EKMVEN"	,""})
AAdd(aCamposSim,{"ZA7_SKMCOM"	,""})
AAdd(aCamposSim,{"ZA7_EKMCOM"	,""}) 

aHeader:=fHeader(aCamposSim)
aCols:=fCols(aHeader,cAlias,nIndice,cChave,cCondicao,cFiltro)

If Len(aCols)==1
	cCampo   :="ZA7_SEQCAR"
	cCampoGet:=aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]
	If Empty(cCampoGet)
		aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo      })]:=StrZero(1,Len(cCampoGet))
		aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])=="ZA7_SEQTRA"})]:=StrZero(1,Len(cCampoGet))
	EndIf
EndIf

cCampo   :="ZA7_SEQCAR"
cCampoGet:=oCar_Cols0[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]
If Empty(cCampoGet)
	oCar_Cols0[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo      })]:=StrZero(1,Len(cCampoGet))
	oCar_Cols0[1][Ascan(aHeader,{|x|AllTrim(x[2])=="ZA7_SEQTRA"})]:=StrZero(1,Len(cCampoGet))
EndIf

for nZ := 1 to len(aHeader)			// Bloquear edição dos campos - Cristiam Rossi em 27/07/2016
	if aHeader[nZ][14] != "V" .and. ( Alltrim(aHeader[nZ][2]) $ "ZA7_SEQCOL;ZA7_KMDESL;ZA7_PESO;ZA7_ADICIO;ZA7_CLIDES;ZA7_LOJDES;ZA7_CODCLI;ZA7_LOJCLI" )
		aHeader[nZ][13] := "u_LC1CanEdt('ZA7')" + iif( Empty(aHeader[nZ][13]), "", ".and." ) + Alltrim(aHeader[nZ][13])
	endif
next

//                           nTop ,nLeft,nBottom,nRight,nStyle,cLinhaOk      ,cTudoOk,cIniCpos     ,aAlter,nFreeze,nMax,cFieldOk,cSuperDel,cDelOk,oWnd                     ,aHeader,aCols}
oDlgCar:=MsNewGetDados():New(nLin1,nCol1,nLin2  ,nCol2 ,nStyle,"U_VALZA7()"    ,       ,"+ZA7_SEQCAR",      ,       ,110 ,        ,         ,.t.   ,oFolder:aDialogs[nFolder],aHeader,aCols)
oDlgCar:oBrowse:bChange:={||U_MudaCarB()}
oDlgCar:oBrowse:bDelete:={||VALDELZ7()} // Frank Zwarg Fuga - 10/12/2015
oDlgCar:oBrowse:bAdd   :={|| iif( u_LC1CanEdt('ZA6','ADICIONAR_LINHA'), oDlgCar:AddLine(), nil)}		// Cristiam Rossi em 01/08/2016

fAcumuCar()
fTrazCar()

If ZA0->ZA0_TIPOSE <> "M"
	fMontaCar(nFolder,nLin1,nCol1,nLin2,nCol2)
EndIf

Return

********************************************************************************
User Function MudaCarB  
// Muda o Browse - Folder Cargas
********************************************************************************
Local lRet:=.T.
Local cCampo,cCampoGet
Local _aArea := GetArea()
Local _cVenda
Local _cCompra
Local _lAchou
Local _cTabV
Local _cTabC
Local _cVerV
Local _cVerC
Local _cIteV 
Local _cIteC 
Local _cTpTrans	


fObra()

//If oDlgCar:nAt>Len(oDlgCar:aCols) ; oDlgCar:nAt:=Len(oDlgCar:aCols) ; EndIf

oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_OBRA"  })]:=cObra
oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SEQTRA"})]:=cSeqTra
IF Len(oDlgCar:aCols) > 1 .AND. Empty(oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_JUNTO"})])     // ROBERTO MARQUES - 25/05/2015
	If oDlgCar:nAt > 1
		oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_JUNTO"})]:="001"
	Endif
Endif                 

oDlgCar:oBrowse:Refresh()

//Como a carga mudou, tem que mudar o folder oDlgCon para atualizar o oDlgCon:aCols com a nova carga
If ValType(oDlgCon) == "O"
	fTrazCon()
	U_MudaConB()
	oDlgCon:oBrowse:Refresh()
//

	fCalcCar()
	fDispCar()
EndIf

Return lRet

********************************************************************************
Static Function fSalvarCar(cAlias,aHeader,aCols)
// Folder Cargas
********************************************************************************
Local nPos,aGravados:={}  //Gravados

// Acumula o aCols corrente no aCols com todos os registros
//If oFolder:nOption==nFolderCar
	fAcumuCar()
	aCols:=Aclone(oCar_Cols)
//EndIf

DT8->( dbOrderNickName("ITUPDT8001") ) // xviage+codpas

dbSelectArea(cAlias)
dbSetOrder(1)

If nOpc==5  //5=Exclui
Else                      
	ProcRegua(len(aCols))
	For nPos:=1 to Len(aCols)
		IncProc()
		cObra  :=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZA7_OBRA"  })]

		if ! inViagem( cObra )
			Loop
		endif

		cSeqTra:=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZA7_SEQTRA"})]
		cSeqCar:=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZA7_SEQCAR"})]
		If !aCols[nPos,Len(aHeader)+1] .and. !Empty(cObra) .and. !Empty(cSeqTra) .and. !Empty(cSeqCar)  //!Deleted()
			dbSeek(xFILIAL(cAlias)+cProjet+cObra+cSeqTra+cSeqCar)
			If Eof()
				RecLock(cAlias,.T.)
			Else
				RecLock(cAlias,.F.)
			EndIf
			fGravaTudo(cAlias,aHeader,aCols[nPos])  //Grava todos os campos do aCols
			(cAlias)->ZA7_FILIAL:=xFILIAL(cAlias)
			(cAlias)->ZA7_PROJET:=cProjet
			(cAlias)->ZA7_OBRA  :=cObra
			(cAlias)->ZA7_SEQTRA:=cSeqTra
			(cAlias)->ZA7_SEQCAR:=cSeqCar

			AAdd(aGravados,Recno())  //Gravados

			//if ZA7->ZA7_QJUE == 0 // não teve Coleta - Cristiam Rossi em 19/04/2016
			If ZA7->ZA7_QJUE == 0 .OR.	IsInCallStack("U_CpoBIRep") //Pedrassi 20/05/2016
				(cAlias)->ZA7_CUSTOP := (cAlias)->ZA7_CUSTO
			endif

			if DT8->( dbSeek( ZA7->ZA7_VIAGEM + "G1" ) )	// Busca Valor ADV da tabela DT8 (componentes) - Cristiam Rossi em 19/04/2016
				ZA7->ZA7_VRADV := DT8->DT8_VALTOT
			ENDIF

			if DT8->( dbSeek( ZA7->ZA7_VIAGEM + "G2" ) )	// Busca Valor Pedágio da tabela DT8 (componentes) - Cristiam Rossi em 19/04/2016
				ZA7->ZA7_VALPED := DT8->DT8_VALTOT
			ENDIF

			if DT8->( dbSeek( ZA7->ZA7_VIAGEM + "G3" ) )	// Busca Valor Outros da tabela DT8 (componentes) - Cristiam Rossi em 19/04/2016
				ZA7->ZA7_VALOUT := DT8->DT8_VALTOT
			ENDIF
			MsUnLock()    
			if ZA7->ZA7_QJUE == 0	// não teve Coleta - Cristiam Rossi em 19/04/2016
				ZA6->( dbSetOrder(1) ) // FILIAL + PROJET + OBRA + SEQTRA
				if ZA6->( dbSeek( xFilial("ZA6") + ZA7->(ZA7_PROJET + ZA7_OBRA), .T. ) )

					cQuery := "select top 1 ZT1_CODFOR, ZT1_LOJFOR from "+ RetSqlName("ZT1")
					cQuery += " where ZT1_FILIAL='"+ xFilial("ZT1") +"'"
					cQuery += " and ZT1_CODTAB='"+ ZA6->ZA6_TABCOM +"'"
					cQuery += " and ZT1_VERTAB='"+ ZA6->ZA6_VERCOM +"'"
					cQuery += " and ZT1_ITEMTB='"+ ZA6->ZA6_ITTABC +"'"
					cQuery += " and D_E_L_E_T_ = ' '"
					cAliasQry := GetNextAlias()
					dbUseArea( .T., 'TOPCONN', TCGENQRY(,, cQuery), cAliasQry, .T., .T. )
					
					if ! (cAliasQry)->( EOF() )
						RecLock( "ZA6", .F. )
						ZA6->ZA6_CODFOP := (cAliasQry)->ZT1_CODFOR
						ZA6->ZA6_LOJFOP := (cAliasQry)->ZT1_LOJFOR
						ZA6->( MsUnlock() )
					endif
					
					(cAliasQry)->( dbCloseArea() )
				endif
			endif
			// Frank Zwarg Fuga - 29/04/2016
			// Nao permitir a atualizacao da DTQ e DT8, para itens que nao foram selecionados pelo usuario.
			// Existem registros antigos que a TES nao é identificada
			// --------------------------------------------------------------------------------------------
			_lAtuDT8 := .F.
			For nX:=1 to Len(oTra_Cols) // ZA6 do acumulado
				If !oTra_Cols[nX,Len(oDlgTra:aHeader)+1]
					If dtos(oTra_Cols[nX][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_DTINI"})]) >= dtos(_dviag1) .and. dtos(oTra_Cols[nX][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_DTFIM"})]) <= dtos(_dviag2)
						If oTra_Cols[nX][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_OBRA"})]	== ZA7->ZA7_OBRA
							_lAtuDT8 := .T.
							Exit
						EndIF
					EndIF
				EndIf
			Next		

			If _lAtuDT8 

				// Atualizar a DTQ - Frank Zwarg Fuga - 20/04/2016
				// -------------------------------------------------------------------------------------
				DTQ->(dbSetOrder(1))
				If DTQ->(dbSeek( xFilial("DTQ") + ZA7->ZA7_VIAGEM))		
					If empty(DTQ->DTQ_NUMPV)
						RecLock("DTQ",.F.)
						DTQ->DTQ_XFRETE := ZA7->ZA7_VALOR
						MsUnlock()
	
						// Atualizar a DT8
						SX5->(dbSetOrder(1))
						SX5->(dbSeek(xFilial("SX5")+"_C000000"))
						_cTemp := SX5->(substr(X5_DESCRI,1,2))
						dbSelectArea("DT8")
						dbOrderNickName("ITUPDT8001") // xviage+codpas
						dbSeek(ZA7->ZA7_VIAGEM+_cTemp)
						
						If !Eof()
							RecLock("DT8",.F.)
							DT8->DT8_VALPAS := ZA7->ZA7_VALOR
	
							// Posicionar na tabela DUY para o preenchimento do campo DT8_CDRORI
							// --------------------------------------------------------------------------------------------------------
							_cOrigem := ""
							_cEstOri := substr(alltrim(DTQ->DTQ_ORIGEM),len(alltrim(DTQ->DTQ_ORIGEM))-1,2)
							dbSelectArea("DUY")
							dbSetOrder(6) // UF + CODMUN
							dbSeek(xFilial("DUY")+_cEstOri+DTQ->DTQ_CODORI)
							If EOF()
								_cOrigem := ""
							Else
								_cOrigem := DUY->DUY_GRPVEN
							EndIF
							// Posicionar na tabela DUY para o preenchimento do campo DT8_CDRDES   
							// --------------------------------------------------------------------------------------------------------
							_cDestino := ""               
							_cEstDes  := substr(alltrim(DTQ->DTQ_DESTIN),len(alltrim(DTQ->DTQ_DESTIN))-1,2)
							dbSelectArea("DUY")
							dbSetOrder(6) // UF + CODMUN
							dbSeek(xFilial("DUY")+_cEstDes+DTQ->DTQ_CODDES)
							If EOF()
								_cDestino := ""
							Else
								_cDestino := DUY->DUY_GRPVEN
							EndIF
		
							dbSelectArea("DT8")
							dbOrderNickName("ITUPDT8001") // xviage+codpas
							dbSeek(DTQ->DTQ_VIAGEM+_cTemp)
		
							dbSelectARea("DT3")
							dbSetOrder(1)
							dbSeek(xFilial("DT3")+_cTemp)          
		
							// Tipo do Frete
							If M->ZA0_TPFRET == "C"
								_cTpFrete := "1"
							ElseIf M->ZA0_TPFRET == "F"
								_cTpFrete := "2"
							Else                
								_cTpFrete := "3"
							EndIF
							
							_cFilOld := cFilAnt
							cFilAnt  := DTQ->DTQ_FILORI
							_aTes := TmsRegTrib(If(empty(DTQ->DTQ_TPCTRC),'2','8'), _cTpFrete, _cTemp, M->ZA0_CLI, M->ZA0_LOJA, _cDestino,.T. , DT3->DT3_XCODPR, .T., _cEstOri,.T. , '0' ,'' ,'')		
					
							If len(_aTes) > 0 //.and. _nValor > 0
		
									DT8->DT8_XTES := _aTes[1]
									_aRetorno  := U_fCalcI2( { { 1, DT8->DT8_VALPAS } }, _aTes[1], DT3->DT3_XCODPR ) // aItens, cTes, cProd
								
									DT8->DT8_VALIMP := _aRetorno[1] - DT8->DT8_VALPAS
									DT8->DT8_VALTOT := _aRetorno[1]     
					
		                    EndIF   
		                    cFilAnt  := _cFilOld
		                    
		                    
		                    dbSelectArea("DT8")
		                    MsUnlock()
		                    
		   				EndIf
		            EndIf
				EndIF	
				
			EndIf

            dbSelectArea("ZA7")

	    EndIf
	Next
EndIf

// Exclui os registros alterados
dbSeek(xFILIAL(cAlias)+cProjet)
While !Eof() .and. ZA7_FILIAL+ZA7_PROJET==xFILIAL(cAlias)+cProjet
	If Ascan(aGravados, Recno()) == 0 .and. inViagem( ZA7_OBRA )

		// Posicionar na DTQ para atualizar o status para 9 - Frank Zwarg Fuga 10/12/15
		_aArea := ZA7->(GetArea())
		DTQ->(dbSetOrder(1))
		If DTQ->(dbSeek( xFilial("DTQ") + ZA7->ZA7_VIAGEM))		
			While !DTQ->(eof()) .and. DTQ->(DTQ_FILIAL+DTQ_SOT+DTQ_OBRA+DTQ_VIAGEM) == xFilial("DTQ")+ZA0->ZA0_PROJET+ZA7->ZA7_OBRA+ZA7->ZA7_VIAGEM
				RecLock("DTQ",.F.)
				DTQ->DTQ_STATUS := "9"
				MsUnLock()
				DTQ->(dbSkip())
			EndDo
		EndIF
		RestArea(_aArea)
		RecLock(cAlias,.F.)
		dbDelete()
		MsUnLock()
	EndIf
	dbSkip()
End

Return

********************************************************************************
Static Function fFolderGui(nFolder,nLin1,nCol1,nLin2,nCol2)
// Folder Guindastes
********************************************************************************
Local aCamposNao := {}
Local aCamposSim := {}
Local nStyle:=GD_INSERT + GD_UPDATE + GD_DELETE
Local cAlias,cChave,cCondicao,nIndice,cFiltro

nStyle:=If(nOpcManu==2,0,nStyle)  //2=Visualizar

If ZA0->ZA0_TIPOSE=="L"
	fFolderGu1(nFolder,nLin1,nCol1,nLin2,nCol2)
	Return
EndIf

cAlias   :="ZA5"
cChave   :=xFILIAL(cAlias)+cProjet
cCondicao:='ZA5_FILIAL+ZA5_PROJET=="'+cChave+'"'
nIndice  :=1  //ZA5_FILIAL+ZA5_PROJET+ZA5_OBRA+ZA5_SEQGUI
cFiltro  :=cCondicao

AAdd(aCamposSim,{"ZA5_OBRA"  ,"V"}) 
AAdd(aCamposSim,{"ZA5_SEQGUI","V"})
DO CASE
	CASE  ZA0->ZA0_TIPOSE == 'P'
	     nPos:= Ascan(aHeader,{|x|AllTrim(x[2])=='ZA5_TIPOSE'})
	     if nPos > 0
	    	 aHeader[npos][11]:= "P=Plataforma;M=Mao de Obra;O=Outros"
         endif
	CASE  ZA0->ZA0_TIPOSE == 'U'
	     nPos:= Ascan(aHeader,{|x|AllTrim(x[2])=='ZA5_TIPOSE'})
	     if nPos > 0
    		 aHeader[npos][11]:= "U=Grua;M=Mao de Obra;O=Outros" 
         endif
	CASE  ZA0->ZA0_TIPOSE == 'G'
	     nPos:= Ascan(aHeader,{|x|AllTrim(x[2])=='ZA5_TIPOSE'})
	     if nPos > 0
	    	 aHeader[npos][11]:= "G=Equipamentos;M=Mao de Obra;O=Outros"
         endif
ENDCASE
AAdd(aCamposSim,{"ZA5_TIPOSE",""})
//Alison 12/11/13
AAdd(aCamposSim,{"ZA5_CODTAB",""})
AAdd(aCamposSim,{"ZA5_DESTAB",""})
//=====                   

AAdd(aCamposSim,{"ZA5_PEDCLI",""})// Pedido Cliente
AAdd(aCamposSim,{"ZA5_SOLICT",""})// Solicitante
AAdd(aCamposSim,{"ZA5_TPSERV",""})// Tipo Serviço(Remoção ou Armazenagem)

AAdd(aCamposSim,{"ZA5_PRODUT",""})
AAdd(aCamposSim,{"ZA5_GUINDA",""})
AAdd(aCamposSim,{"ZA5_CODMAO",""})
AAdd(aCamposSim,{"ZA5_DESGUI",""})
AAdd(aCamposSim,{"ZA5_CONFIG",""})
AAdd(aCamposSim,{"ZA5_LOCTER",""})
AAdd(aCamposSim,{"ZA5_TIPOCA",""})
AAdd(aCamposSim,{"ZA5_PREDIA",""}) 

If ZA0->ZA0_TIPOSE=="I" // incluido za5_prekm Airton 05/09/08 
  AAdd(aCamposSim,{"ZA5_PREKM",""})
ENDIF
//Data			: 27-03-2012
//Analista		: Maickon Queiroz 
//Ajuste		: Solicitado para que os campos ZA5_QTMES e ZA5_QTDIA fosse reapresentado na tela de orçamentos.
//Solicitação	: Caue Buontempi Poltronieri (Referente ao Chamado aberto pelo CEC)
//AAdd(aCamposSim,{"ZA5_QTMES" ,""}) // inibir o uso - Cristiam em 18/04/11
//AAdd(aCamposSim,{"ZA5_QTDIA" ,""}) // inibir o uso - Cristiam em 18/04/11
AAdd(aCamposSim,{"ZA5_QTMES" ,""}) // inibir o uso - Cristiam em 18/04/11
AAdd(aCamposSim,{"ZA5_QTDIA" ,""}) // inibir o uso - Cristiam em 18/04/11
AAdd(aCamposSim,{"ZA5_MINDIA",""})
AAdd(aCamposSim,{"ZA5_MINMES",""})
AAdd(aCamposSim,{"ZA5_VRHOR" ,""})
AAdd(aCamposSim,{"ZA5_VRDIS" ,""})	// Incluído em 14.07.08 a pedido do Ednalvo, aprovado pela Nilza por Marcos - Proativa
AAdd(aCamposSim,{"ZA5_SAIRET",""})
AAdd(aCamposSim,{"ZA5_VRMOB" ,""})
AAdd(aCamposSim,{"ZA5_VRDES" ,""})
AAdd(aCamposSim,{"ZA5_RATEIO",""})	// Campo de vínculo com a tabela ZLK - Rateio de Filiais
AAdd(aCamposSim,{"ZA5_FLMAQ" ,""})	// Filial dono da Máquina - Rateio de Filiais
AAdd(aCamposSim,{"ZA5_FLMO"  ,""})	// Filial do operador     - Rateio de Filiais
AAdd(aCamposSim,{"ZA5_QVEICP",""})
AAdd(aCamposSim,{"ZA5_VRUNIT",""})
AAdd(aCamposSim,{"ZA5_VRPESO",""})
AAdd(aCamposSim,{"ZA5_VRESTA",""})  //Vr.Estadia do Transp.Acessórios (Contra-peso)
AAdd(aCamposSim,{"ZA5_TPMEDI",""})
AAdd(aCamposSim,{"ZA5_APOHRS",""})
AAdd(aCamposSim,{"ZA5_TPMEDM",""})
AAdd(aCamposSim,{"ZA5_TPMEDD",""})
AAdd(aCamposSim,{"ZA5_VRCARG",""})
AAdd(aCamposSim,{"ZA5_TPSEGU",""})
AAdd(aCamposSim,{"ZA5_PERSEG",""})
AAdd(aCamposSim,{"ZA5_VRSEGU",""})
AAdd(aCamposSim,{"ZA5_TPISS" ,""})
AAdd(aCamposSim,{"ZA5_PERISS",""})
AAdd(aCamposSim,{"ZA5_VRISS" ,""})
AAdd(aCamposSim,{"ZA5_PERMAO",""})
AAdd(aCamposSim,{"ZA5_DTINI" ,""})
AAdd(aCamposSim,{"ZA5_DTFIM" ,""})
AAdd(aCamposSim,{"ZA5_HRINI" ,""})
AAdd(aCamposSim,{"ZA5_HRFIM" ,""})  //Alteração dia 27/05/2011 - Incluso por Julio Campos(Biale)
AAdd(aCamposSim,{"ZA5_HORVIA",""})
AAdd(aCamposSim,{"ZA5_CONPAG",""})
AAdd(aCamposSim,{"ZA5_TIPPAG",""})
AAdd(aCamposSim,{"ZA5_OBS",""})
//AAdd(aCamposSim,{"ZA5_REVNAS",""})
AAdd(aCamposSim,{"ZA5_VIAGEM","V"})
AAdd(aCamposSim,{"ZA5_AS","V"})    
AAdd(aCamposSim,{"ZA5_VIGENC",""})  //ALTERADO POR RRM - 01/04/11 - INCLUSO NOVO CAMPO NA GETDADOS  
AAdd(aCamposSim,{"ZA5_CTVERB",""})  //ALTERADO POR RRM - 06/04/11 - INCLUSO NOVO CAMPO NA GETDADOS  
AAdd(aCamposSim,{"ZA5_THORAS",""})  //ALTERADO POR RRM - 21/04/11 - INCLUSO NOVO CAMPO NA GETDADOS  
//AAdd(aCamposSim,{"ZA5_DESCON",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
//AAdd(aCamposSim,{"ZA5_VALDES",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
//AAdd(aCamposSim,{"ZA5_HPROD",""})   //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
//AAdd(aCamposSim,{"ZA5_HIMPR",""})   //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
//AAdd(aCamposSim,{"ZA5_HEXCED",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
//AAdd(aCamposSim,{"ZA5_HADICI",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
//AAdd(aCamposSim,{"ZA5_HGREVE",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
//AAdd(aCamposSim,{"ZA5_HCHUVA",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
//AAdd(aCamposSim,{"ZA5_HDISPO",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
//AAdd(aCamposSim,{"ZA5_CABTEN",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
//AAdd(aCamposSim,{"ZA5_VLMOBR",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
//AAdd(aCamposSim,{"ZA5_HEMOBR",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
//AAdd(aCamposSim,{"ZA5_KMROD",""})   //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
//AAdd(aCamposSim,{"ZA5_HORIME",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
//AAdd(aCamposSim,{"ZA5_JUNKH",""})   //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).

AAdd(aCamposSim,{"ZA5_CUSIND",""}) //Alison (30/08/13)
AAdd(aCamposSim,{"ZA5_VALAS",""}) //Alison (17/10/13)

aHeader:=fHeader(aCamposSim)
aCols:=fCols(aHeader,cAlias,nIndice,cChave,cCondicao,cFiltro)
DO CASE
	CASE  ZA0->ZA0_TIPOSE == 'P'
	     nPos:= Ascan(aHeader,{|x|AllTrim(x[2])=='ZA5_TIPOSE'})
	     if nPos > 0
	    	 aHeader[npos][11]:= "P=Plataforma;M=Mao de Obra;O=Outros"
	     endif
	CASE  ZA0->ZA0_TIPOSE == 'U'
	     nPos:= Ascan(aHeader,{|x|AllTrim(x[2])=='ZA5_TIPOSE'})
	     if nPos > 0
    		 aHeader[npos][11]:= "U=Grua;M=Mao de Obra;O=Outros" 
	     endif
	CASE  ZA0->ZA0_TIPOSE == 'G'
	     nPos:= Ascan(aHeader,{|x|AllTrim(x[2])=='ZA5_TIPOSE'})
	     if nPos > 0
	    	 aHeader[npos][11]:= "G=Equipamentos;M=Mao de Obra;O=Outros"
	     endif
ENDCASE 

If Len(aCols)==1
	cCampo   :="ZA5_SEQGUI"
	cCampoGet:=aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]
	If Empty(cCampoGet)
		aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]:=StrZero(1,Len(cCampoGet))
	EndIf
EndIf

cCampo   :="ZA5_SEQGUI"
cCampoGet:=oGui_Cols0[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]
If Empty(cCampoGet)
	oGui_Cols0[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]:=StrZero(1,Len(cCampoGet))
EndIf

//                           nTop ,nLeft,nBottom,nRight,nStyle,cLinhaOk      ,cTudoOk,cIniCpos     ,aAlter,nFreeze,nMax,cFieldOk,cSuperDel ,cDelOk     ,oWnd                     ,aHeader,aCols}
oDlgGui:=MsNewGetDados():New(nLin1,nCol1,nLin2  ,nCol2 ,nStyle,"U_fValiCli(ZA0->ZA0_CLI, ZA0->ZA0_LOJA)" ,"U_fValiCli(ZA0->ZA0_CLI, ZA0->ZA0_LOJA)" 	,"+ZA5_SEQGUI",      ,       ,    ,        , MAXGETDAD,{||DelAS()},oFolder:aDialogs[nFolder],aHeader,aCols)
oDlgGui:oBrowse:bChange:={||U_MudaGuiB()}
oDlgGui:oBrowse:bAdd	:= {|| Iif(U_fValiCli(ZA0->ZA0_CLI, ZA0->ZA0_LOJA),oDlgGui:AddLine(),)}
fAcumuGui()
fTrazGui()

Return

********************************************************************************
Static Function fFolderGu1(nFolder,nLin1,nCol1,nLin2,nCol2)
// Folder Guindastes
********************************************************************************
Local aCamposNao := {}
Local aCamposSim := {}
Local nStyle:=GD_INSERT + GD_UPDATE + GD_DELETE
Local cAlias,cChave,cCondicao,nIndice,cFiltro

nStyle:=If(nOpcManu==2,0,nStyle)  //2=Visualizar

cAlias   :="ZA5"
cChave   :=xFILIAL(cAlias)+cProjet
cCondicao:='ZA5_FILIAL+ZA5_PROJET=="'+cChave+'"'
nIndice  :=4  //ZA5_FILIAL+ZA5_PROJET+ZA5_OBRA+ZA5_SEQTRA+ZA5_SEQGUI
cFiltro  :=cCondicao

AAdd(aCamposSim,{"ZA5_OBRA"  ,"V"}) 
AAdd(aCamposSim,{"ZA5_SEQTRA","V"}) 
AAdd(aCamposSim,{"ZA5_SEQCAR","V"}) 
AAdd(aCamposSim,{"ZA5_SEQGUI","V"}) 
AAdd(aCamposSim,{"ZA5_TIPOSE",""}) 
AAdd(aCamposSim,{"ZA5_GUINDA",""})
AAdd(aCamposSim,{"ZA5_CODMAO",""})
AAdd(aCamposSim,{"ZA5_DESGUI",""})
AAdd(aCamposSim,{"ZA5_CONFIG",""})
AAdd(aCamposSim,{"ZA5_LOCTER",""})
AAdd(aCamposSim,{"ZA5_TIPOCA",""})
AAdd(aCamposSim,{"ZA5_PREDIA",""})
//Data			: 27-03-2012
//Analista		: Maickon Queiroz 
//Ajuste		: Solicitado para que os campos ZA5_QTMES e ZA5_QTDIA fosse reapresentado na tela de orçamentos.
//Ajuste		: Solicitado para que os campos ZA5_QTMES e ZA5_QTDIA fosse reapresentado na tela de orçamentos.
//Ajuste		: Solicitado para que os campos ZA5_QTMES e ZA5_QTDIA fosse reapresentado na tela de orçamentos.
//Solicitação	: Caue Buontempi Poltronieri (Referente ao Chamado aberto pelo CEC)
//AAdd(aCamposSim,{"ZA5_QTMES" ,""}) // inibir o uso - Cristiam em 18/04/11
//AAdd(aCamposSim,{"ZA5_QTDIA" ,""}) // inibir o uso - Cristiam em 18/04/11
AAdd(aCamposSim,{"ZA5_QTMES" ,""}) // inibir o uso - Cristiam em 18/04/11
AAdd(aCamposSim,{"ZA5_QTDIA" ,""}) // inibir o uso - Cristiam em 18/04/11
AAdd(aCamposSim,{"ZA5_MINDIA",""})
AAdd(aCamposSim,{"ZA5_MINMES",""})
AAdd(aCamposSim,{"ZA5_VRHOR" ,""})
AAdd(aCamposSim,{"ZA5_VRDIS" ,""})	// Incluído em 14.07.08 a pedido do Ednalvo, aprovado pela Nilza por Marcos - Proativa
AAdd(aCamposSim,{"ZA5_SAIRET",""})
AAdd(aCamposSim,{"ZA5_VRMOB" ,""})
AAdd(aCamposSim,{"ZA5_VRDES" ,""})
AAdd(aCamposSim,{"ZA5_QVEICP",""})
AAdd(aCamposSim,{"ZA5_VRUNIT",""})
AAdd(aCamposSim,{"ZA5_VRPESO",""})
AAdd(aCamposSim,{"ZA5_TPMEDI",""})
AAdd(aCamposSim,{"ZA5_APOHRS",""})
AAdd(aCamposSim,{"ZA5_TPMEDM",""})
AAdd(aCamposSim,{"ZA5_TPMEDD",""})
AAdd(aCamposSim,{"ZA5_VRCARG",""})
AAdd(aCamposSim,{"ZA5_TPSEGU",""})
AAdd(aCamposSim,{"ZA5_PERSEG",""})
AAdd(aCamposSim,{"ZA5_VRSEGU",""})
AAdd(aCamposSim,{"ZA5_TPISS" ,""})
AAdd(aCamposSim,{"ZA5_PERISS",""})
AAdd(aCamposSim,{"ZA5_VRISS" ,""})
AAdd(aCamposSim,{"ZA5_PERMAO",""})
AAdd(aCamposSim,{"ZA5_DTINI" ,""})
AAdd(aCamposSim,{"ZA5_DTFIM" ,""})
AAdd(aCamposSim,{"ZA5_HRINI" ,""})
AAdd(aCamposSim,{"ZA5_HORVIA",""})
AAdd(aCamposSim,{"ZA5_CONPAG",""})
AAdd(aCamposSim,{"ZA5_TIPPAG",""})
AAdd(aCamposSim,{"ZA5_OBS",""})
//AAdd(aCamposSim,{"ZA5_REVNAS",""})
//AAdd(aCamposSim,{"ZA5_DESCON",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
//AAdd(aCamposSim,{"ZA5_VALDES",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
//AAdd(aCamposSim,{"ZA5_HPROD",""})   //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
//AAdd(aCamposSim,{"ZA5_HIMPR",""})   //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
//AAdd(aCamposSim,{"ZA5_HEXCED",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
//AAdd(aCamposSim,{"ZA5_HADICI",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
//AAdd(aCamposSim,{"ZA5_HGREVE",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
//AAdd(aCamposSim,{"ZA5_HCHUVA",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
//AAdd(aCamposSim,{"ZA5_HDISPO",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
//AAdd(aCamposSim,{"ZA5_CABTEN",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
//AAdd(aCamposSim,{"ZA5_VLMOBR",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
//AAdd(aCamposSim,{"ZA5_HEMOBR",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
//AAdd(aCamposSim,{"ZA5_KMROD",""})   //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
//AAdd(aCamposSim,{"ZA5_HORIME",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
//AAdd(aCamposSim,{"ZA5_JUNKH",""})   //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).

AAdd(aCamposSim,{"ZA5_CUSIND",""}) //Alison (30/08/13)
AAdd(aCamposSim,{"ZA5_VALAS",""}) //Alison (17/10/13)                            

aHeader:=fHeader(aCamposSim)
aCols:=fCols(aHeader,cAlias,nIndice,cChave,cCondicao,cFiltro)

If Len(aCols)==1
	cCampo   :="ZA5_SEQGUI"
	cCampoGet:=aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]
	If Empty(cCampoGet)
		aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]:=StrZero(1,Len(cCampoGet))
	EndIf
EndIf

cCampo   :="ZA5_SEQGUI"
cCampoGet:=oGui_Cols0[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]
If Empty(cCampoGet)
	oGui_Cols0[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]:=StrZero(1,Len(cCampoGet))
EndIf

//                           nTop ,nLeft,nBottom,nRight,nStyle,cLinhaOk      ,cTudoOk,cIniCpos     ,aAlter,nFreeze,nMax,cFieldOk,cSuperDel,cDelOk,oWnd                     ,aHeader,aCols}
oDlgGui:=MsNewGetDados():New(nLin1,nCol1,nLin2  ,nCol2 ,nStyle,              ,       ,"+ZA5_SEQGUI",      ,       ,110 ,        ,         ,.t.   ,oFolder:aDialogs[nFolder],aHeader,aCols)
oDlgGui:oBrowse:bChange:={||U_MudaGuiB()}

fAcumuGui()
fTrazGui()

Return

********************************************************************************
User Function MudaGuiB  
// Muda o Browse - Folder Guindastes
********************************************************************************
Local lRet:=.T.
Local cCampo,cCampoGet

Local nDiaTurno,nHrsTurno

If ZA0->ZA0_TIPOSE=="L"
	Return(u_MudaGu1B())
EndIf
     
fObra()

If oDlgGui:nAt>Len(oDlgGui:aCols) ; oDlgGui:nAt:=Len(oDlgGui:aCols) ; EndIf

oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_OBRA"  })]:=cObra

nPreDia:=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_PREDIA"})]

IIF ( ValType(oGetVT)=='O' .AND. Len(aColsTurno) >=oDlgGui:nAt,oGetVT:aCols:= aClone(aColsTurno[oDlgGui:nAt]) ,0)

If ValType(oGetVT)=='O' .and.  Len(oGetVT:aCols) >= 1 .And. cObra==oGetVT:aCols[1, GdFieldPos("ZBB_OBRA",oGetVT:aHeader)] .And. cSeqGui==oGetVT:aCols[1, GdFieldPos("ZBB_SEQGUI",oGetVT:aHeader)]
	nDiaTurno := GDFieldGet ( "ZBB_MINDIT", 1, .F., oGetVT:aHeader, oGetVT:aCols )
	nHrsTurno := GetHorasTurno(GDFieldGet("ZBB_HRINIT",1,.F.,oGetVT:aHeader,oGetVT:aCols),GDFieldGet("ZBB_HOFIMT",1,.F.,oGetVT:aHeader,oGetVT:aCols))
EndIf
nValTur1 := IIF( ValType(oGetVT)=='O' .and.  Len(oGetVT:aCols) >= 1 , ((Val(nDiaTurno) * nHrsTurno) * GDFieldGet ( "ZBB_VALTUR", 1, .F., oGetVT:aHeader, oGetVT:aCols )),nValTur1) 

If ValType(oGetVT)=='O' .and.  Len(oGetVT:aCols) >= 2 .And. cObra==oGetVT:aCols[2, GdFieldPos("ZBB_OBRA",oGetVT:aHeader)] .And. cSeqGui==oGetVT:aCols[2, GdFieldPos("ZBB_SEQGUI",oGetVT:aHeader)]
	nDiaTurno := GDFieldGet ( "ZBB_MINDIT", 2, .F., oGetVT:aHeader, oGetVT:aCols )
	nHrsTurno := GetHorasTurno(GDFieldGet("ZBB_HRINIT",2,.F.,oGetVT:aHeader,oGetVT:aCols),GDFieldGet("ZBB_HOFIMT",2,.F.,oGetVT:aHeader,oGetVT:aCols))
EndIf
nValTur2 := IIF( ValType(oGetVT)=='O' .and.  Len(oGetVT:aCols) >= 2 , ((Val(nDiaTurno) * nHrsTurno) * GDFieldGet ( "ZBB_VALTUR", 2, .F., oGetVT:aHeader, oGetVT:aCols )),nValTur2) 

If ValType(oGetVT)=='O' .and.  Len(oGetVT:aCols) >= 3 .And. cObra==oGetVT:aCols[3, GdFieldPos("ZBB_OBRA",oGetVT:aHeader)] .And. cSeqGui==oGetVT:aCols[3, GdFieldPos("ZBB_SEQGUI",oGetVT:aHeader)]
	nDiaTurno := GDFieldGet ( "ZBB_MINDIT", 3, .F., oGetVT:aHeader, oGetVT:aCols )
	nHrsTurno := GetHorasTurno(GDFieldGet("ZBB_HRINIT",3,.F.,oGetVT:aHeader,oGetVT:aCols),GDFieldGet("ZBB_HOFIMT",3,.F.,oGetVT:aHeader,oGetVT:aCols))
EndIf      
nValTur3 := IIF( ValType(oGetVT)=='O' .and.  Len(oGetVT:aCols) >= 3 , ((Val(nDiaTurno) * nHrsTurno) * GDFieldGet ( "ZBB_VALTUR", 3, .F., oGetVT:aHeader, oGetVT:aCols )),nValTur3) 

//nValTur2 :=IIF( ValType(oGetVT)=='O' .and.  Len(oGetVT:aCols) >= 2 , (nPreDia * GDFieldGet ( "ZBB_VALTUR", 2, .F., oGetVT:aHeader, oGetVT:aCols ))/Len(oGetVT:aCols),0)
//nValTur3 :=IIF( ValType(oGetVT)=='O' .and.  Len(oGetVT:aCols) >= 3 , (nPreDia * GDFieldGet ( "ZBB_VALTUR", 3, .F., oGetVT:aHeader, oGetVT:aCols ))/Len(oGetVT:aCols),0)

oDlgGui:oBrowse:Refresh()
ProcessMessages()

fCalcCar()  //Calcula as dimensões

Return lRet

********************************************************************************
User Function MudaGu1B  
// Muda o Browse - Folder Guindastes
********************************************************************************
Local lRet:=.T.
Local cCampo,cCampoGet

fObra()

If oDlgGui:nAt>Len(oDlgGui:aCols) ; oDlgGui:nAt:=Len(oDlgGui:aCols) ; EndIf

oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_OBRA"  })]:=cObra
oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_SEQTRA"})]:=cSeqTra
oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_SEQCAR"})]:=cSeqCar  

	
		
oDlgGui:oBrowse:Refresh()

Return lRet


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³fSalvarCnjºAutor  ³M&S Consultoria     º Data ³  30/06/07   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Salvar os elementos de conjunto de transporte              º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Static Function fSalvarCnj(cAlias,aHeader,aCols)
//Local xCOD := SuperGetMV("LC_RESPFRT",,"084") 
Local aCpos := {}

	ZLW->(dbSetOrder(2))
	DTQ->(dbSetOrder(1))	// DTQ_FILIAL + DTQ_VIAGEM
    ZAA->(dbSetOrder(2))	// ZAA_FILIAL + ZAA_PROJET + ZAA_OBRA + ZAA_SEQUI + ZAA_SEQRES
    //ZAB->(dbSeek(xFilial("ZAB")+xCOD))

    
	If nOpc != 5  //5=Exclui
	
// Tratativa para ZERAR os Custos dos Fretes antes de acumulá-los - Cristiam Rossi em 20/10/2011	
		cQuery := "UPDATE " + RetSqlName('ZAA') + " SET ZAA_VALOR = 0 "
		cQuery += " WHERE D_E_L_E_T_ = ''"
		cQuery += " AND   ZAA_FILIAL = '"+xFilial('ZAA')+"'"
		cQuery += " AND   ZAA_PROJET = '"+ cProjet +"'"
		cQuery += " AND   ZAA_CODIGO = '"+ xCOD +"'"
		TCSQLEXEC(cQuery)

	
		For nPos:=1 to Len(aCols)
			aCpos:= {}
			if ! Empty(Alltrim(aCols[nPos, 4] + aCols[nPos, 5] + aCols[nPos, 7]))
				if ZLW->(dbSeek( xFilial('ZLW') + aCols[nPos, 4] + aCols[nPos, 5] + aCols[nPos, 7] + aCols[nPos, 1]))
				
					// Tratativa para Estornar o Status de Aceite da ASF. Cristiam Rossi em 20/10/2011
					if !Empty(ZLW->ZLW_VIAGEM)	// existe DTQ, ou seja, houve Geração de contrato anterior.
						DTQ->(dbSetOrder(1))	// DTQ_FILIAL + DTQ_VIAGEM
						if DTQ->(dbSeek( xFilial("DTQ") + ZLW->ZLW_VIAGEM))		// Localiza a ASF
						   //	if DTQ->DTQ_STATUS != '1'		// Se status diferente de incluído iniciamos a verificação
								
								aZLW := {}
								for nK := 1 to len(aHeader)
									aAdd(aZLW, {aHeader[nK][2], aCols[nPos][nK]} )
								next
								
								if U_fAltDTQ(aZLW, ZLW->ZLW_VIAGEM, "ZLW")	// existe diferença
									ZLW->(Reclock("ZLW",.f.))
										ZLW->ZLW_ALTERR := ""
									ZLW->(MsUnLock())

									// Frank Fuga 16/11/2015      
									// Por segurança vou validar se a tabela ZA7 esta posicionada
									If !ZA7->ZA7_FILIAL+ZA7->ZA7_PROJET+ZA7->ZA7_OBRA+ZA7->ZA7_VIAGEM == xFilial("DTQ")+cProjeto+ZA1->ZA1_OBRA+cViagem
										ZA7->(dbSetOrder(2))
										ZA7->(dbSeek( xFilial("DTQ")+cProjeto+ZA1->ZA1_OBRA+cViagem  ))
									EndIF
									If ZA7->ZA7_QJUE == 0
										DTQ->(RecLock("DTQ", .F.))   									
								   		DTQ->DTQ_STATUS := '1'	// voltamos o Status
										DTQ->(MsUnlock())
									EndIF
								endif
						   //	endif
						endif
					endif
					ZLW->(RecLock(cAlias,.F.)) 
				else
					if aCols[nPos,Len(aHeader)+1]
						Loop
					endif
					ZLW->(RecLock(cAlias,.T.))
						ZLW->ZLW_ALTERR := DTOS(dDatabase)
						
				endif
	
				If aCols[nPos,Len(aHeader)+1]
					lExclui := .T.
					if ! Empty(ZLW->ZLW_VIAGEM)		// Tratar a exclusão da ASF
						if DTQ->(dbSeek(xFilial("DTQ")+ZLW->ZLW_VIAGEM))
							if ! Empty(DTQ->DTQ_NUMCTC) .or. ! Empty(DTQ->DTQ_IMPCTB)	// Será tratado posteriormente na ET Operacional. Solicitação Lui.
								lExclui := .F.
								cMsg := "A ASF Nº: " + DTQ->DTQ_AS + " não pode ser excluída pois a viagem tem "
								if !Empty(DTQ->DTQ_NUMCTC) .and. DTQ->DTQ_IMPCTB == 'S'
									cMsg += "CTRB gerada"
								elseif !Empty(DTQ->DTQ_NUMCTC) .and. DTQ->DTQ_IMPCTB == 'A'
									cMsg += "Adiantamento"
								else
									cMsg += "Saldo"
								endif
								MsgAlert(cMsg,"Operação cancelada")
							ElseIf DTQ->DTQ_STATUS == '6' //Maickon Queiroz - 08/12/2011 - Solicitado pelo JR para não deixar excluir caso não esteja liberado o Frete.
								lExclui := .F.
								cMsg:= "Não poderá ser excluido pois a ASF já foi aceita"
								MsgAlert(cMsg,"Operação cancelada")
							endif
						endif
					endif
					
					if lExclui
						//Alterado: Antonio Carlos - Connit - Tratamento para exclusão da DTQ
						If DTQ->( DbSeek(xFilial("DTQ")+ZLW->ZLW_VIAGEM) )					
							DTQ->( RecLock("DTQ", .F.) )
							DTQ->( DbDelete() )							
							DTQ->( MsUnlock() )
						EndIf
						ZLW->(dbDelete())
					endif
				else
				    //Alterado: Antonio Carlos - Connit - Inclusão dos campos ZLW_LCCORI/ZLW_LCLORI/ZLW_LCCDES/ZLW_LCLDES
					ZLW->ZLW_FILIAL := xFilial('ZLW')
				    ZLW->ZLW_ITEM   := aCols[nPos, 1]
				    ZLW->ZLW_X5COD  := aCols[nPos, 2]
				    ZLW->ZLW_DESCRI := aCols[nPos, 3]
				    ZLW->ZLW_PROJET := aCols[nPos, 4]
				    ZLW->ZLW_OBRA   := aCols[nPos, 5]
				    ZLW->ZLW_CC     := aCols[nPos, 6]
//				    ZLW->ZLW_VALOR  := aCols[nPos, 6]
				    ZLW->ZLW_SEQGUI := aCols[nPos, 7]
				    ZLW->ZLW_PRECUS := aCols[nPos, 8]
				    ZLW->ZLW_VIAGEM := aCols[nPos, 9]
				    ZLW->ZLW_DTLIM  := aCols[nPos, 10]
				    ZLW->ZLW_OBS    := aCols[nPos, 11]				    
		    	    ZLW->ZLW_LCCORI := aCols[nPos, 12]
				    ZLW->ZLW_LCLORI := aCols[nPos, 13]				    				    
				    ZLW->ZLW_LOCCAR := aCols[nPos, 14]
				    ZLW->ZLW_ENDORI := aCols[nPos, 15]
				    ZLW->ZLW_BRRORI := aCols[nPos, 16]
				    ZLW->ZLW_MUNORI := aCols[nPos, 17]
				    ZLW->ZLW_CIDORI := aCols[nPos, 18]
				    ZLW->ZLW_UFORI  := aCols[nPos, 19]
				    ZLW->ZLW_CEPORI := aCols[nPos, 20]				    
				    ZLW->ZLW_LCCDES := aCols[nPos, 21]
				    ZLW->ZLW_LCLDES := aCols[nPos, 22]				    				    				    
				    ZLW->ZLW_LOCDES := aCols[nPos, 23]
				    ZLW->ZLW_ENDEST := aCols[nPos, 24]
				    ZLW->ZLW_BRRDES := aCols[nPos, 25]
				    ZLW->ZLW_MUNDES := aCols[nPos, 26]
				    ZLW->ZLW_CIDEST := aCols[nPos, 27]
				    ZLW->ZLW_UFDEST := aCols[nPos, 28]
				    ZLW->ZLW_CEPDES := aCols[nPos, 29]
				    ZLW->ZLW_VIAORI := aCols[nPos, 30]
				    
				    // acumular os Preços de Custo para atualizar a Responsabilidade - Cristiam Rossi em 20/10/2011    
				    // Renato Ruy - 20/12/12 - Duplica responsabilidade
				    /*
				    ZAA->(dbSeek(xFilial("ZAA")+ZLW->ZLW_PROJET+ZLW->ZLW_OBRA+ZLW->ZLW_SEQGUI, .T.))

				    xSeqRes := "000"
				    xRecno  := 0
				    while ! ZAA->(EOF()) .and. ZAA->(ZAA_FILIAL+ZAA_PROJET+ZAA_OBRA+ZAA_SEQGUI) == xFilial("ZAA")+ZLW->ZLW_PROJET+ZLW->ZLW_OBRA+ZLW->ZLW_SEQGUI
				    	if ZAA->ZAA_CODIGO == xCOD
				    		xRecno := ZAA->(RECNO())
				    	endif
				    	
				    	xSeqRes := ZAA->ZAA_SEQRES
				    	
				    	ZAA->(dbSkip())
				    end

					if xRecno > 0
						ZAA->(dbGoto(xRecno))
					endif

				    ZAA->(RecLock("ZAA", xRecno==0))

				    if xRecno == 0
						ZAA->ZAA_FILIAL := xFilial("ZAA")
						ZAA->ZAA_PROJET := ZLW->ZLW_PROJET
						ZAA->ZAA_OBRA   := ZLW->ZLW_OBRA
				    	ZAA->ZAA_SEQRES := Soma1(xSeqRes)
						ZAA->ZAA_CODIGO := ZAB->ZAB_CODIGO
						ZAA->ZAA_DESCRI := ZAB->ZAB_DESCRI
						ZAA->ZAA_DESCCO := ZAB->ZAB_DESCCO
						ZAA->ZAA_RESPON := "D"
						ZAA->ZAA_SEQGUI := ZLW->ZLW_SEQGUI
				    endif

				    ZAA->ZAA_VALOR := ZAA->ZAA_VALOR + ZLW->ZLW_PRECUS
				    ZAA->(MsUnlock())
                    */
				endif

				ZLW->(MsUnLock())
			endif
		Next
	EndIf
Return Nil

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³fSalvarTrNºAutor  ³M&S Consultoria     º Data ³  30/06/07   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Salvar os elementos de Trechos, Tarifas e Rotas + arquivo  º±±
±±º          ³ digitalizado (espelho p/ base de cálculo CTF|)             º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function fSalvarTrN(cAlias,aHeader,aCols)
Local cArqNew
Local aOldFiles
Local lGravou := .F.

	If nOpc != 5  //5=Exclui
		if !Empty(cCmpArq)
			cArqNew := Alltrim(Strtran(cProjet,"/","")) + "." + fNomArq(cNomArq, ".")  // Retorna a extensão do arquivo

		    if ! __CopyFile(cCmpArq, cCaminho+"\"+cArqNew)
		    	MsgStop("Ocorreu um erro na cópia!","Vínculo de Protocolo Digitalizado")
		    	Return .F.
		    endif

			if ! File(cCaminho +"\"+cArqNew)
		    	MsgStop("O arquivo não foi copiado!","Vínculo de Protocolo Digitalizado")
		    	Return .F.
		    endif
		endif

		For nPos:=1 to Len(aCols)
			if ZLX->(dbSeek( xFilial('ZLX') + cProjet + aCols[nPos,1]))
				ZLX->(RecLock(cAlias,.F.))
			else
				if aCols[nPos,Len(aHeader)+1]
					Loop
				endif
				ZLX->(RecLock(cAlias,.T.))
			endif

			If aCols[nPos,Len(aHeader)+1]
				ZLX->(dbDelete())
			else
				lGravou := .T.
				
			    ZLX->ZLX_FILIAL := xFilial('ZLX')
			    ZLX->ZLX_PROJET := cProjet
			    ZLX->ZLX_DOCTO  := cNomArq
			    ZLX->ZLX_ITEM   := aCols[nPos, 1]
			    ZLX->ZLX_RODOVI := aCols[nPos, 2]
			    ZLX->ZLX_PISTA  := aCols[nPos, 3]
			    ZLX->ZLX_PEDAGI := aCols[nPos, 4]
			    ZLX->ZLX_KM     := aCols[nPos, 5]
			    ZLX->ZLX_VAZCAR := aCols[nPos, 6]
			endif

			ZLX->(MsUnLock())
		Next

		if !Empty(cCmpArq) .and. !lGravou	// se existir arquivo e nenhum registro de trecho, criamos um registro em branco para armazenar o docto digitalizado
			ZLX->(RecLock(cAlias,.T.))
		    ZLX->ZLX_FILIAL := xFilial('ZLX')
		    ZLX->ZLX_PROJET := cProjet
		    ZLX->ZLX_DOCTO  := cNomArq
		    ZLX->ZLX_ITEM   := '01'
			ZLX->(MsUnLock())
		endif
	EndIf
Return Nil


********************************************************************************
Static Function fSalvarGui(cAlias,aHeader,aCols)
// Folder Guindastes
********************************************************************************
Local nPos,aGravados:={}  //Gravados

If ZA0->ZA0_TIPOSE=="L"
	fSalvarGu1(cAlias,Aclone(aHeader),Aclone(aCols))  //Guindastes
	Return
EndIf

// Acumula o aCols corrente no aCols com todos os registros
fAcumuGui()
aCols:=Aclone(oGui_Cols)

dbSelectArea(cAlias)
dbSetOrder(1)

If nOpc==5  //5=Exclui
Else
	For nPos:=1 to Len(aCols)
		cObra  :=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZA5_OBRA"  })]
		cSeqGui:=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZA5_SEQGUI"})]
		If !aCols[nPos,Len(aHeader)+1] .and. !Empty(cObra) .and. !Empty(cSeqGui)  //!Deleted()
			dbSeek(xFILIAL(cAlias)+cProjet+cObra+cSeqGui)
			If Eof()
				RecLock(cAlias,.T.)
			Else
				RecLock(cAlias,.F.)
			EndIf
			fGravaTudo(cAlias,aHeader,aCols[nPos])  //Grava todos os campos do aCols
			(cAlias)->ZA5_FILIAL:=xFILIAL(cAlias)
			(cAlias)->ZA5_PROJET:=cProjet
			(cAlias)->ZA5_OBRA  :=cObra
			(cAlias)->ZA5_SEQGUI:=cSeqGui
			//(cAlias)->ZA5_CUSIND:=nValCusIG
			AAdd(aGravados,Recno())  //Gravados
			MsUnLock()
	     EndIf
	Next
EndIf

// Exclui os registros alterados
dbSeek(xFILIAL(cAlias)+cProjet)
While !Eof() .and. ZA5_FILIAL+ZA5_PROJET==xFILIAL(cAlias)+cProjet
	If Ascan(aGravados,{|x|x==Recno()})==0
		RecLock(cAlias,.F.)
		dbDelete()
		MsUnLock()
		//ZBB_FILIAL+ZBB_PROJET+ZBB_OBRA+ZBB_SEQGUI                                                                                                                                                                                                                          
		DeletZBB(ZA5_PROJET+ZA5_OBRA+ZA5_SEQGUI)
	EndIf
	dbSkip()
End

Return

********************************************************************************
Static Function fSalvarGu1(cAlias,aHeader,aCols)
// Folder Guindastes
********************************************************************************
Local nPos,aGravados:={}  //Gravados

// Acumula o aCols corrente no aCols com todos os registros
fAcumuGui()
aCols:=Aclone(oGui_Cols)

dbSelectArea(cAlias)
dbSetOrder(4)

If nOpc==5  //5=Exclui
Else
	For nPos:=1 to Len(aCols)
		cObra  :=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZA5_OBRA"  })]
		cSeqTra:=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZA5_SEQTRA"})]
		cSeqCar:=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZA5_SEQCAR"})]
		cSeqGui:=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZA5_SEQGUI"})]
		If !aCols[nPos,Len(aHeader)+1] .and. !Empty(cObra) .and. !Empty(cSeqTra) .and. !Empty(cSeqCar) .and. !Empty(cSeqGui)  //!Deleted()
			dbSeek(xFILIAL(cAlias)+cProjet+cObra+cSeqTra+cSeqCar+cSeqGui)
			If Eof()
				RecLock(cAlias,.T.)
			Else
				RecLock(cAlias,.F.)
			EndIf
			fGravaTudo(cAlias,aHeader,aCols[nPos])  //Grava todos os campos do aCols
			(cAlias)->ZA5_FILIAL:=xFILIAL(cAlias)
			(cAlias)->ZA5_PROJET:=cProjet
			(cAlias)->ZA5_OBRA  :=cObra
			(cAlias)->ZA5_SEQTRA:=cSeqTra
			(cAlias)->ZA5_SEQCAR:=cSeqCar
			(cAlias)->ZA5_SEQGUI:=cSeqGui
			(cAlias)->ZA5_CUSIND:=nValCusIG
			AAdd(aGravados,Recno())  //Gravados
			MsUnLock()
	     EndIf
	Next
EndIf

// Exclui os registros alterados
dbSeek(xFILIAL(cAlias)+cProjet)
While !Eof() .and. ZA5_FILIAL+ZA5_PROJET==xFILIAL(cAlias)+cProjet
	If Ascan(aGravados,{|x|x==Recno()})==0
		RecLock(cAlias,.F.)
		dbDelete()
		MsUnLock()
	EndIf
	dbSkip()
End

Return

********************************************************************************
Static Function fFolderAcG(nFolder,nLin1,nCol1,nLin2,nCol2)
// Folder Acess.Guindastes
********************************************************************************
Local aCamposNao := {}
Local aCamposSim := {}
Local nStyle:=GD_INSERT + GD_UPDATE + GD_DELETE
Local cAlias,cChave,cCondicao,nIndice,cFiltro

nStyle:=If(nOpcManu==2,0,nStyle)  //2=Visualizar

cAlias   :="ZAQ"
cChave   :=xFILIAL(cAlias)+cProjet
cCondicao:='ZAQ_FILIAL+ZAQ_PROJET=="'+cChave+'"'
nIndice  :=1  //ZAQ_FILIAL+ZAQ_PROJET+ZAQ_OBRA+ZAQ_SEQGUI+ZAQ_SEQACE
cFiltro  :=cCondicao

AAdd(aCamposSim,{"ZAQ_OBRA"  ,"V"}) 
AAdd(aCamposSim,{"ZAQ_SEQGUI","V"}) 
AAdd(aCamposSim,{"ZAQ_SEQACE","V"}) 
//AAdd(aCamposSim,{"ZAQ_CODGUI",""})
AAdd(aCamposSim,{"ZAQ_DESACE",""})

aHeader:=fHeader(aCamposSim)
aCols:=fCols(aHeader,cAlias,nIndice,cChave,cCondicao,cFiltro)

If Len(aCols)==1
	cCampo   :="ZAQ_SEQACE"
	cCampoGet:=aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]
	If Empty(cCampoGet)
		aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]:=StrZero(1,Len(cCampoGet))
	EndIf
EndIf

cCampo   :="ZAQ_SEQACE"
cCampoGet:=oAcG_Cols0[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]
If Empty(cCampoGet)
	oAcG_Cols0[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]:=StrZero(1,Len(cCampoGet))
EndIf

//                           nTop ,nLeft,nBottom,nRight,nStyle,cLinhaOk      ,cTudoOk,cIniCpos     ,aAlter,nFreeze,nMax,cFieldOk,cSuperDel,cDelOk,oWnd                     ,aHeader,aCols}
oDlgAcG:=MsNewGetDados():New(nLin1,nCol1,nLin2  ,nCol2 ,nStyle,              ,       ,"+ZAQ_SEQACE",      ,       ,110 ,        ,         ,.t.   ,oFolder:aDialogs[nFolder],aHeader,aCols)
oDlgAcG:oBrowse:bChange:={||U_MudaAcGB()}

fAcumuAcG()
fTrazAcG()

Return

********************************************************************************
User Function MudaAcGB  
// Muda o Browse - Folder Acess.Guindastes
********************************************************************************
Local lRet:=.T.
Local cCampo,cCampoGet

fObra()

If oDlgAcG:nAt>Len(oDlgAcG:aCols) ; oDlgAcG:nAt:=Len(oDlgAcG:aCols) ; EndIf

oDlgAcG:aCols[oDlgAcG:nAt][Ascan(oDlgAcG:aHeader,{|x|AllTrim(x[2])=="ZAQ_OBRA"  })]:=cObra
oDlgAcG:aCols[oDlgAcG:nAt][Ascan(oDlgAcG:aHeader,{|x|AllTrim(x[2])=="ZAQ_SEQGUI"})]:=cSeqGui
oDlgAcG:oBrowse:Refresh()

Return lRet

********************************************************************************
Static Function fSalvarAcG(cAlias,aHeader,aCols)
// Folder Acess.Guindastes
********************************************************************************
Local nPos,aGravados:={}  //Gravados

// Acumula o aCols corrente no aCols com todos os registros
fAcumuAcG()
aCols:=Aclone(oAcG_Cols)

dbSelectArea(cAlias)
dbSetOrder(1)

If nOpc==5  //5=Exclui
Else
	For nPos:=1 to Len(aCols)
		cObra  :=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAQ_OBRA"  })]
		cSeqGui:=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAQ_SEQGUI"})]
		cSeqAce:=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAQ_SEQACE"})]
		If !aCols[nPos,Len(aHeader)+1] .and. !Empty(cObra) .and. !Empty(cSeqGui) .and. !Empty(cSeqAce)  //!Deleted()
			dbSeek(xFILIAL(cAlias)+cProjet+cObra+cSeqGui+cSeqAce)
			If Eof()
				RecLock(cAlias,.T.)
			Else
				RecLock(cAlias,.F.)
			EndIf
			fGravaTudo(cAlias,aHeader,aCols[nPos])  //Grava todos os campos do aCols
			(cAlias)->ZAQ_FILIAL:=xFILIAL(cAlias)
			(cAlias)->ZAQ_PROJET:=cProjet
			(cAlias)->ZAQ_OBRA  :=cObra
			(cAlias)->ZAQ_SEQGUI:=cSeqGui
			(cAlias)->ZAQ_SEQACE:=cSeqAce
			AAdd(aGravados,Recno())  //Gravados
			MsUnLock()
	     EndIf
	Next
EndIf

// Exclui os registros alterados
dbSeek(xFILIAL(cAlias)+cProjet)
While !Eof() .and. ZAQ_FILIAL+ZAQ_PROJET==xFILIAL(cAlias)+cProjet
	If Ascan(aGravados,{|x|x==Recno()})==0
		RecLock(cAlias,.F.)
		dbDelete()
		MsUnLock()
	EndIf
	dbSkip()
End

Return

********************************************************************************
Static Function fFolderGru(nFolder,nLin1,nCol1,nLin2,nCol2)
// Folder Gruas
********************************************************************************
Local aCamposNao:= {}
Local aCamposSim:= {}
Local nStyle	:= GD_INSERT + GD_UPDATE + GD_DELETE
Local cAlias,cChave,cCondicao,nIndice,cFiltro

nStyle		:= If(nOpcManu==2,0,nStyle)  				// 2=Visualizar

cAlias   	:="ZAG"
cChave   	:=xFILIAL(cAlias) + cProjet
cCondicao	:='ZAG_FILIAL+ZAG_PROJET=="' + cChave + '"'
nIndice  	:=1  										// ZAG_FILIAL+ZAG_PROJET+ZAG_OBRA+ZAG_SEQGRU
cFiltro  	:=cCondicao

AAdd(aCamposSim,{"ZAG_OBRA"  ,"V"}) 
AAdd(aCamposSim,{"ZAG_SEQGRU","V"}) 
AAdd(aCamposSim,{"ZAG_TIPOSE",""}) 
AAdd(aCamposSim,{"ZAG_PRODUT",""})
AAdd(aCamposSim,{"ZAG_GRUA"  ,""})
AAdd(aCamposSim,{"ZAG_DESGRU","V"})
AAdd(aCamposSim,{"ZAG_QUANT" ,""})
AAdd(aCamposSim,{"ZAG_DTINI" ,""})
AAdd(aCamposSim,{"ZAG_DTFIM" ,""})
AAdd(aCamposSim,{"ZAG_PREDIA",""})
AAdd(aCamposSim,{"ZAG_TPBASE","V"})
AAdd(aCamposSim,{"ZAG_MINDIA",""})
AAdd(aCamposSim,{"ZAG_MINMES",""})
AAdd(aCamposSim,{"ZAG_PREMES",""})
AAdd(aCamposSim,{"ZAG_RATEIO",""})	// Campo de vínculo com a tabela ZLK - Rateio de Filiais
AAdd(aCamposSim,{"ZAG_FLMAQ" ,""})	// Filial dono da Máquina - Rateio de Filiais
AAdd(aCamposSim,{"ZAG_FLMO"  ,""})	// Filial do operador     - Rateio de Filiais
AAdd(aCamposSim,{"ZAG_HRINI" ,""})
AAdd(aCamposSim,{"ZAG_HRFIM" ,""})
AAdd(aCamposSim,{"ZAG_TORREI",""})
AAdd(aCamposSim,{"ZAG_TORREF",""})
AAdd(aCamposSim,{"ZAG_LANCA" ,""})
AAdd(aCamposSim,{"ZAG_CAPACI",""})
AAdd(aCamposSim,{"ZAG_CARACT",""})
AAdd(aCamposSim,{"ZAG_CHUMBA",""})
AAdd(aCamposSim,{"ZAG_VRHOR" ,""})
AAdd(aCamposSim,{"ZAG_HEMAQ" ,""})
AAdd(aCamposSim,{"ZAG_OPERAD",""})
AAdd(aCamposSim,{"ZAG_HEOPE" ,""})
AAdd(aCamposSim,{"ZAG_VRMOB" ,""})
AAdd(aCamposSim,{"ZAG_VRDES" ,""})
AAdd(aCamposSim,{"ZAG_MONTAG",""})
AAdd(aCamposSim,{"ZAG_DIASM" ,""})
AAdd(aCamposSim,{"ZAG_DESMON",""})
AAdd(aCamposSim,{"ZAG_DIASD" ,""})
AAdd(aCamposSim,{"ZAG_TELESC",""})       
AAdd(aCamposSim,{"ZAG_ANCORA",""})
AAdd(aCamposSim,{"ZAG_DIAST" ,""})
AAdd(aCamposSim,{"ZAG_TPGUIM",""})
AAdd(aCamposSim,{"ZAG_GUIMON",""})
AAdd(aCamposSim,{"ZAG_TPGUID",""})
AAdd(aCamposSim,{"ZAG_GUIDES",""})
AAdd(aCamposSim,{"ZAG_TPMEDI",""})
AAdd(aCamposSim,{"ZAG_TPMEDB",""})
AAdd(aCamposSim,{"ZAG_TPMED7",""})
AAdd(aCamposSim,{"ZAG_TPMOBI",""})
AAdd(aCamposSim,{"ZAG_TPDESM",""})
AAdd(aCamposSim,{"ZAG_TPMED1",""})
AAdd(aCamposSim,{"ZAG_TPMED2",""})
AAdd(aCamposSim,{"ZAG_TPMED3",""})
AAdd(aCamposSim,{"ZAG_TPMED4",""})
AAdd(aCamposSim,{"ZAG_TPMED5",""})
AAdd(aCamposSim,{"ZAG_TPMED6",""})
AAdd(aCamposSim,{"ZAG_CONPAG",""})
AAdd(aCamposSim,{"ZAG_TIPPAG",""})
AAdd(aCamposSim,{"ZAG_FORPG" ,""})
AAdd(aCamposSim,{"ZAG_TPISS" ,""})
AAdd(aCamposSim,{"ZAG_PERISS",""})
AAdd(aCamposSim,{"ZAG_VRISS" ,""})
AAdd(aCamposSim,{"ZAG_TPSEGU",""})
AAdd(aCamposSim,{"ZAG_VRSEGU",""})
AAdd(aCamposSim,{"ZAG_PERMAO",""})
AAdd(aCamposSim,{"ZAG_OBS"   ,""})
AAdd(aCamposSim,{"ZAG_REVNAS",""})
AAdd(aCamposSim,{"ZAG_AS"    ,"V"})
AAdd(aCamposSim,{"ZAG_VIAGEM","V"})
//AAdd(aCamposSim,{"ZAG_TPMEDM",""})
//AAdd(aCamposSim,{"ZAG_TPMEDD",""})
AAdd(aCamposSim,{"ZAG_THORAS",""})  //ALTERADO POR RRM - 21/04/11 - INCLUSO NOVO CAMPO NA GETDADOS  
AAdd(aCamposSim,{"ZAG_DESCON",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
AAdd(aCamposSim,{"ZAG_VALDES",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
AAdd(aCamposSim,{"ZAG_HPROD",""})   //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
AAdd(aCamposSim,{"ZAG_HIMPR",""})   //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
AAdd(aCamposSim,{"ZAG_HEXCED",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
AAdd(aCamposSim,{"ZAG_HADICI",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
AAdd(aCamposSim,{"ZAG_HGREVE",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
AAdd(aCamposSim,{"ZAG_HCHUVA",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
AAdd(aCamposSim,{"ZAG_HDISPO",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
AAdd(aCamposSim,{"ZAG_CABTEN",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
AAdd(aCamposSim,{"ZAG_VLMOBR",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
AAdd(aCamposSim,{"ZAG_HEMOBR",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
AAdd(aCamposSim,{"ZAG_KMROD",""})   //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
AAdd(aCamposSim,{"ZAG_HORIME",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
AAdd(aCamposSim,{"ZAG_JUNKH",""})   //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).

aHeader	:= fHeader(aCamposSim)
aCols	:= fCols(aHeader,cAlias,nIndice,cChave,cCondicao,cFiltro)

DO CASE
	CASE  ZA0->ZA0_TIPOSE == 'P'
	     nPos:= Ascan(aHeader,{|x|AllTrim(x[2])=='ZAG_TIPOSE'})
    	 aHeader[npos][11]:= "P=Plataforma;M=Mao de Obra;O=Outros"
	CASE  ZA0->ZA0_TIPOSE == 'U'
	     nPos:= Ascan(aHeader,{|x|AllTrim(x[2])=='ZAG_TIPOSE'})
    	 aHeader[npos][11]:= "U=Grua;M=Mao de Obra;O=Outros" 
	CASE  ZA0->ZA0_TIPOSE == 'G'
	     nPos:= Ascan(aHeader,{|x|AllTrim(x[2])=='ZAG_TIPOSE'})
    	 aHeader[npos][11]:= "G=Equipamentos;M=Mao de Obra;O=Outros"
	
ENDCASE

If Len(aCols)==1
	cCampo   :="ZAG_SEQGRU"
	cCampoGet:=aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]
	If Empty(cCampoGet)
		aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]:=StrZero(1,Len(cCampoGet))
	EndIf
EndIf

cCampo   :="ZAG_SEQGRU"
cCampoGet:=oGru_Cols0[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]
If Empty(cCampoGet)
	oGru_Cols0[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]:=StrZero(1,Len(cCampoGet))
EndIf

//Acerto o nome da coluna
cCampoGet:=Ascan(aHeader,{|x|AllTrim(x[2])=="ZAG_SEQGRU"})
If !Empty(cCampoGet)
	aHeader[cCampoGet][1] := "Sequência"
EndIf
cCampoGet:=Ascan(aHeader,{|x|AllTrim(x[2])=="ZAG_TIPOSE"})
If !Empty(cCampoGet)
	aHeader[cCampoGet][1] := "Serviço"
EndIf
cCampoGet:=Ascan(aHeader,{|x|AllTrim(x[2])=="ZAG_GRUA"})
If !Empty(cCampoGet)
	aHeader[cCampoGet][1] := "Código"
EndIf
cCampoGet:=Ascan(aHeader,{|x|AllTrim(x[2])=="ZAG_DESGRU"})
If !Empty(cCampoGet)
	aHeader[cCampoGet][1] := "Descrição"
EndIf
cCampoGet:=Ascan(aHeader,{|x|AllTrim(x[2])=="ZAG_QUANT"})
If !Empty(cCampoGet)
	aHeader[cCampoGet][1] := "Qtde."
EndIf
cCampoGet:=Ascan(aHeader,{|x|AllTrim(x[2])=="ZAG_DTINI"})
If !Empty(cCampoGet)
	aHeader[cCampoGet][1] := "Início"
EndIf
cCampoGet:=Ascan(aHeader,{|x|AllTrim(x[2])=="ZAG_DTFIM"})
If !Empty(cCampoGet)
	aHeader[cCampoGet][1] := "Fim"
EndIf
cCampoGet:=Ascan(aHeader,{|x|AllTrim(x[2])=="ZAG_PREDIA"})
If !Empty(cCampoGet)
	aHeader[cCampoGet][1] := "Período Meses"
EndIf
cCampoGet:=Ascan(aHeader,{|x|AllTrim(x[2])=="ZAG_PREMES"})
If !Empty(cCampoGet)
	aHeader[cCampoGet][1] := "Período Meses"
EndIf
cCampoGet:=Ascan(aHeader,{|x|AllTrim(x[2])=="ZAG_TORREI"})
If !Empty(cCampoGet)
	aHeader[cCampoGet][1] := "Alt.Inicial"
EndIf
cCampoGet:=Ascan(aHeader,{|x|AllTrim(x[2])=="ZAG_TORREF"})
If !Empty(cCampoGet)
	aHeader[cCampoGet][1] := "Alt.Final"
EndIf
cCampoGet:=Ascan(aHeader,{|x|AllTrim(x[2])=="ZAG_LANCA"})
If !Empty(cCampoGet)
	aHeader[cCampoGet][1] := "Lança"
EndIf
cCampoGet:=Ascan(aHeader,{|x|AllTrim(x[2])=="ZAG_CAPACI"})
If !Empty(cCampoGet)
	aHeader[cCampoGet][1] := "Carga na Ponta"
EndIf
cCampoGet:=Ascan(aHeader,{|x|AllTrim(x[2])=="ZAG_CARACT"})
If !Empty(cCampoGet)
	aHeader[cCampoGet][1] := "Base"
EndIf
cCampoGet:=Ascan(aHeader,{|x|AllTrim(x[2])=="ZAG_VRHOR"})
If !Empty(cCampoGet)
	aHeader[cCampoGet][1] := "Vr.Máquina"
EndIf
cCampoGet:=Ascan(aHeader,{|x|AllTrim(x[2])=="ZAG_OPERAD"})
If !Empty(cCampoGet)
	aHeader[cCampoGet][1] := "Vr.Operador"
EndIf
cCampoGet:=Ascan(aHeader,{|x|AllTrim(x[2])=="ZAG_VRMOB"})
If !Empty(cCampoGet)
	aHeader[cCampoGet][1] := "Mobilização"
EndIf
cCampoGet:=Ascan(aHeader,{|x|AllTrim(x[2])=="ZAG_VRDES"})
If !Empty(cCampoGet)
	aHeader[cCampoGet][1] := "Desmobilização"
EndIf
cCampoGet:=Ascan(aHeader,{|x|AllTrim(x[2])=="ZAG_MONTAG"})
If !Empty(cCampoGet)
	aHeader[cCampoGet][1] := "Eq.Montagem"
EndIf
cCampoGet:=Ascan(aHeader,{|x|AllTrim(x[2])=="ZAG_DESMON"})
If !Empty(cCampoGet)
	aHeader[cCampoGet][1] := "Eq.Desmontagem"
EndIf
cCampoGet:=Ascan(aHeader,{|x|AllTrim(x[2])=="ZAG_TPMEDI"})
If !Empty(cCampoGet)
	aHeader[cCampoGet][1] := "Med.Maq.e Op."
EndIf
cCampoGet:=Ascan(aHeader,{|x|AllTrim(x[2])=="ZAG_TPMOBI"})
If !Empty(cCampoGet)
	aHeader[cCampoGet][1] := "Med.Mob"
EndIf
cCampoGet:=Ascan(aHeader,{|x|AllTrim(x[2])=="ZAG_TPDESM"})
If !Empty(cCampoGet)
	aHeader[cCampoGet][1] := "Med.Desmob."
EndIf

//                           nTop ,nLeft,nBottom,nRight,nStyle,cLinhaOk      	,cTudoOk			,cIniCpos     ,aAlter,nFreeze,nMax,cFieldOk,cSuperDel,cDelOk,oWnd                     ,aHeader,aCols}
oDlgGru:=MsNewGetDados():New(nLin1,nCol1,nLin2  ,nCol2 ,nStyle,"AllwaysTrue()"  ,"AllwaysTrue()" 	,"+ZAG_SEQGRU",      ,       ,110 ,        ,         ,.t.   ,oFolder:aDialogs[nFolder],aHeader,aCols)
oDlgGru:oBrowse:bChange :={||U_MudaGruB()}
oDlgGru:oBrowse:bAdd	:= {|| Iif(U_fValiCli(ZA0->ZA0_CLI, ZA0->ZA0_LOJA),oDlgGru:AddLine(),)}
fAcumuGru()
fTrazGru()

Return

********************************************************************************
User Function MudaGruB
// Muda o Browse - Folder Gruas
********************************************************************************
Local lRet:=.T.
Local cCampo,cCampoGet

fObra()

//RegToMemory("ZAG",.F.)

If oDlgGru:nAt>Len(oDlgGru:aCols)
	oDlgGru:nAt:=Len(oDlgGru:aCols)
Else
	For _f := 1 To Len(oDlgGru:aHeader)
		_cVar1 	:= "M->" + oDlgGru:aHeader[_F][2]
		&_cVar1	:= oDlgGru:aCols[oDlgGru:nAt][_f]
	Next _f
EndIf

M->ZAG_OBRA		:= oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_OBRA"  })] := cObra
M->ZAG_SEQGRU	:= oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_SEQGRU"})] := cSeqGru
M->ZAG_TPBASE	:= oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_TPBASE"})] := "M"    


oDlgGru:oBrowse:Refresh()

Return lRet

********************************************************************************
Static Function fSalvarGru(cAlias,aHeader,aCols)
// Folder Gruas
********************************************************************************
Local nPos,aGravados:={}  //Gravados

// Acumula o aCols corrente no aCols com todos os registros
fAcumuGru()
aCols:=Aclone(oGru_Cols)

dbSelectArea(cAlias)
dbSetOrder(1)

If nOpc==5  //5=Exclui
Else
	For nPos:=1 to Len(aCols)
		cObra  :=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAG_OBRA"  })]
		cSeqGru:=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAG_SEQGRU"})]
		If !aCols[nPos,Len(aHeader)+1] .and. !Empty(cObra) .and. !Empty(cSeqGru)  //!Deleted()
			dbSeek(xFILIAL(cAlias)+cProjet+cObra+cSeqGru)
			If Eof()
				RecLock(cAlias,.T.)
			Else
				RecLock(cAlias,.F.)
			EndIf
			fGravaTudo(cAlias,aHeader,aCols[nPos])  //Grava todos os campos do aCols
			(cAlias)->ZAG_FILIAL:=xFILIAL(cAlias)
			(cAlias)->ZAG_PROJET:=cProjet
			(cAlias)->ZAG_OBRA  :=cObra
			(cAlias)->ZAG_SEQGRU:=cSeqGru
			//ALTERADO POR Roberto r.Mezzalira 13/04/11 
			(cAlias)->ZAG_QUANT := 1 
			AAdd(aGravados,Recno())  //Gravados
			MsUnLock()
	     EndIf
	Next
EndIf

// Exclui os registros alterados
dbSeek(xFILIAL(cAlias)+cProjet)
While !Eof() .and. ZAG_FILIAL+ZAG_PROJET==xFILIAL(cAlias)+cProjet
	If Ascan(aGravados,{|x|x==Recno()})==0
		RecLock(cAlias,.F.)
		dbDelete()
		MsUnLock()
	EndIf
	dbSkip()
End

Return

********************************************************************************
Static Function fFolderPla(nFolder,nLin1,nCol1,nLin2,nCol2)
// Folder Plataformas
********************************************************************************
Local aCamposNao:= {}
Local aCamposSim:= {}
Local nStyle	:= GD_INSERT + GD_UPDATE + GD_DELETE
Local cAlias,cChave,cCondicao,nIndice,cFiltro

nStyle		:= If(nOpcManu==2,0,nStyle)  				// 2=Visualizar

cAlias   	:="ZAG"
cChave   	:=xFILIAL(cAlias) + cProjet
cCondicao	:='ZAG_FILIAL+ZAG_PROJET=="' + cChave + '"'
nIndice  	:=1  										// ZAG_FILIAL+ZAG_PROJET+ZAG_OBRA+ZAG_SEQGRU
cFiltro  	:=cCondicao

AAdd(aCamposSim,{"ZAG_OBRA"  ,"V"}) 
AAdd(aCamposSim,{"ZAG_SEQGRU","V"}) 
AAdd(aCamposSim,{"ZAG_TIPOSE",""}) 
AAdd(aCamposSim,{"ZAG_PRODUT",""})
AAdd(aCamposSim,{"ZAG_DESPRO",""}) // Adicionado por Rodrigo Moraes - 02/04/12
AAdd(aCamposSim,{"ZAG_GRUA"  ,""})
AAdd(aCamposSim,{"ZAG_DESGRU",""})
AAdd(aCamposSim,{"ZAG_OBSSER",""})
//AAdd(aCamposSim,{"ZAG_QUANT" ,""})// ALTERADO POR ROBERTO R.MEZZALIRA 13/4/11 INIBIDO CONF.SOLICITACAO SR. FERNANDO
AAdd(aCamposSim,{"ZAG_PES"   ,"V"})
AAdd(aCamposSim,{"ZAG_CONJT" ,""})
AAdd(aCamposSim,{"ZAG_VLEST" ,""})
AAdd(aCamposSim,{"ZAG_CACAMB",""})
AAdd(aCamposSim,{"ZAG_TPBASE",""})
AAdd(aCamposSim,{"ZAG_PREDIA",""})
AAdd(aCamposSim,{"ZAG_MINDIA",""})// Maickon Queiroz
AAdd(aCamposSim,{"ZAG_VRHOR" ,""})
AAdd(aCamposSim,{"ZAG_VRMOB" ,""})// ALTERADO POR ROBERTO R.MEZZALIRA 13/4/11 INIBIDO CONF.SOLICITACAO SR. FERNANDO
AAdd(aCamposSim,{"ZAG_VRDES" ,""})// ALTERADO POR ROBERTO R.MEZZALIRA 13/4/11 INIBIDO CONF.SOLICITACAO SR. FERNANDO
AAdd(aCamposSim,{"ZAG_OPERAD",""})
AAdd(aCamposSim,{"ZAG_TPMEDI",""})
AAdd(aCamposSim,{"ZAG_TPMOBI",""})// ALTERADO POR ROBERTO R.MEZZALIRA 13/4/11 INIBIDO CONF.SOLICITACAO SR. FERNANDO
AAdd(aCamposSim,{"ZAG_TPDESM",""})// ALTERADO POR ROBERTO R.MEZZALIRA 13/4/11 INIBIDO CONF.SOLICITACAO SR. FERNANDO
AAdd(aCamposSim,{"ZAG_TPMED7",""})
AAdd(aCamposSim,{"ZAG_TPGUIM",""})
AAdd(aCamposSim,{"ZAG_GUIMON",""})
AAdd(aCamposSim,{"ZAG_TPGUID",""})
AAdd(aCamposSim,{"ZAG_GUIDES",""})
AAdd(aCamposSim,{"ZAG_TPOPER",""})
AAdd(aCamposSim,{"ZAG_TPSEGU",""})
AAdd(aCamposSim,{"ZAG_VRCARG",""})
AAdd(aCamposSim,{"ZAG_PERSEG",""})
AAdd(aCamposSim,{"ZAG_VRSEGU",""})
AAdd(aCamposSim,{"ZAG_TPISS" ,""})
AAdd(aCamposSim,{"ZAG_PERISS",""})
AAdd(aCamposSim,{"ZAG_VRISS" ,""})
AAdd(aCamposSim,{"ZAG_PERMAO",""})
AAdd(aCamposSim,{"ZAG_DTINI" ,""})
AAdd(aCamposSim,{"ZAG_DTFIM" ,""})
AAdd(aCamposSim,{"ZAG_CONPAG",""})
AAdd(aCamposSim,{"ZAG_TIPPAG",""})
AAdd(aCamposSim,{"ZAG_FORPG",""})
AAdd(aCamposSim,{"ZAG_OBS"   ,""})
AAdd(aCamposSim,{"ZAG_REVNAS",""})
AAdd(aCamposSim,{"ZAG_AS"    ,"V"})
AAdd(aCamposSim,{"ZAG_VIAGEM","V"})
AAdd(aCamposSim,{"ZAG_THORAS",""})  //ALTERADO POR RRM - 21/04/11 - INCLUSO NOVO CAMPO NA GETDADOS  
AAdd(aCamposSim,{"ZAG_DESCON",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
AAdd(aCamposSim,{"ZAG_VALDES",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
AAdd(aCamposSim,{"ZAG_HPROD",""})   //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
AAdd(aCamposSim,{"ZAG_HIMPR",""})   //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
AAdd(aCamposSim,{"ZAG_HEXCED",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
AAdd(aCamposSim,{"ZAG_HADICI",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
AAdd(aCamposSim,{"ZAG_HGREVE",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
AAdd(aCamposSim,{"ZAG_HCHUVA",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
AAdd(aCamposSim,{"ZAG_HDISPO",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
AAdd(aCamposSim,{"ZAG_CABTEN",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
AAdd(aCamposSim,{"ZAG_VLMOBR",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
AAdd(aCamposSim,{"ZAG_HEMOBR",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
AAdd(aCamposSim,{"ZAG_KMROD",""})   //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
AAdd(aCamposSim,{"ZAG_HORIME",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
AAdd(aCamposSim,{"ZAG_JUNKH",""})   //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).

aHeader	:= fHeader(aCamposSim)
aCols	:= fCols(aHeader,cAlias,nIndice,cChave,cCondicao,cFiltro)
//ALTERADO POR ROBERTO R.MEZZALIRA - 13/04/11 - CONF.SOLICITACAO SR. FERNANDO
DO CASE
	CASE  ZA0->ZA0_TIPOSE == 'P'
	     nPos:= Ascan(aHeader,{|x|AllTrim(x[2])=='ZAG_TIPOSE'})
    	 aHeader[npos][11]:= "P=Plataforma;M=Mao de Obra;O=Outros"
	CASE  ZA0->ZA0_TIPOSE == 'U'
	     nPos:= Ascan(aHeader,{|x|AllTrim(x[2])=='ZAG_TIPOSE'})
    	 aHeader[npos][11]:= "U=Grua;M=Mao de Obra;O=Outros" 
	CASE  ZA0->ZA0_TIPOSE == 'G'
	     nPos:= Ascan(aHeader,{|x|AllTrim(x[2])=='ZAG_TIPOSE'})
    	 aHeader[npos][11]:= "G=Equipamentos;M=Mao de Obra;O=Outros"
ENDCASE

If Len(aCols)==1
	cCampo   :="ZAG_SEQGRU"
	cCampoGet:=aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]
	If Empty(cCampoGet)
		aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]:=StrZero(1,Len(cCampoGet))
	EndIf
EndIf

cCampo   :="ZAG_SEQGRU"
cCampoGet:=oGru_Cols0[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]
If Empty(cCampoGet)
	oGru_Cols0[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]:=StrZero(1,Len(cCampoGet))
EndIf

//Acerto o nome da coluna
cCampoGet:=Ascan(aHeader,{|x|AllTrim(x[2])=="ZAG_SEQGRU"})	//2
If !Empty(cCampoGet)
	aHeader[cCampoGet][1] := "Seq.Plataforma"
EndIf
cCampoGet:=Ascan(aHeader,{|x|AllTrim(x[2])=="ZAG_GRUA"})	// 4
If !Empty(cCampoGet)
	aHeader[cCampoGet][1] := "Cod.Plataforma"
EndIf
cCampoGet:=Ascan(aHeader,{|x|AllTrim(x[2])=="ZAG_DESGRU"})	// 5
If !Empty(cCampoGet)
	aHeader[cCampoGet][1] := "Desc.Plataforma"
EndIf
cCampoGet:=Ascan(aHeader,{|x|AllTrim(x[2])=="ZAG_PREDIA"})	// 10
If !Empty(cCampoGet)
	aHeader[cCampoGet][1] := "Qtd.Base"
EndIf

cCampoGet:=Ascan(aHeader,{|x|AllTrim(x[2])=="ZAG_TPGUIM"})
If !Empty(cCampoGet)
	aHeader[cCampoGet][1] := "Resp.Frete Ida"
EndIf

cCampoGet:=Ascan(aHeader,{|x|AllTrim(x[2])=="ZAG_GUIMON"})
If !Empty(cCampoGet)
	aHeader[cCampoGet][1] := "Valor Frete Ida"
EndIf

cCampoGet:=Ascan(aHeader,{|x|AllTrim(x[2])=="ZAG_TPGUID"})
If !Empty(cCampoGet)
	aHeader[cCampoGet][1] := "Resp.Frete Volta"
EndIf

cCampoGet:=Ascan(aHeader,{|x|AllTrim(x[2])=="ZAG_GUIDES"})
If !Empty(cCampoGet)
	aHeader[cCampoGet][1] := "Valor Frete Volta"
EndIf

//                           nTop ,nLeft,nBottom,nRight,nStyle,cLinhaOk      	,cTudoOk			,cIniCpos     ,aAlter,nFreeze,nMax,cFieldOk,cSuperDel,cDelOk,oWnd                     ,aHeader,aCols}
oDlgPla:=MsNewGetDados():New(nLin1,nCol1,nLin2  ,nCol2 ,nStyle,"AllwaysTrue()" ,"AllwaysTrue()" 	,"+ZAG_SEQGRU",      ,       ,110 ,        ,         ,.t.   ,oFolder:aDialogs[nFolder],aHeader,aCols)
oDlgPla:oBrowse:bChange:={||U_MudaPlaB()}
oDlgPla:oBrowse:bAdd	:= {|| Iif(U_fValiCli(ZA0->ZA0_CLI, ZA0->ZA0_LOJA),oDlgPla:AddLine(),)}
fAcumuPla()
fTrazPla()

Return

********************************************************************************
User Function MudaPlaB
// Muda o Browse - Folder Plataformas
********************************************************************************
Local lRet:=.T.
Local cCampo,cCampoGet

If ValType(oDlgPla)=="O"
	M->ZAG_TIPOSE := oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_TIPOSE"})]
	M->ZAG_PRODUT := oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_PRODUT"})]
EndIf

fObra()

If oDlgPla:nAt>Len(oDlgPla:aCols) ; oDlgPla:nAt:=Len(oDlgPla:aCols) ; EndIf

oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_OBRA"  })]:=cObra
oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_SEQGRU"})]:=cSeqGru
If Empty(M->ZAG_TIPOSE)
	oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_TIPOSE"})]:="P"		// Inicializador padrão para a plataforma
EndIf                      

oDlgPla:oBrowse:Refresh()

Return lRet

********************************************************************************
Static Function fSalvarPla(cAlias,aHeader,aCols)
// Folder Plataformas
********************************************************************************
Local nPos,aGravados:={}  //Gravados

// Acumula o aCols corrente no aCols com todos os registros
fAcumuPla()
aCols:=Aclone(oGru_Cols)

dbSelectArea(cAlias)
dbSetOrder(1)

If nOpc==5  //5=Exclui
Else
	For nPos:=1 to Len(aCols)
		cObra  :=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAG_OBRA"  })]
		cSeqGru:=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAG_SEQGRU"})]
		If !aCols[nPos,Len(aHeader)+1] .and. !Empty(cObra) .and. !Empty(cSeqGru)  //!Deleted()
			dbSeek(xFILIAL(cAlias)+cProjet+cObra+cSeqGru)
			If Eof()
				RecLock(cAlias,.T.)
			Else
				RecLock(cAlias,.F.)
			EndIf
			fGravaTudo(cAlias,aHeader,aCols[nPos])  //Grava todos os campos do aCols
			(cAlias)->ZAG_FILIAL:=xFILIAL(cAlias)
			(cAlias)->ZAG_PROJET:=cProjet
			(cAlias)->ZAG_OBRA  :=cObra
			(cAlias)->ZAG_SEQGRU:=cSeqGru
			(cAlias)->ZAG_QUANT := 1
			AAdd(aGravados,Recno())  //Gravados
			MsUnLock()
	     EndIf
	Next
EndIf

// Exclui os registros alterados
dbSeek(xFILIAL(cAlias)+cProjet)
While !Eof() .and. ZAG_FILIAL+ZAG_PROJET==xFILIAL(cAlias)+cProjet
	If Ascan(aGravados,{|x|x==Recno()})==0
		RecLock(cAlias,.F.)
		dbDelete()
		MsUnLock()
	EndIf
	dbSkip()
End

Return

********************************************************************************
Static Function fFolderMar(nFolder,nLin1,nCol1,nLin2,nCol2)
// Folder Maritima
********************************************************************************
Local aCamposNao:= {}
Local aCamposSim:= {}
Local nStyle	:= GD_INSERT + GD_UPDATE + GD_DELETE
Local cAlias,cChave,cCondicao,nIndice,cFiltro

nStyle		:= If(nOpcManu==2,0,nStyle)  				// 2=Visualizar

cAlias   	:="ZAG"
cChave   	:=xFILIAL(cAlias) + cProjet
cCondicao	:='ZAG_FILIAL+ZAG_PROJET=="' + cChave + '"'
nIndice  	:=1  										// ZAG_FILIAL+ZAG_PROJET+ZAG_OBRA+ZAG_SEQGRU
cFiltro  	:=cCondicao

AAdd(aCamposSim,{"ZAG_OBRA"  ,"V"}) 
AAdd(aCamposSim,{"ZAG_SEQGRU","V"}) 
AAdd(aCamposSim,{"ZAG_TIPOSE",""}) 
AAdd(aCamposSim,{"ZAG_PRODUT",""})
AAdd(aCamposSim,{"ZAG_GRUA"  ,""})
AAdd(aCamposSim,{"ZAG_DESGRU",""})
AAdd(aCamposSim,{"ZAG_EMBARC",""})
//AAdd(aCamposSim,{"ZAG_QUANT" ,""})
//AAdd(aCamposSim,{"ZAG_PES"   ,"V"})
//AAdd(aCamposSim,{"ZAG_CONJT" ,""})
//AAdd(aCamposSim,{"ZAG_VLEST" ,""})
AAdd(aCamposSim,{"ZAG_CACAMB",""})
AAdd(aCamposSim,{"ZAG_TPBASE",""})
AAdd(aCamposSim,{"ZAG_PREDIA",""})
AAdd(aCamposSim,{"ZAG_VRHOR" ,""})
AAdd(aCamposSim,{"ZAG_VRMOB" ,""})
AAdd(aCamposSim,{"ZAG_VRDES" ,""})
//AAdd(aCamposSim,{"ZAG_OPERAD",""})
AAdd(aCamposSim,{"ZAG_TPMEDI",""})
AAdd(aCamposSim,{"ZAG_TPMOBI",""})
AAdd(aCamposSim,{"ZAG_TPDESM",""})
//AAdd(aCamposSim,{"ZAG_TPMED7",""})
AAdd(aCamposSim,{"ZAG_TPSEGU",""})
AAdd(aCamposSim,{"ZAG_VRCARG",""})
AAdd(aCamposSim,{"ZAG_PERSEG",""})
AAdd(aCamposSim,{"ZAG_VRSEGU",""})
AAdd(aCamposSim,{"ZAG_TPISS" ,""})
AAdd(aCamposSim,{"ZAG_PERISS",""})
AAdd(aCamposSim,{"ZAG_VRISS" ,""})
AAdd(aCamposSim,{"ZAG_PERMAO",""})
AAdd(aCamposSim,{"ZAG_DTINI" ,""})
AAdd(aCamposSim,{"ZAG_DTFIM" ,""})
AAdd(aCamposSim,{"ZAG_THORAS",""})
AAdd(aCamposSim,{"ZAG_CONPAG",""})
AAdd(aCamposSim,{"ZAG_TIPPAG",""})
AAdd(aCamposSim,{"ZAG_OBS"   ,""})
AAdd(aCamposSim,{"ZAG_REVNAS",""})
AAdd(aCamposSim,{"ZAG_AS"    ,"V"})
AAdd(aCamposSim,{"ZAG_VIAGEM","V"})
AAdd(aCamposSim,{"ZAG_DESCON",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
AAdd(aCamposSim,{"ZAG_VALDES",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
AAdd(aCamposSim,{"ZAG_HPROD",""})   //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
AAdd(aCamposSim,{"ZAG_HIMPR",""})   //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
AAdd(aCamposSim,{"ZAG_HEXCED",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
AAdd(aCamposSim,{"ZAG_HADICI",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
AAdd(aCamposSim,{"ZAG_HGREVE",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
AAdd(aCamposSim,{"ZAG_HCHUVA",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
AAdd(aCamposSim,{"ZAG_HDISPO",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
AAdd(aCamposSim,{"ZAG_CABTEN",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
AAdd(aCamposSim,{"ZAG_VLMOBR",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
AAdd(aCamposSim,{"ZAG_HEMOBR",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
AAdd(aCamposSim,{"ZAG_KMROD",""})   //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
AAdd(aCamposSim,{"ZAG_HORIME",""})  //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).
AAdd(aCamposSim,{"ZAG_JUNKH",""})   //Alteração dia 19/05/2011-Campo Incluso, Claudino(Biale).


aHeader	:= fHeader(aCamposSim)
aCols	:= fCols(aHeader,cAlias,nIndice,cChave,cCondicao,cFiltro)

If Len(aCols)==1
	cCampo   :="ZAG_SEQGRU"
	cCampoGet:=aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]
	If Empty(cCampoGet)
		aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]:=StrZero(1,Len(cCampoGet))
	EndIf
EndIf

cCampo   :="ZAG_SEQGRU"
cCampoGet:=oGru_Cols0[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]
If Empty(cCampoGet)
	oGru_Cols0[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]:=StrZero(1,Len(cCampoGet))
EndIf

//Acerto o nome da coluna
cCampoGet:=Ascan(aHeader,{|x|AllTrim(x[2])=="ZAG_SEQGRU"})	//2
If !Empty(cCampoGet)
	aHeader[cCampoGet][1] := "Seq.Marítima "
EndIf
cCampoGet:=Ascan(aHeader,{|x|AllTrim(x[2])=="ZAG_GRUA"})	// 4
If !Empty(cCampoGet)
	aHeader[cCampoGet][1] := "Cod.Marítima"
EndIf
cCampoGet:=Ascan(aHeader,{|x|AllTrim(x[2])=="ZAG_DESGRU"})	// 5
If !Empty(cCampoGet)
	aHeader[cCampoGet][1] := "Desc.Marítima"
EndIf
cCampoGet:=Ascan(aHeader,{|x|AllTrim(x[2])=="ZAG_PREDIA"})	// 10
If !Empty(cCampoGet)
	aHeader[cCampoGet][1] := "Qtd.Base"
EndIf

//                           nTop ,nLeft,nBottom,nRight,nStyle,cLinhaOk      	,cTudoOk			,cIniCpos     ,aAlter,nFreeze,nMax,cFieldOk,cSuperDel,cDelOk,oWnd                     ,aHeader,aCols}
oDlgMar:=MsNewGetDados():New(nLin1,nCol1,nLin2  ,nCol2 ,nStyle,"AllwaysTrue()" ,"AllwaysTrue()" 	,"+ZAG_SEQGRU",      ,       ,110 ,        ,         ,.t.   ,oFolder:aDialogs[nFolder],aHeader,aCols)//new(nLin1,nCol1,nLin2  ,nCol2 ,nStyle,              ,       ,"+ZAG_SEQGRU",      ,       ,110 ,        ,         ,.t.   ,oFolder:aDialogs[nFolder],aHeader,aCols)
oDlgMar:oBrowse:bChange:={||U_MudaMarB()}
oDlgMar:oBrowse:bAdd	:= {|| Iif(U_fValiCli(ZA0->ZA0_CLI, ZA0->ZA0_LOJA),oDlgMar:AddLine(),)}
fAcumuMar()
fTrazMar()

Return

********************************************************************************
User Function MudaMarB
// Muda o Browse - Folder Maritima
********************************************************************************
Local lRet:=.T.
Local cCampo,cCampoGet

fObra()

If oDlgMar:nAt>Len(oDlgMar:aCols) ; oDlgMar:nAt:=Len(oDlgMar:aCols) ; EndIf

oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_OBRA"  })]:=cObra
oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_SEQGRU"})]:=cSeqGru
oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_TIPOSE"})]:="N"		// Inicializador padrão para a Maritima
oDlgMar:oBrowse:Refresh()

Return lRet

********************************************************************************
Static Function fSalvarMar(cAlias,aHeader,aCols)
// Folder Maritima
********************************************************************************
Local nPos,aGravados:={}  //Gravados

// Acumula o aCols corrente no aCols com todos os registros
fAcumuMar()
aCols:=Aclone(oGru_Cols)

dbSelectArea(cAlias)
dbSetOrder(1)

If nOpc==5  //5=Exclui
Else
	For nPos:=1 to Len(aCols)
		cObra  :=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAG_OBRA"  })]
		cSeqGru:=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAG_SEQGRU"})]
		If !aCols[nPos,Len(aHeader)+1] .and. !Empty(cObra) .and. !Empty(cSeqGru)  //!Deleted()
			dbSeek(xFILIAL(cAlias)+cProjet+cObra+cSeqGru)
			If Eof()
				RecLock(cAlias,.T.)
			Else
				RecLock(cAlias,.F.)
			EndIf
			fGravaTudo(cAlias,aHeader,aCols[nPos])  //Grava todos os campos do aCols
			(cAlias)->ZAG_FILIAL:=xFILIAL(cAlias)
			(cAlias)->ZAG_PROJET:=cProjet
			(cAlias)->ZAG_OBRA  :=cObra
			(cAlias)->ZAG_SEQGRU:=cSeqGru
			(cAlias)->ZAG_QUANT := 1 
			AAdd(aGravados,Recno())  //Gravados
			MsUnLock()
	     EndIf
	Next
EndIf

// Exclui os registros alterados
dbSeek(xFILIAL(cAlias)+cProjet)
While !Eof() .and. ZAG_FILIAL+ZAG_PROJET==xFILIAL(cAlias)+cProjet
	If Ascan(aGravados,{|x|x==Recno()})==0
		RecLock(cAlias,.F.)
		dbDelete()
		MsUnLock()
	EndIf
	dbSkip()
End

Return

********************************************************************************
Static Function fFolderAce(nFolder,nLin1,nCol1,nLin2,nCol2)
// Folder Acess.Gruas
********************************************************************************
Local aCamposNao := {}
Local aCamposSim := {}
Local nStyle:=GD_INSERT + GD_UPDATE + GD_DELETE
Local cAlias,cChave,cCondicao,nIndice,cFiltro

nStyle:=If(nOpcManu==2,0,nStyle)  //2=Visualizar

cAlias   :="ZAK"
cChave   :=xFILIAL(cAlias)+cProjet
cCondicao:='ZAK_FILIAL+ZAK_PROJET=="'+cChave+'"'
nIndice  :=1  //ZAK_FILIAL+ZAK_PROJET+ZAK_OBRA+ZAK_SEQGRU+ZAK_SEQACE
cFiltro  :=cCondicao

AAdd(aCamposSim,{"ZAK_OBRA",""})
AAdd(aCamposSim,{"ZAK_SEQGRU",""})
AAdd(aCamposSim,{"ZAK_SEQACE",""})
AAdd(aCamposSim,{"ZAK_CODACE",""})
AAdd(aCamposSim,{"ZAK_DESACE",""})
AAdd(aCamposSim,{"ZAK_VRDIA" ,""})
AAdd(aCamposSim,{"ZAK_OBSVIA",""})

aHeader:=fHeader(aCamposSim)
aCols:=fCols(aHeader,cAlias,nIndice,cChave,cCondicao,cFiltro)

If Len(aCols)==1
	cCampo   :="ZAK_SEQACE"
	cCampoGet:=aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]
	If Empty(cCampoGet)
		aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo      })]:=StrZero(1,Len(cCampoGet))
		aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAK_SEQGRU"})]:=StrZero(1,Len(cCampoGet))
	EndIf
EndIf

cCampo   :="ZAK_SEQACE"
cCampoGet:=oAce_Cols0[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]
If Empty(cCampoGet)
	oAce_Cols0[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo      })]:=StrZero(1,Len(cCampoGet))
	oAce_Cols0[1][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAK_SEQGRU"})]:=StrZero(1,Len(cCampoGet))
EndIf

//                           nTop ,nLeft,nBottom,nRight,nStyle,cLinhaOk      ,cTudoOk,cIniCpos     ,aAlter,nFreeze,nMax,cFieldOk,cSuperDel,cDelOk,oWnd                     ,aHeader,aCols}
oDlgAce:=MsNewGetDados():New(nLin1,nCol1,nLin2  ,nCol2 ,nStyle,              ,       ,"+ZAK_SEQACE",      ,       ,110 ,        ,         ,.t.   ,oFolder:aDialogs[nFolder],aHeader,aCols)
oDlgAce:oBrowse:bChange:={||U_MudaAceB()}

fAcumuAce()
fTrazAce()

Return

********************************************************************************
User Function MudaAceB
// Muda o Browse - Folder Acess.Gruas
********************************************************************************
Local lRet:=.T.
Local cCampo,cCampoGet

fObra()

If oDlgAce:nAt>Len(oDlgAce:aCols) ; oDlgAce:nAt:=Len(oDlgAce:aCols) ; EndIf

oDlgAce:aCols[oDlgAce:nAt][Ascan(oDlgAce:aHeader,{|x|AllTrim(x[2])=="ZAK_OBRA"  })]:=cObra
oDlgAce:aCols[oDlgAce:nAt][Ascan(oDlgAce:aHeader,{|x|AllTrim(x[2])=="ZAK_SEQGRU"})]:=cSeqGru
oDlgAce:oBrowse:Refresh()

Return lRet

********************************************************************************
Static Function fSalvarAce(cAlias,aHeader,aCols)
// Folder Acess.Gruas
********************************************************************************
Local nPos,aGravados:={}  //Gravados

// Acumula o aCols corrente no aCols com todos os registros
fAcumuAce()
aCols:=Aclone(oAce_Cols)

dbSelectArea(cAlias)
dbSetOrder(1)

If nOpc==5  //5=Exclui
Else
	For nPos:=1 to Len(aCols)
		cObra  :=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAK_OBRA"  })]
		cSeqGru:=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAK_SEQGRU"})]
		cSeqAce:=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAK_SEQACE"})]
		If !aCols[nPos,Len(aHeader)+1] .and. !Empty(cObra) .and. !Empty(cSeqGru) .and. !Empty(cSeqAce)  //!Deleted()
			dbSeek(xFILIAL(cAlias)+cProjet+cObra+cSeqGru+cSeqAce)
			If Eof()
				RecLock(cAlias,.T.)
			Else
				RecLock(cAlias,.F.)
			EndIf
			fGravaTudo(cAlias,aHeader,aCols[nPos])  //Grava todos os campos do aCols
			(cAlias)->ZAK_FILIAL:=xFILIAL(cAlias)
			(cAlias)->ZAK_PROJET:=cProjet
			(cAlias)->ZAK_OBRA  :=cObra
			(cAlias)->ZAK_SEQGRU:=cSeqGru
			(cAlias)->ZAK_SEQACE:=cSeqAce
			AAdd(aGravados,Recno())  //Gravados
			MsUnLock()
	     EndIf
	Next
EndIf

// Exclui os registros alterados
dbSeek(xFILIAL(cAlias)+cProjet)
While !Eof() .and. ZAK_FILIAL+ZAK_PROJET==xFILIAL(cAlias)+cProjet
	If Ascan(aGravados,{|x|x==Recno()})==0
		RecLock(cAlias,.F.)
		dbDelete()
		MsUnLock()
	EndIf
	dbSkip()
End

Return

********************************************************************************
Static Function fFolderObr(nFolder,nLin1,nCol1,nLin2,nCol2)
// Folder Obras
********************************************************************************
Local aCamposNao := {}
Local aCamposSim := {}
Local nStyle:=GD_INSERT + GD_UPDATE + GD_DELETE
Local cAlias,cChave,cCondicao,nIndice,cFiltro

nStyle:=If(nOpcManu==2,0,nStyle)  //2=Visualizar

cAlias   :="ZA1"
cChave   :=xFILIAL(cAlias)+cProjet
cCondicao:='ZA1_FILIAL+ZA1_PROJET=="'+cChave+'"'
nIndice  :=1  //ZA1_FILIAL+ZA1_PROJET+ZA1_OBRA
cFiltro  :=cCondicao

AAdd(aCamposSim,{"ZA1_OBRA"  ,"V"})
AAdd(aCamposSim,{"ZA1_CLIORI",""})
AAdd(aCamposSim,{"ZA1_LOJORI",""})
AAdd(aCamposSim,{"ZA1_NOMORI",""})
AAdd(aCamposSim,{"ZA1_TEMVIS",""})
AAdd(aCamposSim,{"ZA1_DTVIS" ,""})
AAdd(aCamposSim,{"ZA1_HRVIS" ,""})
AAdd(aCamposSim,{"ZA1_TIPRAT" ,""})
AAdd(aCamposSim,{"ZA1_EMARAT" ,""})
AAdd(aCamposSim,{"ZA1_CGCORI",""})
AAdd(aCamposSim,{"ZA1_INSORI",""})
AAdd(aCamposSim,{"ZA1_CEIORI",""})
AAdd(aCamposSim,{"ZA1_ENDORI",""})
AAdd(aCamposSim,{"ZA1_BAIORI",""})
AAdd(aCamposSim,{"ZA1_MUNORI",""})
AAdd(aCamposSim,{"ZA1_ESTORI",""})
AAdd(aCamposSim,{"ZA1_CEPORI",""})
AAdd(aCamposSim,{"ZA1_CONORI",""})
AAdd(aCamposSim,{"ZA1_DEPORI",""})
AAdd(aCamposSim,{"ZA1_EMAORI",""})
AAdd(aCamposSim,{"ZA1_DDDORI",""})
AAdd(aCamposSim,{"ZA1_TELORI",""})
AAdd(aCamposSim,{"ZA1_FAXORI",""})
AAdd(aCamposSim,{"ZA1_ESCOPO",""})
AAdd(aCamposSim,{"ZA1_OBSVIS",""})
AAdd(aCamposSim,{"ZA1_OBSFAT",""})

aHeader:=fHeader(aCamposSim)
aCols:=fCols(aHeader,cAlias,nIndice,cChave,cCondicao,cFiltro)

If Len(aCols)==1
	cCampo   :="ZA1_OBRA"
	cCampoGet:=aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]
	If Empty(cCampoGet)
		aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]:=StrZero(1,Len(cCampoGet))
	EndIf
EndIf

//                           nTop ,nLeft,nBottom,nRight,nStyle,cLinhaOk      ,cTudoOk,cIniCpos   ,aAlter,nFreeze,nMax,cFieldOk,cSuperDel,cDelOk,oWnd                     ,aHeader,aCols}
oDlgObr:=MsNewGetDados():New(nLin1,nCol1,nLin2  ,nCol2 ,nStyle,              ,       ,"+ZA1_OBRA",      ,       ,110 ,        ,         ,.t.   ,oFolder:aDialogs[nFolder],aHeader,aCols)
oDlgObr:oBrowse:bChange:={||U_MudaObrB()}

Return

********************************************************************************
User Function MudaObrB
// Muda o Browse - Folder Obras
********************************************************************************
Local lRet:=.T.
Local cCampo,cCampoGet

fObra()
oObra:Refresh()

Return lRet

********************************************************************************
Static Function fSalvarObr(cAlias,aHeader,aCols)
// Folder Obras
********************************************************************************
Local nPos,aGravados	:= {}  //Gravados
Local aVistoria			:= {}
Local nCompl   			:=  nRevis := nAuxC := nAuxR := 0
Local cTipoRat 			:= cEnvMail := ""

dbSelectArea(cAlias)  	//Obras
dbSetOrder(1)  			//ZA1_FILIAL+ZA1_PROJET+ZA1_OBRA

If nOpc==5  //5=Exclui
Else
	For nPos:=1 to Len(aCols)
		cObra:=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZA1_OBRA"})]
		If !aCols[nPos,Len(aHeader)+1] .and. !Empty(cObra)  //!Deleted()
			dbSeek(xFILIAL(cAlias)+cProjet+cObra)
			If Eof()
				RecLock(cAlias,.T.)
			Else
				RecLock(cAlias,.F.)
			EndIf
			fGravaTudo(cAlias,aHeader,aCols[nPos])  //Grava todos os campos do aCols
			(cAlias)->ZA1_FILIAL:=xFILIAL(cAlias)
			(cAlias)->ZA1_PROJET:=cProjet
			(cAlias)->ZA1_OBRA  :=cObra
			AAdd(aGravados,Recno())  //Gravados
			MsUnLock()

			//Se tem vistoria, cria um registro no ZA8 (Rat)
			If ZA1->(ZA1_TEMVIS=="S")
                cEnvMail := aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZA1_EMARAT"})]
                If cEnvMail == "S"
				   aAdd(aVistoria,ZA1->(Recno()) )
				Endif
				
				cTipoRat := aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZA1_TIPRAT"})]
				cTipoRat := Iif(cTipoRat==NIL,"",cTipoRat)	// Jõao, o sistema não tinha o aCols[1][8] (só tem até 7) e estava se perdendo. Marcos.
				
				If ZA8->(dbSeek(xFilial("ZA8")+cProjet+cObra))
					IF cTipoRat $ "R/C"
						While !Eof() .And. ZA8->ZA8_PROJET + ZA8->ZA8_OBRA == cProjet + cObra
						   
						   	nAuxC := IIF(!Empty(ZA8->ZA8_COMPLE),Val(ZA8->ZA8_COMPLE)+1,1)
						   	If nAuxC > nCompl 
						      	nCompl := nAuxC
						   	Endif   
						   
						   	nAuxR := IIF(!Empty(ZA8->ZA8_REVISA),Val(ZA8->ZA8_REVISA)+1,1)
						   	If nAuxR > nRevis
						      	nRevis := nAuxR
						   	Endif
						 	ZA8->(DbSkip())
						EndDo
				  	  	ZA8->(RecLock("ZA8",.T.))
					Else 
					  	ZA8->(RecLock("ZA8",.F.))
					Endif
				Else	
					ZA8->(RecLock("ZA8",.T.))
				Endif						
				ZA8->ZA8_FILIAL:=xFILIAL("ZA8")
				ZA8->ZA8_PROJET:=cProjet
				ZA8->ZA8_OBRA  :=cObra
				ZA8->ZA8_OBSERV:=ZA1->ZA1_ESCOPO
	            ZA8->ZA8_GESTOR:=ZA0->ZA0_VENDED 
				ZA8->ZA8_ITEM  :="001" 
				
				If  cTipoRat == "R"
                    ZA8->ZA8_REVISA	:=StrZero(nRevis,3)
				ElseIf cTipoRat == "C"
				    ZA8->ZA8_COMPLE :=StrZero(nCompl,3) 
				EndIf
				ZA8->(MsUnLock())
			EndIf
		EndIf
	Next
EndIf

// Exclui os registros alterados
dbSeek(xFILIAL(cAlias)+cProjet)
While !Eof() .and. ZA1_FILIAL+ZA1_PROJET==xFILIAL(cAlias)+cProjet
	If Ascan(aGravados,{|x|x==Recno()})==0
		RecLock(cAlias,.F.)
		dbDelete()
		MsUnLock()
	EndIf
	dbSkip()
End

nVis := Len(aVistoria)

If nVis > 0
   U_Mailing(aVistoria,1) // Envia e-mail com aviso de vistoria
Endif

Return

********************************************************************************
STATIC FUNCTION fFolderRot(nFolder,nLin1,nCol1,nLin2,nCol2)
// Folder Rotas
********************************************************************************
Local aCamposNao := {}
Local aCamposSim := {}
Local nStyle:=GD_UPDATE//GD_INSERT + GD_UPDATE + GD_DELETE
Local cCampo
Local cAlias,cChave,cCondicao,nIndice,cFiltro

nStyle:=If(nOpcManu==2,0,nStyle)  //2=Visualizar

cAlias   :="ZA4"
cChave   :=xFILIAL(cAlias)+cProjet
cCondicao:='ZA4_FILIAL+ZA4_PROJET=="'+cChave+'"'
nIndice  :=1  //ZA4_FILIAL+ZA4_PROJET+ZA4_OBRA+ZA4_SEQTRA+ZA4_SEQGUI+ZA4_SEQGRU+ZA4_ORIGEM+ZA4_DESTIN+ZA4_ROTA+ZA4_ETAPA
cFiltro  :=cCondicao

AAdd(aCamposSim,{"ZA4_OBRA"  ,"V"})

Do Case
Case ZA0->ZA0_TIPOSE $ "TO"
	AAdd(aCamposSim,{"ZA4_SEQTRA","V"})
Case ZA0->ZA0_TIPOSE $ "G|R|I"
	AAdd(aCamposSim,{"ZA4_SEQGUI","V"})
Case ZA0->ZA0_TIPOSE $ "U|P|M"
	AAdd(aCamposSim,{"ZA4_SEQGRU","V"})
Otherwise
	AAdd(aCamposSim,{"ZA4_SEQTRA","V"})
	AAdd(aCamposSim,{"ZA4_SEQGUI","V"})
	AAdd(aCamposSim,{"ZA4_SEQGRU","V"})
EndCase

AAdd(aCamposSim,{"ZA4_ORIGEM",""})
AAdd(aCamposSim,{"ZA4_MUNORI",""})
AAdd(aCamposSim,{"ZA4_ESTORI",""})
AAdd(aCamposSim,{"ZA4_DESTIN",""})
AAdd(aCamposSim,{"ZA4_MUNDES",""})
AAdd(aCamposSim,{"ZA4_ESTDES",""})

Do Case
Case ZA0->ZA0_TIPOSE $ "TO"
	AAdd(aCamposSim,{"ZA4_SEQGUI","V"})
	AAdd(aCamposSim,{"ZA4_SEQGRU","V"})
Case ZA0->ZA0_TIPOSE $ "G|R|I"
	AAdd(aCamposSim,{"ZA4_SEQTRA","V"})
	AAdd(aCamposSim,{"ZA4_SEQGRU","V"})
Case ZA0->ZA0_TIPOSE $ "U|P|M"
	AAdd(aCamposSim,{"ZA4_SEQTRA","V"})
	AAdd(aCamposSim,{"ZA4_SEQGUI","V"})
EndCase

aHeader:=fHeader(aCamposSim)
aCols:=fCols(aHeader,cAlias,nIndice,cChave,cCondicao,cFiltro)

//                           nTop ,nLeft,nBottom,nRight,nStyle,cLinhaOk      ,cTudoOk,cIniCpos    ,aAlter,nFreeze,nMax,cFieldOk,cSuperDel,cDelOk,oWnd                     ,aHeader,aCols}
oDlgRot:=MsNewGetDados():New(nLin1,nCol1,nLin2  ,nCol2 ,nStyle,              ,       ,            ,      ,       ,110 ,        ,         ,.t.   ,oFolder:aDialogs[nFolder],aHeader,aCols)
oDlgRot:oBrowse:bChange:={||U_MudaRotB()}

fAcumuRot()
fTrazRot()

Return

********************************************************************************
User Function MudaRotB
// Muda o Browse - Folder Rotas
********************************************************************************
Local lRet:=.T.
Local cCampo,cCampoGet

fObra()

If oDlgRot:nAt>Len(oDlgRot:aCols) ; oDlgRot:nAt:=Len(oDlgRot:aCols) ; EndIf

oDlgRot:aCols[oDlgRot:nAt][Ascan(oDlgRot:aHeader,{|x|AllTrim(x[2])=="ZA4_OBRA"  })]:=cObra
oDlgRot:aCols[oDlgRot:nAt][Ascan(oDlgRot:aHeader,{|x|AllTrim(x[2])=="ZA4_SEQTRA"})]:=cSeqTra
oDlgRot:aCols[oDlgRot:nAt][Ascan(oDlgRot:aHeader,{|x|AllTrim(x[2])=="ZA4_SEQGUI"})]:=cSeqGui
oDlgRot:aCols[oDlgRot:nAt][Ascan(oDlgRot:aHeader,{|x|AllTrim(x[2])=="ZA4_SEQGRU"})]:=cSeqGru
oDlgRot:oBrowse:Refresh()

Return lRet

********************************************************************************
Static Function fSalvarRot(cAlias,aHeader,aCols)
// Folder Rotas
********************************************************************************
Local nPos,aGravados:={}  //Gravados

// Acumula o aCols corrente no aCols com todos os registros
fAcumuRot()
aCols:=Aclone(oRot_Cols)

dbSelectArea(cAlias)
dbSetOrder(1)

If nOpc==5  //5=Exclui
Else
	For nPos:=1 to Len(aCols)
		cObra  :=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZA4_OBRA"  })]
		cSeqTra:=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZA4_SEQTRA"})]
		cSeqGui:=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZA4_SEQGUI"})]
		cSeqGru:=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZA4_SEQGRU"})]
		If !aCols[nPos,Len(aHeader)+1] .and. !Empty(cObra) .and. !Empty(cSeqTra+cSeqGui+cSeqGru)  //!Deleted()
			dbSeek(xFILIAL(cAlias)+cProjet+cObra+cSeqTra+cSeqGui+cSeqGru)
			If Eof()
				RecLock(cAlias,.T.)
			Else
				RecLock(cAlias,.F.)
			EndIf
			fGravaTudo(cAlias,aHeader,aCols[nPos])  //Grava todos os campos do aCols
			(cAlias)->ZA4_FILIAL:=xFILIAL(cAlias)
			(cAlias)->ZA4_PROJET:=cProjet
			(cAlias)->ZA4_OBRA  :=cObra
			(cAlias)->ZA4_SEQTRA:=cSeqTra
			(cAlias)->ZA4_SEQGUI:=cSeqGui
			(cAlias)->ZA4_SEQGRU:=cSeqGru
			AAdd(aGravados,Recno())  //Gravados
			MsUnLock()
	     EndIf
	Next
EndIf

// Exclui os registros alterados
dbSeek(xFILIAL(cAlias)+cProjet)
While !Eof() .and. ZA4_FILIAL+ZA4_PROJET==xFILIAL(cAlias)+cProjet
	If Ascan(aGravados,{|x|x==Recno()})==0
		RecLock(cAlias,.F.)
		dbDelete()
		MsUnLock()
	EndIf
	dbSkip()
EndDo

Return

//------------------------------------
// retorna se a Viagem informada está na seleção - aba ZA6
// Cristiam Rossi em 18/04/2016
Static Function inViagem( xViagem, lDeleted )
Local   nI
Default lDeleted := .F.

	for nI := 1 to len( oDlgTra:aCols )							// aCols da Aba Viagens (ZA6)
		if  iif( lDeleted, ! gdDeleted( nI, oDlgTra:aHeader, oDlgTra:aCols ), .T. )
			if gdFieldGet("ZA6_OBRA", nI, .F., oDlgTra:aHeader, oDlgTra:aCols) == xViagem	// Viagem (obra) está no filtro
				Return .T.
			endif
		endif
		if gdFieldGet("ZA6_OBRA", nI, .F., oDlgTra:aHeader, oDlgTra:aCols) > xViagem		// Demais viagens está fora da faixa
			exit
		endif
	next

Return .F.


//------------------------------------
// retorna se a Viagem informada está na seleção - aba ZA6
// Cristiam Rossi em 18/04/2016
Static Function LimpaZAM()
Local cQuery
Local nI

	for nI := 1 to len( oDlgTra:aCols )							// aCols da Aba Viagens (ZA6)
		cQuery := "update "+RetSqlName("ZAM")+" set D_E_L_E_T_='*'"
		cQuery += " where ZAM_FILIAL='"+xFilial("ZAM")+"'"
		cQuery += " and ZAM_PROJET='"+cProjet+"'"
		cQuery += " and ZAM_OBRA='"+gdFieldGet("ZA6_OBRA", nI, .F., oDlgTra:aHeader, oDlgTra:aCols)+"'"
		if ! gdDeleted( nI, oDlgTra:aHeader, oDlgTra:aCols )	// não está deletado
			cQuery += " and ( ZAM_ORIGEM<>'"+gdFieldGet("ZA6_ORIGEM", nI, .F., oDlgTra:aHeader, oDlgTra:aCols)+"'"
			cQuery += " or ZAM_DESTIN<>'"+gdFieldGet("ZA6_DESTIN", nI, .F., oDlgTra:aHeader, oDlgTra:aCols)+"'"

			cQuery += retCar( gdFieldGet("ZA6_OBRA", nI, .F., oDlgTra:aHeader, oDlgTra:aCols) )		// retorna SeqCarga

			cQuery += " ) "
		endif
		cQuery += " and D_E_L_E_T_=''"
		TCSQLExec( cQuery )
	next

Return nil


//-------------- Retorna as Sequencias de Carga que devem ter Itinerários
Static Function retCAR( xObra )
Local cRetCar := ''
Local nI

	for nI := 1 to len( oCar_Cols )							// aCols da Aba Cargas (ZA7)
		if gdFieldGet("ZA7_OBRA", nI, .F., oDlgCar:aHeader, oCar_Cols) == xObra	
			if ! gdDeleted( nI, oDlgCar:aHeader, oCar_Cols )
				if Empty( gdFieldGet("ZA7_JUNTO", nI, .F., oDlgCar:aHeader, oCar_Cols) )
					if ! gdFieldGet("ZA7_SEQCAR", nI, .F., oDlgCar:aHeader, oCar_Cols) $ cRetCar
						cRetCar += iif( Empty(cRetCar), "", "," ) + "'" + gdFieldGet("ZA7_SEQCAR", nI, .F., oDlgCar:aHeader, oCar_Cols) + "'"
					endif
				endif
			endif
		endif
	next

	if ! Empty( cRetCar )
		cRetCar := " or ZAM_SEQCAR not in (" + cRetCar + ")"
	endif

Return cRetCar


********************************************************************************
Static Function fFolderTre(nFolder,nLin1,nCol1,nLin2,nCol2)
// Folder Trechos
********************************************************************************
Local   aCamposNao := {}
Local   aCamposSim := {}
Local   nStyle     := GD_UPDATE + GD_DELETE //GD_INSERT + GD_UPDATE + GD_DELETE
Local   cCampo
Local   cAlias,cChave,cCondicao,nIndice,cFiltro

LimpaZAM()	// Limpa ZAM que está gravada na base sem vínculo com a Origem e Destino - Cristiam Rossi em 18/07/2016

nStyle:=If( nOpcManu == 2, 0, nStyle)  //2=Visualizar

cAlias   :="ZAM"
cChave   :=xFILIAL(cAlias)+cProjet
cCondicao:='ZAM_FILIAL+ZAM_PROJET=="'+cChave+'"'
nIndice  :=1  //ZAM_FILIAL+ZAM_PROJET+ZAM_OBRA+ZAM_SEQTRA+ZAM_SEQGUI+ZAM_SEQGRU+ZAM_SEQCAR+ZAM_ORIGEM+ZAM_DESTIN+ZAM_ROTA+ZAM_ETAPA
//cFiltro  :=cCondicao
cFiltro  := 'inViagem( ZAM_OBRA )'	// Cristiam Rossi em 18/04/2016 - só trazer Itinerários (trechos) das Viagens filtradas

AAdd(aCamposSim,{"ZAM_OBRA"  ,"V"})

Do Case
Case ZA0->ZA0_TIPOSE $ "TO"
	AAdd(aCamposSim,{"ZAM_SEQTRA","V"})
	AAdd(aCamposSim,{"ZAM_SEQCAR","V"})
Case ZA0->ZA0_TIPOSE=="L"
	AAdd(aCamposSim,{"ZAM_SEQTRA","V"})
	AAdd(aCamposSim,{"ZAM_SEQCAR","V"})
Case ZA0->ZA0_TIPOSE $ "G|R|I"
	AAdd(aCamposSim,{"ZAM_SEQGUI","V"})
Case ZA0->ZA0_TIPOSE $ "U|P|M"
	AAdd(aCamposSim,{"ZAM_SEQGRU","V"})
Otherwise
	AAdd(aCamposSim,{"ZAM_SEQTRA","V"})
	AAdd(aCamposSim,{"ZAM_SEQGUI","V"})
	AAdd(aCamposSim,{"ZAM_SEQGRU","V"})
	AAdd(aCamposSim,{"ZAM_SEQCAR","V"})
EndCase

AAdd(aCamposSim,{"ZAM_ROTA"  ,"V"})
AAdd(aCamposSim,{"ZAM_ETAPA" ,"V"})
AAdd(aCamposSim,{"ZAM_DE"    ,"V"})
AAdd(aCamposSim,{"ZAM_MUNDE" ,"V"})
AAdd(aCamposSim,{"ZAM_ESTDE" ,"V"})
AAdd(aCamposSim,{"ZAM_ATE"   ,"V"})
AAdd(aCamposSim,{"ZAM_MUNATE","V"})
AAdd(aCamposSim,{"ZAM_ESTATE","V"})
AAdd(aCamposSim,{"ZAM_DISTAN",""})
AAdd(aCamposSim,{"ZAM_TEMPO" ,""})

If fTemVazio(ZA0->ZA0_TIPOSE)
	AAdd(aCamposSim,{"ZAM_VAZIO" ,""})
EndIf
If fTemIdaVol(ZA0->ZA0_TIPOSE)
	AAdd(aCamposSIM,{"ZAM_IDAVOL",""})
EndIf

AAdd(aCamposSim,{"ZAM_RODOVI",""})
//AAdd(aCamposSim,{"ZAM_TEMTUR",""})
AAdd(aCamposSim,{"ZAM_QTDPED",""})
AAdd(aCamposSim,{"ZAM_VALPED",""})
AAdd(aCamposSim,{"ZAM_TIPORO",""})
AAdd(aCamposSim,{"ZAM_TIPOPI",""})
AAdd(aCamposSim,{"ZAM_ORIGEM",""})
AAdd(aCamposSim,{"ZAM_DESTIN",""})

If !fTemVazio(ZA0->ZA0_TIPOSE)
	AAdd(aCamposSim,{"ZAM_VAZIO" ,""})
EndIf
If !fTemIdaVol(ZA0->ZA0_TIPOSE)
	AAdd(aCamposSIM,{"ZAM_IDAVOL",""})
EndIf

AAdd(aCamposSIM,{"ZAM_CET" ,""})
AAdd(aCamposSIM,{"ZAM_DER" ,""})
AAdd(aCamposSIM,{"ZAM_DNIT",""})
AAdd(aCamposSIM,{"ZAM_CRED",""})

Do Case
Case ZA0->ZA0_TIPOSE $ "TO"
	AAdd(aCamposSim,{"ZAM_SEQGUI","V"})
	AAdd(aCamposSim,{"ZAM_SEQGRU","V"})
Case ZA0->ZA0_TIPOSE=="L"
	AAdd(aCamposSim,{"ZAM_SEQGUI","V"})
	AAdd(aCamposSim,{"ZAM_SEQGRU","V"})
Case ZA0->ZA0_TIPOSE $ "G|R|I"
	AAdd(aCamposSim,{"ZAM_SEQTRA","V"})
	AAdd(aCamposSim,{"ZAM_SEQGRU","V"})
	AAdd(aCamposSim,{"ZAM_SEQCAR","V"})
Case ZA0->ZA0_TIPOSE $ "U|P|M"
	AAdd(aCamposSim,{"ZAM_SEQTRA","V"})
	AAdd(aCamposSim,{"ZAM_SEQGUI","V"})
	AAdd(aCamposSim,{"ZAM_SEQCAR","V"})
EndCase 

AAdd(aCamposSIM,{"ZAM_TKMVAZ","V"})
AAdd(aCamposSIM,{"ZAM_TKMCAR","V"})


aHeader:=fHeader(aCamposSim)
aCols:=fCols(aHeader,cAlias,nIndice,cChave,cCondicao,cFiltro)

If Len(aCols)==1
	cCampo   :="ZAM_ETAPA"
	cCampoGet:=aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]
	If Empty(cCampoGet)
		aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo      })]:=StrZero(1,Len(cCampoGet))
		aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_SEQTRA"})]:=StrZero(1,Len(cCampoGet))
		aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_SEQGUI"})]:=StrZero(1,Len(cCampoGet))
		aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_SEQGRU"})]:=StrZero(1,Len(cCampoGet))
		aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_SEQCAR"})]:=StrZero(1,Len(cCampoGet))
	EndIf
EndIf

cCampo   :="ZAM_ETAPA"
cCampoGet:=oTre_Cols0[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]
If Empty(cCampoGet)
	oTre_Cols0[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo      })]:=StrZero(1,Len(cCampoGet))
	oTre_Cols0[1][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_SEQTRA"})]:=StrZero(1,Len(cCampoGet))
	oTre_Cols0[1][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_SEQGUI"})]:=StrZero(1,Len(cCampoGet))
	oTre_Cols0[1][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_SEQGRU"})]:=StrZero(1,Len(cCampoGet))
	oTre_Cols0[1][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_SEQCAR"})]:=StrZero(1,Len(cCampoGet))
EndIf

//                           nTop ,nLeft,nBottom,nRight,nStyle,cLinhaOk      ,cTudoOk,cIniCpos    ,aAlter,nFreeze,nMax,cFieldOk,cSuperDel,cDelOk,oWnd                     ,aHeader,aCols}
//oDlgTre:=MsNewGetDados():New(nLin1+020,nCol1,nLin2  ,nCol2 ,nStyle,        ,       ,"+ZAM_ETAPA",      ,       ,110 ,        ,         ,.t.   ,oFolder:aDialogs[nFolder],aHeader,aCols)
oDlgTre:=MsNewGetDados():New(nLin1,nCol1,nLin2  ,nCol2 ,nStyle,              ,       ,"+ZAM_ETAPA",      ,       ,110 ,        ,         ,"Eval( bDelIt )" ,oFolder:aDialogs[nFolder],aHeader,aCols)
oDlgTre:oBrowse:bChange:={||U_MudaTreB()}
oDlgTre:oBrowse:bDelete:={|| u_LC1CanEdt('ZA6','ITINERARIOS',.T.) }		// Cristiam Rossi em 01/08/2016

fAcumuTre()
fTrazTre()

//@ nLin2+005+030,Int((nCol2-nCol1)/2)-30 BUTTON oButtRotas Prompt "Rotas" SIZE 60,10 ACTION fVerRotas() OF oFolder:aDialogs[nFolder] PIXEL
@ nLin2+005,nCol2-100 BUTTON oButtRotas Prompt "Itinerarios" SIZE 60,10 ACTION fVerRotas() OF oFolder:aDialogs[nFolder] PIXEL

fMontaKm(nFolder,nLin1,nCol1,nLin2,nCol2)

If .f.
	@ nLin1,nCol1 to nLin1+18,nCol2 Of oFolder:aDialogs[nFolder] PIXEL
	@ nLin1+06,nCol1+005 Say OemToAnsi("Origem:") SIZE 060,008 OF oFolder:aDialogs[nFolder] PIXEL
	@ nLin1+05,nCol1+035 MsGet oOrigem VAR cOrigem Picture "@!" SIZE 045,008 OF oFolder:aDialogs[nFolder] PIXEL F3 "ZA2" Valid fVerOrigem()
	@ nLin1+05,nCol1+085 MsGet oMunOri VAR cMunOri Picture "@!" SIZE 100,008 OF oFolder:aDialogs[nFolder] PIXEL When fWhen(.f.)
	@ nLin1+05,nCol1+190 MsGet oEstOri VAR cEstOri Picture "@!" SIZE 020,008 OF oFolder:aDialogs[nFolder] PIXEL When fWhen(.f.)

	@ nLin1+06,nCol1+240 Say OemToAnsi("Destino:") SIZE 060,008 OF oFolder:aDialogs[nFolder] PIXEL
	@ nLin1+05,nCol1+270 MsGet oDestin VAR cDestin Picture "@!" SIZE 045,008 OF oFolder:aDialogs[nFolder] PIXEL F3 "ZA2" Valid fVerDestin()
	@ nLin1+05,nCol1+320 MsGet oMunDes VAR cMunDes Picture "@!" SIZE 100,008 OF oFolder:aDialogs[nFolder] PIXEL When fWhen(.f.)
	@ nLin1+05,nCol1+425 MsGet oEstDes VAR cEstDes Picture "@!" SIZE 020,008 OF oFolder:aDialogs[nFolder] PIXEL When fWhen(.f.)
EndIf

Return nil


// --------------------------------- rotina para excluir Itinerários
Static Function fDelIt()
Local nI
Local nPosDel := len( aCols[1] )

	for nI := 1 to len( aCols )
		aCols[nI][nPosDel] := ! gdDeleted( nI, aHeader, aCols )
	next

	oDlgTre:Refresh()

Return nil



********************************************************************************
Static Function fVerOrigem
// Folder Trechos
********************************************************************************
Local cCod,lRet:=.t.

cCod:=cOrigem
cMunOri:=Posicione('ZA2',1,xFilial('ZA2')+cCod,'ZA2_DESCRI')
cEstOri:=Posicione('ZA2',1,xFilial('ZA2')+cCod,'ZA2_ESTADO')

Return(lRet)

********************************************************************************
Static Function fVerDestin
// Folder Trechos
********************************************************************************
Local cCod,lRet:=.t.

cCod:=cDestin
cMunDes:=Posicione('ZA2',1,xFilial('ZA2')+cCod,'ZA2_DESCRI')
cEstDes:=Posicione('ZA2',1,xFilial('ZA2')+cCod,'ZA2_ESTADO')

Return(lRet)

********************************************************************************
User Function MudaTreB  
// Muda o Browse - Folder Trechos
********************************************************************************
Local lRet:=.T.
Local cCampo,cCampoGet

	fObra()

	If oDlgTre:nAt>Len(oDlgTre:aCols) ; oDlgTre:nAt:=Len(oDlgTre:aCols) ; EndIf

	oDlgTre:aCols[oDlgTre:nAt][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_OBRA"  })]:=cObra
	oDlgTre:aCols[oDlgTre:nAt][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_SEQTRA"})]:=cSeqTra
	oDlgTre:aCols[oDlgTre:nAt][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_SEQGUI"})]:=cSeqGui
	oDlgTre:aCols[oDlgTre:nAt][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_SEQGRU"})]:=cSeqGru
	oDlgTre:aCols[oDlgTre:nAt][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_SEQCAR"})]:=cSeqCar
	oDlgTre:oBrowse:Refresh()

	nKmV := GDFieldGet ( "ZAM_TKMVAZ", 1, .F., oDlgTre:aHeader, oDlgTre:aCols )
	nKmC := GDFieldGet ( "ZAM_TKMCAR", 1, .F., oDlgTre:aHeader, oDlgTre:aCols )
	nKmT := nKmV + nKmC
	
	if Type("oKmv") == "O" // Se o Objeto estiver criado
		oKmV:Refresh()
		oKmC:Refresh()
		oKmT:Refresh()
	endif

Return lRet

********************************************************************************
Static Function fSalvarTre(cAlias,aHeader,aCols)
// Folder Trechos
********************************************************************************
Local nPos,aGravados:={}  //Gravados

// Acumula o aCols corrente no aCols com todos os registros
fAcumuTre()
aCols:=Aclone(oTre_Cols)

dbSelectArea(cAlias)
dbSetOrder(1)

If nOpc==5  //5=Exclui
Else
	For nPos:=1 to Len(aCols)
		If aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_OBRA"  })] <> ""
			cObra  :=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_OBRA"  })]
			cSeqTra:=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_SEQTRA"})]
			cSeqGui:=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_SEQGUI"})]
			cSeqGru:=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_SEQGRU"})]
			cSeqCar:=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_SEQCAR"})]
			cOrigem:=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_ORIGEM"})]
			cDestin:=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_DESTIN"})]
			cRota  :=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_ROTA"  })]
			cEtapa :=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_ETAPA" })]
			If !aCols[nPos,Len(aHeader)+1] .and. !Empty(cObra) .and. !Empty(cSeqTra+cSeqGui+cSeqGru+cSeqCar);
		                               .and. !Empty(cOrigem) .and. !Empty(cDestin) .and. !Empty(cRota) .and. !Empty(cEtapa)  //!Deleted()
				dbSeek(xFILIAL(cAlias)+cProjet+cObra+cSeqTra+cSeqGui+cSeqGru+cSeqCar+cOrigem+cDestin+cRota+cEtapa)
				If Eof()
					RecLock(cAlias,.T.)
				Else
					RecLock(cAlias,.F.)
				EndIf
				fGravaTudo(cAlias,aHeader,aCols[nPos])  //Grava todos os campos do aCols
				(cAlias)->ZAM_FILIAL:=xFILIAL(cAlias)
				(cAlias)->ZAM_PROJET:=cProjet
				(cAlias)->ZAM_OBRA  :=cObra
				(cAlias)->ZAM_SEQTRA:=cSeqTra
				(cAlias)->ZAM_SEQGUI:=cSeqGui
				(cAlias)->ZAM_SEQGRU:=cSeqGru
				(cAlias)->ZAM_SEQCAR:=cSeqCar
				(cAlias)->ZAM_ORIGEM:=cOrigem
				(cAlias)->ZAM_DESTIN:=cDestin
				(cAlias)->ZAM_ROTA  :=cRota
				(cAlias)->ZAM_ETAPA :=cEtapa
				AAdd(aGravados,Recno())  //Gravados
				MsUnLock()
		    EndIf
		EndIF
	Next
EndIf

// Exclui os registros alterados
dbSeek(xFILIAL(cAlias)+cProjet)
While !Eof() .and. ZAM_FILIAL+ZAM_PROJET==xFILIAL(cAlias)+cProjet
	If Ascan(aGravados, Recno())==0 .and. inViagem( ZAM_OBRA )	// Cristiam Rossi em 18/04/2016
		RecLock(cAlias,.F.)
		dbDelete()
		MsUnLock()
	EndIf
	dbSkip()
EndDo

LimpaZAM()	// Limpa ZAM que está gravada na base sem vínculo com a Origem e Destino - Cristiam Rossi em 18/07/2016

Return

********************************************************************************
Static Function fFolderFol(nFolder,nLin1,nCol1,nLin2,nCol2)
// Folder Follow-up
********************************************************************************
Local nPos
Local aCamposSim := {}
Local aCamposNao := {}
Local nStyle	 := 0	//GD_INSERT + GD_UPDATE + GD_DELETE
Local aStatus
Local _cValid 	 := .T.

nStyle:=If(nOpcManu==2,0,nStyle)  //2=Visualizar

aRet := {}
If ZA0->ZA0_STATUS == '1';		AAdd(aRet,"1=Digitado"    ); EndIf
If ZA0->ZA0_STATUS == '2';		AAdd(aRet,"2=Em Aprovação"); EndIf
If ZA0->ZA0_STATUS == '3';		AAdd(aRet,"3=Aprovado"    ); EndIf
If ZA0->ZA0_STATUS == '4';		AAdd(aRet,"4=Não Aprovado"); EndIf
//If ZA0->ZA0_STATUS == '5';		AAdd(aRet,"5=Fechado"     ); EndIf
If ZA0->ZA0_STATUS == '5';		AAdd(aRet,"8=Faturado"     ); EndIf
If ZA0->ZA0_STATUS $ '3|6';		AAdd(aRet,"6=Indisponível"); EndIf
If ZA0->ZA0_STATUS $ '3|7';		AAdd(aRet,"7=Rejeitado"   ); EndIf
If ZA0->ZA0_STATUS == '8';		AAdd(aRet,"8=Faturado"  ); EndIf
If ZA0->ZA0_STATUS == 'A';		AAdd(aRet,"A=Revisado"    ); EndIf
If ZA0->ZA0_STATUS $ '1|B';		AAdd(aRet,"B=Excluido"    ); EndIf
If ZA0->ZA0_STATUS $ '3|C';		AAdd(aRet,"C=Cancelado"   ); EndIf

aStatus:=fStatus("Combo")  	//Traz os Status das Propostas
aStatus:=Aclone(aRet)  		//Traz os Status das Propostas permitidas no processo de aprovação

ZAF->(dbSeek(xFILIAL("ZAF")+cProjet))
cFollow0:=ZAF->ZAF_FOLLOW

@ nLin1+20+00                       ,nCol1 GET oFollow  VAR cFollow  SIZE Int((nCol2-nCol1)/2),Int((nLin2-22)*.25)    OF oFolder:aDialogs[nFolder] PIXEL MEMO
@ nLin1+20+00+Int((nLin2-22)*.25)+05,nCol1 GET oFollow0 VAR cFollow0 SIZE Int((nCol2-nCol1)/2),Int((nLin2-22)*.75)-05 OF oFolder:aDialogs[nFolder] PIXEL MEMO

oFollow0:lReadOnly:=.t.

oFollow:lReadOnly:=!(fWhen())

@ nLin1,nCol1 to nLin1+18,nCol2 Of oFolder:aDialogs[nFolder] PIXEL
@ nLin1+06,nCol1+005 Say OemToAnsi("Data para o Retorno:") SIZE 060,008 OF oFolder:aDialogs[nFolder] PIXEL
@ nLin1+05,nCol1+060 MsGet oDataRet VAR dDataRet Picture "@D" SIZE 045,008 OF oFolder:aDialogs[nFolder] PIXEL When fWhen() //When Upper(AllTrim(Subs(cUsuario,7,05)))==Upper("Admin")
//@ nLin1+06,nCol2-100 Say OemToAnsi("Validade:") SIZE 030,008 OF oFolder:aDialogs[nFolder] PIXEL
//@ nLin1+05,nCol2-065 MsGet oDataVal VAR dDataVal Picture "@D" SIZE 045,008 OF oFolder:aDialogs[nFolder] PIXEL When Upper(AllTrim(Subs(cUsuario,7,05)))==Upper("Admin")
//@ nLin1+06,nCol2-275 Say OemToAnsi("Status:") SIZE 030,008 OF oFolder:aDialogs[nFolder] PIXEL
//@ nLin1+05,nCol2-245 COMBOBOX oStatus VAR cStatus ITEMS aStatus SIZE 80,008 OF oFolder:aDialogs[nFolder] PIXEL When Upper(AllTrim(Subs(cUsuario,7,05)))==Upper("Admin")

@ nLin1+06,nCol2-275 Say OemToAnsi("Validade:") SIZE 030,008 OF oFolder:aDialogs[nFolder] PIXEL
@ nLin1+05,nCol2-240 MsGet oDataVal VAR dDataVal Picture "@D" SIZE 045,008 OF oFolder:aDialogs[nFolder] PIXEL When fWhen() //When Upper(AllTrim(Subs(cUsuario,7,05)))==Upper("Admin")

Private aHeader,aCols

fMontaFol()  //Monta aHeader e aCols do Folder Follow-up

nCol2B:=Int((nCol2-nCol1)/2)+10
@ nLin1+18,Int((nCol2-nCol1)/2)+10 to nLin1+20+00+Int((nLin2-22)*.25),nCol2 Of oFolder:aDialogs[nFolder] PIXEL

@ nLin1+23,nCol2B+02 Say OemToAnsi("Status:") SIZE 030,008 OF oFolder:aDialogs[nFolder] PIXEL
@ nLin1+22,nCol2B+35 COMBOBOX oStatus VAR cStatus ITEMS aStatus SIZE 65,008 OF oFolder:aDialogs[nFolder] PIXEL When fWhen()		//When Upper(AllTrim(Subs(cUsuario,7,05)))==Upper("Admin")

@ nLin1+35,nCol2B+02 Say OemToAnsi("Ganhador:") SIZE 030,008 OF oFolder:aDialogs[nFolder] PIXEL
@ nLin1+34,nCol2B+35 MsGet oCodConco VAR cCodConco Picture "@!"              SIZE 030,008 OF oFolder:aDialogs[nFolder] PIXEL When fWhen() .and. cStatus=="7" F3 "ZAH" Valid fTrazConco(cCodConco)
@ nLin1+34,nCol2B+70 MsGet oNomConco VAR cNomConco Picture "@!"              SIZE 150,008 OF oFolder:aDialogs[nFolder] PIXEL When fWhen(.f.)

@ nLin1+46,nCol2B+02 Say OemToAnsi("Vr.Transp.:") SIZE 040,008 OF oFolder:aDialogs[nFolder] PIXEL
@ nLin1+45,nCol2B+35 MsGet oValConco VAR nValConco Picture "@E 999,999,999.99" SIZE 045,008 OF oFolder:aDialogs[nFolder] PIXEL When fWhen() .and. cStatus=="7"

@ nLin1+46,nCol2B+100  Say OemToAnsi("Vr.Locação:") SIZE 040,008 OF oFolder:aDialogs[nFolder] PIXEL
@ nLin1+45,nCol2B+133 MsGet oValConcoL VAR nValConcoL Picture "@E 999,999,999.99" SIZE 045,008 OF oFolder:aDialogs[nFolder] PIXEL When fWhen() .and. cStatus=="7"

//                           nTop                              ,nLeft                  ,nBottom,nRight,nStyle,cLinhaOk      ,cTudoOk,cIniCpos,aAlter,nFreeze,nMax,cFieldOk,cSuperDel,cDelOk,oWnd                     ,aHeader,aCols}
oDlgFol:=MsNewGetDados():New(nLin1+20+00+Int((nLin2-22)*.25)+05,Int((nCol2-nCol1)/2)+10,nLin2-20  ,nCol2 ,nStyle,              ,       ,        ,      ,       ,110 ,        ,         ,.t.   ,oFolder:aDialogs[nFolder],aHeader,aCols)
oDlgFol:oBrowse:bChange:={||U_MudaFolB()}
//oDlgFol:oBrowse:BLDblClick:={||U_AbreDocs("open",cDirProj+"\"+AllTrim(oDlgFol:aCols[oDlgFol:nAt][Ascan(oDlgFol:aHeader,{|x|AllTrim(x[2])=="ZA1_EMAORI"})]),"","",.t.)}  //.t.=Mostra Mensagem de Erro
oDlgFol:oBrowse:BLDblClick:={|| fOpenFile() }

@ nLin2-15, Int((nCol2-nCol1)/2)+15 Button "Incluir Arquivo" Size 40, 15 of oFolder:aDialogs[nFolder] Pixel action fAddFile()
@ nLin2-15, Int((nCol2-nCol1)/2)+65 Button "Excluir Arquivo" Size 40, 15 of oFolder:aDialogs[nFolder] Pixel action fDelFile()

Return


//------------------ Remove arquivo no diretório de Documentos do Projeto
Static function fOpenFile()
Local cFileName

	if len( oDlgFol:aCols ) < 1 .or. oDlgFol:nAt < 1
		Return nil
	endif

	cFileName := AllTrim( oDlgFol:aCols[oDlgFol:nAt][Ascan(oDlgFol:aHeader,{|x|AllTrim(x[2])=="ZA1_EMAORI"})] )

	If Empty( cFileName )
		return nil
	endif

	U_AbreDocs( "open", cDirProj+"\"+ cFileName, "", "", .T.)

Return nil


//------------------ Adiciona arquivo no diretório de Documentos do Projeto
Static function fAddFile()
Local cArquivo := ""

	cArquivo := cGetFile("Arquivos (*.*)|*.*|", "Selecione o arquivo desejado a ser incluído", 1, "C:\", .F., GETF_LOCALHARD+GETF_LOCALFLOPPY /*+GETF_NETWORKDRIVE*/, .F.)
	if Empty( cArquivo )
		return nil
	endif

	CpyT2S( cArquivo, cDirProj )

	fMontaFol()  //Monta aHeader e aCols do Folder Follow-up
Return nil


//------------------ Remove arquivo no diretório de Documentos do Projeto
Static function fDelFile()
Local cFileName

	if len( oDlgFol:aCols ) < 1 .or. oDlgFol:nAt < 1
		Return nil
	endif

	cFileName := AllTrim( oDlgFol:aCols[oDlgFol:nAt][Ascan(oDlgFol:aHeader,{|x|AllTrim(x[2])=="ZA1_EMAORI"})] )

	If Empty( cFileName )
		return nil
	endif
	
	if FErase( cDirProj + "\" + cFileName ) == -1
		MsgStop( "Não foi possível remover o arquivo selecionado" )
		return nil
	endif

	fMontaFol()  //Monta aHeader e aCols do Folder Follow-up
Return nil


********************************************************************************
Static Function fTrazConco(cCod)
// Folder Follow-up
********************************************************************************
Local lRet:=.T.

cNomConco:=Posicione('ZAH',1,xFilial('ZAH')+cCod,'ZAH_NOME')

Return(lRet)

********************************************************************************
User Function MudaFolB
// Muda o Browse - Folder Follow-up
********************************************************************************
Local lRet:=.T.
Local cCampo,cCampoGet

Return lRet

********************************************************************************
Static Function fSalvarFol(cAlias)
// Folder Follow-up
********************************************************************************
Local nPos,aGravados:={}  //Gravados
Local cAliasZA0:="ZA0"

// Grava a data de retorno no ZA0
dbSelectArea(cAliasZA0)
dbSetOrder(1)  //ZA0_FILIAL+ZA0_PROJET+ZA0_NUM

dbSeek(xFILIAL(cAliasZA0)+cProjet)

If nOpc==3  //3=Inclui
	M->ZA0_DTRETO := dDataRet
Else
	(cAliasZA0)->(RECLOCK(cAliasZA0,.F.))
	(cAliasZA0)->ZA0_DTRETO := dDataRet  //Data de Retorno
	//Gravo o status no caso de ser aberto apenas pelo botão Follow-up
	(cAliasZA0)->ZA0_STATUS := cStatus   //Status
	(cAliasZA0)->(MSUNLOCK())

aCampos := {}
	nValTot := 0
	aInfos  := TamSX3("ZA0_PROJET")
	AADD(aCampos,{ "PROJETO" ,aInfos[3],aInfos[1],aInfos[2] } )
	AADD(aCampos,{ "COLUNA1"    ,"C",59,0 } ) // Obra
	AADD(aCampos,{ "COLUNA2"    ,"C",57,0 } ) // Equipamentos
	AADD(aCampos,{ "COLUNA3"    ,"C",30,0 } ) // Periodo
	AADD(aCampos,{ "COLUNA4"    ,"C",18,0 } ) // Vr.Base
	AADD(aCampos,{ "COLUNA5"    ,"C",18,0 } ) // Vr.Mob./ Desmob.
	AADD(aCampos,{ "COLUNA6"    ,"C",18,0 } ) // Vr.Total
			
	cNomArq := CriaTrab(aCampos)
	If (Select("TMP") <> 0)
		dbSelectArea("TMP")
		dbCloseArea()
	Endif
	dbUseArea(.T.,,cNomArq,"TMP",nil,.F.)
		
	U_fCalcT((cAliasZA0)->ZA0_PROJET,(cAliasZA0)->ZA0_TIPOSE)
			
	TMP->(DBGOTOP())
	WHILE TMP->(!EOF())
		nValTot := nValTot+VAL(STRTRAN(STRTRAN(Alltrim(TMP->COLUNA6),".",""),",","."))
		TMP->(DBSKIP())
	ENDDO
	
	//Integração Protheus x Dynamics para informar alterações nos status da proposta ao CRM
	//u_IntPropCRM((cAliasZA0)->ZA0_ORCAM, (cAliasZA0)->ZA0_STATUS,(cAliasZA0)->ZA0_CLI,(cAliasZA0)->ZA0_LOJA,(cAliasZA0)->ZA0_PROJET,nValTot)
			
EndIf

dbSelectArea(cAlias)
dbSetOrder(1)

dbSeek(xFILIAL(cAlias)+cProjet)

If nOpc==5  //5=Exclui
	(cAlias)->(RECLOCK(cAlias,.F.))
	(cAlias)->(dbDelete())
	(cAlias)->(MsUnLock())
    U_bloqClass(cProjet)	
	Return
EndIf

If (cAlias)->(Eof())
	(cAlias)->(RECLOCK(cAlias,.T.))
Else
	(cAlias)->(RECLOCK(cAlias,.F.))
EndIf

(cAlias)->ZAF_FILIAL :=xFILIAL(cAlias)
(cAlias)->ZAF_PROJET :=cProjet  //Nro.Projeto

// A cada inclusão o sistema deverá identificar a data, hora e usuário que executou a tarefa
If !Empty(cFollow)
	cFollow := "==> " + DtoC(dDataBase) + " as " + Time() + " por " + SubStr(cUsuario,7,15) + Chr(13) + Chr(10) + AllTrim(cFollow)
	(cAlias)->ZAF_FOLLOW :=	cFollow+Chr(13)+Chr(10)+Replicate("_",100)+Chr(13)+Chr(10)+AllTrim(cFollow0)
EndIf

(cAlias)->(MSUNLOCK())

Return

********************************************************************************
STATIC FUNCTION fMontaFol()
// Monta aHeader e aCols do Folder Follow-up
********************************************************************************
Local nPos,aDir,aCols0,lRet:=.T.
Local aCamposSim := {}

AAdd(aCamposSim,{"ZA1_OBRA"    ,""})
AAdd(aCamposSim,{"ZA1_EMAORI"  ,""})

aHeader:=fHeader(aCamposSim)
aHeader[1,1]:="Seq"
aHeader[2,1]:="Nome do Arquivo"

aDir:=Directory(cDirProj+"\*.*")
aCols:={}
For nPos:=1 to Len(aDir)
	aCols0:={}
	AAdd(aCols0,StrZero(nPos,3))
	AAdd(aCols0,aDir[nPos,1])
	AAdd(aCols0,.F.  )  //Deleted
	AAdd(aCols,aCols0)
Next

If ValType(oDlgFol)=="O"  //Se o objeto já foi criado
	oDlgFol:aHeader:=Aclone(aHeader)
	oDlgFol:aCols:=Aclone(aCols)
	oDlgFol:oBrowse:Refresh()
EndIf

Return(lRet)

********************************************************************************
User Function AbreDocs(cOper,cFileName,cParam,cDir,lMsg)
// Folder Follow-up
********************************************************************************
Local nRet:=0
Local cTempPath := GetTempPath()

	cFileName := StrTran( cFileName, cDirProj+"\", "" )

	If !Empty(cFileName)
	
		if ! cpyS2T( cDirProj+"\"+cFileName, cTempPath )
			MsgStop( "Falha ao copiar o arquivo do servidor para disco local do computador" )
			Return .F.
		endif

		nRet := ShellExecute( cOper, cTempPath +"\"+ cFileName, cParam, cDir, 1 )

		If nRet <= 32
			If lMsg
				MsgStop( "ATENÇÃO: Não foi possível abrir o arquivo "+cFileName )
			EndIf

			Return .F.
		EndIf
	Endif

Return .T.

********************************************************************************
Static Function fFolderRes(nFolder,nLin1,nCol1,nLin2,nCol2)
// Folder Responsabilidades
********************************************************************************
Local aCamposNao := {}
Local aCamposSim := {}
Local nStyle:=GD_INSERT + GD_UPDATE + GD_DELETE
Local cAlias,cChave,cCondicao,nIndice,cFiltro

nStyle:=If(nOpcManu==2,0,nStyle)  //2=Visualizar

cAlias   :="ZAA"
cChave   :=xFILIAL(cAlias)+cProjet
cCondicao:='ZAA_FILIAL+ZAA_PROJET=="'+cChave+'"'
nIndice  :=2  //ZAA_FILIAL+ZAA_PROJET+ZAA_OBRA+ZAA_SEQGUI+ZAA_SEQRES
cFiltro  :=cCondicao

AAdd(aCamposSim,{"ZAA_OBRA"  ,"V"})
AAdd(aCamposSim,{"ZAA_SEQGUI","V"})
AAdd(aCamposSim,{"ZAA_SEQRES","V"})
AAdd(aCamposSim,{"ZAA_CODIGO",""})
AAdd(aCamposSim,{"ZAA_DESCRI",""})
AAdd(aCamposSim,{"ZAA_RESPON",""})
AAdd(aCamposSim,{"ZAA_DESCCO",""})
AAdd(aCamposSim,{"ZAA_VALOR" ,""})
AAdd(aCamposSim,{"ZAA_VALCOB",""})    //**
AAdd(aCamposSim,{"ZAA_TRECHO",""})

aHeader:=fHeader(aCamposSim)
aCols:=fCols(aHeader,cAlias,nIndice,cChave,cCondicao,cFiltro)

If Len(aCols)==1
	cCampo   :="ZAA_SEQRES"
	cCampoGet:=aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]
	If Empty(cCampoGet)
		aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]:=StrZero(1,Len(cCampoGet))
	EndIf
EndIf

cCampo   :="ZAA_SEQRES"
cCampoGet:=oRes_Cols0[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]
If Empty(cCampoGet)
	oRes_Cols0[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]:=StrZero(1,Len(cCampoGet))
EndIf

//                           nTop ,nLeft,nBottom,nRight,nStyle,cLinhaOk      ,cTudoOk,cIniCpos     ,aAlter,nFreeze,nMax,cFieldOk,cSuperDel,cDelOk,oWnd                     ,aHeader,aCols}
oDlgRes:=MsNewGetDados():New(nLin1,nCol1,nLin2  ,nCol2 ,nStyle,              ,       ,"+ZAA_SEQRES",      ,       ,110 ,        ,         ,.t.   ,oFolder:aDialogs[nFolder],aHeader,aCols)
oDlgRes:oBrowse:bChange:={||U_MudaResB()}

@ nLin2+005,Int((nCol2-nCol1)/2)-30 BUTTON oButtProj Prompt "Calcular" SIZE 60,10 ACTION CalcSistema(oDlgTre:aHeader,oDlgTre:aCols) OF oFolder:aDialogs[nFolder] PIXEL

fAcumuRes()
fTrazRes()

Return

********************************************************************************
User Function MudaResB
// Muda o Browse - Folder Responsabilidades
********************************************************************************
Local lRet:=.T.
Local cCampo,cCampoGet

fObra()

If oDlgRes:nAt>Len(oDlgRes:aCols) ; oDlgRes:nAt:=Len(oDlgRes:aCols) ; EndIf

oDlgRes:aCols[oDlgRes:nAt][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_OBRA"})]   := cObra
oDlgRes:aCols[oDlgRes:nAt][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_SEQGUI"})] := If( Empty( cSeqTra ), cSeqGui, cSeqTra )
oDlgRes:oBrowse:Refresh()

Return lRet

********************************************************************************
Static Function fSalvarRes(cAlias,aHeader,aCols)
// Folder Responsabilidades
********************************************************************************
Local nPos,aGravados:={}  //Gravados

// Acumula o aCols corrente no aCols com todos os registros
fAcumuRes()
aCols:=Aclone(oRes_Cols)

dbSelectArea(cAlias)
dbSetOrder(2)	// ZAA_FILIAL+ZAA_PROJET+ZAA_OBRA+ZAA_SEQGUI+ZAA_SEQRES

If nOpc==5  //5=Exclui
Else
	For nPos:=1 to Len(aCols)
		cObra  		:= aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAA_OBRA"})]
		cLocacao	:= aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAA_SEQGUI"})]		
		cSeqRes		:= aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAA_SEQRES"})]
		cCodRes		:= aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAA_CODIGO"})]
		If !aCols[nPos,Len(aHeader)+1] .and. !Empty(cObra) .and. !Empty( cLocacao ) .and. !Empty(cSeqRes) .and. !Empty(cCodRes)  //!Deleted()
			dbSeek(xFILIAL(cAlias)+cProjet+cObra+cLocacao+cSeqRes)
			If Eof()
				RecLock(cAlias,.T.)
			Else
				RecLock(cAlias,.F.)
			EndIf
			fGravaTudo(cAlias,aHeader,aCols[nPos])  //Grava todos os campos do aCols
			(cAlias)->ZAA_FILIAL:=xFILIAL(cAlias)
			(cAlias)->ZAA_PROJET:=cProjet
			(cAlias)->ZAA_OBRA  :=cObra
			(cAlias)->ZAA_SEQGUI:= cLocacao
			(cAlias)->ZAA_SEQRES:= cSeqRes
			AAdd(aGravados,Recno())  //Gravados
			MsUnLock()
	     EndIf
	Next
EndIf

// Exclui os registros alterados

//RENATO RUY - 11/01/2013 - EXCLUSÃO DE RESPONSABILIDADES 

For nPos:=1 to Len(aResDel)
	DbSelectArea("ZAA")
	DbSetOrder(2)
	If DbSeek(xFILIAL(cAlias)+cProjet+aResDel[nPos][1]+aResDel[nPos][2]+aResDel[nPos][3])
	RecLock(cAlias,.F.)
		dbDelete()
	MsUnLock()
	EndIf
Next

//Deleta linha do acumulado do transporte - 27/03/13
cQuery := " SELECT SUBSTRING(ZLW_PROJET,5,2) FILIAL,ZLW_PROJET,ZLW_OBRA,ZLW_SEQGUI,SUM(ZLW_PRECUS) CUSTO FROM "+RetSQLName("ZLW")
cQuery += " WHERE "
cQuery += " ZLW_PROJET = '" + cProjet + "' AND "
cQuery += " D_E_L_E_T_ = '*' "
cQuery += " GROUP BY ZLW_FILIAL,ZLW_PROJET,ZLW_OBRA,ZLW_SEQGUI "

If Select("QRY2") > 0
	QRY2->(dbCloseArea())	 
endif

cQuery := ChangeQuery(cQuery)
TCQuery cQuery New Alias "QRY2" 

If Select("QRY") > 0

While QRY2->(!EOF())

DbSelectArea("ZAA")
DbSetOrder(2)

If DbSeek( QRY2->FILIAL + QRY2->ZLW_PROJET + QRY2->ZLW_OBRA + QRY2->ZLW_SEQGUI + "201") 
	RecLock("ZAA",.F.)
		dbDelete()
	MsUnLock()
EndIf

QRY2->(DBSKIP()) 
EndDo

EndIf 

//Grava linha do acumulado do transporte - 27/03/13 - Renato Ruy
cQuery := " SELECT SUBSTRING(ZLW_PROJET,5,2) FILIAL,ZLW_PROJET,ZLW_OBRA,ZLW_SEQGUI,SUM(ZLW_PRECUS) CUSTO FROM "+RetSQLName("ZLW")
cQuery += " WHERE "
cQuery += " ZLW_PROJET = '" + cProjet + "' AND "
cQuery += " D_E_L_E_T_ = '' "
cQuery += " GROUP BY ZLW_FILIAL,ZLW_PROJET,ZLW_OBRA,ZLW_SEQGUI "

If Select("QRY") > 0
	QRY->(dbCloseArea())	 
endif

cQuery := ChangeQuery(cQuery)
TCQuery cQuery New Alias "QRY" 

cCodigoZAB := ""
cCodigoZAB := AllTrim(GetMv("LC_ORCFRET"))
cDescriZAB := ""
cDESCCOZAB := ""
cResponZAB := ""

DbSelectArea("ZAB")
DbSetOrder(1)
DbSeek( xFilial("ZAB") + cCodigoZAB )

cDescriZAB := ZAB->ZAB_DESCRI
cDESCCOZAB := ZAB->ZAB_DESCCO
cResponZAB := ZAB->ZAB_RESPON

If Select("QRY") > 0

While QRY->(!EOF())

DbSelectArea("ZAA")
DbSetOrder(2)

If DbSeek( xFilial("ZAA") + QRY->ZLW_PROJET + QRY->ZLW_OBRA + QRY->ZLW_SEQGUI + "201") 
ZAA->(RecLock("ZAA",.F.))
Else
ZAA->(RecLock("ZAA",.T.))
EndIf
	ZAA->ZAA_FILIAL := xFilial("ZAA")
	ZAA->ZAA_PROJET := QRY->ZLW_PROJET
	ZAA->ZAA_OBRA   := QRY->ZLW_OBRA
	ZAA->ZAA_SEQRES := "201" //Para não duplicar responsabilidade de frete
	ZAA->ZAA_CODIGO := cCodigoZAB
	ZAA->ZAA_DESCRI := cDescriZAB
	ZAA->ZAA_DESCCO := cDESCCOZAB
	ZAA->ZAA_RESPON := cResponZAB
	ZAA->ZAA_SEQGUI := QRY->ZLW_SEQGUI
	ZAA->ZAA_VALOR  := QRY->CUSTO
ZAA->(MsUnlock())

QRY->(DBSKIP()) 
EndDo

EndIf
//COMENTADO FORMATO ANTIGO POIS APAGAVA REGISTROS DE FORMA INCORRETA.
/*
dbSeek(xFILIAL(cAlias)+cProjet)
While !Eof() .and. ZAA_FILIAL+ZAA_PROJET==xFILIAL(cAlias)+cProjet
	If Ascan(aGravados,{|x|x==Recno()})==0
		RecLock(cAlias,.F.)
		dbDelete()
		MsUnLock()
	EndIf
	dbSkip()
End*/

Return

********************************************************************************
STATIC FUNCTION fFolderDoc(nFolder,nLin1,nCol1,nLin2,nCol2)
// Folder Documentos
********************************************************************************
Local aCamposNao := {}
Local aCamposSim := {}
Local nStyle:=GD_INSERT + GD_UPDATE + GD_DELETE
Local cAlias,cChave,cCondicao,nIndice,cFiltro

nStyle:=If(nOpcManu==2,0,nStyle)  //2=Visualizar

cAlias   :="ZAI"
cChave   :=xFILIAL(cAlias)+cProjet
cCondicao:='ZAI_FILIAL+ZAI_PROJET=="'+cChave+'"'
nIndice  :=1  //ZAI_FILIAL+ZAI_PROJET+ZAI_OBRA+ZAI_SEQDOC
cFiltro  :=cCondicao

AAdd(aCamposSim,{"ZAI_OBRA"  ,"V"})
AAdd(aCamposSim,{"ZAI_SEQDOC","V"})
AAdd(aCamposSim,{"ZAI_APRESE",""})
AAdd(aCamposSim,{"ZAI_CODIGO",""})
AAdd(aCamposSim,{"ZAI_DESCRI",""})

aHeader:=fHeader(aCamposSim)
aCols:=fCols(aHeader,cAlias,nIndice,cChave,cCondicao,cFiltro)

If Len(aCols)==1
	cCampo   :="ZAI_SEQDOC"
	cCampoGet:=aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]
	If Empty(cCampoGet)
		aCols[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]:=StrZero(1,Len(cCampoGet))
	EndIf
EndIf

cCampo   :="ZAI_SEQDOC"
cCampoGet:=oDoc_Cols0[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]
If Empty(cCampoGet)
	oDoc_Cols0[1][Ascan(aHeader,{|x|AllTrim(x[2])==cCampo})]:=StrZero(1,Len(cCampoGet))
EndIf

//                           nTop ,nLeft,nBottom,nRight,nStyle,cLinhaOk      ,cTudoOk,cIniCpos     ,aAlter,nFreeze,nMax,cFieldOk,cSuperDel,cDelOk,oWnd                     ,aHeader,aCols}
oDlgDoc:=MsNewGetDados():New(nLin1,nCol1,nLin2  ,nCol2 ,nStyle,              ,       ,"+ZAI_SEQDOC",      ,       ,110 ,        ,         ,.t.   ,oFolder:aDialogs[nFolder],aHeader,aCols)
oDlgDoc:oBrowse:bChange:={||U_MudaDocB()}

fAcumuDoc()
fTrazDoc()

@ nLin2+005,Int((nCol2-nCol1)/2)-30 BUTTON oButtDoc Prompt "Documentos" SIZE 60,10 ACTION fVerDocum() OF oFolder:aDialogs[nFolder] PIXEL

Return

********************************************************************************
User Function MudaDocB
// Muda o Browse - Folder Documentos
********************************************************************************
Local lRet:=.T.
Local cCampo,cCampoGet

fObra()

If oDlgDoc:nAt>Len(oDlgDoc:aCols) ; oDlgDoc:nAt:=Len(oDlgDoc:aCols) ; EndIf

oDlgDoc:aCols[oDlgDoc:nAt][Ascan(oDlgDoc:aHeader,{|x|AllTrim(x[2])=="ZAI_OBRA"})]:=cObra
oDlgDoc:oBrowse:Refresh()

Return lRet

********************************************************************************
Static Function fSalvarDoc(cAlias,aHeader,aCols)
// Folder Documentos
********************************************************************************
Local nPos,aGravados:={}  //Gravados

// Acumula o aCols corrente no aCols com todos os registros
fAcumuDoc()
aCols:=Aclone(oDoc_Cols)

dbSelectArea(cAlias)
dbSetOrder(1)

If nOpc==5  //5=Exclui
Else
	For nPos:=1 to Len(aCols)
		cObra  :=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAI_OBRA"})]
		cSeqDoc:=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAI_SEQDOC"})]
		If !aCols[nPos,Len(aHeader)+1] .and. !Empty(cObra) .and. !Empty(cSeqDoc)  //!Deleted()
			dbSeek(xFILIAL(cAlias)+cProjet+cObra+cSeqDoc)
			If Eof()
				RecLock(cAlias,.T.)
			Else
				RecLock(cAlias,.F.)
			EndIf
			fGravaTudo(cAlias,aHeader,aCols[nPos])  //Grava todos os campos do aCols
			(cAlias)->ZAI_FILIAL:=xFILIAL(cAlias)
			(cAlias)->ZAI_PROJET:=cProjet
			(cAlias)->ZAI_OBRA  :=cObra
			(cAlias)->ZAI_SEQDOC:=cSeqDoc
			AAdd(aGravados,Recno())  //Gravados
			MsUnLock()
	     EndIf
	Next
EndIf

// Exclui os registros alterados
dbSeek(xFILIAL(cAlias)+cProjet)
While !Eof() .and. ZAI_FILIAL+ZAI_PROJET==xFILIAL(cAlias)+cProjet
	If Ascan(aGravados,{|x|x==Recno()})==0
		RecLock(cAlias,.F.)
		dbDelete()
		MsUnLock()
	EndIf
	dbSkip()
End

Return

********************************************************************************
User Function ZA0VALID(cCampo)
// Validações
********************************************************************************
Local lRet:=.T.
Local cCod,cDesc,cLoja,nValCar,nPerSeg,nValSeg

//Obs.:
//M->CAMPO: conteúdo do campo digitado no browse
//aCols   : conteúdo do campo ANTES de ser digitado no browse

Do Case
Case Upper(cCampo)==Upper("ZA0_PROSPE")
	If Type("ZA0_PROSPE")<>"U"  //Se a variável existe
		cCod :=M->ZA0_PROSPE
		cLoja:=M->ZA0_LOJAP
		SUS->(dbSeek(xFilial('SUS')+cCod+cLoja))
		SA1->(dbSeek(xFilial('SA1')+SUS->US_CODCLI+SUS->US_LOJACLI))
		M->ZA0_CLINOM	:= Iif(Empty(SUS->US_CODCLI) .and. Empty(SUS->US_LOJACLI),""				,SA1->A1_NOME)
		M->ZA0_PRONOM	:= Iif(Empty(SUS->US_CODCLI) .and. Empty(SUS->US_LOJACLI),SUS->US_NOME		,SA1->A1_NOME)
		M->ZA0_CLICGC	:= Iif(Empty(SUS->US_CODCLI) .and. Empty(SUS->US_LOJACLI),SUS->US_CGC		,SA1->A1_CGC)
		M->ZA0_CLIEND	:= Iif(Empty(SUS->US_CODCLI) .and. Empty(SUS->US_LOJACLI),SUS->US_END		,SA1->A1_END)
		M->ZA0_CLIINS	:= Iif(Empty(SUS->US_CODCLI) .and. Empty(SUS->US_LOJACLI),SUS->US_INSCR		,SA1->A1_INSCR)
		M->ZA0_CLIMUN	:= Iif(Empty(SUS->US_CODCLI) .and. Empty(SUS->US_LOJACLI),SUS->US_MUN		,SA1->A1_MUN)
		M->ZA0_CLIBAI	:= Iif(Empty(SUS->US_CODCLI) .and. Empty(SUS->US_LOJACLI),SUS->US_BAIRRO	,SA1->A1_BAIRRO)
		M->ZA0_CLIEST	:= Iif(Empty(SUS->US_CODCLI) .and. Empty(SUS->US_LOJACLI),SUS->US_EST		,SA1->A1_EST)
		M->ZA0_CLICEP	:= Iif(Empty(SUS->US_CODCLI) .and. Empty(SUS->US_LOJACLI),SUS->US_CEP 		,SA1->A1_CEP)
		M->ZA0_CLIEMA	:= Iif(Empty(SUS->US_CODCLI) .and. Empty(SUS->US_LOJACLI),SUS->US_EMAIL		,SA1->A1_EMAIL)
		M->ZA0_CLIDDD	:= Iif(Empty(SUS->US_CODCLI) .and. Empty(SUS->US_LOJACLI),SUS->US_DDD		,SA1->A1_DDD)
		M->ZA0_CLITEL	:= Iif(Empty(SUS->US_CODCLI) .and. Empty(SUS->US_LOJACLI),SUS->US_TEL		,SA1->A1_TEL)
		M->ZA0_CLIFAX	:= Iif(Empty(SUS->US_CODCLI) .and. Empty(SUS->US_LOJACLI),SUS->US_FAX		,SA1->A1_FAX)
		M->ZA0_CLI   	:= SUS->US_CODCLI
		M->ZA0_LOJA  	:= SUS->US_LOJACLI
		M->ZA0_CLICON	:= Iif(Empty(SUS->US_CODCLI) .and. Empty(SUS->US_LOJACLI),M->ZA0_CLICON		,SA1->A1_CONTATO)
//		M->ZA0_CLIDEP	:= Iif(Empty(SUS->US_CODCLI) .and. Empty(SUS->US_LOJACLI),""				,SA1->A1_DEPTCON)
		M->ZA0_VENDED	:= Iif(Empty(SUS->US_CODCLI) .and. Empty(SUS->US_LOJACLI),SUS->US_VEND		,SA1->A1_VEND)
		M->ZA0_NOMVEN	:= Posicione('SA3',1,xFilial('SA3')+M->ZA0_VENDED,'A3_NOME')
	EndIf
Case Upper(cCampo)==Upper("ZA0_LOJAP")
	If Type("ZA0_LOJAP")<>"U"  //Se a variável existe
		cCod :=M->ZA0_PROSPE
		cLoja:=M->ZA0_LOJAP
		SUS->(dbSeek(xFilial('SUS')+cCod+cLoja))
		SA1->(dbSeek(xFilial('SA1')+SUS->US_CODCLI+SUS->US_LOJACLI))
		M->ZA0_CLINOM	:= Iif(Empty(SUS->US_CODCLI) .and. Empty(SUS->US_LOJACLI),""				,SA1->A1_NOME)
		M->ZA0_PRONOM	:= Iif(Empty(SUS->US_CODCLI) .and. Empty(SUS->US_LOJACLI),SUS->US_NOME		,SA1->A1_NOME)
		M->ZA0_CLICGC	:= Iif(Empty(SUS->US_CODCLI) .and. Empty(SUS->US_LOJACLI),SUS->US_CGC		,SA1->A1_CGC)
		M->ZA0_CLIEND	:= Iif(Empty(SUS->US_CODCLI) .and. Empty(SUS->US_LOJACLI),SUS->US_END		,SA1->A1_END)
		M->ZA0_CLIINS	:= Iif(Empty(SUS->US_CODCLI) .and. Empty(SUS->US_LOJACLI),SUS->US_INSCR		,SA1->A1_INSCR)
		M->ZA0_CLIMUN	:= Iif(Empty(SUS->US_CODCLI) .and. Empty(SUS->US_LOJACLI),SUS->US_MUN		,SA1->A1_MUN)
		M->ZA0_CLIBAI	:= Iif(Empty(SUS->US_CODCLI) .and. Empty(SUS->US_LOJACLI),SUS->US_BAIRRO	,SA1->A1_BAIRRO)
		M->ZA0_CLIEST	:= Iif(Empty(SUS->US_CODCLI) .and. Empty(SUS->US_LOJACLI),SUS->US_EST		,SA1->A1_EST)
		M->ZA0_CLICEP	:= Iif(Empty(SUS->US_CODCLI) .and. Empty(SUS->US_LOJACLI),SUS->US_CEP 		,SA1->A1_CEP)
		M->ZA0_CLIEMA	:= Iif(Empty(SUS->US_CODCLI) .and. Empty(SUS->US_LOJACLI),SUS->US_EMAIL		,SA1->A1_EMAIL)
		M->ZA0_CLIDDD	:= Iif(Empty(SUS->US_CODCLI) .and. Empty(SUS->US_LOJACLI),SUS->US_DDD		,SA1->A1_DDD)
		M->ZA0_CLITEL	:= Iif(Empty(SUS->US_CODCLI) .and. Empty(SUS->US_LOJACLI),SUS->US_TEL		,SA1->A1_TEL)
		M->ZA0_CLIFAX	:= Iif(Empty(SUS->US_CODCLI) .and. Empty(SUS->US_LOJACLI),SUS->US_FAX		,SA1->A1_FAX)
		M->ZA0_CLI   	:= SUS->US_CODCLI
		M->ZA0_LOJA  	:= SUS->US_LOJACLI
		M->ZA0_CLICON	:= Iif(Empty(SUS->US_CODCLI) .and. Empty(SUS->US_LOJACLI),M->ZA0_CLICON		,SA1->A1_CONTATO)
		//M->ZA0_CLIDEP	:= Iif(Empty(SUS->US_CODCLI) .and. Empty(SUS->US_LOJACLI),""				,SA1->A1_DEPTCON)
		M->ZA0_VENDED	:= Iif(Empty(SUS->US_CODCLI) .and. Empty(SUS->US_LOJACLI),SUS->US_VEND		,SA1->A1_VEND)
		M->ZA0_NOMVEN	:= Posicione('SA3',1,xFilial('SA3')+M->ZA0_VENDED,'A3_NOME')
	EndIf
Case Upper(cCampo)==Upper("ZA0_CLI")
	If Type("ZA0_CLI")<>"U"  //Se a variável existe
		cCod :=M->ZA0_CLI
		cLoja:=M->ZA0_LOJA
		Posicione('SA1',1,xFilial('SA1')+cCod+cLoja,'A1_NOME')
		M->ZA0_CLINOM:=SA1->A1_NOME
		M->ZA0_CLICGC:=SA1->A1_CGC
		M->ZA0_CLIEND:=SA1->A1_END
		M->ZA0_CLIINS:=SA1->A1_INSCR
		M->ZA0_CLIMUN:=SA1->A1_MUN
		M->ZA0_CLIBAI:=SA1->A1_BAIRRO
		M->ZA0_CLIEST:=SA1->A1_EST
		M->ZA0_CLICEP:=SA1->A1_CEP 
		M->ZA0_CLIEMA:=SA1->A1_EMAIL
		M->ZA0_CLIDDD:=SA1->A1_DDD
		M->ZA0_CLITEL:=SA1->A1_TEL
		M->ZA0_CLIFAX:=SA1->A1_FAX
		M->ZA0_CLICON:=SA1->A1_CONTATO
		//M->ZA0_CLIDEP:=SA1->A1_DEPTCON ROBERTO MARQUES 04/06/2015
		M->ZA0_VENDED:=SA1->A1_VEND
		M->ZA0_NOMVEN:=Posicione('SA3',1,xFilial('SA3')+M->ZA0_VENDED,'A3_NOME')

		If Empty(M->ZA0_CLI)  //Se Código do Cliente não for preenchido, marca False no campo ZA0_CLIENTE
			M->ZA0_CLIENTE:=.F.  //Cliente S/N? (Criará o cliente no SA1 na geração do contrato)
		Else
			M->ZA0_CLIENTE:=.T.  //Cliente S/N? (Utilizará os dados do cliente do SA1 na geração do contrato)
		EndIf
	EndIf
Case Upper(cCampo)==Upper("ZA0_LOJA")
	If Type("ZA0_LOJA")<>"U"  //Se a variável existe
		cCod :=M->ZA0_CLI
		cLoja:=M->ZA0_LOJA
		Posicione('SA1',1,xFilial('SA1')+cCod+cLoja,'A1_NOME')
		M->ZA0_CLINOM:=SA1->A1_NOME
		M->ZA0_CLICGC:=SA1->A1_CGC
		M->ZA0_CLIEND:=SA1->A1_END
		M->ZA0_CLIINS:=SA1->A1_INSCR
		M->ZA0_CLIMUN:=SA1->A1_MUN
		M->ZA0_CLIBAI:=SA1->A1_BAIRRO
		M->ZA0_CLIEST:=SA1->A1_EST
		M->ZA0_CLICEP:=SA1->A1_CEP 
		M->ZA0_CLIEMA:=SA1->A1_EMAIL
		M->ZA0_CLIDDD:=SA1->A1_DDD
		M->ZA0_CLITEL:=SA1->A1_TEL
		M->ZA0_CLIFAX:=SA1->A1_FAX
		M->ZA0_CLICON:=SA1->A1_CONTATO
//		M->ZA0_CLIDEP:=SA1->A1_DEPTCON ROBERTO MARQUES 04/06/2015
		M->ZA0_VENDED:=SA1->A1_VEND
		M->ZA0_NOMVEN:=Posicione('SA3',1,xFilial('SA3')+M->ZA0_VENDED,'A3_NOME')
	EndIf
Case Upper(cCampo)==Upper("ZA0_VENDED")
	If Type("ZA0_VENDED")<>"U"  //Se a variável existe
		cCod:=M->ZA0_VENDED
		Posicione('SA3',1,xFilial('SA3')+cCod,'A3_NOME')
		M->ZA0_NOMVEN:=SA3->A3_NOME
	EndIf
Case Upper(cCampo)==Upper("ZA0_CLICON")
	If Type("ZA0_CLICON")<>"U"  //Se a variável existe
		M->ZA0_CLIEMA	:=	Posicione('DUE',2,xFilial('DUE')+M->ZA0_CLICON,'DUE_EMAIL')
		M->ZA0_CLIDDD	:= Posicione('DUE',2,xFilial('DUE')+M->ZA0_CLICON,'DUE_DDD')	 
		M->ZA0_CLITEL	:=	Posicione('DUE',2,xFilial('DUE')+M->ZA0_CLICON,'DUE_TEL')
	EndIf
Case Upper(cCampo)==Upper("ZA0_LOJA")
	If Type("ZA0_LOJA")<>"U"  //Se a variável existe
		cCod :=M->ZA0_CLI
		cLoja:=M->ZA0_LOJA
		Posicione('SA1',1,xFilial('SA1')+cCod+cLoja,'A1_NOME')
		M->ZA0_CLINOM:=SA1->A1_NOME
		M->ZA0_CLICGC:=SA1->A1_CGC
		M->ZA0_CLIEND:=SA1->A1_END
		M->ZA0_CLIINS:=SA1->A1_INSCR
		M->ZA0_CLIMUN:=SA1->A1_MUN
		M->ZA0_CLIBAI:=SA1->A1_BAIRRO
		M->ZA0_CLIEST:=SA1->A1_EST
		M->ZA0_CLICEP:=SA1->A1_CEP 
		M->ZA0_CLIEMA:=SA1->A1_EMAIL
	EndIf
Case Upper(cCampo)==Upper("ZA0_RECEIT")
	If Type("ZA0_RECEIT")<>"U"  //Se a variável existe
		M->ZA0_TIPOSE:=U_fTipoSe(M->ZA0_RECEIT,M->ZA0_TIPOSE)
		M->ZA0_MODPRO:=U_fModPro(M->ZA0_RECEIT,M->ZA0_MODPRO)
	EndIf
Case Upper(cCampo)==Upper("ZA0_TIPOSE") .and. M->ZA0_TIPOSE <> M->ZA0_RECEIT
	If M->ZA0_RECEIT $ "TO" 
		If !(M->ZA0_TIPOSE $ "G|U|P|M")
			MsgStop("ATENÇÃO: Tipo de serviço para Receita de Transportes só poderá ser G-Guindaste, U-Grua, P-Plataforma ou M-Marítima.")
			lRet := .F.
		EndIf
	Else
		MsgStop("ATENÇÃO: Só pode ser alterado o tipo do serviço para Receita igual a T-Transportes.")
		lRet := .F.
	EndIf
Case Upper(Subs(cCampo,1,3))==Upper("ZA4")
	lRet:=U_ZA4VALID(cCampo)
Case Upper(Subs(cCampo,1,3))==Upper("ZAM")
	lRet:=U_ZAMVALID(cCampo)
Case Upper(Subs(cCampo,1,3))==Upper("ZA5")
	lRet:=U_ZA5VALID(cCampo)
Case Upper(Subs(cCampo,1,3))==Upper("ZA1")
	lRet:=U_ZA1VALID(cCampo)
Case Upper(Subs(cCampo,1,3))==Upper("ZA6")
	lRet:=U_ZA6VALID(cCampo)
Case Upper(Subs(cCampo,1,3))==Upper("ZA7")
	lRet:=U_ZA7VALID(cCampo)
Case Upper(Subs(cCampo,1,3))==Upper("ZA3")
	lRet:=U_ZA3VALID(cCampo)
Case Upper(Subs(cCampo,1,3))==Upper("ZAK")
	lRet:=U_ZAKVALID(cCampo)
Case Upper(Subs(cCampo,1,3))==Upper("ZAE")
	lRet:=U_ZAEVALID(cCampo)
Case Upper(Subs(cCampo,1,3))==Upper("ZAA")
	lRet:=U_ZAAVALID(cCampo)
Case Upper(Subs(cCampo,1,3))==Upper("ZAI")
	lRet:=U_ZAIVALID(cCampo)
Case Upper(Subs(cCampo,1,3))==Upper("ZAG")
	lRet:=U_ZAGVALID(cCampo)
EndCase

Return(lRet)

********************************************************************************
USER FUNCTION fTipoSe(cReceita,cTipoSe)
// Validações
********************************************************************************
Local cRet
If cReceita$" TGU"
	cRet:=cReceita
Else
	cRet:=cTipoSe
EndIf
Return(cRet)

********************************************************************************
User Function fModPro(cReceita,cModPro)
// Validações
********************************************************************************
Local cRet
If cReceita$" TGU"
	cRet:="P"
Else
	cRet:=cModPro
EndIf
Return(cRet)

********************************************************************************
User Function ZA1VALID(cCampo)
// Validações
********************************************************************************
Local lRet:=.T.
Local cCod,cDesc,cEstado

Do Case
Case Upper(cCampo)==Upper("ZA1_CLIORI")
	If ValType(oDlgObr)=="O"  //Se o objeto já foi criado
		cCod :=M->ZA1_CLIORI
		cLoja:=oDlgObr:aCols[oDlgObr:nAt][Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_LOJORI"})]
		Posicione('SA1',1,xFilial('SA1')+cCod+cLoja,'A1_NOME')
		oDlgObr:aCols[oDlgObr:nAt][Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_NOMORI"})]:=SA1->A1_NOME
		oDlgObr:aCols[oDlgObr:nAt][Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_CGCORI"})]:=SA1->A1_CGC
		oDlgObr:aCols[oDlgObr:nAt][Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_ENDORI"})]:=SA1->A1_END
		oDlgObr:aCols[oDlgObr:nAt][Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_INSORI"})]:=SA1->A1_INSCR
		oDlgObr:aCols[oDlgObr:nAt][Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_MUNORI"})]:=SA1->A1_MUN
		oDlgObr:aCols[oDlgObr:nAt][Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_BAIORI"})]:=SA1->A1_BAIRRO
		oDlgObr:aCols[oDlgObr:nAt][Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_ESTORI"})]:=SA1->A1_EST
		oDlgObr:aCols[oDlgObr:nAt][Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_CEPORI"})]:=SA1->A1_CEP 
//		oDlgObr:aCols[oDlgObr:nAt][Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_CONORI"})]:=SA1->A1_CONTATO 
//		oDlgObr:aCols[oDlgObr:nAt][Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_DEPORI"})]:=SA1->A1_DEPTCON 
		oDlgObr:aCols[oDlgObr:nAt][Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_EMAORI"})]:=SA1->A1_EMAIL
		oDlgObr:aCols[oDlgObr:nAt][Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_DDDORI"})]:=SA1->A1_DDD
		oDlgObr:aCols[oDlgObr:nAt][Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_TELORI"})]:=SA1->A1_TEL
		oDlgObr:aCols[oDlgObr:nAt][Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_FAXORI"})]:=SA1->A1_FAX
	EndIf
Case Upper(cCampo)==Upper("ZA1_LOJORI")
	If ValType(oDlgObr)=="O"  //Se o objeto já foi criado
		cCod :=oDlgObr:aCols[oDlgObr:nAt][Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_CLIORI"})]
		cLoja:=M->ZA1_LOJORI
		Posicione('SA1',1,xFilial('SA1')+cCod+cLoja,'A1_NOME')
		oDlgObr:aCols[oDlgObr:nAt][Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_NOMORI"})]:=SA1->A1_NOME
		oDlgObr:aCols[oDlgObr:nAt][Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_CGCORI"})]:=SA1->A1_CGC
		oDlgObr:aCols[oDlgObr:nAt][Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_ENDORI"})]:=SA1->A1_END
		oDlgObr:aCols[oDlgObr:nAt][Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_INSORI"})]:=SA1->A1_INSCR
		oDlgObr:aCols[oDlgObr:nAt][Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_MUNORI"})]:=SA1->A1_MUN
		oDlgObr:aCols[oDlgObr:nAt][Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_BAIORI"})]:=SA1->A1_BAIRRO
		oDlgObr:aCols[oDlgObr:nAt][Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_ESTORI"})]:=SA1->A1_EST
		oDlgObr:aCols[oDlgObr:nAt][Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_CEPORI"})]:=SA1->A1_CEP 
//		oDlgObr:aCols[oDlgObr:nAt][Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_CONORI"})]:=SA1->A1_CONTATO 
//		oDlgObr:aCols[oDlgObr:nAt][Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_DEPORI"})]:=SA1->A1_DEPTCON 
		oDlgObr:aCols[oDlgObr:nAt][Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_EMAORI"})]:=SA1->A1_EMAIL
		oDlgObr:aCols[oDlgObr:nAt][Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_DDDORI"})]:=SA1->A1_DDD
		oDlgObr:aCols[oDlgObr:nAt][Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_TELORI"})]:=SA1->A1_TEL
		oDlgObr:aCols[oDlgObr:nAt][Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_FAXORI"})]:=SA1->A1_FAX
	EndIf
Case Upper(cCampo)==Upper("ZA1_ORIGEM")
	If ValType(oDlgObr)=="O"  //Se o objeto já foi criado
		cCod:=M->ZA1_ORIGEM
		cDesc  :=Posicione('ZA2',1,xFilial('ZA2')+cCod,'ZA2_DESCRI')
		cEstado:=Posicione('ZA2',1,xFilial('ZA2')+cCod,'ZA2_ESTADO')
		oDlgObr:aCols[oDlgObr:nAt][Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_MUNORI"})]:=cDesc
		oDlgObr:aCols[oDlgObr:nAt][Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_ESTORI"})]:=cEstado
	EndIf
Case Upper(cCampo)==Upper("ZA1_DESTIN")
	If ValType(oDlgObr)=="O"  //Se o objeto já foi criado
		cCod:=M->ZA1_DESTIN
		cDesc  :=Posicione('ZA2',1,xFilial('ZA2')+cCod,'ZA2_DESCRI')
		cEstado:=Posicione('ZA2',1,xFilial('ZA2')+cCod,'ZA2_ESTADO')
		oDlgObr:aCols[oDlgObr:nAt][Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_MUNDES"})]:=cDesc
		oDlgObr:aCols[oDlgObr:nAt][Ascan(oDlgObr:aHeader,{|x|AllTrim(x[2])=="ZA1_ESTDES"})]:=cEstado
	EndIf
EndCase

Return(lRet)

********************************************************************************
User Function ZA3VALID(cCampo)
// Validações
********************************************************************************
Local lRet:=.T.
Local cCod,cDesc

Do Case
Case Upper(cCampo)==Upper("ZA3_ROTA")
	cCod:=M->ZA3_ROTA
	cOrigem:=oDlgEta:aCols[oDlgEta:nAt][Ascan(oDlgEta:aHeader,{|x|AllTrim(x[2])=="ZA3_ORIGEM"})]
	cDestin:=oDlgEta:aCols[oDlgEta:nAt][Ascan(oDlgEta:aHeader,{|x|AllTrim(x[2])=="ZA3_DESTIN"})]
	Posicione('ZA3',1,xFilial('ZA3')+cOrigem+cDestin+cCod,'ZA3_ETAPA')
	If ZA3->(!Eof())
		MsgStop("ATENÇÃO: Rota já cadastrada !!")
		Return(.f.)
	EndIf
Case Upper(cCampo)==Upper("ZA3_ORIGEM")
	cCod:=M->ZA3_ORIGEM
	Posicione('ZA2',1,xFilial('ZA2')+cCod,'ZA2_DESCRI')
	M->ZA3_MUNORI:=ZA2->ZA2_DESCRI
	M->ZA3_ESTORI:=ZA2->ZA2_ESTADO
	If Type("oDlgEta")<>"U" .and. ValType(oDlgEta)=="O"  //Se o objeto já foi criado
		oDlgEta:aCols[oDlgEta:nAt][Ascan(oDlgEta:aHeader,{|x|AllTrim(x[2])=="ZA3_MUNORI"})]:=ZA2->ZA2_DESCRI
		oDlgEta:aCols[oDlgEta:nAt][Ascan(oDlgEta:aHeader,{|x|AllTrim(x[2])=="ZA3_ESTORI"})]:=ZA2->ZA2_ESTADO
	EndIf
Case Upper(cCampo)==Upper("ZA3_DESTIN")
	cCod:=M->ZA3_DESTIN
	Posicione('ZA2',1,xFilial('ZA2')+cCod,'ZA2_DESCRI')
	M->ZA3_MUNDES:=ZA2->ZA2_DESCRI
	M->ZA3_ESTDES:=ZA2->ZA2_ESTADO
	If Type("oDlgEta")<>"U" .and. ValType(oDlgEta)=="O"  //Se o objeto já foi criado
		oDlgEta:aCols[oDlgEta:nAt][Ascan(oDlgEta:aHeader,{|x|AllTrim(x[2])=="ZA3_MUNDES"})]:=ZA2->ZA2_DESCRI
		oDlgEta:aCols[oDlgEta:nAt][Ascan(oDlgEta:aHeader,{|x|AllTrim(x[2])=="ZA3_ESTDES"})]:=ZA2->ZA2_ESTADO
	EndIf
Case Upper(cCampo)==Upper("ZA3_DE")
	cCod:=M->ZA3_DE
	Posicione('ZA2',1,xFilial('ZA2')+cCod,'ZA2_DESCRI')
	M->ZA3_MUNDE:=ZA2->ZA2_DESCRI
	M->ZA3_ESTDE:=ZA2->ZA2_ESTADO
	If Type("oDlgEta")<>"U" .and. ValType(oDlgEta)=="O"  //Se o objeto já foi criado
		If Empty(ZA2->ZA2_DESCRI) .And. Empty(ZA2->ZA2_ESTADO)
			lRet := .F.
		Else
			oDlgEta:aCols[oDlgEta:nAt][Ascan(oDlgEta:aHeader,{|x|AllTrim(x[2])=="ZA3_MUNDE" })]:=ZA2->ZA2_DESCRI
			oDlgEta:aCols[oDlgEta:nAt][Ascan(oDlgEta:aHeader,{|x|AllTrim(x[2])=="ZA3_ESTDE" })]:=ZA2->ZA2_ESTADO
		EndIf
	EndIf
Case Upper(cCampo)==Upper("ZA3_ATE")
	cCod:=M->ZA3_ATE
	Posicione('ZA2',1,xFilial('ZA2')+cCod,'ZA2_DESCRI')
	M->ZA3_MUNATE:=ZA2->ZA2_DESCRI
	M->ZA3_ESTATE:=ZA2->ZA2_ESTADO
	If Type("oDlgEta")<>"U" .and. ValType(oDlgEta)=="O"  //Se o objeto já foi criado
		If Empty(ZA2->ZA2_DESCRI) .And. Empty(ZA2->ZA2_ESTADO)
			lRet := .F.
		Else
			oDlgEta:aCols[oDlgEta:nAt][Ascan(oDlgEta:aHeader,{|x|AllTrim(x[2])=="ZA3_MUNATE"})]:=ZA2->ZA2_DESCRI
			oDlgEta:aCols[oDlgEta:nAt][Ascan(oDlgEta:aHeader,{|x|AllTrim(x[2])=="ZA3_ESTATE"})]:=ZA2->ZA2_ESTADO
		EndIf
	EndIf
Case Upper(cCampo)==Upper("ZA3_TEMALE") .or. Upper(cCampo)==Upper("ZA3_TEMBLO") .or.;
	 Upper(cCampo)==Upper("ZA3_FATTAP")
	If Type("oDlgEta")<>"U" .and. ValType(oDlgEta)=="O"  //Se o objeto já foi criado
		If !Subs(oDlgEta:aCols[oDlgEta:nAt][Ascan(oDlgEta:aHeader,{|x|AllTrim(x[2])=="ZA3_RODOVI"})],1,6) $ GetMv("LC_BLOQSR")
			cCampoGet:="M->"+cCampo
			&cCampoGet:=oDlgEta:aCols[oDlgEta:nAt][Ascan(oDlgEta:aHeader,{|x|AllTrim(x[2])==cCampo})]
			MsgStop("ATENÇÃO: Opção exclusiva da Rodovia Anchieta (SP-160) !!")
			lRet:=.t.
		EndIf
	EndIf
Case Upper(cCampo)==Upper("ZA3_RODOVI")	
	If Type("oDlgEta")<>"U" .and. ValType(oDlgEta)=="O"  //Se o objeto já foi criado
		If !(AllTrim(M->ZA3_RODOVI) $ GetMv("LC_BLOQSR"))
			oDlgEta:aCols[oDlgEta:nAt][Ascan(oDlgEta:aHeader,{|x|AllTrim(x[2])=="ZA3_TEMBLO"})] := "N"
		EndIf
	EndIf	
EndCase

Return(lRet)

********************************************************************************
User Function ZA4VALID(cCampo)
// Validações
********************************************************************************
Local lRet:=.T.
Local cCod,cDesc,cEstado

Do Case
Case Upper(cCampo)==Upper("ZA4_ORIGEM")
	If ValType(oDlgRot)=="O"  //Se o objeto já foi criado
		cCod:=M->ZA4_ORIGEM
		cDesc  :=Posicione('ZA2',1,xFilial('ZA2')+cCod,'ZA2_DESCRI')
		cEstado:=Posicione('ZA2',1,xFilial('ZA2')+cCod,'ZA2_ESTADO')
		oDlgRot:aCols[oDlgRot:nAt][Ascan(oDlgRot:aHeader,{|x|AllTrim(x[2])=="ZA4_MUNORI"})]:=cDesc
		oDlgRot:aCols[oDlgRot:nAt][Ascan(oDlgRot:aHeader,{|x|AllTrim(x[2])=="ZA4_ESTORI"})]:=cEstado
	EndIf
Case Upper(cCampo)==Upper("ZA4_DESTIN")
	If ValType(oDlgRot)=="O"  //Se o objeto já foi criado
		cCod:=M->ZA4_DESTIN
		cDesc  :=Posicione('ZA2',1,xFilial('ZA2')+cCod,'ZA2_DESCRI')
		cEstado:=Posicione('ZA2',1,xFilial('ZA2')+cCod,'ZA2_ESTADO')
		oDlgRot:aCols[oDlgRot:nAt][Ascan(oDlgRot:aHeader,{|x|AllTrim(x[2])=="ZA4_MUNDES"})]:=cDesc
		oDlgRot:aCols[oDlgRot:nAt][Ascan(oDlgRot:aHeader,{|x|AllTrim(x[2])=="ZA4_ESTDES"})]:=cEstado
	EndIf
EndCase

Return(lRet)

********************************************************************************
User Function ZA5VALID(cCampo)
// Validações
********************************************************************************
Local lRet:=.T.
Local cCod,cDesc,nValCar,nPerSeg,nValSeg,dDtFim

Do Case
Case Upper(cCampo)==Upper("ZA5_SOLICT")
	If ValType(oDlgGui)=="O"  //Se o objeto já foi criado
		cCod :=M->ZA0_CLI+M->ZA0_LOJA
		cCond:=Posicione('SA1',1,xFilial('SA1')+cCod,'A1_COND')
		oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_CONPAG"})]:=cCond
	EndIf
Case Upper(cCampo)==Upper("ZA5_GUINDA")
	If ValType(oDlgGui)=="O"  //Se o objeto já foi criado
		cCod   :=M->ZA5_GUINDA
		cCodMao:=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_CODMAO"})]
		If !Empty(cCod) .and. !Empty(cCodMao)
			oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_CODMAO"})]:=Space(Len(cCodMao))
		EndIf
		If !Empty(cCod) .or. (Empty(cCod) .and. Empty(cCodMao))
			cDesc:=Posicione('ST9',1,xFilial('ST9')+cCod,'T9_NOME')
			oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_DESGUI"})]:=cDesc
		EndIf 
		//28-12-2011 - Maickon Queiroz Verifica se existe nota fiscal de saida para o Orçamento em questão, caso contrário não deixa revisar a AS - Solicitado pelo JR
		If !(Empty( oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_AS"  })] )) 
			ASG		:=  oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_AS"  })] 
			cFROTA 	:=  oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_GUINDA"  })]
			ZLG->(DBSETORDER(5))
			ZLG->(DbSeek(xFilial("ZLG")+ASG+cFROTA))
			While ZLG->(!EOF()) .And. ZLG->ZLG_NRAS == ASG .And. ZLG->ZLG_FROTA == cFROTA
				If ZLG->ZLG_STATUS == 'S'
					Msginfo("Frota "+ZLG->ZLG_FROTA+" não poderá ser alterada pois existe nota fiscal de saida")
					lRet:=.f.
				EndIf   
				ZLG->(DbSkip())
			EndDo
		EndIf
	EndIf
Case Upper(cCampo)==Upper("ZA5_CODMAO")
	If ValType(oDlgGui)=="O"  //Se o objeto já foi criado
		cCod   :=M->ZA5_CODMAO
		cCodGui:=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_GUINDA"})]
		If !Empty(cCod) .and. !Empty(cCodGui)
			MsgStop("ATENÇÃO: Informar Guindaste ou Mão-de-Obra !!")
			M->ZA5_CODMAO:=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_CODMAO"})]
			cCod:=Space(Len(cCod))
			lRet:=.f.
		EndIf
		If !Empty(cCod) .or. (Empty(cCod) .and. Empty(cCodGui))
			Posicione('SRJ',1,xFilial('SRJ')+cCod,'RJ_FUNCAO')
			oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_DESGUI"})]:=SRJ->RJ_DESC
//			oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRHOR" })]:=SRJ->RJ_SALARIO
		EndIf
	EndIf
Case Upper(cCampo)==Upper("ZA5_PERISS")
	If ValType(oDlgGui)=="O"  //Se o objeto já foi criado
		fCalcCus()
		fCalcGui()
		oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRISS"})]:=nValIss
	EndIf
Case Upper(cCampo)==Upper("ZA5_VRCARG")
	If ValType(oDlgGui)=="O"  //Se o objeto já foi criado
		nValCar:=M->ZA5_VRCARG
		nPerSeg:=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_PERSEG"})]
		nValSeg:=Round(nValCar*nPerSeg/100,2)
		oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRSEGU"})]:=nValSeg
	EndIf
Case Upper(cCampo)==Upper("ZA5_PERSEG")
	If ValType(oDlgGui)=="O"  //Se o objeto já foi criado
		nValCar:=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRCARG"})]
		nPerSeg:=M->ZA5_PERSEG
		nValSeg:=Round(nValCar*nPerSeg/100,2)
		oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRSEGU"})]:=nValSeg
	EndIf
Case Upper(cCampo)==Upper("ZA5_TIPOCA")
	If ValType(oDlgGui)=="O"  //Se o objeto já foi criado
		cTipoCa:=M->ZA5_TIPOCA
		dDtIni :=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_DTINI"})]
		nPreDia:=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_PREDIA"})]
		nMinDia:=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_MINDIA"})]

// correção Data Término - Cristiam Rossi em 15/04/2011
		if     cTipoca == "H"
			For nA:=1 to nRes //10
				dDtValid:= DataValida(dDtPar,.t.)
				If dDtValid <> dDtPar
					dDtPar := dDtValid
					dDtFim := dDtPar
					nA --
					Loop
				EndIf
				dDtFim := dDtPar
				dDtPar++
			Next
			
		elseif cTipoca == "M"
			dDtFim := dDtIni + nPreDia * 30
		else	// é Dias ou Fechado
			dDtFim := dDtIni + nPreDia
		endif
			/*
			nRes := nPreDia / nMinDia
			if nRes == int(nRes)
				nRes--
			endif

			dDtFim := dDtIni + int(nRes)
		elseif cTipoca == "M"
			dDtFim := dDtIni + nPreDia * 30
		else	// é Dias ou Fechado
			dDtFim := dDtIni + nPreDia
		endif
         */
//		Do Case
//		Case cTipoCa=="H" ; dDtFim:=dDtIni
//		Case cTipoCa=="D" 
	//		dDtFim:=dDtIni+nPreDia
//		Case cTipoCa=="M"
//			_nAno := Year(dDtIni)
//			_nMes := Month(dDtIni) + npreDia
//			While _nMes > 12
//				_nAno++
//				_nMes-=12
//			EndDo
//			dDtFim:=CtoD(AllTrim(Str(day(dDtini)))+"/"+AllTrim(Str(_nMes))+"/"+AllTrim(Str(_nAno)))
//		Otherwise         
//			dDtFim:=dDtIni
//		EndCase
		//oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_DTFIM"})]:=dDtFim
	EndIf
Case Upper(cCampo)==Upper("ZA5_PREDIA")
	If ValType(oDlgGui)=="O"  //Se o objeto já foi criado
		nPreDia:=M->ZA5_PREDIA
		dDtIni :=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_DTINI"})]
		cTipoCa:=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_TIPOCA"})]
		nMinDia:=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_MINDIA"})]

// correção Data Término - Cristiam Rossi em 15/04/2011
		if  cTipoca == "H"
			/*nRes := nPreDia / nMinDia
			if nRes == int(nRes)
				nRes--
			endif 

			nVlRes:= 0
			dDtPar:= dDtIni
			For nA:=1 to int(nRes) //10
				dDtValid:= DataValida(dDtPar,.t.)
				If dDtValid <>dDtPar
					nVlRes += DAY(dDtValid)-DAY(dDtPar)
				Endif
				dDtPar++			
			Next

			dDtFim := dDtIni + int(nRes)+ int(nVlRes)
			*/
			
			nRes := int(nPreDia / nMinDia)
			dDtPar:= dDtIni
			
			For nA:=1 to nRes //10
				dDtValid:= DataValida(dDtPar,.t.)
				If dDtValid <> dDtPar
					dDtPar := dDtValid
					dDtFim := dDtPar
					nA --
					Loop
				EndIf
				dDtFim := dDtPar
				dDtPar++
			Next
			If nRes = 0
			    dDtFim := dDtIni
		    Endif
			
		elseif cTipoca == "M"
			dDtFim := dDtIni + nPreDia * 30
		else	// é Dias ou Fechado
			dDtFim := dDtIni + nPreDia
		endif

//		oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_DTFIM"})]:=dDtFim
	EndIf
Case Upper(cCampo)==Upper("ZA5_DTINI")
	If ValType(oDlgGui)=="O"  //Se o objeto já foi criado
		dDtIni :=M->ZA5_DTINI
		nPreDia:=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_PREDIA"})]
		cTipoCa:=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_TIPOCA"})]
		nMinDia:=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_MINDIA"})]

// correção Data Término - Cristiam Rossi em 15/04/2011
		if     cTipoca == "H"
			
			nRes := int(nPreDia / nMinDia)
			dDtPar:= dDtIni
			
			For nA:=1 to nRes //10
				dDtValid:= DataValida(dDtPar,.t.)
				If dDtValid <> dDtPar
					dDtPar := dDtValid
					dDtFim := dDtPar
					nA --
					Loop
				EndIf
				dDtFim := dDtPar
				dDtPar++
			Next
		    If nRes = 0
			    dDtFim := dDtIni
		    Endif
			/*nRes := nPreDia / nMinDia
			if nRes == int(nRes)
				nRes--
			endif
   			nVlRes:= 0
			dDtPar:= dDtIni  
			
			For nA:=1 to int(nRes) //10
				dDtValid:= DataValida(dDtPar,.t.)
				If dDtValid <> dDtPar
					nVlRes += DAY(dDtValid)-DAY(dDtPar)
				Endif
				dDtPar++			
			Next

			dDtFim := dDtIni + int(nRes)+ int(nVlRes)
			*/
			
		elseif cTipoca == "M"
			dDtFim := dDtIni + nPreDia * 30
		else	// é Dias ou Fechado
			dDtFim := dDtIni + nPreDia
		endif

//		oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_DTFIM"})]:=dDtFim
	EndIf

Case Upper(cCampo)==Upper("ZA5_DTFIM")
	if ValType(oDlgGui)=="O"  //Se o objeto já foi criado
		dDtIni :=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_DTINI"})]
		dDtFim :=M->ZA5_DTFIM

		if dDtIni > dDtFim
			MsgStop("A Data Inicial não pode ser maior que a Data Final","Data Inicial/Final Inválida!")
			Return .F.
		endif
	endif

Case Upper(cCampo)==Upper("ZA5_MINDIA")	// adicionado tratamento para ajustar a data término, somente em caso de horas - Cristiam Rossi em 16/05/2011
	if ValType(oDlgGui)=="O"  //Se o objeto já foi criado
		nPreDia:=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_PREDIA"})]
		cTipoCa:=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_TIPOCA"})]
		dDtIni :=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_DTINI"})]

        if cTipoCa == "H" 
			nRes := nPreDia / M->ZA5_MINDIA
			if nRes != int(nRes)
				nRes := int(++nRes)		// Arredondo, considerando as horas excedentes como novo dia de trabalho
			endif
			nRes--	// Considera a DTINI como dia útil, então tiramos ele do acréscimo ao DTFIM
//			oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_DTFIM"})] := dDtIni + nRes	// atualizo DTFIM
		endif
	endif
Case Upper(cCampo)==Upper("ZA5_MINMES")	// adicionado tratamento para ajustar a data término, somente em caso de horas - Cristiam Rossi em 16/05/2011
	if ValType(oDlgGui)=="O"  //Se o objeto já foi criado
		nPreDia:=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_PREDIA"})]
		cTipoCa:=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_TIPOCA"})]
		dDtIni :=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_DTINI"})]

        if cTipoCa == "H" 
			nRes := nPreDia / M->ZA5_MINMES
			if nRes != int(nRes)
				nRes := int(++nRes)		// Arredondo, considerando as horas excedentes como novo dia de trabalho
			endif
			nRes--	// Considera a DTINI como dia útil, então tiramos ele do acréscimo ao DTFIM
//			oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_DTFIM"})] := dDtIni + nRes	// atualizo DTFIM
		endif
	endif
Case Upper(cCampo)==Upper("ZA5_QVEICP")
	If ValType(oDlgGui)=="O"  //Se o objeto já foi criado
		nValVei:=M->ZA5_QVEICP
		nValUni:=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRUNIT"})]
		nValTot:=Round(nValVei*nValUni,2)
		oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRPESO"})]:=nValTot
	EndIf
Case Upper(cCampo)==Upper("ZA5_VRUNIT")
	If ValType(oDlgGui)=="O"  //Se o objeto já foi criado
		nValUni:=M->ZA5_VRUNIT
		nValVei:=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_QVEICP"})]
		nValTot:=Round(nValVei*nValUni,2)
		oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRPESO"})]:=nValTot
	EndIf
EndCase

Return(lRet)

********************************************************************************
User Function ZA6VALID(cCampo)
// Validações
********************************************************************************
Local lRet:=.T.
Local cCod,cDesc
Local cTpTrans,cTpFluxo

Do Case
Case Upper(cCampo)==Upper("ZA6_SOLICT")
	If ValType(oDlgTra)=="O"  //Se o objeto já foi criado
		cCod :=M->ZA0_CLI+M->ZA0_LOJA
		cCond:=Posicione('SA1',1,xFilial('SA1')+cCod,'A1_COND')
		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_CONPAG"})]:=cCond
	EndIf 


Case Upper(cCampo)==Upper("ZA6_ORIGEM")
	If ValType(oDlgTra)=="O"  //Se o objeto já foi criado
		cCod:=M->ZA6_ORIGEM          
		
		// Forcar a exclusao dos itinerarios na alteracao do campo ZA6_ORIGEM - Frank Zwarg Fuga - 04/04/2016
		If oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ORIGEM"})] <> M->ZA6_ORIGEM .and. !empty(M->ZA6_ORIGEM)
		
			// Verificar se existe algum movimento no itinerario para o estorno.
			_lExclZAM := .F.
			For _nX:=1 to Len(oDlgTre:aCols)
				If !oDlgTre:aCols[_nX][len(oDlgTre:aHeader)+1] .and. !empty(oDlgTre:aCols[_nX][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DE"})]) .and. oDlgTre:aCols[_nX][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_OBRA"})] == oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_OBRA"})]
					_lExclZAM := .T.
				EndIf
			Next
		
			If _lExclZAM
				If MsgYesNo("Confirma a exclusão dos Itinerários da origem/destino anteriores?","O conteúdo do campo Origem foi modificado.")
					If Empty(aCols)
						oDlgTre:aCols := {}
						For nPos:=1 to Len(oDlgTre:aHeader)
							(cAlias)->(AAdd(oDlgTre:aCols,CriaVar(oDlgTre:aHeader[nPos,2])))
						Next
						AAdd(oDlgTre:aCols,.F.  )
					EndIf
				Else 
					_lExclZAM := .F.
					Return .F.
				EndIF
			EndIf
		EndIF		
		
		cDesc  :=Posicione('ZA2',1,xFilial('ZA2')+cCod,'ZA2_DESCRI')
		cEstado:=Posicione('ZA2',1,xFilial('ZA2')+cCod,'ZA2_ESTADO')
//		oDlgCon:aCols[1][Ascan(oDlgCon:aHeader,{|x|Alltrim(x[2])=="ZAE_TRANSP"})]:=gdFieldGet("ZA6_TRANSP", n, .F., aHeader, aCols) // oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TRANSP"})]
//		oDlgCon:aCols[1][Ascan(oDlgCon:aHeader,{|x|Alltrim(x[2])=="ZAE_DESTRA"})]:=Posicione('ST9',1,xFilial('ST9')+gdFieldGet("ZA6_TRANSP", n, .F., aHeader, aCols),'T9_NOME')		
  //		oDlgCon:oBrowse:Refresh()	
		If Empty(cDesc) .And. Empty(cEstado)
			lRet := .F.                      
		Else
			oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_MUNORI"})]:=cDesc
			oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ESTORI"})]:=cEstado
			oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_CONPAG"})]:=ZA0->ZA0_CONPAG
			oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TIPPAG"})]:=ZA0->ZA0_TIPPAG
			oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TPFRET"})]:=ZA0->ZA0_TPFRET
			
		EndIf	
		ATUITEM("ZA6_ORIGEM",M->ZA6_ORIGEM) // Frank Zwarg Fuga 10/12/2015	
	EndIf
Case Upper(cCampo)==Upper("ZA6_DESTIN")
	If ValType(oDlgTra)=="O"  //Se o objeto já foi criado
		If Empty(Alltrim(M->ZA6_ORIGEM)) 
			MsgAlert("Origem deve ser preenchidos !","Atenção!")
			lRet := .F.
		Else	 
			cCod:=M->ZA6_DESTIN
			
			// Forcar a exclusao dos itinerarios na alteracao do campo ZA6_DESTIN - Frank Zwarg Fuga - 04/04/2016
			If oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_DESTIN"})] <> M->ZA6_DESTIN .and. !empty(M->ZA6_DESTIN)
		
				// Verificar se existe algum movimento no itinerario para o estorno.
				_lExclZAM := .F.
				For _nX:=1 to Len(oDlgTre:aCols)
					If !oDlgTre:aCols[_nX][len(oDlgTre:aHeader)+1] .and. !empty(oDlgTre:aCols[_nX][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DE"})]) .and. oDlgTre:aCols[_nX][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_OBRA"})] == oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_OBRA"})]
						_lExclZAM := .T.
					EndIf
				Next
		
				If _lExclZAM
					If MsgYesNo("Confirma a exclusão dos Itinerários da origem/destino anteriores?","O conteúdo do campo Destino foi modificado.")
						If Empty(aCols)
							oDlgTre:aCols := {}
							For nPos:=1 to Len(oDlgTre:aHeader)
								(cAlias)->(AAdd(oDlgTre:aCols,CriaVar(oDlgTre:aHeader[nPos,2])))
							Next
							AAdd(oDlgTre:aCols,.F.  )
						EndIf
					Else 
						_lExclZAM := .F.
						Return .F.
					EndIF
				EndIf
			EndIF		

			
			
			cDesc  :=Posicione('ZA2',1,xFilial('ZA2')+cCod,'ZA2_DESCRI')
			cEstado:=Posicione('ZA2',1,xFilial('ZA2')+cCod,'ZA2_ESTADO')
			
			If Empty(cDesc) .And. Empty(cEstado)
				lRet := .F.
			Else
				
				_DescRt := AllTrim(oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_MUNORI"})])+"-"+;
						   AllTrim(oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ESTORI"})])+" X "+;
						   AllTrim(cDesc)+"-"+AllTrim(cEstado)
				oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_MUNDES"})]:=cDesc
				oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ESTDES"})]:=cEstado
				oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_DESCRO"})]:=_DescRt

				cTpTrans := gdFieldGet("ZA6_TPTRAN" , oDlgTra:nAt, .F., oDlgTra:aHeader, oDlgTra:aCols) 		//AllTrim(M->ZA6_TPTRAN)
				cTpTraC  := gdFieldGet("ZA6_TPTRAC" , oDlgTra:nAt, .F., oDlgTra:aHeader, oDlgTra:aCols) 		// Cristiam Rossi em 05/04/2016
				cTpFluxo := gdFieldGet("ZA6_TIPFLU" , oDlgTra:nAt, .F., oDlgTra:aHeader, oDlgTra:aCols) 		//AllTrim(M->ZA6_TIPFLU)
				dDtIni	 :=	gdFieldGet("ZA6_DTINI"  , oDlgTra:nAt, .F., oDlgTra:aHeader, oDlgTra:aCols)		//M->ZA6_DTINI
				COrig    :=	gdFieldGet("ZA6_ORIGEM" , oDlgTra:nAt, .F., oDlgTra:aHeader, oDlgTra:aCols)		//M->ZA6_ORIGEM
				cCodCli	:= 	AllTrim(ZA0->ZA0_CLI)
				cLojCli	 := AllTrim(ZA0->ZA0_LOJA)
				cTabVen	 := gdFieldGet("ZA6_TABVEN" , oDlgTra:nAt, .F., oDlgTra:aHeader, oDlgTra:aCols)
				cVerTab	 := gdFieldGet("ZA6_VERVEN" , oDlgTra:nAt, .F., oDlgTra:aHeader, oDlgTra:aCols)
				cTpTran  := gdFieldGet("ZA6_TRANSP" , oDlgTra:nAt, .F., oDlgTra:aHeader, oDlgTra:aCols)
				_cTipLkm := gdFieldGet("ZA6_TIPLKM" , oDlgTra:nAt, .F., oDlgTra:aHeader, oDlgTra:aCols)


				ZT0->( dbSetOrder(1) )	//  ZT0_FILIAL+ZT0_CODTAB+ZT0_VERTAB+ZT0_CODCLI+ZT0_LOJCLI+ZT0_TIPTAB+ZT0_ITEMTB
				ZT0->( dbSeek( xFilial("ZT0") + cTabVen + cVerTab + cCodCLi + cLojCli + cTpTrans, .T. ) )
				while ! ZT0->( EOF() ) .and. ZT0->( ZT0_FILIAL+ZT0_CODTAB+ZT0_VERTAB+ZT0_CODCLI+ZT0_LOJCLI+ZT0_TIPTAB ) ==  xFilial("ZT0") + cTabVen + cVerTab + cCodCLi + cLojCli + cTpTrans 
					if ZT0->ZT0_TIPFLU == cTpFluxo .and. ;
						ZT0->ZT0_INIVIG <= dDtIni .and. ;
						( ZT0->ZT0_FIMVIG >= dDtIni .or. Empty(ZT0->ZT0_FIMVIG) ) .and. ;
						 ZT0->ZT0_CODORI == cOrig .and. ZT0->ZT0_CODDES == cCod .and. ZT0->ZT0_TIPVEI==cTpTran .and. ZT0->ZT0_MSBLQL=='2' 
						 
						If _cTipLkm <> "N"
						 	If ZT0->ZT0_TIPLKM <> _cTipLkm
						 		ZT0->(dbSkip())
						 		Loop
						 	EndIF
						 EndIF						 
			
			            If VALQJUE()
							oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABV"})] := ZT0->ZT0_ITEMTB
							oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABC"})] := ZT0->ZT0_ITTABC
							oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TABCOM"})] := ZT0->ZT0_TABCOM
							oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VERCOM"})] := ZT0->ZT0_VERCOM
							
							If ZT0->ZT0_TIPREG == "5"                                 
								oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_SKMVEN"})]	:= ZT0->ZT0_QTDKM
							EndIf   

							// Posicionar na ZT1 correspondente
							If !empty(ZT0->ZT0_TABCOM) .and. !empty(ZT0->ZT0_VERCOM) .and. !empty(ZT0->ZT0_ITTABC)
								_aTemp := GetArea()   
								dbSelectArea("ZT1")
								dbSetOrder(1)                                                                                
								dbSeek( xFilial("ZT1") + ZT0->ZT0_TABCOM + ZT0->ZT0_VERCOM)
								_lAchou := .F.
								While !Eof() .and. ZT1_FILIAL+ZT1_CODTAB+ZT1_VERTAB == xFilial("ZT1")+ZT0->ZT0_TABCOM + ZT0->ZT0_VERCOM
//									If ZT1_TIPTAB == cTpTrans .and. ZT1_ITEMTB == ZT0->ZT0_ITTABC .and. ZT1_CODCLI == cCodCli .and. ZT1_LOJCLI == cLojCli
//									If ZT1_TIPTAB == cTpTraC .and. ZT1_ITEMTB == ZT0->ZT0_ITTABC .and. ZT1_CODCLI == cCodCli .and. ZT1_LOJCLI == cLojCli
									If ZT1_ITEMTB == ZT0->ZT0_ITTABC .and. ZT1_CODCLI == cCodCli .and. ZT1_LOJCLI == cLojCli		// Cristiam Rossi em 06/04/2016
										_lAchou := .T.
										Exit
									EndIF
									dbSkip()
								EndDo
								If _lAchou
									If ZT1->ZT1_TIPREG == "5"
										oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_SKMCOM"})]	:= ZT1->ZT1_QTDKM									
									EndIF
								EndIF
								RestArea(_aTemp)
							EndIf
							
						EndIF
						exit
					endif
					ZT0->( dbSkip() )
				end

			EndIf
			
		Endif	
	EndIf
Case Upper(cCampo)==Upper("ZA6_QUANT")
	If ValType(oDlgTra)=="O"  //Se o objeto já foi criado
		nQuant :=M->ZA6_QUANT
		nValUni:=oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VRUNIT"})]
		nValTot:=nQuant*nValUni
		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VRTOTA"})]:=nValTot
	EndIf
Case Upper(cCampo)==Upper("ZA6_VRUNIT")
	If ValType(oDlgTra)=="O"  //Se o objeto já foi criado
		nQuant :=oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_QUANT" })]
		nValUni:=M->ZA6_VRUNIT
		nValTot:=nQuant*nValUni
		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VRTOTA"})]:=nValTot
	EndIf
Case Upper(cCampo)==Upper("ZA6_CLIORI")
	If ValType(oDlgTra)=="O"  //Se o objeto já foi criado
		cCod :=M->ZA6_CLIORI
		cLoja:=oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_LOJORI"})]
		Posicione('SA1',1,xFilial('SA1')+cCod+cLoja,'A1_NOME')
		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_NOMORI"})]:=SA1->A1_NOME  
//		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_CGCORI"})]:=SA1->A1_CGC
//		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ENDORI"})]:=SA1->A1_END
//		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_INSORI"})]:=SA1->A1_INSCR
//		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_MUNOR2"})]:=SA1->A1_MUN
//		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_BAIORI"})]:=SA1->A1_BAIRRO
//		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ESTOR2"})]:=SA1->A1_EST
		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_CEPORI"})]:=SA1->A1_CEP 
//		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_CONORI"})]:=SA1->A1_CONTATO 
//		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_DEPORI"})]:=SA1->A1_DEPTCON 
//		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_EMAORI"})]:=SA1->A1_EMAIL
//		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_DDDORI"})]:=SA1->A1_DDD
//		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TELORI"})]:=SA1->A1_TEL
//		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_FAXORI"})]:=SA1->A1_FAX
	EndIf
Case Upper(cCampo)==Upper("ZA6_LOJORI")
	If ValType(oDlgTra)=="O"  //Se o objeto já foi criado
		cCod :=oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_CLIORI"})]
		cLoja:=M->ZA6_LOJORI
		Posicione('SA1',1,xFilial('SA1')+cCod+cLoja,'A1_NOME')
		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_NOMORI"})]:=SA1->A1_NOME
//		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_CGCORI"})]:=SA1->A1_CGC
//		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ENDORI"})]:=SA1->A1_END
//		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_INSORI"})]:=SA1->A1_INSCR
//		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_MUNOR2"})]:=SA1->A1_MUN
//		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_BAIORI"})]:=SA1->A1_BAIRRO
//		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ESTOR2"})]:=SA1->A1_EST
		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_CEPORI"})]:=SA1->A1_CEP 
//		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_CONORI"})]:=SA1->A1_CONTATO 
//		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_DEPORI"})]:=SA1->A1_DEPTCON 
//		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_EMAORI"})]:=SA1->A1_EMAIL
//		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_DDDORI"})]:=SA1->A1_DDD
//		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TELORI"})]:=SA1->A1_TEL
//		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_FAXORI"})]:=SA1->A1_FAX
	EndIf
Case Upper(cCampo)==Upper("ZA6_CLIDES")
	If ValType(oDlgTra)=="O"  //Se o objeto já foi criado
		cCod :=M->ZA6_CLIDES
		cLoja:=oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_LOJDES"})]
		Posicione('SA1',1,xFilial('SA1')+cCod+cLoja,'A1_NOME')
		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_NOMDES"})]:=SA1->A1_NOME
		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_CGCDES"})]:=SA1->A1_CGC
		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ENDDES"})]:=SA1->A1_END
		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_INSDES"})]:=SA1->A1_INSCR
		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_MUNDE2"})]:=SA1->A1_MUN
		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_BAIDES"})]:=SA1->A1_BAIRRO
		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ESTDE2"})]:=SA1->A1_EST
		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_CEPDES"})]:=SA1->A1_CEP 
//		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_CONDES"})]:=SA1->A1_CONTATO 
//		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_DEPDES"})]:=SA1->A1_DEPTCON 
		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_EMADES"})]:=SA1->A1_EMAIL
		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_DDDDES"})]:=SA1->A1_DDD
		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TELDES"})]:=SA1->A1_TEL
//		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_FAXDES"})]:=SA1->A1_FAX

		// Chamada da funcao que verifica as formulas especificas por cliente.
    	U_LOCTF04(readvar(),"ZA6")

	EndIf
Case Upper(cCampo)==Upper("ZA6_LOJDES")
	If ValType(oDlgTra)=="O"  //Se o objeto já foi criado
		cCod :=oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_CLIDES"})]
		cLoja:=M->ZA6_LOJDES
		Posicione('SA1',1,xFilial('SA1')+cCod+cLoja,'A1_NOME')
		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_NOMDES"})]:=SA1->A1_NOME
		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_CGCDES"})]:=SA1->A1_CGC
		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ENDDES"})]:=SA1->A1_END
		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_INSDES"})]:=SA1->A1_INSCR
		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_MUNDE2"})]:=SA1->A1_MUN
		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_BAIDES"})]:=SA1->A1_BAIRRO
		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ESTDE2"})]:=SA1->A1_EST
		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_CEPDES"})]:=SA1->A1_CEP 
//		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_CONDES"})]:=SA1->A1_CONTATO 
//		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_DEPDES"})]:=SA1->A1_DEPTCON 
		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_EMADES"})]:=SA1->A1_EMAIL
		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_DDDDES"})]:=SA1->A1_DDD
		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TELDES"})]:=SA1->A1_TEL
//oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_FAXDES"})]:=SA1->A1_FAX

		// Chamada da funcao que verifica as formulas especificas por cliente.
    	U_LOCTF04(readvar(),"ZA6")

	EndIf
	
	Case Upper(cCampo)=="ZA6_TPTRAN"
		If Type("ZA6_TPTRAN")<>"U"  //Se a variável existe
			cTPTrans := M->ZA6_TPTRAN 
			if Empty(AllTrim(cTpTrans))
				MsgStop("O Campo Tipo de Transporte deve ser preenchidos ! ")
	
	        	lRet := .F.
	    	Endif                              
			
			// Chamada da funcao que verifica as formulas especificas por cliente, deve ser chamado antes da ATUITEM()
	    	U_LOCTF04(readvar(),"ZA6")

	    	ATUITEM("ZA6_TPTRAN",M->ZA6_TPTRAN) // Frank Zwarg Fuga 10/12/2015
	    	
		Endif              

	Case Upper(cCampo)=="ZA6_TPTRAC"					// Copiado e ajustado do campo ZA6_TPTRAN  p/ ZA6_TPTRAC - Cristiam Rossi em 05/04/2016
		If Type("ZA6_TPTRAC")<>"U"  //Se a variável existe
			cTPTrans := M->ZA6_TPTRAC
			if Empty(AllTrim(cTpTrans))
				MsgStop("O Campo Tipo de Transporte de Compra deve ser preenchido! ")
	        	lRet := .F.
	    	Endif                              
			
			// Chamada da funcao que verifica as formulas especificas por cliente, deve ser chamado antes da ATUITEM()
	    	U_LOCTF04(readvar(),"ZA6")

	    	ATUITEM("ZA6_TPTRAC",M->ZA6_TPTRAC) // Frank Zwarg Fuga 10/12/2015
	    	
		Endif              
	// ----------------------------------------------------------------------------	
	Case Upper(cCampo)=="ZA6_TPFRET"
		If Type("ZA6_TPTRAN")<>"U"  //Se a variável existe
			// Chamada da funcao que verifica as formulas especificas por cliente.
	    	U_LOCTF04(readvar(),"ZA6")
		Endif
	Case Upper(cCampo)=="ZA6_EMERGE"
		If Type("ZA6_EMERGE")<>"U"  //Se a variável existe
			// Chamada da funcao que verifica as formulas especificas por cliente.
	    	U_LOCTF04(readvar(),"ZA6")
		Endif
	Case Upper(cCampo)=="ZA6_EMERG2"
		If Type("ZA6_EMERG2")<>"U"  //Se a variável existe
			// Chamada da funcao que verifica as formulas especificas por cliente.
	    	U_LOCTF04(readvar(),"ZA6")
		Endif                                                                       
	// -----------------------------------------------------------------------------		
	Case Upper(cCampo)=="ZA6_TIPFLU"
		If Type("ZA6_TIPFLU")<>"U"  //Se o objeto já foi criado
			cTPFluxo := M->ZA6_TIPFLU 
			if Empty(AllTrim(cTPFluxo))		
				MsgAlert("O Campo Tipo de Fluxo deve ser preenchidos !","Atenção!")
	        	lRet := .F.
	    	Endif                 
	    	U_LOCTF04(readvar(),"ZA6")
	    	ATUITEM("ZA6_TIPFLU",M->ZA6_TIPFLU) // Frank Zwarg Fuga 10/12/2015
		Endif
	Case Upper(cCampo)=="ZA6_TIPLKM"
		If Type("ZA6_TIPLKM")<>"U"  //Se o objeto já foi criado
        	ATUITEM("ZA6_TIPLKM",M->ZA6_TIPLKM) // Frank Zwarg Fuga 10/12/2015	
		Endif
	Case Upper(cCampo)=="ZA6_DTINI"
		If Type("ZA6_DTINI")<>"U"  //Se o objeto já foi criado
			U_ValPeriodo(1)
			                                                                                                   
			dDtIni := M->ZA6_DTINI  
			if dDtIni == CToD("  /  /  ")
				MsgAlert("O Campo Data inicial de vigência deve ser preenchido","Atenção!") 
	        	lRet := .F.
	        Else        
	        	ATUITEM("ZA6_DTINI",M->ZA6_DTINI) // Frank Zwarg Fuga 10/12/2015	
			//	FTABAV()
				//FTABAC() na tabela de vendas ja posicionamos a tabela de compras - Frank
	    	Endif
		Endif
		//Pedrassi GEFCO	
		Case Upper(cCampo)==Upper("ZA6_TRANSP")
		If ValType(oDlgTra)=="O"  //Se o objeto já foi criado
			cCod :=M->ZA6_TRANSP
			cDesc:=Posicione('DUT',1,xFilial('DUT')+cCod,'DUT_DESCRI')

			If ValType(oDlgCon) == "O" // Se o Objeto estiver criado
				For nPos := 1 to Len(oCon_Cols)
					if	gdFieldGet("ZAE_OBRA"  , nPos, .F., oDlgCon:aHeader, oCon_Cols) == gdFieldGet("ZA6_OBRA"  , N, .F., aHeader, aCols) .and. ;
						gdFieldGet("ZAE_SEQTRA", nPos, .F., oDlgCon:aHeader, oCon_Cols) == gdFieldGet("ZA6_SEQTRA", N, .F., aHeader, aCols) //.and. ;
//						gdFieldGet("ZAE_SEQCAR", nPos, .F., oDlgCon:aHeader, oCon_Cols) == wSeqCar

						gdFieldPut("ZAE_TRANSP" ,cCod , nPos, oDlgCon:aHeader, oCon_Cols)
						gdFieldPut("ZAE_DESTRA" ,cDesc, nPos, oDlgCon:aHeader, oCon_Cols)
					EndIf
				Next
			endif
//*******************************

			ATUITEM("ZA6_TRANSP",M->ZA6_TRANSP) // Frank Zwarg Fuga 10/12/2015     
			
		EndIf


		
	EndCase


Return(lRet)

********************************************************************************
User Function ZA7VALID(cCampo)
// Validações
********************************************************************************
Local lRet:=.T.
Local cCod,cDesc
Local nSeguro 	:= 0     
Local cUfOri	:= ""
Local cUfDes	:= ""
Local _aTemp	:= GetArea()
Local _cTabVen 
Local _cVerTab 
Local _cTpTrans
Local _cITTabV
Local _cTabCom 
Local _cVerCom 
Local _cCodFor 
Local _cLojFor 
Local _cCodCli 
Local _cLojCli 
Local _cTpTrans 
Local _cITTabC
Local _lAchou

Do Case
Case Upper(cCampo)==Upper("ZA7_COMP")
	If ValType(oDlgCar)=="O"  //Se o objeto já foi criado
		oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_COMP"})]:=M->ZA7_COMP
	EndIf           
Case Upper(cCampo)==Upper("ZA7_KMDESL")
	
	If ValType(oDlgCar)=="O"  //Se o objeto já foi criado
		oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_KMDESL"})]:=M->ZA7_KMDESL
	EndIf           


	lRet := U_LOCVU1()
	If !lRet
		MsgStop("Você não esta cadastro na rotina x usuario, para acesso a este campo.","Atenção!")
		Return .F.
	EndIF
	
	If &(readvar()) > 0
		If empty(oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TABVEN"})])
			MsgStop("Falta o preenchimento do campo Tabela de Venda na aba Viagens.","Atenção!")
			Return .F.
		EndIF
		If empty(oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VERVEN"})])
			MsgStop("Falta o preenchimento do campo Versão da Tabela de Venda na aba Viagens.","Atenção!")
			Return .F.
		EndIF
		If empty(oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABV"})])
			MsgStop("Falta o preenchimento do campo Item da Tabela de Venda na aba Viagens.","Atenção!")
			Return .F.
		EndIF
		If empty(oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TABCOM"})])
			MsgStop("Falta o preenchimento do campo Tabela de Compras na aba Viagens.","Atenção!")
			Return .F.
		EndIF
		If empty(oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VERCOM"})])
			MsgStop("Falta o preenchimento do campo Versão da Tabela de Compras na aba Viagens.","Atenção!")
			Return .F.
		EndIF
		If empty(oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABC"})])
			MsgStop("Falta o preenchimento do campo Item da Tabela de Compras na aba Viagens.","Atenção!")
			Return .F.
		EndIF
		If empty(oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TPTRAN"})])
			MsgStop("Falta o preenchimento do campo Tipo da Tabela na aba Viagens.","Atenção!")
			Return .F.
		EndIF                          
		If empty(oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TPTRAC"})])
			MsgStop("Falta o preenchimento do campo Tipo da Tabela de Compra na aba Viagens.","Atenção!")
			Return .F.
		EndIF                          
		
		_cTabVen	:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TABVEN"})]
		_cVerTab	:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VERVEN"})]
		_cTpTrans	:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TPTRAN"})]
		_cTpTraC	:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TPTRAC"})]
		_cITTabV	:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABV"})]
		_cCodCli	:= AllTrim(M->ZA0_CLI)
		_cLojCli	:= AllTrim(M->ZA0_LOJA)
		_cTabCom	:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TABCOM"})]
		_cVerCom	:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VERCOM"})]
		_cITTabC	:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABC"})]
		
		
		dbSelectArea("ZT0")
		dbSetOrder(1)
		dbSeek( xFilial("ZT0") + _cTabVen + _cVerTab + _cCodCLi + _cLojCli + _cTpTrans + _cITTabV  ) 
		If Eof()
			MsgStop("Houve uma falha na identificação da tabela de vendas.","Atenção!")
			Return .F.
		EndIF
		
		dbSelectArea("ZT1")			
		dbSetOrder(1)                                                                                
		dbSeek( xFilial("ZT1") + _cTabCom + _cVerCom)
		_lAchou := .F.
		While !Eof() .and. ZT1_FILIAL+ZT1_CODTAB+ZT1_VERTAB == xFilial("ZT1")+_cTabCom+_cVerCom

//			If ZT1_TIPTAB == _cTpTrans .and. ZT1_ITEMTB == _cITTabc .and. ZT1_CODCLI == _cCodCli .and. ZT1_LOJCLI == _cLojCli
//			If ZT1_TIPTAB == _cTpTraC  .and. ZT1_ITEMTB == _cITTabc .and. ZT1_CODCLI == _cCodCli .and. ZT1_LOJCLI == _cLojCli
			If ZT1_ITEMTB == _cITTabc .and. ZT1_CODCLI == _cCodCli .and. ZT1_LOJCLI == _cLojCli		// Cristiam Rossi em 06/04/2016
				_lAchou := .T.
				Exit
			EndIF
			dbSkip()
		EndDo
		If !_lAchou
			MsgsTop("Houve uma falha na identificação da tabela de compras.","Atenção!")
			Return .F.
		EndIF

		If ZT0->ZT0_DESLOC == "S"
			oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_VALDES"})]	:= &(readvar()) * ZT0->ZT0_VRDES
//			oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_VALDES"})] += oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_VALOR"})]
		EndIF

		If ZT1->ZT1_DESLOC == "S"
			oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_VRDESC"})]	:= &(readvar()) * ZT1->ZT1_VRDES
//			oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_VRDESC"})] += oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_CUSTO"})]
		EndIF

		U_CalcZA7V()
		U_CalcZA7C()

		RestArea(_aTemp)
	Else
		oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_VRDESC"})]	:= 0 // Frank 30/03/2016
		oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_VALDES"})]	:= 0 // Frank 30-03-2016
	EndIf
	
Case Upper(cCampo)==Upper("ZA7_VALDES")
	lRet := U_LOCVU1()
	If !lRet
		MsgStop("Você não esta cadastro na rotina x usuario, para acesso a este campo.","Atenção!")
		Return .F.
	EndIF                          
	If oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_KMDESL"})] > 0
		MsgStop("Este campo não está liberado para a digitação, em decorrência do preenchimento do KM do deslocamento.","Atenção!")
		Return .F.
	EndIF
Case Upper(cCampo)==Upper("ZA7_VRDESC")
	lRet := U_LOCVU1()	
	If !lRet
		MsgStop("Você não esta cadastro na rotina x usuario, para acesso a este campo.","Atenção!")
		Return .F.
	EndIF
	If oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_KMDESL"})] > 0
		MsgStop("Este campo não está liberado para a digitação, em decorrência do preenchimento do KM do deslocamento.","Atenção!")
		Return .F.
	EndIF
Case Upper(cCampo)==Upper("ZA7_LARG")
	If ValType(oDlgCar)=="O"  //Se o objeto já foi criado
		oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_LARG"})]:=M->ZA7_LARG
	EndIf
Case Upper(cCampo)==Upper("ZA7_ALTU")
	If ValType(oDlgCar)=="O"  //Se o objeto já foi criado
		oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_ALTU"})]:=M->ZA7_ALTU
	EndIf
Case Upper(cCampo)==Upper("ZA7_PESO")
	If ValType(oDlgCar)=="O"  //Se o objeto já foi criado
		oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_PESO"})]:=M->ZA7_PESO
	EndIf 
	
Case Upper(cCampo)==Upper("ZA7_FORMAS")
	If ValType(oDlgCar)=="O"  //Se o objeto já foi criado
		
		cUfOri := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ESTORI"})]
		cUfDes := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ESTDES"})]
		
		If M->ZA7_FORMAS == "1"
			nSeguro := Posicione('ZLN',1,xFilial('ZLN')+cUfOri+cUfDes,'ZLN_ADVLR')
			oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_VALADV"})] := nSeguro 
			
			nSeguro := Posicione('ZLN',1,xFilial('ZLN')+cUfOri+cUfDes,'ZLN_ALIQ')
			oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_VALICM"})] := nSeguro
		EndIf 
	EndIf
Case Upper(cCampo)=="ZA7_MUNIC"
		If Type("ZA7_MUNIC")<>"U"  //Se a variável existe
			_Munic := M->ZA7_MUNIC
			if Empty(AllTrim(_Munic))
				MsgStop("Municipio deve ser preenchido ! ")
	        	lRet := .F.
	    	Endif
		Endif
Case Upper(cCampo)=="ZA7_ADICIO"

		If Type("ZA7_ADICIO")<>"U"  //Se a variável existe
			_Adici := M->ZA7_ADICIO
			if Empty( M->ZA7_ADICIO )
				MsgStop("Coleta Adicional deve ser preenchido ! ")
	        	lRet := .F.
			else                        
			
				// Posicionar para verificacao do tipo de calculo
				cTpTrans  := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TPTRAN"})] //aColsAux[Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TPTRAN"})] 
				cTabVen	  := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TABVEN"})] //aColsAux[Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TABVEN"})] 		
				cVerTab	  := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VERVEN"})] //aColsAux[Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VERVEN"})] 								
				cITTabV	  := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABV"})] //aColsAux[Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VERVEN"})] 								
				ZT0->( dbSetOrder(1) )	
				ZT0->( dbSeek( xFilial("ZT0") + cTabVen + cVerTab + M->ZA0_CLI + M->ZA0_LOJA + cTpTrans + cITTabV , .T. ) )
			
				if M->ZA7_ADICIO == "S" .and. ZT0->ZT0_TIPREG == "1" // forma de calculo 1 - by Frank
		        	oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_MUNICI"})] := CriaVar("ZA7_MUNICI")
		        	oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_DESMUN"})] := CriaVar("ZA7_DESMUN")
	    	    	oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_UFCARG"})] := CriaVar("ZA7_UFCARG")
				endif       
				
				
	    	Endif
		Endif

		
		
Case Upper(cCampo)=="ZA7_DEVEMB"
		If Type("ZA7_DEVEMB")<>"U"  //Se a variável existe
			_devemb := M->ZA7_DEVEMB
			if Empty(AllTrim(_devemb))
				MsgStop("Devolução de Embalagem deve ser preenchido ! ")
	        	lRet := .F.
	   		else
		    	gdFieldPut("ZA7_CARGA", iif( _devemb=="P", "P", "E" ) , oDlgCar:nAt, oDlgCar:aHeader, oDlgCar:aCols)	// 12/15/2015 - Cristiam
		    	gdFieldPut("ZA7_PICKIN", iif( _devemb=="P", "S", "N" ) , oDlgCar:nAt, oDlgCar:aHeader, oDlgCar:aCols)	// 22/02/2016 - Cristiam
	    	Endif

// ------------------------------------------------------- Cristiam Rossi em 09/09/2015
	    	_cObra    := gdFieldGet("ZA7_OBRA", oDlgCar:nAt, .F., oDlgCar:aHeader, oDlgCar:aCols)
	    	_nPosObra := gdFieldPos("ZA6_OBRA", oDlgTra:aHeader)

	    	if _nPosObra > 0
		    	_nPos := aScan( oDlgTra:aCols, {|elem| elem[_nPosObra] == _cObra } )

		    	if _nPos > 0
		    		_xConteudo := gdFieldGet( "ZA6_CCGEFC", _nPos, .F., oDlgTra:aHeader, oDlgTra:aCols )
			    	gdFieldPut("ZA7_CCGEFC" , _xConteudo, oDlgCar:nAt, oDlgCar:aHeader, oDlgCar:aCols)

		    		_xConteudo := gdFieldGet( "ZA6_CCCLIE", _nPos, .F., oDlgTra:aHeader, oDlgTra:aCols )
			    	gdFieldPut("ZA7_CCCLIE" , _xConteudo, oDlgCar:nAt, oDlgCar:aHeader, oDlgCar:aCols)

		    		_xConteudo := gdFieldGet( "ZA6_OI", _nPos, .F., oDlgTra:aHeader, oDlgTra:aCols )
			    	gdFieldPut("ZA7_OI" , _xConteudo, oDlgCar:nAt, oDlgCar:aHeader, oDlgCar:aCols)

		    		_xConteudo := gdFieldGet( "ZA6_CONTA", _nPos, .F., oDlgTra:aHeader, oDlgTra:aCols )
			    	gdFieldPut("ZA7_CONTA" , _xConteudo, oDlgCar:nAt, oDlgCar:aHeader, oDlgCar:aCols)

		    		_xConteudo := gdFieldGet( "ZA6_TIPDES", _nPos, .F., oDlgTra:aHeader, oDlgTra:aCols )
			    	gdFieldPut("ZA7_TIPDES" , _xConteudo, oDlgCar:nAt, oDlgCar:aHeader, oDlgCar:aCols)

		    		_xConteudo := gdFieldGet( "ZA6_REFGEF", _nPos, .F., oDlgTra:aHeader, oDlgTra:aCols )
			    	gdFieldPut("ZA7_REFGEF" , _xConteudo, oDlgCar:nAt, oDlgCar:aHeader, oDlgCar:aCols)



		    		_xConteudo := gdFieldGet( "ZA6_CLIDES", _nPos, .F., oDlgTra:aHeader, oDlgTra:aCols )
				   	gdFieldPut("ZA7_CLIDES" , _xConteudo, oDlgCar:nAt, oDlgCar:aHeader, oDlgCar:aCols)

		    		_xConteudo := gdFieldGet( "ZA6_LOJDES", _nPos, .F., oDlgTra:aHeader, oDlgTra:aCols )
				   	gdFieldPut("ZA7_LOJDES" , _xConteudo, oDlgCar:nAt, oDlgCar:aHeader, oDlgCar:aCols)

		    		_xConteudo := gdFieldGet( "ZA6_NOMDES", _nPos, .F., oDlgTra:aHeader, oDlgTra:aCols )
				   	gdFieldPut("ZA7_NOMDES" , _xConteudo, oDlgCar:nAt, oDlgCar:aHeader, oDlgCar:aCols)
				endif
			endif
//---------------------------------------------------------------------------------------
	
		Endif

Case Upper(cCampo) $ "ZA7_CLIDES;ZA7_LOJDES"	// Cristiam Rossi em 12/15/2015
   	_cCliDes := gdFieldGet("ZA7_CLIDES", oDlgCar:nAt, .F., oDlgCar:aHeader, oDlgCar:aCols)
   	_cLojDes := gdFieldGet("ZA7_LOJDES", oDlgCar:nAt, .F., oDlgCar:aHeader, oDlgCar:aCols)
	if cCampo == "ZA7_CLIDES"
		_cCliDes := M->ZA7_CLIDES
	else
		_cLojDes := M->ZA7_LOJDES
	endif

	_cNomDes := Posicione("SA1",1,xFilial("SA1")+_cCliDes+_cLojDes,"A1_NOME")
	
	if Empty( _cNomDes )
	   	gdFieldPut("ZA7_CLIDES" , Space(6) , oDlgCar:nAt, oDlgCar:aHeader, oDlgCar:aCols)
	   	gdFieldPut("ZA7_NOMDES" , Space(40), oDlgCar:nAt, oDlgCar:aHeader, oDlgCar:aCols)
    else
	   	gdFieldPut("ZA7_NOMDES" , _cNomDes, oDlgCar:nAt, oDlgCar:aHeader, oDlgCar:aCols)
	endif                             

	// Chamada da funcao que verifica as formulas especificas por cliente.
   	U_LOCTF04(readvar(),"ZA7")

Case Upper(cCampo) $ "ZA7_CODCLI;ZA7_LOJCLI"
   	_CodCli := gdFieldGet("ZA7_CODCLI", N, .F., aHeader, aCols)
   	_Loja   := gdFieldGet("ZA7_LOJCLI", N, .F., aHeader, aCols)
	if cCampo == "ZA7_CODCLI"
		_CodCli := M->ZA7_CODCLI
	else
		_Loja   := M->ZA7_LOJCLI
	endif

	if Empty(_CodCli) .or. Empty(_Loja)
		msgStop("Preencha o Código e Loja do cliente!", "Validação cliente/loja")
		lRet := .F.
	else

		_DesCli := Posicione('SA1',1,xFilial('SA1')+_CodCli+_Loja,'A1_NOME')

		// Posicionar para verificacao do tipo de calculo
		cTpTrans  := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TPTRAN"})]
		cTabVen	  := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TABVEN"})]
		cVerTab	  := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VERVEN"})]
		cITTabV	  := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABV"})]

		ZT0->( dbSetOrder(1) )	
		ZT0->( dbSeek( xFilial("ZT0") + cTabVen + cVerTab + M->ZA0_CLI + M->ZA0_LOJA + cTpTrans + cITTabV , .T. ) )

		oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_DESCLI"})] := _DesCli
		oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_LOJCLI"})] := SA1->A1_LOJA
		oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_CARENC"})] := ZT0->ZT0_FRANQC
		oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_CAREND"})] := ZT0->ZT0_FRANQU
		oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_VALADV"})] := ZT0->ZT0_PADV
		oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_INCADV"})] := ZA0->ZA0_FORMAS

		if gdFieldGet("ZA7_ADICIO", oDlgCar:nAt, .F., oDlgCar:aHeader, oDlgCar:aCols) != "S" .or. ZT0->ZT0_TIPREG == "2" // forma de calculo 1 - by Frank	
			oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_MUNICI"})] := Posicione('ZA2',4,xFilial('ZA2')+SA1->A1_COD_MUN+SA1->A1_EST,'ZA2_CODIGO') //SA1->A1_COD_MUN
			oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_DESMUN"})] := ZA2->ZA2_DESCRI
			oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_UFCARG"})] := ZA2->ZA2_ESTADO     	
		else
			oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_MUNICI"})] := CriaVar("ZA7_MUNICI")
			oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_DESMUN"})] := CriaVar("ZA7_DESMUN")
			oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_UFCARG"})] := CriaVar("ZA7_UFCARG")
		endif

	   	U_LOCTF04(readvar(),"ZA7")	// Chamada da funcao que verifica as formulas especificas por cliente.
	endif

Case Upper(cCampo)=="ZA7_MUNICI"
		If Type("ZA7_MUNICI")<>"U"  //Se a variável existe
			_Munic := M->ZA7_MUNICI
			if Empty(AllTrim(_Munic))
				MsgStop("Codigo Municipio deve ser preenchido ! ")
	        	lRet := .F.
	        Else
	        	oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_DESMUN"})] := Posicione('ZA2',1,xFilial('ZA2')+_Munic,'ZA2_DESCRI')
	        	oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_UFCARG"})] := Posicione('ZA2',1,xFilial('ZA2')+_Munic,'ZA2_ESTADO')	        	
	    	Endif
		Endif

Case Upper(cCampo)=="ZA7_SEQCOL"
		If Type("ZA7_SEQCOL")<>"U"  //Se a variável existe
			_cAviso := ""
			_cSeq := &(readvar())
		    For _nX:=1 to Len(oDlgCar:aCols)
		    	If !oDlgCar:aCols[oDlgCar:nAt][len(oDlgCar:aHeader)+1]
					If _cSeq == oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SEQCOL"})] .and. _nX <> oDlgCar:nAt
						If !empty(_cSeq)
							_cAviso := "Seqüência já utilizada."
							Exit
						EndIF
					EndIf
				EndIf
		    Next   
		    _cVenda  := ""
		    _cCompra := ""
		    If _cSeq == "00"
		    	_cAviso := "Conteúdo inválido, o menor valor aceito é 01."
		    EndIF              
		    
		    // Verificar a tabela de vendas e compras, pelo menos um deve estar com ZT0/ZT1_KMPTRE == "S"
		    _cTabV		:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TABVEN"})]
			_cTabC      := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TABCOM"})]
			_cVerV      := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VERVEN"})]
			_cVerC      := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VERCOM"})]
			_cIteV      := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABV"})]
			_cIteC      := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABC"})]
			_cTpTrans	:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TPTRAN"})]
			_cTpTraC	:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TPTRAC"})]
			_cCodCli	:= AllTrim(M->ZA0_CLI)
			_cLojCli	:= AllTrim(M->ZA0_LOJA)
	    
		    
			// Posicionar na tabela de venda
			ZT0->(dbSetOrder(1))
			ZT0->( dbSeek( xFilial("ZT0") + _cTabV + _cVerV + _cCodCLi + _cLojCli + _cTpTrans + _cIteV , .T. ) )
			If ZT0->(Eof())
				_cAviso := "Não foi possível vincular a tabela de venda."
			Else
				If ZT0->ZT0_KMPTRE == "S"
					_cVenda := "S"
				Else
					_cVenda := "N"
				EndIF    
			EndIF                 

			// Posicionar na tabela de compra
			_aAreaX := GetArea()
			dbSelectArea("ZT1")
			dbSetOrder(1)                                                                                
			dbSeek( xFilial("ZT1") + ZT0->ZT0_TABCOM + ZT0->ZT0_VERCOM)
			_lAchou := .F.
			While !Eof() .and. ZT1_FILIAL+ZT1_CODTAB+ZT1_VERTAB == xFilial("ZT1")+ZT0->ZT0_TABCOM + ZT0->ZT0_VERCOM
//				If ZT1_TIPTAB == _cTpTrans .and. ZT1_ITEMTB == ZT0->ZT0_ITTABC .and. ZT1_CODCLI == _cCodCli .and. ZT1_LOJCLI == _cLojCli
//				If ZT1_TIPTAB == _cTpTrac  .and. ZT1_ITEMTB == ZT0->ZT0_ITTABC .and. ZT1_CODCLI == _cCodCli .and. ZT1_LOJCLI == _cLojCli
				If ZT1_ITEMTB == ZT0->ZT0_ITTABC .and. ZT1_CODCLI == _cCodCli .and. ZT1_LOJCLI == _cLojCli
					_lAchou := .T.
					Exit
				EndIF
				dbSkip()
			EndDo
			If Eof()
				_cAviso := "Não foi possivel vincular a tabela de compras."
				RestArea(_aAreaX)
			Else
				If ZT1->ZT1_KMPTRE == "S"
					_cCompra := "S"
				Else
					_cCompra := "N"
				EndIF                     
			EndIf	
			RestArea(_aAreaX)     
		    
			If _cCompra <> "S" .and. _cVenda <> "S"
				_cAviso := "As tabelas de compras/vendas não permitem a indicação de uma sequencia da viagem."
			EndIf		    
		    
		    If !empty(_cAviso)
		    	MsgStop(_cAviso,"Atenção!")
		    	lRet := .F.    
		    EndIF
		Endif
Case Upper(cCampo)=="ZA7_EMERGE"
		If Type("ZA7_EMERGE")<>"U"  //Se a variável existe
			// Chamada da funcao que verifica as formulas especificas por cliente.
	    	U_LOCTF04(readvar(),"ZA7")
	  EndIF
Case Upper(cCampo)=="ZA7_EMERG2"
		If Type("ZA7_EMERG2")<>"U"  //Se a variável existe
			// Chamada da funcao que verifica as formulas especificas por cliente.
	    	U_LOCTF04(readvar(),"ZA7")
	  EndIF
	
EndCase

fCalcCon()
fDispCon()
fCalcCar()
fDispCar()

Return(lRet)

********************************************************************************
User Function ZAAVALID(cCampo)
// Validações
********************************************************************************
Local lRet:=.T.
Local cCod,cDesc

Do Case
Case Upper(cCampo)==Upper("ZAA_CODIGO")
	If ValType(oDlgRes)=="O"  //Se o objeto já foi criado
		cCod :=M->ZAA_CODIGO
		cDesc:=Posicione('ZAB',1,xFilial('ZAB')+cCod,'ZAB_DESCRI')
		oDlgRes:aCols[oDlgRes:nAt][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_DESCRI"})]:=ZAB->ZAB_DESCRI
		oDlgRes:aCols[oDlgRes:nAt][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_DESCCO"})]:=ZAB->ZAB_DESCCO
		oDlgRes:aCols[oDlgRes:nAt][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_RESPON"})]:=ZAB->ZAB_RESPON
	EndIf
EndCase

Return(lRet)

// Validações
********************************************************************************
User Function ZAEVALID(cCampo)
// Validações
********************************************************************************
Local lRet:=.T.
Local cCod,cDesc,cJunto, cCodEst

Do Case
Case Upper(cCampo)==Upper("ZAE_TRANSP")
	If ValType(oDlgCon)=="O"  //Se o objeto já foi criado
		cCod :=oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TRANSP"})]  //M->ZAE_TRANSP
		cDesc:=Posicione('DUT',1,xFilial('DUT')+cCod,'DUT_DESCRI')
		oDlgCon:aCols[oDlgCon:nAt][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_DESTRA"})]:=cDesc
		oDlgCon:aCols[oDlgCon:nAt][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_COMP"  })]:=fTrazComp(cCod)
		oDlgCon:aCols[oDlgCon:nAt][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_LARG"  })]:=fTrazLarg(cCod)
		oDlgCon:aCols[oDlgCon:nAt][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_ALTU"  })]:=fTrazAltu(cCod)
		oDlgCon:aCols[oDlgCon:nAt][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_PESO"  })]:=fTrazPeso(cCod)
		oDlgCon:aCols[oDlgCon:nAt][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_QTEIXO"})]:=fTrazEixo(cCod)
		/*
		//Alison 23/12/2013
		cCodEst:=Posicione('ST9',1,xFilial('ST9')+cCod,'T9_CODESTO')
		DbSelectArea("SB1")
		DbSetOrder(1)
		If DbSeek(xFilial("SB1")+cCodEst)
			oDlgCon:aCols[oDlgCon:nAt][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_VRESTA"})] := SB1->B1_PRV1 * 10	
		EndIf         
		  */
		/*oCus_Cols[oDlgCus:nAt][Ascan(oDlgCus:aHeader,{|x|AllTrim(x[2])=="ZA9_COMPT"})]:=nCompConG
		oCus_Cols[oDlgCus:nAt][Ascan(oDlgCus:aHeader,{|x|AllTrim(x[2])=="ZA9_LARGT"})]:=nLargConG
		oCus_Cols[oDlgCus:nAt][Ascan(oDlgCus:aHeader,{|x|AllTrim(x[2])=="ZA9_ALTUT"})]:=nAltuConG
		oCus_Cols[oDlgCus:nAt][Ascan(oDlgCus:aHeader,{|x|AllTrim(x[2])=="ZA9_PESOT"})]:=nPesoConG*/
		
		oDlgCus:Acols[oDlgCus:nAt][Ascan(oDlgCus:aHeader,{|x|AllTrim(x[2])=="ZA9_COMPT"})]:=nCompConG
		oDlgCus:Acols[oDlgCus:nAt][Ascan(oDlgCus:aHeader,{|x|AllTrim(x[2])=="ZA9_LARGT"})]:=nLargConG
		oDlgCus:Acols[oDlgCus:nAt][Ascan(oDlgCus:aHeader,{|x|AllTrim(x[2])=="ZA9_ALTUT"})]:=nAltuConG
		oDlgCus:Acols[oDlgCus:nAt][Ascan(oDlgCus:aHeader,{|x|AllTrim(x[2])=="ZA9_PESOT"})]:=nPesoConG
		
		n3Comp:=nCompConG
		n3Larg:=nLargConG
		n3Altu:=nAltuConG
		n3Peso:=nPesoConG
			
	EndIf
Case Upper(cCampo)==Upper("ZAE_COMP")
	If ValType(oDlgCon)=="O"  //Se o objeto já foi criado
		oDlgCon:aCols[oDlgCon:nAt][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_COMP"})]:=M->ZAE_COMP
	EndIf
Case Upper(cCampo)==Upper("ZAE_LARG")
	If ValType(oDlgCon)=="O"  //Se o objeto já foi criado
		oDlgCon:aCols[oDlgCon:nAt][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_LARG"})]:=M->ZAE_LARG
	EndIf
Case Upper(cCampo)==Upper("ZAE_ALTU")
	If ValType(oDlgCon)=="O"  //Se o objeto já foi criado
		oDlgCon:aCols[oDlgCon:nAt][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_ALTU"})]:=M->ZAE_ALTU
	EndIf
Case Upper(cCampo)==Upper("ZAE_PESO")
	If ValType(oDlgCon)=="O"  //Se o objeto já foi criado
		oDlgCon:aCols[oDlgCon:nAt][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_PESO"})]:=M->ZAE_PESO
	EndIf
EndCase

fCalcCon()
fDispCon()
fCalcCar()
fDispCar()

Return(lRet)

// Validações
********************************************************************************
User Function ZAGVALID(cCampo)
// Validações
********************************************************************************
Local lRet:=.T.
Local cCod,cDesc
Local nBase,nPerc,nValor

Do Case
Case Upper(cCampo)==Upper("ZAG_PRODUT")
	//BPM Comercial
	If ValType(oDlgGru)=="O"  //Se o objeto já foi criado
		cPro :=M->ZAG_PRODUT
		cGrp :=Posicione('SB1',1,xFilial('SB1')+cPro,'B1_GRUPO')
		If cGrp <> "9999"
			MsgAlert("Você só pode identificar produtos relacionados as frotas (Grupo 9999, tipo SV).")
			lRet := .F.
		EndIf

		//Se a frota não estiver vinculada ao produto recem informado, o sistema deverá limpar o código da frota para nova alimentação
		cCod := M->ZAG_GRUA
		cEst := Posicione('ST9',1,xFilial('ST9')+cCod,'T9_CODESTO')
		If cEst <> cPro
			cCod := M->ZAG_GRUA 	:= Space(Len(ZAG->ZAG_GRUA))
			cDesc:= M->ZAG_DESGRU	:= Space(Len(ST9->T9_NOME))
			oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_GRUA"})]	:=cCod
			oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_DESGRU"})]	:=cDesc
		EndIf     

		If Empty(cCod)
			cDesc := Posicione('SB1',1,xFilial('SB1')+cPro,'B1_DESC')
			oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_DESGRU"})]:=cDesc
		EndIf
	EndIf
Case Upper(cCampo)==Upper("ZAG_GRUA")
	//BPM Comercial
	If ValType(oDlgGru)=="O"  //Se o objeto já foi criado
		cCod := Iif(Empty(M->ZAG_GRUA),oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_GRUA"})],M->ZAG_GRUA)
		cEst := Posicione('ST9',1,xFilial('ST9')+cCod,'T9_CODESTO')
		If cEst <> M->ZAG_PRODUT
			MsgAlert("Frota informada não está vinculada ao produto " + AllTrim(M->ZAG_PRODUT) + ".")
			lRet := .F.
			cDesc:= Space(Len(ST9->T9_NOME))
		Else
			cDesc:= Posicione('ST9',1,xFilial('ST9')+cCod,'T9_NOME')
		EndIf     
		oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_DESGRU"})]:=cDesc
	
		If lRet
			//Consulta a disponibilidade de frota
			M->ZAG_DTINI := oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_DTINI"})]
			M->ZAG_DTFIM := oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_DTFIM"})]
   	
			U_ConDispF(cCod, M->ZAG_DTINI, M->ZAG_DTFIM)	//lRet := 
		EndIf
	EndIf
	
	If ValType(oDlgPla)=="O" .and. lRet //Se o objeto já foi criado
		cCod :=M->ZAG_GRUA
		cDesc:=Posicione('ST9',1,xFilial('ST9')+cCod,'T9_NOME')
		nPes :=Posicione('ST9',1,xFilial('ST9')+cCod,'T9_PES')
		oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_DESGRU"})]:=cDesc
		oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_PES"   })]:=nPes
		If Empty(oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_CONJT" })])
			cConjT := AllTrim(Capital(Posicione("SX5",1,xFilial("SX5")+"76" + Alltrim(Str(nPes,3,0)),"X5_DESCRI")))
			oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_CONJT" })]:=cConjT
		EndIf

		If lRet
			//Consulta a disponibilidade de frota
			M->ZAG_DTINI := oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_DTINI"})]
			M->ZAG_DTFIM := oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_DTFIM"})]
    	
			U_ConDispF(cCod, M->ZAG_DTINI, M->ZAG_DTFIM)	//lRet := 
		EndIf
	EndIf

//	If ValType(oDlgMar)=="O"  //Se o objeto já foi criado
//		cCod :=M->ZAG_GRUA
//		cDesc:=Posicione('ST9',1,xFilial('ST9')+cCod,'T9_NOME')
//		oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_DESGRU"})]:=cDesc
//	EndIf
//Case Upper(cCampo)==Upper("ZAG_PES")	// Só usar se o campo ZAG_PES não for visual 
//	If ValType(oDlgPla)=="O"  //Se o objeto já foi criado
//		nPes :=M->ZAG_PES
//		If Empty(oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_CONJT" })])
//			cConjT := AllTrim(Capital(Posicione("SX5",1,xFilial("SX5")+"76" + Alltrim(Str(nPes,3,0)),"X5_DESCRI")))
//			oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_CONJT" })]:=cConjT
//		EndIf
//	EndIf
Case Upper(cCampo)==Upper("ZAG_VRCARG")
	If ValType(oDlgGru)=="O"  //Se o objeto já foi criado
		nBase :=M->ZAG_VRCARG
		nPerc :=oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_PERSEG"})]
		nValor:=fCalcSegG(nBase,nPerc)  //Calcula o Seguro das Gruas
		oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_VRSEGU"})]:=nValor
	EndIf
	If ValType(oDlgPla)=="O"  //Se o objeto já foi criado
		nBase :=M->ZAG_VRCARG
		nPerc :=oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_PERSEG"})]
		nValor:=fCalcSegG(nBase,nPerc)  //Calcula o Seguro das Plataformas
		oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_VRSEGU"})]:=nValor
	EndIf
	If ValType(oDlgMar)=="O"  //Se o objeto já foi criado
		nBase :=M->ZAG_VRCARG
		nPerc :=oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_PERSEG"})]
		nValor:=fCalcSegG(nBase,nPerc)  //Calcula o Seguro das Plataformas
		oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_VRSEGU"})]:=nValor
	EndIf
Case Upper(cCampo)==Upper("ZAG_PERSEG")
	If ValType(oDlgGru)=="O"  //Se o objeto já foi criado
		nBase :=oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_VRCARG"})]
		nPerc :=M->ZAG_PERSEG
		nValor:=fCalcSegG(nBase,nPerc)  //Calcula o Seguro das Gruas
		oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_VRSEGU"})]:=nValor
	EndIf
	If ValType(oDlgPla)=="O"  //Se o objeto já foi criado
		nBase :=oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_VRCARG"})]
		nPerc :=M->ZAG_PERSEG
		nValor:=fCalcSegG(nBase,nPerc)  //Calcula o Seguro das Plataformas
		oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_VRSEGU"})]:=nValor
	EndIf
	If ValType(oDlgMar)=="O"  //Se o objeto já foi criado
		nBase :=oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_VRCARG"})]
		nPerc :=M->ZAG_PERSEG
		nValor:=fCalcSegG(nBase,nPerc)  //Calcula o Seguro das Plataformas
		oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_VRSEGU"})]:=nValor
	EndIf
Case Upper(cCampo)==Upper("ZAG_TPISS")
	If ValType(oDlgGru)=="O"  //Se o objeto já foi criado
		oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_TPISS"})]:=M->ZAG_TPISS
		fCalcGru(.T.)
//		nBase:=nBaseU	//nBasIssU
//		nPerc:=nPerIssU
//		nValor:=U_fCalcIssG(nBase,nPerc,M->ZAG_TPISS)  //Calcula o ISS das Gruas
//		oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_VRISS" })]:=nValor
	EndIf
	If ValType(oDlgPla)=="O"  //Se o objeto já foi criado
		oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_TPISS"})]:=M->ZAG_TPISS
		fCalcPla()
		nBase:=nBaseU	//nBasIssU
		nPerc:=nPerIssU
		nValor:=U_fCalcIssG(nBase,nPerc,M->ZAG_TPISS)  //Calcula o ISS das Plataformas
		oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_VRISS" })]:=nValor
	EndIf
	If ValType(oDlgMar)=="O"  //Se o objeto já foi criado
		oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_TPISS"})]:=M->ZAG_TPISS
		fCalcMar()
		nBase:=nBaseU	//nBasIssU
		nPerc:=nPerIssU
		nValor:=U_fCalcIssG(nBase,nPerc,M->ZAG_TPISS)  //Calcula o ISS das Plataformas
		oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_VRISS" })]:=nValor
	EndIf
Case Upper(cCampo)==Upper("ZAG_PERISS")
	If ValType(oDlgGru)=="O"  //Se o objeto já foi criado
		oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_PERISS"})]:=M->ZAG_PERISS
		fCalcGru(.T.)       		
//		nBase:=nBaseU	//nBasIssU
//		nPerc:=nPerIssU
//		nValor:=U_fCalcIssG(nBase,nPerc,M->ZAG_TPISS)  //Calcula o ISS das Gruas
//		oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_VRISS" })]:=nValor
	EndIf
	If ValType(oDlgPla)=="O"  //Se o objeto já foi criado
		oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_PERISS"})]:=M->ZAG_PERISS
		fCalcPla()
		nBase:=nBaseU	//nBasIssU
		nPerc:=nPerIssU
		nValor:=U_fCalcIssG(nBase,nPerc,M->ZAG_TPISS)  //Calcula o ISS Maritima
		oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_VRISS" })]:=nValor
	EndIf
	If ValType(oDlgMar)=="O"  //Se o objeto já foi criado
		oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_PERISS"})]:=M->ZAG_PERISS
		fCalcMar()
		nBase:=nBaseU	//nBasIssU
		nPerc:=nPerIssU
		nValor:=U_fCalcIssG(nBase,nPerc,M->ZAG_TPISS)  //Calcula o ISS Maritima
		oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_VRISS" })]:=nValor
	EndIf
Case Upper(cCampo)==Upper("ZAG_TPBASE") .and. ValType(oDlgPla)=="O"
	dDtIni  := oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_DTINI"})]
	If ValType(oDlgPla)=="O" .and. !Empty(dDtIni)	//Se o objeto já foi criado
		cTpBase := M->ZAG_TPBASE
		nPreDia := oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_PREDIA"})]
		Do Case
		Case cTpBase=="D" 	// Diária
			dDtFim := dDtIni+nPreDia-1
		Case cTpBase=="S" 	// Semanal
			dDtFim := dDtIni+(nPreDia * 7)
		Case cTpBase=="Q" 	// Quinzenal
			dDtFim := dDtIni+(nPreDia * 15)
		Case cTpBase=="M"
			_nAno  := Year(dDtIni)
			_nMes  := Month(dDtIni) + npreDia
			_nDia  := Day(dDtini)
			While _nMes > 12
				_nAno++
				_nMes-=12
			EndDo
			dDtFim := CtoD(AllTrim(Str(_nDia))+"/"+AllTrim(Str(_nMes))+"/"+AllTrim(Str(_nAno)))
			While Empty(dDtFim)
				_nDia  := _nDia - 1
				dDtFim := CtoD(AllTrim(Str(_nDia))+"/"+AllTrim(Str(_nMes))+"/"+AllTrim(Str(_nAno)))
			EndDo
		Otherwise         
			dDtFim := dDtIni
		EndCase

		cCod := oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_GRUA"})]
		U_ConDispF(cCod, dDtIni, dDtFim)	//lRet := 
		
		If lRet
			oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_DTFIM"})] := dDtFim
		EndIf
	EndIf
Case Upper(cCampo)==Upper("ZAG_TPBASE") .and. ValType(oDlgMar)=="O"
	dDtIni  := oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_DTINI"})]
	If ValType(oDlgMar)=="O" .and. !Empty(dDtIni)	//Se o objeto já foi criado
		cTpBase := M->ZAG_TPBASE
		nPreDia := oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_PREDIA"})]
		Do Case
		Case cTpBase=="D" 	// Diária
			dDtFim := dDtIni+nPreDia-1
		Case cTpBase=="S" 	// Semanal
			dDtFim := dDtIni+(nPreDia * 7)
		Case cTpBase=="Q" 	// Quinzenal
			dDtFim := dDtIni+(nPreDia * 15)
		Case cTpBase=="M"
			_nAno  := Year(dDtIni)
			_nMes  := Month(dDtIni) + npreDia
			_nDia  := Day(dDtini)
			While _nMes > 12
				_nAno++
				_nMes-=12
			EndDo
			dDtFim := CtoD(AllTrim(Str(_nDia))+"/"+AllTrim(Str(_nMes))+"/"+AllTrim(Str(_nAno)))
			While Empty(dDtFim)
				_nDia  := _nDia - 1
				dDtFim := CtoD(AllTrim(Str(_nDia))+"/"+AllTrim(Str(_nMes))+"/"+AllTrim(Str(_nAno)))
			EndDo
		Otherwise         
			dDtFim := dDtIni
		EndCase

		cCod := oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_GRUA"})]
		U_ConDispF(cCod, dDtIni, dDtFim)	//lRet := 
		
		If lRet
			oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_DTFIM"})] := dDtFim
		EndIf
	EndIf
Case Upper(cCampo)==Upper("ZAG_PREDIA") .and. ValType(oDlgPla)=="O"
	dDtIni  := oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_DTINI"})]
	If ValType(oDlgPla)=="O" .and. !Empty(dDtIni)	//Se o objeto já foi criado
		cTpBase := oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_TPBASE"})]
		nPreDia := M->ZAG_PREDIA
		Do Case
		Case cTpBase=="D" 	// Diária
			dDtFim := dDtIni+nPreDia-1
		Case cTpBase=="S" 	// Semanal
			dDtFim := dDtIni+(nPreDia * 7)
		Case cTpBase=="Q" 	// Quinzenal
			dDtFim := dDtIni+(nPreDia * 15)
		Case cTpBase=="M"
			_nAno  := Year(dDtIni)
			_nMes  := Month(dDtIni) + npreDia
			_nDia  := Day(dDtini)
			While _nMes > 12
				_nAno++
				_nMes-=12
			EndDo
			dDtFim := CtoD(AllTrim(Str(_nDia))+"/"+AllTrim(Str(_nMes))+"/"+AllTrim(Str(_nAno)))
			While Empty(dDtFim)
				_nDia  := _nDia - 1
				dDtFim := CtoD(AllTrim(Str(_nDia))+"/"+AllTrim(Str(_nMes))+"/"+AllTrim(Str(_nAno)))
			EndDo
		Otherwise         
			dDtFim := dDtIni
		EndCase

		cCod := oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_GRUA"})]
		U_ConDispF(cCod, dDtIni, dDtFim)	//lRet := 
		
		If lRet
			oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_DTFIM"})] := dDtFim
		EndIf
	EndIf
Case Upper(cCampo)==Upper("ZAG_PREDIA") .and. ValType(oDlgMar)=="O"
	dDtIni  := oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_DTINI"})]
	If ValType(oDlgMar)=="O" .and. !Empty(dDtIni)	//Se o objeto já foi criado
		cTpBase := oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_TPBASE"})]
		nPreDia := M->ZAG_PREDIA
		Do Case
		Case cTpBase=="D" 	// Diária
			dDtFim := dDtIni+nPreDia-1
		Case cTpBase=="S" 	// Semanal
			dDtFim := dDtIni+(nPreDia * 7)
		Case cTpBase=="Q" 	// Quinzenal
			dDtFim := dDtIni+(nPreDia * 15)
		Case cTpBase=="M"
			_nAno  := Year(dDtIni)
			_nMes  := Month(dDtIni) + npreDia
			_nDia  := Day(dDtini)
			While _nMes > 12
				_nAno++
				_nMes-=12
			EndDo
			dDtFim := CtoD(AllTrim(Str(_nDia))+"/"+AllTrim(Str(_nMes))+"/"+AllTrim(Str(_nAno)))
			While Empty(dDtFim)
				_nDia  := _nDia - 1
				dDtFim := CtoD(AllTrim(Str(_nDia))+"/"+AllTrim(Str(_nMes))+"/"+AllTrim(Str(_nAno)))
			EndDo
		Otherwise         
			dDtFim := dDtIni
		EndCase

		cCod := oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_GRUA"})]
		U_ConDispF(cCod, dDtIni, dDtFim)	//lRet := 
		
		If lRet
			oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_DTFIM"})] := dDtFim
		EndIf
	EndIf
Case Upper(cCampo)==Upper("ZAG_DTINI") .and. ValType(oDlgPla)=="O"
	dDtIni  := M->ZAG_DTINI
	If ValType(oDlgPla)=="O" .and. !Empty(dDtIni)	//Se o objeto já foi criado
		cTpBase := oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_TPBASE"})]
		nPreDia := oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_PREDIA"})]
		Do Case
		Case cTpBase=="D" 	// Diária
			dDtFim := dDtIni+nPreDia-1
		Case cTpBase=="S" 	// Semanal
			dDtFim := dDtIni+(nPreDia * 7)
		Case cTpBase=="Q" 	// Quinzenal
			dDtFim := dDtIni+(nPreDia * 15)
		Case cTpBase=="M"
			_nAno  := Year(dDtIni)
			_nMes  := Month(dDtIni) + npreDia
			_nDia  := Day(dDtini)
			While _nMes > 12
				_nAno++
				_nMes-=12
			EndDo
			dDtFim := CtoD(AllTrim(Str(_nDia))+"/"+AllTrim(Str(_nMes))+"/"+AllTrim(Str(_nAno)))
			While Empty(dDtFim)
				_nDia  := _nDia - 1
				dDtFim := CtoD(AllTrim(Str(_nDia))+"/"+AllTrim(Str(_nMes))+"/"+AllTrim(Str(_nAno)))
			EndDo
		Otherwise         
			dDtFim := dDtIni
		EndCase

		cCod := oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_GRUA"})]
		U_ConDispF(cCod, dDtIni, dDtFim)	//lRet := 
		
		If lRet
			oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_DTFIM"})] := dDtFim
		EndIf
	EndIf
Case Upper(cCampo)==Upper("ZAG_DTINI") .and. ValType(oDlgMar)=="O"
	dDtIni  := M->ZAG_DTINI
	If ValType(oDlgMar)=="O" .and. !Empty(dDtIni)	//Se o objeto já foi criado
		cTpBase := oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_TPBASE"})]
		nPreDia := oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_PREDIA"})]
		Do Case
		Case cTpBase=="D" 	// Diária
			dDtFim := dDtIni+nPreDia-1
		Case cTpBase=="S" 	// Semanal
			dDtFim := dDtIni+(nPreDia * 7)
		Case cTpBase=="Q" 	// Quinzenal
			dDtFim := dDtIni+(nPreDia * 15)
		Case cTpBase=="M"
			_nAno  := Year(dDtIni)
			_nMes  := Month(dDtIni) + npreDia
			_nDia  := Day(dDtini)
			While _nMes > 12
				_nAno++
				_nMes-=12
			EndDo
			dDtFim := CtoD(AllTrim(Str(_nDia))+"/"+AllTrim(Str(_nMes))+"/"+AllTrim(Str(_nAno)))
			While Empty(dDtFim)
				_nDia  := _nDia - 1
				dDtFim := CtoD(AllTrim(Str(_nDia))+"/"+AllTrim(Str(_nMes))+"/"+AllTrim(Str(_nAno)))
			EndDo
		Otherwise         
			dDtFim := dDtIni
		EndCase

		cCod := oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_GRUA"})]
		U_ConDispF(cCod, dDtIni, dDtFim)	//lRet := 
		
		If lRet
			oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_DTFIM"})] := dDtFim
		EndIf
	EndIf
Case Upper(cCampo)==Upper("ZAG_DTINI") .and. ValType(oDlgGru)=="O"
	dDtIni  := M->ZAG_DTINI
	dDtFim	:= oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_DTFIM"})]
	If ValType(oDlgGru)=="O" .and. !Empty(dDtIni) .and. !Empty(dDtFim)	//Se o objeto já foi criado
		cCod := oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_GRUA"})]
		U_ConDispF(cCod, dDtIni, dDtFim)	//lRet := 
		
		If lRet
			oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_DTFIM"})] := dDtFim
		EndIf
	EndIf
Case Upper(cCampo)==Upper("ZAG_DTFIM") .and. ValType(oDlgGru)=="O"
	dDtIni  := oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_DTINI"})]
	dDtFim	:= M->ZAG_DTFIM
	If ValType(oDlgGru)=="O" .and. !Empty(dDtIni) .and. !Empty(dDtFim)	//Se o objeto já foi criado
		cCod := oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_GRUA"})]
		U_ConDispF(cCod, dDtIni, dDtFim)	//lRet := 
		
		If lRet
			oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_DTFIM"})] := dDtFim
		EndIf
	EndIf
EndCase

Return(lRet)

********************************************************************************
User Function fCalcIssG(nBase,nPerc,cTpISS)  
// Validações - Calcula o ISS das Gruas, Plataformas, Maritima e Guindastes
********************************************************************************
Local nRetISS := 0

Do Case
Case AllTrim(cTpIss) $ "X|M| "
	nRetISS:= 0
Case AllTrim(cTpIss) == "I"
	nRetISS:=((nBase * nPerc) /100)
//	nRetISS:=(nBase * (nPerc/100))
OtherWise
//	nRetISS:=(nBase / ((100-nPerc)/100))
	nRetISS:=(nBase / ((100-nPerc)/100)) - nBase
EndCase

//Return(Round( (nBase*nPerc/100) / ((100-nPerc)/100) ,2))

Return nRetISS

********************************************************************************
Static Function fCalcSegG(nBase,nPerc)  
// Validações - Calcula o Seguro das Gruas, Plataformas e Maritima
********************************************************************************
Return(Round( (nBase*nPerc/100) ,2))

********************************************************************************
Static Function fCalcIcmT(nBase,nPerc)  
// Validações - Calcula o ISS Transporte 
********************************************************************************
Return(Round( (nBase*nPerc/100) / ((100-nPerc)/100) ,2))

********************************************************************************
User Function ZAIVALID(cCampo)
// Validações
********************************************************************************
Local lRet:=.T.
Local cCod,cDesc

Do Case
Case Upper(cCampo)==Upper("ZAI_CODIGO")
	If ValType(oDlgDoc)=="O"  //Se o objeto já foi criado
		cCod :=M->ZAI_CODIGO
		cDesc:=Posicione('ZAJ',1,xFilial('ZAJ')+cCod,'ZAJ_DESCRI')
		oDlgDoc:aCols[oDlgDoc:nAt][Ascan(oDlgDoc:aHeader,{|x|AllTrim(x[2])=="ZAI_DESCRI"})]:=cDesc
	EndIf
EndCase

Return(lRet)

********************************************************************************
User Function ZAKVALID(cCampo)
// Validações
********************************************************************************
Local lRet:=.T.
Local cCod,cDesc

Do Case
Case Upper(cCampo)==Upper("ZAK_CODACE")
	If ValType(oDlgAce)=="O"  //Se o objeto já foi criado
		cCod :=M->ZAK_CODACE
		cDesc:=Posicione('ST9',1,xFilial('ST9')+cCod,'T9_NOME')
		oDlgAce:aCols[oDlgAce:nAt][Ascan(oDlgAce:aHeader,{|x|AllTrim(x[2])=="ZAK_DESACE"})]:=cDesc
	EndIf
EndCase

Return(lRet)

********************************************************************************
User Function ZAMVALID(cCampo)
// Validações
********************************************************************************
Local lRet:=.T.
Local cCod,cDesc,cEstado

Do Case
Case Upper(cCampo)==Upper("ZAM_ORIGEM")
	If ValType(oDlgTre)=="O"  //Se o objeto já foi criado
		cCod:=M->ZAM_ORIGEM
		Posicione('ZA2',1,xFilial('ZA2')+cCod,'ZA2_DESCRI')
		oDlgTre:aCols[oDlgTre:nAt][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_MUNORI"})]:=ZA2->ZA2_DESCRI
		oDlgTre:aCols[oDlgTre:nAt][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_ESTORI"})]:=ZA2->ZA2_ESTADO
	EndIf
Case Upper(cCampo)==Upper("ZAM_DESTIN")
	If ValType(oDlgTre)=="O"  //Se o objeto já foi criado
		cCod:=M->ZAM_DESTIN
		Posicione('ZA2',1,xFilial('ZA2')+cCod,'ZA2_DESCRI')
		oDlgTre:aCols[oDlgTre:nAt][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_MUNDES"})]:=ZA2->ZA2_DESCRI
		oDlgTre:aCols[oDlgTre:nAt][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_ESTDES"})]:=ZA2->ZA2_ESTADO
	EndIf
Case Upper(cCampo)==Upper("ZAM_DE")
	If ValType(oDlgTre)=="O"  //Se o objeto já foi criado
		cCod:=M->ZAM_DE
		Posicione('ZA2',1,xFilial('ZA2')+cCod,'ZA2_DESCRI')
		oDlgTre:aCols[oDlgTre:nAt][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_MUNDE"})]:=ZA2->ZA2_DESCRI
		oDlgTre:aCols[oDlgTre:nAt][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_ESTDE"})]:=ZA2->ZA2_ESTADO
	EndIf
Case Upper(cCampo)==Upper("ZAM_ATE")
	If ValType(oDlgTre)=="O"  //Se o objeto já foi criado
		cCod:=M->ZAM_ATE
		Posicione('ZA2',1,xFilial('ZA2')+cCod,'ZA2_DESCRI')
		oDlgTre:aCols[oDlgTre:nAt][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_MUNATE"})]:=ZA2->ZA2_DESCRI
		oDlgTre:aCols[oDlgTre:nAt][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_ESTATE"})]:=ZA2->ZA2_ESTADO
	EndIf
Case Upper(cCampo)==Upper("ZAM_DISTAN")
	If ValType(oDlgTre)=="O"  //Se o objeto já foi criado
		oDlgTre:aCols[oDlgTre:nAt][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]:=M->ZAM_DISTAN
		fCalcTre()
		fDispTre()
	EndIf
Case Upper(cCampo)==Upper("ZAM_VAZIO")
	If ValType(oDlgTre)=="O"  //Se o objeto já foi criado
		oDlgTre:aCols[oDlgTre:nAt][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_VAZIO"})]:=M->ZAM_VAZIO
		fCalcTre()
		fDispTre()
	EndIf
EndCase

Return(lRet)

********************************************************************************
User Function CALCISS()
********************************************************************************
Local nRet:= 0
Local nZA5VRHOR,nZA5VRMOB,nZA5VRDES,nZA5MINDIA,nZA5MINMES,nZA5PERISS,nZA5PREDIA := 0 
Local cTipoCa := ""
Local nValEqu
Local nQtDia := nQtMes := 0

If Type("oDlgGui")=="U" .or. ValType(oDlgGui)<>"O"  //Se o objeto já foi criado
	MsgStop("ATENÇÃO: Gatilho CALCISS não pode ser executado !!")
	Return(nRet)
EndIf

nZA5PREDIA	 :=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_PREDIA" })] 	// Cleuber 28-05
if alltrim(oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_TPISS" })]) == "X" 
	nZA5PERISS	 := 0
else
	nZA5PERISS	 :=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_PERISS" })] 	// Cleuber 28-05
endif	
nZA5VRHOR	 :=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRHOR"  })] 	// Cleuber 28-05
nZA5VRMOB	 :=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRMOB"  })] 	// Cleuber 28-05
nZA5VRDES	 :=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRDES"  })] 	// Cleuber 28-05
nZA5MINDIA	 :=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_MINDIA" })] 	// Cleuber 28-05 
nZA5MINMES	 :=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_MINMES" })] 	// Cleuber 28-05 
cTipoCa      :=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_TIPOCA" })] 	// Cleuber 28-05 
nQtDia       :=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_QTDIA"  })] // inibir o uso - Cristiam em 18/04/11
nQtMes       :=oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_QTMES"  })] // inibir o uso - Cristiam em 18/04/11

IF cTipoCa == "F"
  nTot1 := nZA5VRHOR  + nZA5VRMOB + nZA5VRDES
ELSE
  nValEqu:=fValEqu(cTipoCa,nQtDia,nQtMes,nZA5PreDia,nZA5VrHor,nZA5MinDia,nZA5MinMes)

  nTot1 := nValEqu + nZA5VRMOB + nZA5VRDES
ENDIF

nTot2:= nTot1 / ((100 - nZA5PERISS) /100)

nRet := nTot2 - nTot1

Return(nRet)

********************************************************************************
Static Function fValEqu(cTipoCa,nQtDia,nQtMes,nPreDia,nVrHor,nMinDia,nMinMes)
********************************************************************************
Local nValEqu

If nQtDia==0 .and. nQtMes==0
	Do Case
	Case cTipoCa=="H" ; nValEqu:=nPreDia*nVrHor*nMinDia
	Case cTipoCa=="D" ; nValEqu:=nPreDia*nVrHor*nMinDia 
	Case cTipoCa=="M" ; nValEqu:=nPreDia*nVrHor*nMinMes
	Case cTipoCa=="F" ; nValEqu:=nVrHor
	Otherwise         ; nValEqu:=0
	EndCase
Else
	Do Case
	Case cTipoCa=="H" ; nValEqu:=(nQtMes*nMinMes*nVrHor)+(nQtDia*nMinDia*nVrHor)
	Case cTipoCa=="D" ; nValEqu:=(nQtMes*nMinMes*nVrHor)+(nQtDia*nMinDia*nVrHor) 
	Case cTipoCa=="M" ; nValEqu:=(nQtMes*nMinMes*nVrHor)+(nQtDia*nMinDia*nVrHor) 
	Case cTipoCa=="F" ; nValEqu:=nVrHor
	Otherwise         ; nValEqu:=0
	EndCase
EndIf

Return(nValEqu)
/*
********************************************************************************
User Function MailApro
// Rotinas para envio de e-mail
********************************************************************************
Local cTo:="",cCc:="",cSubject:="",cFromAddr:="",cFromName:="",aAttach:={}
Local nPos,aTabGet,cModelo

cFromAddr:=UsrRetMail(RetCodUsr())
cFromName:=UsrRetName(RetCodUsr())

Private cProjet :=ZA0->ZA0_PROJET
Private cRevisao:=ZA0->ZA0_REVISA
//Private cDirHtm:="\\192.168.100.130\Microsiga\Protheus_Data\system\Templates"
Private cDirHtm:=AllTrim(GetTempPath())	// Diretório temporário da máquina local do usuário "\\192.168.100.130\Microsiga\Protheus_Data_TST\system\Templates"
Private cArqHtm:=cDirHtm+AllTrim(cProjet)+"-R"+cRevisao+".HTM"

aTabGet:={}
AAdd(aTabGet,"Linha1...")
AAdd(aTabGet,"Linha2...")
AAdd(aTabGet,"Linha3...")
AAdd(aTabGet,"Linha4...")
AAdd(aTabGet,"Linha5...")
cModelo  :=""
cTo      :=""
cCc      :=""
cSubject :="Solicitação de Aprovação do Projeto " + AllTrim(ZA0->ZA0_PROJET)
cFromAddr:=""
//cFromName:=OemToAnsi(Subs(cUsuario,7,15))
cUserSiga:=RetCodUsr(Subs(cUsuario,7,15))	//OemToAnsi(Subs(cUsuario,1,07))
cModelo  :=fMontaHtm(cSubject,cSubject,aTabGet,"")
If fMailProc0(cTo,cCc,cSubject,cFromAddr,cFromName,cUserSiga,aAttach,cModelo)
	MsgInfo("Mensagem enviada com sucesso.")
EndIf

Return

********************************************************************************
Static Function fMontaHtm(cTitJan,cTitulo,aTabGet,cRodape)
// Rotinas para envio de e-mail
********************************************************************************
Local nPos,cDet1,nHdl,cArqTxt,cRevisao

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Cria o arquivo texto                                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cArqTxt:=cArqHtm

nHdl:=fCreate(cArqTxt)

If nHdl==-1
	MsgStop("ATENÇÃO: Problemas na criação do arquivo ["+cArqTxt+"] !!")
	Return(.f.)
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Inicia o processamento                                              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cDet1:='<html>';fGravaHtm(cDet1,nHdl,cArqTxt)
cDet1:='<head>';fGravaHtm(cDet1,nHdl,cArqTxt)
cDet1:='<title>'+cTitJan+'</title>';fGravaHtm(cDet1,nHdl,cArqTxt)
cDet1:='</head>';fGravaHtm(cDet1,nHdl,cArqTxt)
cDet1:='<body>';fGravaHtm(cDet1,nHdl,cArqTxt)
cDet1:='<Table Align=Center BorderColor=#000000 CELLPADDING=4 CELLSPACING=1 Width=60%>';fGravaHtm(cDet1,nHdl,cArqTxt)
cDet1:='<table width="100%">';fGravaHtm(cDet1,nHdl,cArqTxt)
cDet1:='<tr style="font-family:Tahoma; font-size:11px; color:#000000">';fGravaHtm(cDet1,nHdl,cArqTxt)
cDet1:='<td colspan="4" align="center"><b>'+cTitulo+'</b></td>';fGravaHtm(cDet1,nHdl,cArqTxt)
cDet1:='</tr>';fGravaHtm(cDet1,nHdl,cArqTxt)
cDet1:='</table>';fGravaHtm(cDet1,nHdl,cArqTxt)
cDet1:='<HR Width=100% Size=1 Align=Centered Color=Black> <P>';fGravaHtm(cDet1,nHdl,cArqTxt)
cDet1:='<table width="100%" cellspacing="0" cellpadding="0"><font size="2" color="blue"> ';fGravaHtm(cDet1,nHdl,cArqTxt)
For nPos:=1 to Len(aTabGet)
cDet1:='<tr>';fGravaHtm(cDet1,nHdl,cArqTxt)
cDet1:='<td width="100%">'+aTabGet[nPos]+'</td>';fGravaHtm(cDet1,nHdl,cArqTxt)
cDet1:='</tr>';fGravaHtm(cDet1,nHdl,cArqTxt)
Next
cDet1:='</font></table>';fGravaHtm(cDet1,nHdl,cArqTxt)
cDet1:='</Table>';fGravaHtm(cDet1,nHdl,cArqTxt)
cDet1:='<HR Width=100% Size=1 Align=Centered Color=Black><P>';fGravaHtm(cDet1,nHdl,cArqTxt)
cDet1:='<table width="100%" Align="Center" border="0">';fGravaHtm(cDet1,nHdl,cArqTxt)
cDet1:='<tr align="center">';fGravaHtm(cDet1,nHdl,cArqTxt)
cDet1:='<td colspan="10"><font color="BLUE" size="2">'+cRodape+'</td>';fGravaHtm(cDet1,nHdl,cArqTxt)
cDet1:='</tr>';fGravaHtm(cDet1,nHdl,cArqTxt)
cDet1:='</table>';fGravaHtm(cDet1,nHdl,cArqTxt)
cDet1:='</body>';fGravaHtm(cDet1,nHdl,cArqTxt)
cDet1:='</html>';fGravaHtm(cDet1,nHdl,cArqTxt)

fClose(nHdl)

Return(cArqTxt)

********************************************************************************
Static Function fGravaHtm(cDet1,nHdl,cArqTxt)  
// Rotinas para envio de e-mail - Grava o arquivo texto
********************************************************************************
Local cPulaLinha := Chr(13)+Chr(10)

cDet1+=cPulaLinha

If !fWrite(nHdl,cDet1,Len(cDet1))==Len(cDet1)
	MsgStop("ATENÇÃO: Problemas na gravação do arquivo ["+cArqTxt+"] !!")
	Return(.f.)
Endif

Return(.t.)

********************************************************************************
Static Function fMailProc0(cTo,cCc,cSubject,cFromAddr,cFromName,cUserSiga,aAttach,cModelo)
// Rotinas para envio de e-mail
********************************************************************************
Local nPos,oDlg,oFolder,lRet:=.f.
Local bOk    :={||lRet:=.t.,oDlg:End()}
Local bCancel:={||lRet:=.f.,oDlg:End()}

cTo      :=PadR(cTo      ,150)
cCc      :=PadR(cCc      ,150)
cSubject :=PadR(cSubject ,150)
cFromAddr:=PadR(cFromAddr,150)
cFromName:=PadR(cFromName,150)
cUserSiga:=PadR(cUserSiga,150)
cModelo  :=PadR(cModelo  ,150)

//Private cGet1,cGet2,cGet3,cGet4,cGet5,cGet6
cGet1:=cTo
cGet2:=cCc
cGet3:=cSubject
cGet4:=cFromAddr
cGet5:=""//cFromName
cGet6:=""//Corpo

DEFINE MSDIALOG oDlg FROM 00,00 TO 520,655 TITLE "Envio de E-Mail" Of oMainWnd PIXEL

aPages :={}
aTitles:={}
AAdd(aTitles,"&Dados do E-Mail"        )
AAdd(aTitles,"&Corpo do E-Mail"        )

nLin1:=14
nCol1:=02
nLin2:=325
nCol2:=240

//       TFolder():New(<nRow>,<nCol>,<cPrompt>,<cDlgNameN>,<oWnd>   ,<nOption>,<nClrFore>,<nClrBack>,<.lPixel.>,<.lDesign.>,<nWidth>,<nHeight>,<cMsg>)
oFolder:=TFolder():New(nLin1 ,nCol1 ,aTitles  ,aPages     ,oDlg     ,         ,          ,          ,.T.       ,.F.        ,nLin2   ,nCol2    ,      )

For nPos:=1 to Len(aTitles)
	oFolder:aDialogs[nPos]:oFont:=oDlg:oFont
Next

@ 005+(16*00),05 SAY "Destinatário:" OF oFolder:aDialogs[1] PIXEL
@ 004+(16*00),40 GET oGet1 VAR cGet1 MEMO OF oFolder:aDialogs[1] SIZE 280,30 PIXEL
@ 005+(16*02),05 SAY "Cópia:" OF oFolder:aDialogs[1] PIXEL
@ 004+(16*02),40 GET oGet2 VAR cGet2 MEMO OF oFolder:aDialogs[1] SIZE 280,30 PIXEL
@ 005+(16*04),05 SAY "Assunto:" OF oFolder:aDialogs[1] PIXEL
@ 004+(16*04),40 GET oGet3 VAR cGet3 MEMO OF oFolder:aDialogs[1] SIZE 280,30 PIXEL
@ 005+(16*06),05 SAY "Remetente:" OF oFolder:aDialogs[1] PIXEL
@ 004+(16*06),40 GET oGet4 VAR cGet4 MEMO OF oFolder:aDialogs[1] SIZE 280,30 PIXEL
@ 005+(16*08),05 SAY "Anexos:" OF oFolder:aDialogs[1] PIXEL
@ 004+(16*08),40 GET oGet5 VAR cGet5 MEMO OF oFolder:aDialogs[1] SIZE 280,70 PIXEL

@ 004+(16*13),120 BUTTON oButtDoc1 Prompt "Anexos: Procurar..." SIZE 70,10 ACTION fAbreDocs() OF oFolder:aDialogs[1] PIXEL

@ 005+(16*00),05 SAY "Mensagem:" OF oFolder:aDialogs[2] PIXEL
@ 004+(16*00),40 GET oGet6 VAR cGet6 MEMO OF oFolder:aDialogs[2] SIZE 280,215 PIXEL

Activate MsDialog oDlg CENTERED On Init EnchoiceBar(oDlg,bOk,bCancel)

If lRet
	cTo      :=fMemoStr(cGet1)
	cCc      :=fMemoStr(cGet2)
	cSubject :=fMemoStr(cGet3)
	cFromAddr:=fMemoStr(cGet4)
//	cFromName:=fMemoStr(cGet5)

	aTabGet:=fArrayMemo(cGet6)  //Retorna o array de um campo memo
	aAttach:=fArrayMemo(cGet5)  //Retorna o array de um campo memo

	cModelo:=fMontaHtm(cSubject,cSubject,aTabGet,"")

	fMailProc(cTo,cCc,cSubject,cFromAddr,cFromName,cUserSiga,aAttach,cModelo)
ENDIF          
   
RETURN(lRet)

********************************************************************************
Static Function fMailProc(cTo,cCc,cSubject,cFromAddr,cFromName,cUserSiga,aAttach,cModelo)
// Rotinas para envio de e-mail
********************************************************************************
Local nPos,oProcess

cTo      :=AllTrim(cTo      )
cCc      :=AllTrim(cCc      )
cSubject :=AllTrim(cSubject )
cFromAddr:=AllTrim(cFromAddr)
cFromName:=AllTrim(cFromName)
cUserSiga:=AllTrim(cUserSiga)
cModelo  :=AllTrim(cModelo  )

oProcess:=TWFProcess():New("000001",OemToAnsi(cSubject))
oProcess:NewTask("001",cModelo)
oProcess:cTo      :=cTo
oProcess:cCc      :=cCc
oProcess:cSubject :=cSubject
oProcess:cFromAddr:=cFromAddr
oProcess:cFromName:=cFromName
oProcess:NewVersion(.T.) //Sergio Celestino
oProcess:UserSiga :=cUserSiga
oHtml := oProcess:oHTML //Sergio Celestino
		
For nPos:=1 to Len(aAttach)
	oProcess:AttachFile(aAttach[nPos])
Next

oProcess:nEncodeMime := 0 //Sergio Celestino
oProcess:Start()
oProcess:Finish()

Return(.t.)

********************************************************************************
Static Function fAbreDocs()  //Abre Docto
// Rotinas para envio de e-mail
********************************************************************************
Local cPulaLinha := Chr(13)+Chr(10)
Local cArquivo,cDrive,cDir,cNome,cExtensao
Local cTipos,cTipo,lGrava,cRaiz:="\"
Local oDlg,lRet:=.f.
Local oOper,oFileName,oParam,oDir
Local cOper,cFileName,cParam,cDir
Local bOk    :={||lRet:=U_AbreDocs(cOper,cFileName,cParam,cDir,.t.)}  //.t.=Mostra Mensagem de Erro
Local bCancel:={||lRet:=.f.,oDlg:End()}

cOper    :="open"
cFileName:=""
cParam   :=""
cDir     :=""

cDrive   :=""

While .t.
	cTipos:="|Todos os Arquivos|*.*"
//                                                                 .T.=Abrir,.F.=Salvar))
	cArquivo:=Upper(cGetFile(cTipos,"Selecione arquivo",0,cDirHtm ,.T.,GETF_ONLYSERVER))
	If !Empty(cArquivo)
		If File(cArquivo)
			If Empty(cGet5)
				cGet5:=PadR(AllTrim(cArquivo),1000)
			Else
				cGet5:=PadR(AllTrim(cGet5)+cPulaLinha+AllTrim(cArquivo),1000)
			EndIf
			Exit
		Else
			lRet:=.f.
		EndIf
	Else
		lRet:=.f.
		Exit
	EndIf
End

Return(lRet)

********************************************************************************
Static Function fArrayMemo(cMemo)  //Retorna o array de um campo memo
// Rotinas para envio de e-mail
********************************************************************************
Local nPos,aRet:={}
Local cPulaLinha := Chr(13)+Chr(10)

cMemo:=AllTrim(cMemo)
While !Empty(cMemo)
	nPos:=At(cPulaLinha,cMemo)
	If nPos>0
		AAdd(aRet,Subs(cMemo,1,nPos-1))
		cMemo:=Subs(cMemo,nPos+Len(cPulaLinha),Len(cMemo))
	Else
		AAdd(aRet,cMemo)
		cMemo:=""
	EndIf
End
Return(aRet)

********************************************************************************
Static Function fMemoStr(cMemo)
// Rotinas para envio de e-mail
********************************************************************************
Local nPos,aTab,cRet:=""

aTab:=fArrayMemo(cMemo)

For nPos:=1 to Len(aTab)
	If nPos==1
		cRet:=AllTrim(aTab[nPos])
	Else
		cRet+=";"+AllTrim(aTab[nPos])
	EndIf
Next

Return(cRet)
*/
********************************************************************************
Static Function ImpPlan()
// Packing List
********************************************************************************
Local cArq		:= "" 
Local nHdlArq	:= 0
Local cBuffer	:= "" 
Local aProds	:= {} 
Local nItem		:= 0
Local nCont		:= 1
Local aCamposNao:= {}
Local aCamposSim:= {}       
Local aColCT1	:= {}	
Local aAuxCT1	:= {}   
Local aProds	:= {}        
Local cAlias,cChave,cCondicao,nIndice,cFiltro
Local cArq

If !oFolder:nOption==nFolderCar
	MsgStop("ATENÇÃO: Favor selecionar a aba COLETAS !!")
	Return
EndIf

cArq := cGetFile("Arquivo CSV.  | *.CSV|", OemToAnsi("Selecão de Arquivo"),0,,.T.,GETF_LOCALHARD+GETF_LOCALFLOPPY)

If Empty(cArq)
	Aviso("Inconsistencia","Informe um arquivo a ser importado.",{"Ok"},,"Atencao:")
	Return
Endif

cAlias   :="ZA7"
cChave   :=xFILIAL(cAlias)+cProjet
cCondicao:='ZA7_FILIAL+ZA7_PROJET=="'+cChave+'"'
nIndice  :=1  //ZA7_FILIAL+ZA7_PROJET+ZA7_OBRA+ZA7_SEQTRA+ZA7_SEQCAR
cFiltro  :=cCondicao

AAdd(aCamposSim,{"ZA7_OBRA"  ,"V"})
AAdd(aCamposSim,{"ZA7_SEQTRA","V"})
AAdd(aCamposSim,{"ZA7_SEQCAR","V"})
AAdd(aCamposSim,{"ZA7_EHTERC",""})
AAdd(aCamposSim,{"ZA7_QUANT" ,""})
AAdd(aCamposSim,{"ZA7_EMERGE" ,""}) // Frank Fuga 16/11/2015
AAdd(aCamposSim,{"ZA7_EMERG2" ,""}) // Frank Fuga 16/11/2015
//AAdd(aCamposSim,{"ZA7_TPCARG",""})
AAdd(aCamposSim,{"ZA7_CARGA" ,""})
AAdd(aCamposSim,{"ZA7_JUNTO" ,""})
AAdd(aCamposSim,{"ZA7_COMP"  ,""})
AAdd(aCamposSim,{"ZA7_LARG"  ,""})
AAdd(aCamposSim,{"ZA7_ALTU"  ,""})
AAdd(aCamposSim,{"ZA7_PESO"  ,""})
//AAdd(aCamposSim,{"ZA7_DIAM"  ,""})
AAdd(aCamposSim,{"ZA7_VRCARG",""})
AAdd(aCamposSim,{"ZA7_CARENC",""})
AAdd(aCamposSim,{"ZA7_TIPCAR",""})
AAdd(aCamposSim,{"ZA7_CAREND",""})
AAdd(aCamposSim,{"ZA7_TPCARD",""})
AAdd(aCamposSim,{"ZA7_FORMAS",""})
AAdd(aCamposSim,{"ZA7_VIAVEL",""})
AAdd(aCamposSim,{"ZA7_VRMOB" ,""})
AAdd(aCamposSim,{"ZA7_PERADV",""})
AAdd(aCamposSim,{"ZA7_VALADV",""})
AAdd(aCamposSim,{"ZA7_INCADV",""})
AAdd(aCamposSim,{"ZA7_PERICM",""})
AAdd(aCamposSim,{"ZA7_VALICM",""})
AAdd(aCamposSim,{"ZA7_INCICM",""})
AAdd(aCamposSim,{"ZA7_RESPC" ,""})
AAdd(aCamposSim,{"ZA7_DTCAR" ,""})
AAdd(aCamposSim,{"ZA7_HRCAR" ,""})
//AAdd(aCamposSim,{"ZA7_VRCAR" ,""})
AAdd(aCamposSim,{"ZA7_RESPD" ,""})
AAdd(aCamposSim,{"ZA7_DTDES" ,""})
AAdd(aCamposSim,{"ZA7_HRDES" ,""})
//AAdd(aCamposSim,{"ZA7_VRDES" ,""})
AAdd(aCamposSim,{"ZA7_OBS" ,""})
AAdd(aCamposSim,{"ZA7_REVNAS" ,""})

aHeader1:=fHeader(aCamposSim)
                   
nHdlArq 	:= FT_FUSE(cArq)
FT_FGOTOP()
ProcRegua(FT_FLASTREC()) 

aColCT1 := {}	
cAx		:= ""
nItem	:=0       
nAx		:= 0
While !FT_FEOF()
	IncProc("Processando arquivo...")
	
	cBuffer := FT_FREADLN()

	aProds     := U_Split(cBuffer,";")
	//aProds[1] //Descricao
	//aProds[2] //Quantidade
	//aProds[3] //Comprimento
	//aProds[4] //Largura
	//aProds[5] //Altura
	//aProds[6] //Peso
	//aProds[7] //Valor da Carga 
	nItem+=1

	aAuxCT1 := {}           
	For nX := 1 to Len(aHeader1)
    	If ALLTRIM(aHeader1[NX,2])=="ZA7_OBRA"
    		Aadd(aAuxCT1,cObra)
    	ElseIf ALLTRIM(aHeader1[NX,2])=="ZA7_SEQTRA"
    		Aadd(aAuxCT1,cSeqTra)
    	ElseIf ALLTRIM(aHeader1[NX,2])=="ZA7_SEQCAR"
    		Aadd(aAuxCT1,StrZero(nItem,3))
		ElseIf ALLTRIM(aHeader1[NX,2])=="ZA7_CARGA"
			Aadd(aAuxCT1,aProds[1])     
		ElseIf ALLTRIM(aHeader1[NX,2])=="ZA7_QUANT"
			Aadd(aAuxCT1,val(aProds[2]))			
		ElseIf ALLTRIM(aHeader1[NX,2])=="ZA7_COMP"
			Aadd(aAuxCT1,val(aProds[3]))
		ElseIf ALLTRIM(aHeader1[NX,2])=="ZA7_LARG"
			Aadd(aAuxCT1,val(aProds[4]))
		ElseIf ALLTRIM(aHeader1[NX,2])=="ZA7_ALTU"
			Aadd(aAuxCT1,val(aProds[5]))
		ElseIf ALLTRIM(aHeader1[NX,2])=="ZA7_PESO"     
			cAx:=Replace(Replace(aProds[6],".",""),",","")
			nAx:=val(cAx)/1000
			Aadd(aAuxCT1,nAx)
		ElseIf ALLTRIM(aHeader1[NX,2])=="ZA7_VRCARG"
			cAx:=Replace(Replace(aProds[7],".",""),",","")
			nAx:=val(cAx)/100
			Aadd(aAuxCT1,nAx)
		else
			Aadd(aAuxCT1,criavar(aHeader1[NX,2]))
	   Endif
	Next nX            
                                                                                                             
	Aadd(aAuxCT1,.F.)                                                                                                                  
	Aadd(aColCT1,aAuxCT1)  

	FT_FSKIP()
	
EndDo

FT_FUSE()	   

if valtype(oDlgCar) == "O"              
	oDlgCar:aCols:=aColCT1
	oDlgCar:Refresh()
endif	
	
Return

********************************************************************************
User Function Split(cChar, cLim)
//Retorna um vetor a partir de uma string separa por um limitador.
//Ex: cVar := "AB;BC;DE;FG;H9" 
//aArray := u_split(cVar,";")
//aArray[1]="AB"
//aArray[2]="BC"
//.......
//aArray[5]="H9"
********************************************************************************
Local aRet := {}
Local cBuffer := ""
Local _nI := 0
Local cByte := " "
Local nLen := Len(cChar)
For _nI := 1 to nLen
	cByte := substr(cChar,_nI,1)
	If cByte == cLim .OR. _nI == nLen
		aadd(aRet,cBuffer)
		cBuffer := ""
	Else
		cBuffer += cByte
	EndIf
Next
Return aRet 

********************************************************************************
User Function Join(aVet, cLim)
//Retorna uma String separada por um limitador a partir de um Vetor.
//Ex: 
//aArray[1]="AB"
//aArray[2]="BC"
//.......
//aArray[5]="H9" 
//cVar := u_Join(aArray,";")
//cVar ==== "AB;BC;DE;FG;H9" 
********************************************************************************
Local cRet := ""
Local cBuffer := ""
Local _nI := 0 
Local nLen := Len(aVet)

For _nI := 1 to nLen
	If Type(aVet[_ni]) == "C"
		cBuffer += aVet[_nI]
	ElseIf Type(aVet[_ni]) == "D"
		cBuffer += DTOC(aVet[_nI])
	ElseIf Type(aVet[_ni]) == "L"
		cBuffer += if(aVet[_nI],"T","F")
	ElseIf Type(aVet[_ni]) == "M"
		cBuffer += aVet[_nI]
	ElseIf Type(aVet[_ni]) == "N"
		cBuffer += Trim(Str(aVet[_nI]))
    EndIf
       
	If _nI != nLen
    	cBuffer += cLim
	EndIf
Next
Return cBuffer 

********************************************************************************
Static Function jjVerZA2(l1Elem,lTipoRet)  
// Exemplo de f_Opcoes
********************************************************************************
Local cTitulo:=""
Local MvPar
Local MvParDef:=""
Local nPos,cTabCod
Private aCat:={}

DEFAULT lTipoRet := .T.

l1Elem := If (l1Elem = Nil , .F. , .T.)

cAlias := Alias() 					 // Salva Alias Anterior

IF lTipoRet
	MvPar:=&(Alltrim(ReadVar()))		 // Carrega Nome da Variavel do Get em Questao
	mvRet:=Alltrim(ReadVar())			 // Iguala Nome da Variavel ao Nome variavel de Retorno
EndIF

cTitulo := "Locais"

dbSelectArea("ZA2")
dbSetOrder(2)
If dbSeek(xFilial("ZA2"))
	CursorWait()
		While !Eof() .And. ZA2->ZA2_FILIAL==xFilial("ZA2")
			Aadd(aCat,ZA2->ZA2_CODIGO + " - " + Alltrim(ZA2->ZA2_DESCRI))
			MvParDef+=AllTrim(ZA2->ZA2_CODIGO)
			dbSkip()
		Enddo
	CursorArrow()
Else
	MsgStop("Cadastro de Locais não encontrado !!")
	Return(.f.)
Endif

//		f_Opcoes(	uVarRet			,;	//01=Variavel de Retorno
//					cTitulo			,;	//02=Titulo da Coluna com as opcoes
//					aOpcoes			,;	//03=Opcoes de Escolha (Array de Opcoes)
//					cOpcoes			,;	//04=String de Opcoes para Retorno
//					nLin1			,;	//05=Nao Utilizado
//					nCol1			,;	//06=Nao Utilizado
//					l1Elem			,;	//07=Se a Selecao sera de apenas 1 Elemento por vez
//					nTam			,;	//08=Tamanho da Chave
//					nElemRet		,;	//09=No maximo de elementos na variavel de retorno
//					lMultSelect		,;	//10=Inclui Botoes para Selecao de Multiplos Itens
//					lComboBox		,;	//11=Se as opcoes serao montadas a partir de ComboBox de Campo ( X3_CBOX )
//					cCampo			,;	//12=Qual o Campo para a Montagem do aOpcoes
//					lNotOrdena		,;	//13=Nao Permite a Ordenacao
//					lNotPesq		,;	//14=Nao Permite a Pesquisa	
//					lForceRetArr    ,;	//15=Forca o Retorno Como Array
//					cF3				 )	//16=Consulta F3	

IF lTipoRet
//             (     1,      2,   3,       4, 5, 6,     7,8,  9,10,11,12,13,14,15,16)
	IF f_Opcoes(@MvPar,cTitulo,aCat,MvParDef,12,49,l1Elem,6,100,  ,  ,  ,  ,  ,  ,  )  // Chama funcao f_Opcoes
		nTamCod:=6
		cTabCod:=""
		For nPos:=1 to Len(MvPar) Step nTamCod
			If Subs(MvPar,nPos,nTamCod)<>Replicate("*",nTamCod)
				If Empty(cTabCod)
					cTabCod+=Subs(MvPar,nPos,nTamCod)
				Else
					cTabCod+="/"+Subs(MvPar,nPos,nTamCod)
				EndIf
			EndIf
		Next
		&MvRet := cTabCod									 // Devolve Resultado
	EndIF
EndIF

dbSelectArea(cAlias) 								 // Retorna Alias

Return( IF( lTipoRet , .T. , MvParDef ) )

********************************************************************************
Static Function fFolderCuR(nFolder,nLin1,nCol1,nLin2,nCol2)
********************************************************************************
U_ZA0Resum(oFolder:aDialogs[nFolder])  //Apresenta a tela de resumo da base de cálculo

Return

********************************************************************************
Static Function fWhen(lEdita)
********************************************************************************
If ValType(lEdita)=="L" ; Return(lEdita) ; EndIf

Return(nOpcManu<>2)

********************************************************************************
User Function jjGraf(aTabela,nTipoGraf,cTitJan,aGrafico,aTabCores,aCoordJan,aCoordGra,aSerie)
********************************************************************************
Local nPos,oDlg,nHandle,oGrafico
Local aSize    :=MsAdvSize(.F.)
Local aInfo    :={aSize[1],aSize[2],aSize[3],aSize[4],3,3}
Local aObjects :={}
Local aPosObj  :={}
Local oFont,nClrFore,nClrBack

//Array com objetos utilizados
AAdd(aObjects,{100,015,.T.,.F.,.F.})
AAdd(aObjects,{100,100,.T.,.T.,.T.})
AAdd(aObjects,{100,015,.T.,.F.,.F.})
aPosObj := MsObjSize(aInfo,aObjects)

If aTabela   ==Nil ; aTabela   :={} ; EndIf
If nTipoGraf ==Nil ; nTipoGraf :=0  ; EndIf
If cTitJan   ==Nil ; cTitJan   :="" ; EndIf
If aGrafico  ==Nil ; aGrafico  :={} ; EndIf
If aTabCores ==Nil ; aTabCores :={} ; EndIf
If aCoordJan ==Nil ; aCoordJan :={} ; EndIf
If aCoordGra ==Nil ; aCoordGra :={} ; EndIf
If aSerie    ==Nil ; aSerie    :={} ; EndIf

If Len(aTabela)==0 ; Return(.f.) ; EndIf

If nTipoGraf==0 ; nTipoGraf:=10 ; EndIf

If cTitJan=="" ; cTitJan:="Gráfico" ; EndIf

If !Len(aGrafico)==16
	aGrafico:={}
	AAdd(aGrafico,""         )  //Título do gráfico (Linha 1)
	AAdd(aGrafico,""         )  //Título do gráfico (Linha 2)
	AAdd(aGrafico,CLR_BLACK  )  //Cor da fonte to título
	AAdd(aGrafico,3          )  //1=Esquerda,2=Direita,3=Centraliza
	AAdd(aGrafico,""         )  //Rodapé do gráfico (Linha 1)
	AAdd(aGrafico,""         )  //Rodapé do gráfico (Linha 2)
	AAdd(aGrafico,CLR_BLACK  )  //Cor da fonte do rodapé
	AAdd(aGrafico,1          )  //1=Esquerda,2=Direita,3=Centraliza
	AAdd(aGrafico,4          )  //Posição superior da legenda
	AAdd(aGrafico,CLR_WHITE  )  //Cor da fonte da legenda
	AAdd(aGrafico,3          )  //Posição inferior da legenda
	AAdd(aGrafico,.T.        )  //Visualiza a legenda
	AAdd(aGrafico,2          )  //Orientação do gráfico (1=GDTOPBOTTOM,2=GDBOTTOMTOP,3=GDLEFTRIGHT,4=GDRIGHTLEFT)
	AAdd(aGrafico,CLR_WHITE  )  //Cor de fundo do gráfico (Degradee parte superior)
	AAdd(aGrafico,CLR_WHITE  )  //Cor de fundo do gráfico (Degradee parte inferior)
	AAdd(aGrafico,.T.        )  //Visualiza 3D
EndIf

If Empty(aTabCores)
	aTabCores:={}

	AAdd(aTabCores, CLR_BLACK     )
	AAdd(aTabCores,  CLR_BLUE      )
	AAdd(aTabCores,  CLR_GREEN     )
	AAdd(aTabCores,  CLR_CYAN      )
	AAdd(aTabCores,  CLR_RED       )
	AAdd(aTabCores,  CLR_MAGENTA   )
	AAdd(aTabCores,  CLR_BROWN     )
	AAdd(aTabCores,  CLR_HGRAY     )
	AAdd(aTabCores,  CLR_LIGHTGRAY )
	AAdd(aTabCores,  CLR_GRAY      )
	AAdd(aTabCores,  CLR_HBLUE     )
	AAdd(aTabCores,  CLR_HGREEN    )
	AAdd(aTabCores,  CLR_HCYAN     )
	AAdd(aTabCores,  CLR_HRED      )
	AAdd(aTabCores,  CLR_HMAGENTA  )
	AAdd(aTabCores,  CLR_YELLOW    )
	AAdd(aTabCores,  CLR_WHITE     )

	For _f := 18 to Len(aTabela)
		AAdd(aTabCores,  CLR_GRAY      )
	Next _f

/*
	AAdd(aTabCores,CLR_HGREEN   )
	AAdd(aTabCores,CLR_YELLOW   )
	AAdd(aTabCores,CLR_HBLUE    )
	AAdd(aTabCores,CLR_WHITE    )
	AAdd(aTabCores,CLR_BLACK    )
	AAdd(aTabCores,CLR_HRED     )
	AAdd(aTabCores,CLR_ORANGE   )
	AAdd(aTabCores,CLR_RED      )
	AAdd(aTabCores,CLR_GRAY     )
	AAdd(aTabCores,CLR_HMAGENTA )
	AAdd(aTabCores,CLR_HCYAN    )*/
EndIf

If !Len(aCoordJan)==4
	aCoordJan:={}
	AAdd(aCoordJan,aSize[7])
	AAdd(aCoordJan,0       )
	AAdd(aCoordJan,aSize[6])
	AAdd(aCoordJan,aSize[5])
EndIf

If !Len(aCoordGra)==4
	aCoordGra:={}
	AAdd(aCoordGra,aPosObj[2,1]-10)
	AAdd(aCoordGra,aPosObj[2,2]   )
	AAdd(aCoordGra,aPosObj[2,3]   )
	AAdd(aCoordGra,aPosObj[2,4]+10)
EndIf

If !Len(aSerie)==3
	aSerie:={}
	AAdd(aSerie,"Legenda do Gráfico")  //Legenda
	AAdd(aSerie,2                   )  //Decimais
	AAdd(aSerie,.f.                 )  //Mostra Valores
EndIf

DEFINE MSDIALOG oDlg TITLE OemToAnsi(cTitJan) OF oMainWnd PIXEL FROM aCoordJan[1],aCoordJan[2] TO aCoordJan[3],aCoordJan[4]

oGrafico:=TMSGraphic():New(aCoordGra[1],aCoordGra[2],oDlg,oFont,nClrFore,nClrBack,aCoordGra[3],aCoordGra[4])

nHandle:=oGrafico:CreateSerie(nTipoGraf)//,aSerie[1],aSerie[2],aSerie[3])
oGrafico:SetTitle(aGrafico[01],aGrafico[02],aGrafico[03],aGrafico[04],.F.)  //Título do Gráfico
oGrafico:SetTitle(aGrafico[05],aGrafico[06],aGrafico[07],aGrafico[08],.T.)  //Título do Rodapé
oGrafico:SetMargins(5,5,5,5)
oGrafico:SetLegenProp(aGrafico[09],aGrafico[10],aGrafico[11],aGrafico[12])  //Legenda
oGrafico:SetGradient(aGrafico[13],aGrafico[14],aGrafico[15])                //Orientação e Cores de Fundo
oGrafico:l3D:=aGrafico[16]                                                  //3D

//Define os dados do gráfico
For nPos:=1 to Len(aTabela)
	oGrafico:Add(nHandle,aTabela[nPos,2],aTabela[nPos,1],aTabCores[nPos])
Next

DEFINE SBUTTON FROM aCoordGra[4]+15,aCoordGra[3]-140 ACTION oDlg:End() ENABLE OF oDlg PIXEL
DEFINE SBUTTON FROM aCoordGra[4]+15,aCoordGra[3]-090 BMPBUTTON TYPE 13 ACTION fSalvaBMP(oGrafico) ENABLE OF oDlg PIXEL

ACTIVATE MSDIALOG oDlg
Return

********************************************************************************
Static Function fSalvaBMP(oGrafico)
********************************************************************************
Local cArquivo,cDrive,cDir,cNome,cExtensao
Local cTipos,cTipo,lGrava,cRaiz:="\"

While .t.
	cTipos:="*.BMP|*.BMP"
	cTipos+="|*.JPEG|*.JPEG"
//	cTipos+="|Todos os Arquivos|*.*"
//                                                              .T.=Abrir,.F.=Salvar                                 ))
	cArquivo:=Upper(cGetFile(cTipos,"Selecione arquivo",0,"C:\",.F.,GETF_LOCALHARD+GETF_LOCALFLOPPY+GETF_NETWORKDRIVE))
	If !Empty(cArquivo)
		If File(cArquivo)
			lGrava:=MsgYesNo("ATENÇÃO: Arquivo "+cArquivo+" já existe. Deseja substituir o arquivo existente ??")
		Else
			lGrava:=.t.
		EndIf
		If lGrava
			SplitPath(cArquivo,@cDrive,@cDir,@cNome,@cExtensao)

			Do Case
			Case Upper(cExtensao)==Upper(".BMP" ) ; cTipo:=Subs(cExtensao,2,3)
			Case Upper(cExtensao)==Upper(".JPEG") ; cTipo:=Subs(cExtensao,2,4)
			Otherwise
				MsgStop("ATENÇÃO: Favor informar a extensão do arquivo ==> .BMP ou .JPEG !!")
				Loop
			EndCase

			If oGrafico:SaveToImage(cNome,cRaiz,cTipo)
				Copy File &(cRaiz+cNome) to &(cArquivo)
				Delete File &(cRaiz+cNome)
				If File(cArquivo)
					MsgInfo("Arquivo: " + cArquivo + " ==> gerado com sucesso !!")
					Exit
				Else
					MsgStop("ERRO: Não foi possível gerar o arquivo ==> " + cArquivo)
				EndIf
			Else
				MsgStop("ERRO: Não foi possível gerar o arquivo temporário ==> " + cRaiz + cNome)
			EndIf
		EndIf
	Else
		Exit
	EndIf
End

Return

********************************************************************************
User Function jjExec()  
// Executa Função
********************************************************************************
Local oDlg,oButton,oFuncao,cFuncao:=Space(100)

DEFINE MSDIALOG oDlg TITLE OemToAnsi("Executa Função") OF oMainWnd PIXEL FROM 00,00 TO 110,600

@ 025,005 Say OemToAnsi("Nome da Função: ") Size 100,08 PIXEL OF oDlg
@ 024,055 msGet oFuncao VAR cFuncao Size 190,08 PIXEL OF oDlg

@ 023,260 BUTTON oButton Prompt "Executar" SIZE 30,12 ACTION (jjExec1(cFuncao),oFuncao:SetFocus()) OF oDlg PIXEL

ACTIVATE MSDIALOG oDlg Centered ON INIT EnchoiceBar(oDlg,{||lRet:=.t.,oDlg:End()},{||lRet:=.f.,oDlg:End()},,)

Return

********************************************************************************
Static Function jjExec1(cFuncao)  
// Executa Função
********************************************************************************
Local bBlock,xBlock

xBlock:=ErrorBlock({|x|ChecErro(x)})  // salva o manipulador de erro padrao

Begin Sequence
	bBlock:="{||"+AllTrim(cFuncao)+"}"
	Eval(&bBlock)
Recover
	ErrorBlock(xBlock)  // restaura o manipulador de erros padrao
End Sequence

ErrorBlock(xBlock)  // restaura o manipulador de erros padrao

Return

********************************************************************************
User Function ZA0Graf()  
// Monta o gráfico dos Status dos Projetos
********************************************************************************
Local nPos,aTabAux,aTabela,nRecZA0:=ZA0->(Recno()),aTabCombo

aTabAux:={}

aTabCombo:=fStatus("Combo")
For nPos:=1 to Len(aTabCombo)
	ZA0->(AAdd(aTabAux,{Subs(aTabCombo[nPos],1,1),0}))
Next

ZA0->(dbSeek(xFilial("ZA0")))
While ZA0->(!Eof() .and. ZA0_FILIAL==xFilial("ZA0"))
	nPos:=ZA0->(Ascan(aTabAux,{|x|x[1]==ZA0_STATUS}))
	If nPos==0
		ZA0->(AAdd(aTabAux,{ZA0_STATUS,0}))
	Else
		aTabAux[nPos,2]++
	EndIf
	ZA0->(dbSkip())
End

aTabela:={}
For nPos:=1 to Len(aTabAux)
	AAdd(aTabela,{fTrazStat(aTabAux[nPos,1]),aTabAux[nPos,2]})  //Retorna a descrição do Status do Projeto informado
Next

u_jjGraf(aTabela,10,"Status dos Agendamento")

ZA0->(dbGoTo(nRecZA0))
Return

********************************************************************************
User Function ZA0Aprov
********************************************************************************
Local aArAPRV:= getArea()

//If !TemRecurso()//Se não tiver recurso
//	Return
//EndIf
                 
Reclock("ZA0",.F.)
ZA0->ZA0_STATUS:="2"
ZA0->ZA0_USUAPR	:=	""
MsUnlock()     


// U_WFAprOrc()
     
aCampos := {}
nValTot := 0
aInfos  := TamSX3("ZA0_PROJET")
AADD(aCampos,{ "PROJETO" ,aInfos[3],aInfos[1],aInfos[2] } )
AADD(aCampos,{ "COLUNA1"    ,"C",59,0 } ) // Obra
AADD(aCampos,{ "COLUNA2"    ,"C",57,0 } ) // Equipamentos
AADD(aCampos,{ "COLUNA3"    ,"C",30,0 } ) // Periodo
AADD(aCampos,{ "COLUNA4"    ,"C",18,0 } ) // Vr.Base
AADD(aCampos,{ "COLUNA5"    ,"C",18,0 } ) // Vr.Mob./ Desmob.
AADD(aCampos,{ "COLUNA6"    ,"C",18,0 } ) // Vr.Total
		
cNomArq := CriaTrab(aCampos)
If (Select("TMP") <> 0)
	dbSelectArea("TMP")
	dbCloseArea()
Endif
dbUseArea(.T.,,cNomArq,"TMP",nil,.F.)
	
U_fCalcT(ZA0->ZA0_PROJET,ZA0->ZA0_TIPOSE)
		
TMP->(DBGOTOP())
WHILE TMP->(!EOF())
	nValTot := nValTot+VAL(STRTRAN(STRTRAN(Alltrim(TMP->COLUNA6),".",""),",","."))
	TMP->(DBSKIP())
ENDDO

//Integração Protheus x Dynamics para informar alterações nos status da proposta ao CRM
//u_IntPropCRM(ZA0->ZA0_ORCAM, ZA0->ZA0_STATUS,ZA0->ZA0_CLI,ZA0->ZA0_LOJA,ZA0->ZA0_PROJET,nValTot)
			
MsgAlert("Proposta enviada para Aprovação")  

U_MailApro()//envia Email

RestArea(aArAPRV)
Return

********************************************************************************
User Function ZA0Canc
********************************************************************************
Local aArAPRV:= getArea()
                     
If MsgYesNo("Tem certeza que deseja cancelar o agendamento ?","Cancelamento")
                 
	Reclock("ZA0",.F.)
	ZA0->ZA0_STATUS:="C"
	MsUnlock()                                                             
				
	aCampos := {}
		nValTot := 0
		aInfos  := TamSX3("ZA0_PROJET")
		AADD(aCampos,{ "PROJETO" ,aInfos[3],aInfos[1],aInfos[2] } )
		AADD(aCampos,{ "COLUNA1"    ,"C",59,0 } ) // Obra
		AADD(aCampos,{ "COLUNA2"    ,"C",57,0 } ) // Equipamentos
		AADD(aCampos,{ "COLUNA3"    ,"C",30,0 } ) // Periodo
		AADD(aCampos,{ "COLUNA4"    ,"C",18,0 } ) // Vr.Base
		AADD(aCampos,{ "COLUNA5"    ,"C",18,0 } ) // Vr.Mob./ Desmob.
		AADD(aCampos,{ "COLUNA6"    ,"C",18,0 } ) // Vr.Total
				
	
	
		cNomArq := CriaTrab(aCampos)
		If (Select("TMP") <> 0)
			dbSelectArea("TMP")
			dbCloseArea()
		Endif
		dbUseArea(.T.,,cNomArq,"TMP",nil,.F.)
			
		U_fCalcT(ZA0->ZA0_PROJET,ZA0->ZA0_TIPOSE)
				
		TMP->(DBGOTOP())
		WHILE TMP->(!EOF())
			nValTot := nValTot+VAL(STRTRAN(STRTRAN(Alltrim(TMP->COLUNA6),".",""),",","."))
			TMP->(DBSKIP())
		ENDDO
		        
		//Integração Protheus x Dynamics para informar alterações nos status da proposta ao CRM
		//u_IntPropCRM(ZA0->ZA0_ORCAM, ZA0->ZA0_STATUS,ZA0->ZA0_CLI,ZA0->ZA0_LOJA,ZA0->ZA0_PROJET,nValTot)
				
	U_bloqClass(ZA0->ZA0_PROJET)  // Daniel em 20/08/08 -> bloqueio da classe de valor do projeto    
	MsgAlert("Agendamento Cancelado")  
                  
EndIf

RestArea(aArAPRV)
Return

********************************************************************************
User Function ZA0Revi2()
// Verifica a revisão das propostas
********************************************************************************
Local nPos,lRet
Local aHeader,aCols,aCols0,nRecZA0,cNum,cNum1,cTipo1
Local cCasadas,aCasadas,nCasadas
Local cProjetNew,cRevisaNew
Local _lFlag	:= .T.
Local nArea		:= Alias()
Local nRecZA0	:=ZA0->(Recno()),nOrdZA0:=ZA0->(IndexOrd()),aAreaZA0:=ZA0->(GetArea())
Local nRgZA0  	:= 0
Local lRecOldT	:=lRecOldG:=lRecOldU:=lRecOldR:=lRecOldI:=lRecOldO:=lRecOldP:=lRecOldB:=.F.
Local lRecNewT	:=lRecNewG:=lRecNewU:=lRecNewR:=lRecNewI:=lRecNewO:=lRecNewP:=lRecNewB:=.F.
Local _aHisto	:={}
Local cProjet	:=SubStr(ZA0->ZA0_PROJET,1,9)
Local cRevisa	:=ZA0->ZA0_REVISA
Local cProjetoT := ZA0->ZA0_PROJET // TIAGO OBARA DE OLIVEIRA 

//Validação (Alison 16/07/13)
DbSelectArea("DTQ")
DbSetOrder(8)//Projeto
If DbSeek(xFilial("DTQ")+SubStr(ZA0->ZA0_PROJET,1,9))
	Alert("Não é possivel revisar, pois já foi gerado AS's para o agendamento")
	Return
EndIf

// Verifico as receitas atuais
cQuery := "SELECT ZA0_PROJET, ZA0_REVISA, ZA0_TIPOSE, R_E_C_N_O_ AS Registro FROM " + RetSqlName("ZA0") + " "
cQuery += "WHERE  SUBSTRING(ZA0_PROJET,1,9) = '" + SubStr(ZA0->ZA0_PROJET,1,9) + "' AND "
cQuery += "                 ZA0_REVISA       = '" +        ZA0->ZA0_REVISA       + "' AND "
cQuery += "                 D_E_L_E_T_       = ' ' "
cQuery += "ORDER BY ZA0_PROJET"

If Select("CHK") > 0
	CHK->(dbCloseArea())	 
endif

cQuery := ChangeQuery(cQuery)
TCQuery cQuery New Alias "CHK"

// Pego a query e atualizo os flags
CHK->(DbGoTop())
While CHK->(!Eof())
	Do Case
	Case CHK->ZA0_TIPOSE=="T";lRecOldT:=.T.;lRecNewT:=.T.
	Case CHK->ZA0_TIPOSE=="G";lRecOldG:=.T.;lRecNewG:=.T.
	Case CHK->ZA0_TIPOSE=="U";lRecOldU:=.T.;lRecNewU:=.T.
	Case CHK->ZA0_TIPOSE=="R";lRecOldR:=.T.;lRecNewR:=.T.
	Case CHK->ZA0_TIPOSE=="I";lRecOldI:=.T.;lRecNewI:=.T.
	Case CHK->ZA0_TIPOSE=="O";lRecOldO:=.T.;lRecNewO:=.T.
	Case CHK->ZA0_TIPOSE=="P";lRecOldP:=.T.;lRecNewP:=.T.
	Case CHK->ZA0_TIPOSE=="M";lRecOldB:=.T.;lRecNewB:=.T.
	EndCase
	AAdd(_aHisto,{CHK->ZA0_PROJET,CHK->ZA0_REVISA,CHK->ZA0_TIPOSE,CHK->Registro})	//Guardo os dados do registro para usar na revisão
    CHK->(DbSkip())
EndDo                           

If lRecNewT .And. lRecNewG
	Alert("Não é possivel revisar Agendamento casados!")
	Return
EndIf

If Select("CHK") > 0
	CHK->(dbCloseArea())	 
endif

dbSelectArea(nArea)

lRet	:=.f.
/*
// Revisa as receitas da proposta revisada
DEFINE MSDIALOG oDlg TITLE "Revisão de Agendamento" FROM C(178),C(181) TO C(402),C(385) PIXEL

// Cria as Groups do Sistema
@ C(010),C(008) TO C(090),C(097) LABEL "Revise a Receita" PIXEL OF oDlg

// Cria Componentes Padroes do Sistema
@ C(017),C(015) CheckBox oCheckBox1 Var lRecNewT Prompt "Receita Transporte"         Size C(075),C(008) PIXEL OF oDlg
@ C(026),C(015) CheckBox oCheckBox2 Var lRecNewG Prompt "Receita Equipamentos"          Size C(075),C(008) PIXEL OF oDlg
@ C(035),C(015) CheckBox oCheckBox3 Var lRecNewU Prompt "Receita Grua"               Size C(075),C(008) PIXEL OF oDlg
@ C(044),C(015) CheckBox oCheckBox4 Var lRecNewR Prompt "Receita Remoção Mecânica"   Size C(075),C(008) PIXEL OF oDlg
@ C(053),C(015) CheckBox oCheckBox5 Var lRecNewI Prompt "Receita Transporte Interno" Size C(075),C(008) PIXEL OF oDlg
@ C(062),C(015) CheckBox oCheckBox6 Var lRecNewO Prompt "Receita Transporte EMP"   Size C(075),C(008) PIXEL OF oDlg
@ C(071),C(015) CheckBox oCheckBox7 Var lRecNewP Prompt "Receita Plataforma"         Size C(075),C(008) PIXEL OF oDlg
@ C(080),C(015) CheckBox oCheckBox8 Var lRecNewB Prompt "Receita Marítima"           Size C(075),C(008) PIXEL OF oDlg
@ C(097),C(024) BMPBUTTON TYPE 1 ACTION (lRet:=.T.,Close(oDlg))
@ C(097),C(054) BMPBUTTON TYPE 2 ACTION (lRet:=.F.,Close(oDlg))
ACTIVATE MSDIALOG oDlg CENTERED 

If !lRet
	Return
EndIf
*/
// Atualizo os flags das novas receitas

lRecNewT := .T.

aCasadas:={}
If lRecNewT ; AAdd(aCasadas,"T") ; EndIf
If lRecNewG ; AAdd(aCasadas,"G") ; EndIf
If lRecNewU ; AAdd(aCasadas,"U") ; EndIf
If lRecNewR ; AAdd(aCasadas,"R") ; EndIf
If lRecNewI ; AAdd(aCasadas,"I") ; EndIf
If lRecNewO ; AAdd(aCasadas,"O") ; EndIf
If lRecNewP ; AAdd(aCasadas,"P") ; EndIf
If lRecNewB ; AAdd(aCasadas,"M") ; EndIf

If Len(aCasadas)==0
	MsgStop("ATENÇÃO: Falta selecionar a Receita !!")
	Return
EndIf

cRevisaNew:=StrZero(Val(cRevisa)+1,Len(cRevisa))

If !MsgYesNo("Confirma a revisão "      + cRevisaNew + " do agendamento " + AllTrim(cProjet) + " ?")
	RestArea(aAreaZA0)
	Return(.F.)
EndIf

Begin Transaction

//Altero o status da proposta original para A=Revisado
For _f:=1 to Len(_aHisto)
	DbSelectArea("ZA0")
	DbGoTo(_aHisto[_f][4])
	RecLock("ZA0",.F.)
		//ZA0->ZA0_STATUS = "A"	//Altero o status da proposta original para A=Revisado
		ZA0->ZA0_STATUS := "A" //Alterado por Jesus
	MsUnlock()
			
aCampos := {}
	nValTot := 0
	aInfos  := TamSX3("ZA0_PROJET")
	AADD(aCampos,{ "PROJETO" ,aInfos[3],aInfos[1],aInfos[2] } )
	AADD(aCampos,{ "COLUNA1"    ,"C",59,0 } ) // Obra
	AADD(aCampos,{ "COLUNA2"    ,"C",57,0 } ) // Equipamentos
	AADD(aCampos,{ "COLUNA3"    ,"C",30,0 } ) // Periodo
	AADD(aCampos,{ "COLUNA4"    ,"C",18,0 } ) // Vr.Base
	AADD(aCampos,{ "COLUNA5"    ,"C",18,0 } ) // Vr.Mob./ Desmob.
	AADD(aCampos,{ "COLUNA6"    ,"C",18,0 } ) // Vr.Total
			
	cNomArq := CriaTrab(aCampos)
	If (Select("TMP") <> 0)
		dbSelectArea("TMP")
		dbCloseArea()
	Endif
	dbUseArea(.T.,,cNomArq,"TMP",nil,.F.)
		
	U_fCalcT(ZA0->ZA0_PROJET,ZA0->ZA0_TIPOSE)
			
	TMP->(DBGOTOP())
	WHILE TMP->(!EOF())
		nValTot := nValTot+VAL(STRTRAN(STRTRAN(Alltrim(TMP->COLUNA6),".",""),",","."))
		TMP->(DBSKIP())
	ENDDO
	        
	//Integração Protheus x Dynamics para informar alterações nos status da proposta ao CRM
	//u_IntPropCRM(ZA0->ZA0_ORCAM, ZA0->ZA0_STATUS,ZA0->ZA0_CLI,ZA0->ZA0_LOJA,ZA0->ZA0_PROJET,nValTot)
			
Next _f

//Gravo a proposta revisada com sua devida receita
For _f:=1 to Len(aCasadas)

	//Verifica o novo número do projeto
	cProjetNew := PadR(cProjet + Iif(Len(aCasadas)>=2,aCasadas[_f],"") + "/" + cRevisaNew,Len(ZA0->ZA0_PROJET))

	_nArray := aScan( _aHisto, { |x| Upper(AllTrim(x[3])) == aCasadas[_f]})
	If 	_nArray == 0	//Se a nova receita não existia anteriormente
		//Monta o aHeader e o aCols para gerar as receitas
		If Empty(aHeader) .or. Empty(aCols0)
			aHeader:={}
			aCols  :={}
			aCols0 :={}
			For nPos:=1 to ZA0->(FCount())
				ZA0->(AAdd(aHeader,{Upper(AllTrim(FieldName(nPos))),Upper(AllTrim(FieldName(nPos)))}))
				ZA0->(AAdd(aCols0,FieldGet(nPos)))
			Next
			AAdd(aCols,aCols0)
		EndIf

		cTipoNew:=aCasadas[_f]
		fGravaNovo(aHeader,aCols,cTipoNew,cProjetNew,cRevisaNew)  //Grava o novo Tipo de Serviço

	Else				//Se a nova receita já  existia anteriormente
		If ZA0->(MsSeek(xFilial("ZA0") + cProjetNew))
			_lFlag := .F.
		Else
			dbGoTo(_aHisto[_nArray][4])
			Processa({||fZA0Revi(cProjetoT,cProjetNew,cRevisaNew)},"Aguarde... Atualizando a Revisão")
		EndIf

	EndIf

	If !(_lFlag)
		MsgStop("ATENÇÃO: Já existe a revisão " + cRevisaNew + " do Agendamento " + AllTrim(cProjet) + " !")
		RestArea(aAreaZA0)
		DisarmTransaction()
		Return(.F.)
	EndIf

Next _f

End Transaction

DbSelectArea("ZA0")

RestArea(aAreaZA0)

Return            

********************************************************************************
Static Function fGravaNovo(aHeader,aCols,cTipoNovo,cProjetNovo,cRevisaNovo)  
// Grava o novo Tipo de Serviço apenas no caso de revisão
********************************************************************************
Local nOrdZA0:=ZA0->(IndexOrd()),nRecZA0:=ZA0->(Recno())
Local nPos,cProjetNovo,cRevisaNovo

ZA0->(dbSetOrder(1))  //ZA0_FILIAL+ZA0_PROJET
ZA0->(dbSeek(xFilial("ZA0")+cProjetNovo))
If ZA0->(!Eof())
	MsgStop("ATENÇÃO: Já existe o Agendamento "+AllTrim(cProjetNovo)+" !!")
	ZA0->(dbSetOrder(nOrdZA0))
	ZA0->(dbGoTo(nRecZA0))
	Return(.f.)
EndIf

//
ZA0->(RecLock("ZA0",.T.))
fGravaTudo("ZA0",aHeader,aCols[1])  //Grava todos os campos do aCols
ZA0->ZA0_PROJET:=cProjetNovo
ZA0->ZA0_TIPOSE:=cTipoNovo
ZA0->ZA0_RECEIT:=cTipoNovo			//Quando é casada o sistema ficava com a receita da primeira
ZA0->ZA0_STATUS:="1"
ZA0->ZA0_REVISA:=cRevisaNovo
ZA0->(MsUnLock())
//
			
aCampos := {}
nValTot := 0
aInfos  := TamSX3("ZA0_PROJET")
AADD(aCampos,{ "PROJETO" ,aInfos[3],aInfos[1],aInfos[2] } )
AADD(aCampos,{ "COLUNA1"    ,"C",59,0 } ) // Obra
AADD(aCampos,{ "COLUNA2"    ,"C",57,0 } ) // Equipamentos
AADD(aCampos,{ "COLUNA3"    ,"C",30,0 } ) // Periodo
AADD(aCampos,{ "COLUNA4"    ,"C",18,0 } ) // Vr.Base
AADD(aCampos,{ "COLUNA5"    ,"C",18,0 } ) // Vr.Mob./ Desmob.
AADD(aCampos,{ "COLUNA6"    ,"C",18,0 } ) // Vr.Total
		
cNomArq := CriaTrab(aCampos)
If (Select("TMP") <> 0)
	dbSelectArea("TMP")
	dbCloseArea()
Endif
dbUseArea(.T.,,cNomArq,"TMP",nil,.F.)
	
U_fCalcT(ZA0->ZA0_PROJET,ZA0->ZA0_TIPOSE)
		
TMP->(DBGOTOP())
WHILE TMP->(!EOF())
	nValTot := nValTot+VAL(STRTRAN(STRTRAN(Alltrim(TMP->COLUNA6),".",""),",","."))
	TMP->(DBSKIP())
ENDDO
        
//Integração Protheus x Dynamics para informar alterações nos status da proposta ao CRM
//u_IntPropCRM(ZA0->ZA0_ORCAM, ZA0->ZA0_STATUS,ZA0->ZA0_CLI,ZA0->ZA0_LOJA,ZA0->ZA0_PROJET,nValTot)

ZA0->(dbSetOrder(nOrdZA0))
ZA0->(dbGoTo(nRecZA0))

Return(.t.)

************************
User Function MailApro()
// Envia Email Aprovação
************************

Local lOk 		:= .F. 
Local cCC	 	:= Space(100)
Local cCCo	 	:= Space(100)
Local cMsg	 	:= "" + CHR(13)+CHR(10)
Local cPara	 	:= Space(100)
Local cTitulo	:= Space(100)
Local oAnexo                                                           
Local oCC
Local oCCo
Local oMsg
Local oPara
Local oTitulo
Local eFrom 	:= AllTrim(UsrRetName(RetCodUsr())) + " <" + AllTrim(UsrRetMail(RetCodUsr())) + ">" 
Local aButtons	:= {}
Private _oDlgMail
	
cTitulo		:= "Solicitação de Aprovação do Agendamento " + AllTrim(ZA0->ZA0_PROJET)

/*Define MsDialog _oDlgMail Title "Envia E-mail" From C(230),C(359) To C(610),C(882) Pixel
	
@ C(034),C(011) Say "Para:"					Size C(060),C(016) COLOR CLR_BLACK PIXEL OF _oDlgMail
@ C(031),C(042) MsGet oPara Var cPara 		Size C(159),C(009) COLOR CLR_BLACK PIXEL OF _oDlgMail
@ C(045),C(011) Say "Cc:" 					Size C(030),C(008) COLOR CLR_BLACK PIXEL OF _oDlgMail
@ C(045),C(042) MsGet oCC 	Var cCC 		Size C(159),C(009) COLOR CLR_BLACK PIXEL OF _oDlgMail	
@ C(058),C(011) Say "Cco:" 					Size C(030),C(008) COLOR CLR_BLACK PIXEL OF _oDlgMail
@ C(058),C(042) MsGet oCCo 	Var cCCo 		Size C(159),C(009) COLOR CLR_BLACK PIXEL OF _oDlgMail		
@ C(072),C(011) Say "Assunto:" 				Size C(030),C(008) COLOR CLR_BLACK PIXEL OF _oDlgMail
@ C(072),C(042) MsGet oTitulo Var cTitulo	Size C(210),C(009) COLOR CLR_BLACK PIXEL OF _oDlgMail
@ C(085),C(011) Say "Mensagem:" 			Size C(030),C(008) COLOR CLR_BLACK PIXEL OF _oDlgMail
@ C(086),C(042) GET oMsg Var cMsg MEMO 		Size C(210),C(065) 				   PIXEL OF _oDlgMail
	
Activate MsDialog _oDlgMail Centered On Init EnchoiceBar(_oDlgMail, {||lOk:=.T., _oDlgMail:End()},{||_oDlgMail:End()},,aButtons) */

cPara := GetMv("LC_MAILAPR")
cMsg  := "Solicitação de Aprovação do Agendamento: " + AllTrim(ZA0->ZA0_PROJET) + CHR(13)+CHR(10)
cMsg  += "Cliente: " +AllTrim(ZA0->ZA0_CLI)+ " - " +AllTrim(ZA0->ZA0_CLINOM)
	
//If lOk
   	U_MandaEmail( eFrom, cPara , cCC, cTitulo, cMsg, nil, cCCo) 
//EndIf       
	
Return()

*************************
Static Function DelAS()
//Apaga as ASs já geradas
*************************
Local _lRet 	:= .f.
Local _cAS  	:= "" 
Local _cViagem	:= ""

Do Case
Case ZA0->ZA0_TIPOSE $ "TLO"	//Transporte
//oDlgTra:aCols
	_cAS	:= Iif(Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_AS"    }) <> 0,oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_AS"    })],"")
	_cViagem:= Iif(Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VIAGEM"}) <> 0,oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VIAGEM"})],"")
	_cObra	:= Iif(Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_OBRA"  }) <> 0,oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_OBRA"    })],"")

	If !(oDlgTra:aCols[oDlgTra:nAt,Len(oDlgTra:aHeader)+1]) .and. !Empty(_cAS) .and. !Empty(_cViagem) .and. !Empty(_cObra)		//Está querendo excluir o ítem e os campos AS, Viagem e Obra estão preenchidos
	
		If VerOrCar(_cAS, _cObra, _cViagem)	//Verifica se existem Ordens de Carregamento
			If VerCTRC(_cViagem)			//Verifica se existem CTRC's
				If VerCTRB(_cViagem)		//Verifica se existem CTRB's
					_lRet := .t.
				EndIf
			EndIf
		EndIf

		If _lRet
			//Verifico se é o último ítem da proposta
			_nItens := 1
			For _f := 1 to Len(oDlgTra:aCols)
				If oDlgTra:aCols[_f,Len(oDlgTra:aHeader)+1] .and. oDlgTra:nAt <> _f
					_nItens++
				EndIf
			Next _f
			
			ExcluiCT(_cAS, _cViagem, _cObra)		//Exclui lançamentos no CTRC e/ou CTRB

			ExcluiCV(_cAS, _cViagem, _nItens)		//Exclui o contrato e a viagem

			ExcluiPT(_cAS, _cViagem)				//Excluo a programação diária gerada automáticamente pela geração de contrato (GRCONTR)

			If _nItens == 1							//Se for o último ítem da proposta excluo o projeto no PMS
				ExcluiPMS()
			EndIf
		EndIf

		If _lRet									//Se não for possível excluir o ítem
			oDlgTra:aCols[oDlgTra:nAt,Len(oDlgTra:aHeader)+1] := .T.
		EndIf
	ElseIf !(oDlgTra:aCols[oDlgTra:nAt,Len(oDlgTra:aHeader)+1]) .and. (Empty(_cAS) .or. Empty(_cViagem) .or. Empty(_cObra))		//Está querendo excluir o ítem e o campo AS não está preenchido, portanto não existe a AS
		_lRet := .T.
	EndIf

Case ZA0->ZA0_TIPOSE $ "G|R|I"	//Guindaste | Remoção | Transporte Interno
	_cAS	:= Iif(Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_AS"    }) <> 0,oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_AS"    })],"")
	_cViagem:= Iif(Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VIAGEM"}) <> 0,oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VIAGEM"})],"")
	
	If !(oDlgGui:aCols[oDlgGui:nAt,Len(oDlgGui:aHeader)+1]) .and. !Empty(_cAS)		//Está querendo excluir o ítem e o campo AS está preenchido
	
		_lRet := VerMedicao(_cAS)					//Verifico se existe medição para esta AS
		
		If _lRet
			//Verifico se é o último ítem da proposta
			_nItens := 1
			For _f := 1 to Len(oDlgGui:aCols)
				If oDlgGui:aCols[_f,Len(oDlgGui:aHeader)+1] .and. oDlgGui:nAt <> _f
					_nItens++
				EndIf
			Next _f
			
			ExcluiCV(_cAS, _cViagem, _nItens)		//Exclui o contrato e a viagem

			ExcluiPD(_cAS, _cViagem)				//Excluo a programação diária gerada automáticamente pela geração de contrato (GRCONTR)

			If _nItens == 1							//Se for o último ítem da proposta excluo o projeto no PMS
				ExcluiPMS()
			EndIf
		EndIf

		If _lRet									//Se não for possível excluir o ítem
			oDlgGui:aCols[oDlgGui:nAt,Len(oDlgGui:aHeader)+1] := .T.
		EndIf
	ElseIf !(oDlgGui:aCols[oDlgGui:nAt,Len(oDlgGui:aHeader)+1]) .and. Empty(_cAS)		//Está querendo excluir o ítem e o campo AS não está preenchido, portanto não existe a AS
		_lRet := .T.
	EndIf

Case ZA0->ZA0_TIPOSE == "U"		//Gruas
	_cAS	:= Iif(Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_AS"    }) <> 0,oDlgGru:aCols[oDlgGui:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_AS"    })],"")
	_cViagem:= Iif(Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_VIAGEM"}) <> 0,oDlgGru:aCols[oDlgGui:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_VIAGEM"})],"")
	
	If !(oDlgGru:aCols[oDlgGru:nAt,Len(oDlgGru:aHeader)+1]) .and. !Empty(_cAS)		//Está querendo excluir o ítem e o campo AS está preenchido
	
		_lRet := VerMedicao(_cAS)					//Verifico se existe medição para esta AS
		
		If _lRet
			//Verifico se é o último ítem da proposta
			_nItens := 1
			For _f := 1 to Len(oDlgGru:aCols)
				If oDlgGru:aCols[_f,Len(oDlgGru:aHeader)+1] .and. oDlgGru:nAt <> _f
					_nItens++
				EndIf
			Next _f
			
			ExcluiCV(_cAS, _cViagem, _nItens)		//Exclui o contrato e a viagem

			ExcluiPD(_cAS, _cViagem)				//Excluo a programação diária gerada automáticamente pela geração de contrato (GRCONTR)

			If _nItens == 1							//Se for o último ítem da proposta excluo o projeto no PMS
				ExcluiPMS()
			EndIf
		EndIf

		If _lRet									//Se não for possível excluir o ítem
			oDlgGru:aCols[oDlgGru:nAt,Len(oDlgGru:aHeader)+1] := .T.
		EndIf
	ElseIf !(oDlgGru:aCols[oDlgGru:nAt,Len(oDlgGru:aHeader)+1]) .and. Empty(_cAS)		//Está querendo excluir o ítem e o campo AS não está preenchido, portanto não existe a AS
		_lRet := .T.
	EndIf

Case ZA0->ZA0_TIPOSE == "P"		//Plataforma
	_cAS	:= Iif(Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_AS"    }) <> 0,oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_AS"    })],"")
	_cViagem:= Iif(Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_VIAGEM"}) <> 0,oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_VIAGEM"})],"")
	
	If !(oDlgPla:aCols[oDlgPla:nAt,Len(oDlgPla:aHeader)+1]) .and. !Empty(_cAS)		//Está querendo excluir o ítem e o campo AS está preenchido
	
		_lRet := VerMedicao(_cAS)					//Verifico se existe medição para esta AS
		
		If _lRet
			//Verifico se é o último ítem da proposta
			_nItens := 1
			For _f := 1 to Len(oDlgPla:aCols)
				If oDlgPla:aCols[_f,Len(oDlgPla:aHeader)+1] .and. oDlgPla:nAt <> _f
					_nItens++
				EndIf
			Next _f
			
			ExcluiCV(_cAS, _cViagem, _nItens)		//Exclui o contrato e a viagem

			ExcluiPD(_cAS, _cViagem)				//Excluo a programação diária gerada automáticamente pela geração de contrato (GRCONTR)

			If _nItens == 1							//Se for o último ítem da proposta excluo o projeto no PMS
				ExcluiPMS()
			EndIf
		EndIf

		If _lRet									//Se não for possível excluir o ítem
			oDlgPla:aCols[oDlgPla:nAt,Len(oDlgPla:aHeader)+1] := .T.
		EndIf
	ElseIf !(oDlgPla:aCols[oDlgPla:nAt,Len(oDlgPla:aHeader)+1]) .and. Empty(_cAS)		//Está querendo excluir o ítem e o campo AS não está preenchido, portanto não existe a AS
		_lRet := .T.
	EndIf

Case ZA0->ZA0_TIPOSE == "M"		//Maritima
	_cAS	:= Iif(Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_AS"    }) <> 0,oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_AS"    })],"")
	_cViagem:= Iif(Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_VIAGEM"}) <> 0,oDlgMar:aCols[oDlgMar:nAt][Ascan(oDlgMar:aHeader,{|x|AllTrim(x[2])=="ZAG_VIAGEM"})],"")
	
	If !(oDlgMar:aCols[oDlgMar:nAt,Len(oDlgMar:aHeader)+1]) .and. !Empty(_cAS)		//Está querendo excluir o ítem e o campo AS está preenchido
	
		_lRet := VerMedicao(_cAS)					//Verifico se existe medição para esta AS
		
		If _lRet
			//Verifico se é o último ítem da proposta
			_nItens := 1
			For _f := 1 to Len(oDlgMar:aCols)
				If oDlgMar:aCols[_f,Len(oDlgMar:aHeader)+1] .and. oDlgMar:nAt <> _f
					_nItens++
				EndIf
			Next _f
			
			ExcluiCV(_cAS, _cViagem, _nItens)		//Exclui o contrato e a viagem

			ExcluiPD(_cAS, _cViagem)				//Excluo a programação diária gerada automáticamente pela geração de contrato (GRCONTR)

			If _nItens == 1							//Se for o último ítem da proposta excluo o projeto no PMS
				ExcluiPMS()
			EndIf
		EndIf

		If _lRet									//Se não for possível excluir o ítem
			oDlgMar:aCols[oDlgMar:nAt,Len(oDlgMar:aHeader)+1] := .T.
		EndIf
	ElseIf !(oDlgMar:aCols[oDlgMar:nAt,Len(oDlgMar:aHeader)+1]) .and. Empty(_cAS)		//Está querendo excluir o ítem e o campo AS não está preenchido, portanto não existe a AS
		_lRet := .T.
	EndIf

EndCase

Return _lRet

**************************************************
Static Function VerMedicao(_cAS2)
//Verifica se já existe medição lançada para a AS
**************************************************
Local _lRet2 	:= .t.

ZLF->(dbSetOrder(2))
If ZLF->(dbSeek(xFilial("ZLF") + _cAS2))		//Verifico se existe medição para esta AS
	//Não permite exclusão do ítem pois já existe medições para esta AS
	MsgStop("ATENÇÃO: Já existe medição lançada para a AS " + _cAS2 + ", exclusão não permitida !!")
	_lRet2 := .F.
EndIf

Return _lRet2

**************************************************
Static Function VerOrCar(_cAS2, _cObra2, _cViage2)
//Verifica se já existe ordens de carregamento
**************************************************
Local _lRet2 	:= .t.

ZL8->(dbSetOrder(1))
If ZL8->(dbSeek(xFilial("ZL8") + M->ZA0_PROJET + _cObra2 + _cViage2))		//Verifico se existe ordem de carregamento para esta viagem
	//Não permite exclusão do ítem pois já existe ordem de carregamento para esta viagem / AS
	MsgStop("ATENÇÃO: Já existe ordem de carregamento lançada para a viagem " + _cViagem2 + ", AS " + _cAS2 + ", exclusão não permitida !!")
	_lRet2 := .F.
EndIf

Return _lRet2

**************************************************
Static Function VerCTRC(_cViage2)
//Verifica se já existem CTRC's
**************************************************
Local _lRet2 	:= .t.

//Busco a AS na DTQ-Viagem
DTQ->(dbSetOrder(1))
If DTQ->(dbSeek(xFilial("DTQ") + _cViage2))										//Verifico se existe CTRC para esta viagem
	If !Empty(DTQ_NUMPV) .or. !Empty(DTQ_NUMCTR) .or. !Empty(DTQ_SERCTR)		//Verifica se já foi gerado o CTRC
		//Não permite exclusão do ítem pois já existe CTRC gerado para esta viagem
		MsgStop("ATENÇÃO: Já existe CT-e lançado para a viagem " + _cViagem2 + ", exclusão não permitida !!")
		_lRet2 := .F.
	EndIf
EndIf

Return _lRet2

**************************************************
Static Function VerCTRB(_cViage2)
//Verifica se já existem CTRB's
**************************************************
Local _lRet2 	:= .t.

//Busco a AS na DTQ-Viagem
DTQ->(dbSetOrder(1))
If DTQ->(dbSeek(xFilial("DTQ") + _cViage2))										//Verifico se existe CTRB para esta viagem
	If !Empty(DTQ_NUMCTC) .or. !Empty(DTQ_NUMSLD)								//Verifica se já foi gerado adiantamento ou saldo para o CTRB
		//Não permite exclusão do ítem pois já existe adiantamento para o CTRB
		MsgStop("ATENÇÃO: Já existe CTRB lançada para a viagem " + _cViagem2 + ", exclusão não permitida !!")
		_lRet2 := .F.
	EndIf
EndIf

Return _lRet2

**************************************************
Static Function ExcluiCV(_cAS2, _cViage2, _nIten2)
//Exclui Contrato e Viagem
**************************************************
/* DESABILITAR AAM
If _nIten2 <= 1							//Se for o último ítem da proposta excluo o contrato na tabela AAM
	//Busco a AS na AAM-Contrato
	AAM->(dbSetOrder(1))
	If AAM->(DbSeek(xFilial("AAM") + M->ZA0_PROJET))
		RecLock("AAM",.F.)
		dbDelete()
		DTQ->(MsUnLock())
	EndIf
EndIf									//Senão for o último ítem da proposta não pode excluir o contrato na tabela AAM
*/
//Busco a AS na DTQ-Viagem
DTQ->(dbSetOrder(1))
If DTQ->(dbSeek(xFilial("DTQ") + _cViage2))
	RecLock("DTQ",.F.)
	dbDelete()
	DTQ->(MsUnLock())
EndIf

Return .t.

**************************************************
Static Function ExcluiCT(_cAS2, _cViage2, _nObra2)
//Exclui CTRC e/ou CTRB
**************************************************

//Busco a AS / Viagem / Obra na DTR-Veiculos da Viagem
If Select("QRY") > 0
  DbSelectArea("QRY")
  DbCloseArea()
Endif

cQuery := "SELECT DTR.R_E_C_N_O_ AS nRegDTR "
cQuery += "FROM "  + RetSqlName("DTR") + " DTR "
cQuery += "WHERE     DTR.DTR_VIAGEM   = " + _cViage2 + " AND "
cQuery += "          DTR.DTR_OBRA     = " + _cObra2  + " AND " 
cQuery += "          DTR.DTR_NRAS     = " + _cAS2    + " AND "
cQuery += "          DTR.D_E_L_E_T_   = ' '"

cQuery:=ChangeQuery(cQuery)

TcQuery cQuery New Alias "QRY"

DbSelectArea("QRY")
DbGotop()

While QRY->(!Eof())
	DTR->(dbGoTo(QRY->nRegDTR))
	RecLock("DTR",.F.)
	dbDelete()
	DTR->(MsUnLock())
	QRY->(dbSkip())
EndDo

dbSelectArea("QRY")
QRY->(dbCloseArea())

//Busco a Viagem na DTC-Doc Cliente para Transporte
DTC->(dbOrderNickName("DTCIND09"))
DTC->(dbSeek(xFilial("DTC") + _cViage2))

While DTC->(!Eof()) .and. DTC->DTC_VIAGEM == _cViage2
	RecLock("DTC",.F.)
	dbDelete()
	DTC->(MsUnLock())
	DTC->(dbSkip())
EndDo

//Busco a Viagem na DUP-Motoristas da Viagem
DUP->(dbSetOrder(3))
DUP->(dbSeek(xFilial("DUP") + M->ZA0_PROJET + _cObra2 + _cViage2))

While DUP->(!Eof()) .and. DUP->DUP_SOT == M->ZA0_PROJET .and. DUP->DUP_OBRA == _cObra2 .and. DUP->DUP_VIAGEM == _cViage2
	RecLock("DUP",.F.)
	dbDelete()
	DUP->(MsUnLock())
	DUP->(dbSkip())
EndDo
	
//Busco a AS na DTQ-Viagem
DTQ->(dbSetOrder(1))
If DTQ->(dbSeek(xFilial("DTQ") + _cViage2))
	RecLock("DTQ",.F.)
	dbDelete()
	DTQ->(MsUnLock())
EndIf

Return .t.

***************************************************************************************
Static Function ExcluiPD(_cAS2, _cViage2)
//Excluo a programação diária gerada automáticamente pela geração de contrato (GRCONTR)
***************************************************************************************

ZLE->(dbSetOrder(4))
ZLE->(dbSeek(xFilial("ZLE") + _cAS2 + _cViage2))
While ZLE->(!Eof()) .and. ZLE->ZLE_AS == _cAS2 .and. ZLE->ZLE_VIAGEM == _cViage2
	RecLock("ZLE",.F.)
	dbDelete()
	ZLE->(MsUnLock())
	ZLE->(dbSkip())
EndDo

Return .t.

***************************************************************************************
Static Function ExcluiPT(_cAS2, _cViage2)
//Excluo a programação diária gerada automáticamente pela geração de contrato (GRCONTR)
***************************************************************************************

ZLG->(dbSetOrder(3))
ZLG->(dbSeek(xFilial("ZLG") + _cAS2 + _cViage2))
While ZLG->(!Eof()) .and. ZLG->ZLG_NRAS == _cAS2 .and. ZLG->ZLG_VIAGEM == _cViage2
	RecLock("ZLG",.F.)
	dbDelete()
	ZLG->(MsUnLock())
	ZLG->(dbSkip())
EndDo

Return .t.

***************************
Static Function ExcluiPMS()
//Exclui o projeto no PMS
***************************

//Busco o projeto na AF8-Projeto Principal
AF8->(dbSetOrder(1))
If AF8->(DbSeek(xFilial("AF8") + M->ZA0_PROJET))
	RecLock("AF8",.F.)
	dbDelete()
	AF8->(MsUnLock())
EndIf

//Busco o projeto na AFE-Controle de Revisão do Projeto
AFE->(dbSetOrder(1))
If AFE->(dbSeek(xFilial("AFE") + Padr(M->ZA0_PROJET,Len(AFE->AFE_PROJET)," ") + "0001",.f.))
	RecLock("AFE",.F.)
	dbDelete()
	AFE->(MsUnLock())
EndIf

//Busco o projeto na AFC-Estrutura do Projeto
AFC->(dbSetOrder(1))
If AFC->(dbSeek(xFilial("AFC") + Padr(M->ZA0_PROJET,Len(AFC->AFC_PROJET)," ") + "0002" + AllTrim(M->ZA0_PROJET),.f.))
	RecLock("AFC",.F.)
	dbDelete()
	AFC->(MsUnLock())
EndIf

//Excluo as Tarefas do Projeto-AF9
AF9->(dbSetOrder(1))
AF9->(dbSeek(xFilial("AF9") + M->ZA0_PROJET))
While AF9->(!Eof()) .and. AF9->AF9_PROJET == M->ZA0_PROJET
	RecLock("AF9",.F.)
	dbDelete()
	AF9->(MsUnLock())
	AF9->(dbSkip())
EndDo

//Busco o projeto na AFX-Usuarios
AFX->(dbSetOrder(1))
If AFX->(dbSeek(xFilial("AFX") + Padr(M->ZA0_PROJET,Len(AFX->AFX_PROJET)," "),.f.))
	RecLock("AFX",.F.)
	dbDelete()
	AFX->(MsUnLock())
EndIf

Return .t.

// Consulta a disponibilidade de frota
********************************************************************************
User Function ConDispF(_cCod, _dIni, _dFim, _cProjet)
// Consulta a disponibilidade de frota
********************************************************************************
Local _lRet		:= .T.
Local _cServ	:= Posicione('ST9',1,xFilial('ST9')+_cCod,'T9_TIPOSE')
Local _cAliasAnt:= Alias()
Default _cProjet:= ""

If !Empty(_dIni) .And. !Empty(_dFim)
	If _cServ $ "G|U|P|R"			//Equipamentos - Tabela ZLG (Guindaste, Gruas, Plataforma, Remoção)
		cQUery := "Select ZLG.ZLG_NRAS		as _xNrAS,		ZLG.ZLG_PROJET	as _xProj,	ZLG.ZLG_OBRA	as _xObra,	ZLG.ZLG_VIAGEM	as _xViagem, "
		cQuery += "		  ZLG.ZLG_CODCLI	as _xCodCli,	ZLG.ZLG_LOJA	as _xLoja,	ZLG.ZLG_NOMCLI	as _xRazao, ZLG.ZLG_STATUS	as _xStatus, "
		cQuery += "		  ZLG.ZLG_DTINI		as _xDtIni,		ZLG.ZLG_DTFIM	as _xDtFim "
		cQuery += "From " + RetSqlName("ZLG") + " ZLG "
		cQUery += "Where  ZLG.ZLG_FROTA    = '" + _cCod + "' And "
		cQUery += 	   "((ZLG.ZLG_DTINI <= "  + DtoS(_dIni) + " and ZLG.ZLG_DTINI <= " + DtoS(_dFim)  + " and ZLG.ZLG_DTFIM >= "  + DtoS(_dIni) + "  and ZLG.ZLG_DTFIM >= " + DtoS(_dFim) + ") or "	// Período totalmente dentro do lançamento
		cQUery +=      " (ZLG.ZLG_DTINI >= "  + DtoS(_dIni) + " and ZLG.ZLG_DTINI <= " + DtoS(_dFim)  + " and ZLG.ZLG_DTFIM >= "  + DtoS(_dIni) + "  and ZLG.ZLG_DTFIM <= " + DtoS(_dFim) + ") or "	// Período totalmente fora do lançamento
		cQUery +=      " (ZLG.ZLG_DTINI <= "  + DtoS(_dIni) + " and ZLG.ZLG_DTINI <= " + DtoS(_dFim)  + " and ZLG.ZLG_DTFIM >= "  + DtoS(_dIni) + "  and ZLG.ZLG_DTFIM <= " + DtoS(_dFim) + ") or "	// Lançamento termina no período          
		cQUery +=      " (ZLG.ZLG_DTINI >= "  + DtoS(_dIni) + " and ZLG.ZLG_DTINI <= " + DtoS(_dFim)  + " and ZLG.ZLG_DTFIM >= "  + DtoS(_dIni) + "  and ZLG.ZLG_DTFIM >= " + DtoS(_dFim) + ")) and "	// Lançamento inicia no período
		cQUery += 	   " ZLG.ZLG_CODBEM  = '' And "

		If !Empty(_cProjet)
			_cProjet := Substr(_cProjet,1,At("/",_cProjet)-1)
			cQUery +=  " ZLG.ZLG_PROJET Not Like '%" + _cProjet + "%' And "
			//cQUery +=  " ZLG.ZLG_PROJET <> '" + _cProjet + "' And "
			cQUery +=  " ZLG.ZLG_STATUS Not In ('R','1','9','C',' ') 	And "
		EndIf

		cQUery += 	   " ZLG.D_E_L_E_T_  = ' ' "
		cQUery += "Order By ZLG_DTINI "
	Else 							//Transportes - Tabela ZLE (transportes)
		cQUery := "Select ZLE.ZLE_AS		as _xNrAS,	ZLE.ZLE_PROJET	as _xProj,	ZLE.ZLE_OBRA	as _xObra,	ZLE.ZLE_VIAGEM	as _xViagem, "
		cQuery += "		  ZLE.ZLE_DTPROG	as _xDtIni,	ZLE.ZLE_DTPROG	as _xDtFim, ZLE.ZLE_STATUS	as _xStatus "
		cQuery += "From " + RetSqlName("ZLE") + " ZLE "
		cQUery += "Where  ZLE.ZLE_FROTA = '" + _cCod +"' And "
		cQUery += 		 "ZLE.ZLE_DTPROG  BETWEEN '" + DtoS(_dIni) + "' AND '" + DtoS(_dFim) + "' And "

		If !Empty(_cProjet)
		_cProjet := Substr(_cProjet,1,At("/",_cProjet)-1)
			cQUery +=  " ZLE.ZLE_PROJET Not Like '%" + _cProjet + "%' And "
		//	cQUery +=  " ZLE.ZLE_PROJET <> '" + _cProjet + "' And "
			cQUery +=  " ZLE.ZLE_STATUS <> '0' 				  And "
		EndIf

		cQUery += 		 "ZLE.D_E_L_E_T_ = ' ' " 
		cQUery += "Order By ZLE_DTPROG "
	Endif

	cQuery    := ChangeQuery( cQuery )
	cAliasQry := GetNextAlias()
	dbUseArea( .T., 'TOPCONN', TCGENQRY(,, cQuery), cAliasQry, .T., .T. )
		
	(cAliasQry)->( dbGoTop() )
	While (cAliasQry)->(!Eof()) .and. _lRet
		If (_xProj == _cProjet .and.   _cServ $ "G|U|P|R"  .and. _xStatus == "R") .or. ;
		   (_xProj == _cProjet .and. !(_cServ $ "G|U|P|R") .and. _xStatus == "0")
//			MsgAlert("Frota selecionada (" + AllTrim(_cCod) + "), está reservada no período informado.")
		Else
			MsgAlert("Frota selecionada (" + AllTrim(_cCod) + "), está programada no período informado."+ Chr(13) + Chr(10) +;
					 "Programação Encontrada"															+ Chr(13) + Chr(10) +;
					 "> Número da AS " 		+ _xNrAS	+ "."											+ Chr(13) + Chr(10) +;
					 "> Número do Agendamento" + _xProj	+ "."											+ Chr(13) + Chr(10) +;
					 "> Número da Obra "	+ _xObra 	+ "."											+ Chr(13) + Chr(10) +;
					 "> Número da Viagem " 	+ _xViagem	+ "."											+ Chr(13) + Chr(10) +;
					 "> Período Programado de " + DtoC(StoD(_xDtIni)) + " a " + DtoC(StoD(_xDtFim))		+ ".")
			_lRet := .F.
		EndIf
		(cAliasQry)->(dbSkip())
	EndDo

	(cAliasQry)->(dbCloseArea())
	dbSelectArea(_cAliasAnt)
EndIf

Return _lRet

**************************************************
Static Function TurVal(Opc, oRet)
//Manutenção de Turnos. 
**************************************************

Local   nI,nPos
Local   nL        := 1
Local   nUsado    := 0
Local   oSButton1                                                
Local   nStyle    := GD_INSERT + GD_UPDATE + GD_DELETE
Local   aHeader   := {}
Local   aCols     := {}
Local   cAlias    :="ZBB" 
Private cTGet2    := Str(ZA5->ZA5_PREDIA)


Private lRefresh  := .T.

SX3->(DbSetOrder(1))
SX3->(DbSeek(cAlias))
While SX3->(!Eof()) .and. SX3->X3_ARQUIVO == cAlias       
	If X3Uso(SX3->X3_USADO) .and. cNivel >= SX3->X3_NIVEL 
	
	  	If !(ZA0->ZA0_TIPOSE <> "U" .and. SX3->X3_CAMPO $ "ZBB_DIASEM|ZBB_VROPER" )
         	 nUsado++ 
	         AAdd (aHeader, {Trim(SX3->X3_TITULO),;    //01 - titulo
	                              SX3->X3_CAMPO  ,;    //02 - nome do campo
	                              SX3->X3_PICTURE,;    //03 - mascara do campo
	                              SX3->X3_TAMANHO,;    //04 - tamanho
	                              SX3->X3_DECIMAL,;    //05 - decimais
	                              SX3->X3_VALID  ,;    //06 - validacao
	                              SX3->X3_USADO  ,;    //07 - USADO
	                              SX3->X3_TIPO   ,;    //08 - TIPO DO CAMPO
	                              "",;    //09 - ALIAS
	                              SX3->X3_CONTEXT})    //10 - Virtual ou Real    
		EndIf
 	Endif
    SX3->(DbSkip())
Enddo              

IF ZA0->ZA0_TIPOSE $ "G|R|I"	//Guindaste | Remoção | Transporte Interno		//Maritima
	nFrota:= oRet:aCols[oRet:nAt][Ascan(oRet:aHeader,{|x|AllTrim(x[2])=="ZA5_GUINDA"})] // oDlgGui:nAt 
	//cChave:= 'dbSeek(xFILIAL(cAlias)+cProjet+cObra+nFrota+cSeqGui)'
	//cChave2:= 'xFILIAL(cAlias)+cProjet+cObra+nFrota+cSeqGui'
	//cChave3:= 'ZBB_FILIAL+ZBB_PROJET+ZBB_OBRA+ZBB_FROTA+ZBB_SEQGUI'
	cChave:= 'dbSeek(xFILIAL(cAlias)+cProjet+cObra+cSeqGui)'
	cChave2:= 'xFILIAL(cAlias)+cProjet+cObra+cSeqGui'
	cChave3:= 'ZBB_FILIAL+ZBB_PROJET+ZBB_OBRA+ZBB_SEQGUI'
Else
	nFrota:= oRet:aCols[oRet:nAt][Ascan(oRet:aHeader,{|x|AllTrim(x[2])=="ZAG_GRUA"})] // oDlgGui:nAt
	cChave:= 'dbSeek(xFilial(cAlias)+cProjet+cObra+nFrota)'
	cChave2:= 'xFILIAL(cAlias)+cProjet+cObra+nFrota'
	cChave3:= 'ZBB_FILIAL+ZBB_PROJET+ZBB_OBRA+ZBB_FROTA'
Endif

If oRet:nAt > Len(aColsTurno)
	While oRet:nAt > Len(aColsTurno)
		AADD(aColsTurno, {})
	End 
EndIf 
//If Empty(aColsTurno[oRet:nAt])

	dbSelectArea(cAlias)
	ZBB->(dbSetOrder(2))
	
	If &(cChave) .And. Empty(aColsTurno[oRet:nAt])
		If ZA0->ZA0_TIPOSE == "U"
		   While &(cChave3)==&(cChave2)
		             AAdd(aCols,{ZBB_PROJET,;                         
		                         ZBB_OBRA,;
		                         ZBB_FROTA,;
		                         ZBB_SEQGUI,;
		                         ZBB_TURNO,;
		                         ZBB_MINDIT,;
		                         ZBB->ZBB_DIASEM,;
		                         ZBB_HRINIT,;
		                         ZBB_HOFIMT,;
		                         ZBB_VALTUR,;                                     
		                         ZBB_PORCEN,;
		                         .F.})
		             ZBB->(dbSkip())
		   Enddo
		Else
			While &(cChave3)==&(cChave2)
		             AAdd(aCols,{ZBB_PROJET,;                         
		                         ZBB_OBRA,;  
		                         ZBB_FROTA,;
		                         ZBB_SEQGUI,;
		                         ZBB_TURNO,;
		                         ZBB_MINDIT,;
		                         ZBB_HRINIT,;
		                         ZBB_HOFIMT,;
		                         ZBB_VALTUR,;                                     
		                         ZBB_PORCEN,;
		                         .F.})
		             ZBB->(dbSkip())
			Enddo
		EndIf
	Else
		If !&(cChave) .And. Empty(aColsTurno[oRet:nAt])
		    If Empty(aCols)
				AADD(aCols,Array(nUsado+1))
				           
				For nI := 1 To nUsado
				    aCols[1][nI] := CriaVar(aHeader[nI][2])
				Next                      
				
				aCols[1][1]        := cProjet //Projeto
				aCols[1][2]        := cObra   //Obra
				aCols[1][3] 	   := nFrota 
				aCols[1][4]        := cSeqGui // SeqGui
				aCols[1][5]        := "001"   //Turno
			
				aCols[1][nUsado+1] := .F.
			EndIf
		Else
			aCols:= aClone(aColsTurno[oRet:nAt])
		EndIf
	Endif  
//Else 
//	aCols:= aClone(aColsTurno[oRet:nAt])
//EndIf  

If Opc == 10
	nDiaTurno := aCols[1,GdFieldPos("ZBB_MINDIT",aHeader)]
	nHrsTurno := GetHorasTurno(aCols[1,GdFieldPos("ZBB_HRINIT",aHeader)], aCols[1,GdFieldPos("ZBB_HOFIMT",aHeader)])
	nValTur1  := Iif(Len(aCols) >= 1,(Val(nDiaTurno) * nHrsTurno) * aCols[1,GdFieldPos("ZBB_VALTUR",aHeader)],0)
	
	If Len(aCols) >= 2
		nDiaTurno := aCols[2,GdFieldPos("ZBB_MINDIT",aHeader)]
		nHrsTurno := GetHorasTurno(aCols[2,GdFieldPos("ZBB_HRINIT",aHeader)], aCols[2,GdFieldPos("ZBB_HOFIMT",aHeader)])
		nValTur2  := Iif(Len(aCols) >= 2,(Val(nDiaTurno) * nHrsTurno) * aCols[2,GdFieldPos("ZBB_VALTUR",aHeader)],0)
		
		nDiaTurno := aCols[3,GdFieldPos("ZBB_MINDIT",aHeader)]
		nHrsTurno := GetHorasTurno(aCols[3,GdFieldPos("ZBB_HRINIT",aHeader)], aCols[3,GdFieldPos("ZBB_HOFIMT",aHeader)])
		nValTur3  := Iif(Len(aCols) >= 3,(Val(nDiaTurno) * nHrsTurno) * aCols[3,GdFieldPos("ZBB_VALTUR",aHeader)],0)
	EndIf
	
	/*nValTur1  := aCols[1,GdFieldPos("ZBB_VALTUR",aHeader)]
	nValTur2  := aCols[2,GdFieldPos("ZBB_VALTUR",aHeader)]
	nValTur3  := aCols[3,GdFieldPos("ZBB_VALTUR",aHeader)]*/
	oValTur1:Refresh()
	oValTur2:Refresh()
	oValTur3:Refresh()
Else
oDlgVT 	  := MSDIALOG():New(000,000,300,660,"Manutenção de Turnos",,,,,,,,,.T.)

RegToMemory("ZBB", If(Empty(aCols),.T.,.F.))

oGetVT := MsNewGetDados():New(05   ,05   ,145    ,295   ,nStyle,  /*"LINOK"*/  ,  /*"TDOK"*/  ,"+ZBB_TURNO" ,Iif(Opc==2,{},{"ZBB_PORCEN","ZBB_HRINIT","ZBB_HOFIMT","ZBB_MINDIT","ZBB_DIASEM","ZBB_VROPER"})  ,         , 3   , /*"FIELDOK"*/ , /*"SPRDEL"*/ , /*"DELOK"*/ , oDlgVT  ,aHeader,aCols)
//oTGet2 := TGet():Create( oDlgVT,{||cTGet2},05,0300,036,009,"@!",,0,,,.F.,,.T.,,.F.,,.F.,.F.,,.T.,.F.,,cTGet2,,,, )
oSButton1 := SButton():New(135,300,1,{||oDlgVT:End(), TIRDEL(oRet), RetGetD() },oDlgVT,.T.,,)
oGetVT:bChange := { || TurVal1()}

oDlgVT:Activate(,,,.T.,,,)
EndIf
                                                                 
Return

**************************************************
Static Function TurVal1()
//Função auxiliar do botão Turnos.
//Essa função carrega os dados de Projeto e Obra da
//primeira linha para as demais.
**************************************************

Local cProjet :="" 
Local cObra   :=""        
Local cSeqGui :=""

If Len(oGetVT:aCols) > 1
      cProjet :=GDFieldGet("ZBB_PROJET",Len(oGetVT:aCols)-1)
      cObra   :=GDFieldGet("ZBB_OBRA"  ,Len(oGetVT:aCols)-1)
      nFrota  :=GDFieldGet("ZBB_FROTA" ,Len(oGetVT:aCols)-1)
      cSeqGui :=GDFieldGet("ZBB_SEQGUI",Len(oGetVT:aCols)-1)

      GdFieldPut("ZBB_PROJET",cProjet ,oGetVT:nAt)
      GdFieldPut("ZBB_OBRA"  ,cObra   ,oGetVT:nAt)      
      GdFieldPut("ZBB_FROTA" ,nFrota  ,oGetVT:nAt)      
      GdFieldPut("ZBB_SEQGUI",cSeqGui  ,oGetVT:nAt)
   
      oGetVT:Refresh()
Endif

Return

**************************************************
Static Function TIRDEL(oRet)
**************************************************
Local aCols := {}
Local nI, xI
Local aIt	:={}
Local lTur	:= .F.
Local nAlt	:= 0

For nI := 1 To Len(oGetVT:aCols)
	If !oGetVT:aCols[nI,Len(oGetVT:aCols[nI])]
		AADD(aCols,oGetVT:aCols[nI])
	//ElseIf (DbSeek(xFilial("ZBB")+oGetVT:aCols[nI][1]+oGetVT:aCols[nI][2]+oGetVT:aCols[nI][3]+oGetVT:aCols[nI][4]))
	ElseIf (DbSeek(xFilial("ZBB")+oGetVT:aCols[nI][1]+oGetVT:aCols[nI][2]+oGetVT:aCols[nI][4]))
		RecLock("ZBB",.F.)
			dbDelete()
		ZBB->(MsUnLock())
	EndIf
Next 

oGetVT:aCols := aClone(aCols)
aColsTurno[oRet:nAt] := aClone(oGetVT:aCols)

For nX := 1 To Len(oTurno_Cols)
	If !lTur 
	aIt := oTurno_Cols[nX]
	For nY := 1 To Len(aIt)
		If cObra ==aIt[nY, GdFieldPos("ZBB_OBRA",oGetVT:aHeader)] .And. cSeqGui ==aIt[nY, GdFieldPos("ZBB_SEQGUI",oGetVT:aHeader)] 
			lTur := .T.
			nAlt := nX
			Exit
		EndIf
	Next nY
	EndIf
Next nX  

If !lTur 
	Aadd(oTurno_Cols,aColsTurno[oRet:nAt])          
Else
	oTurno_Cols[nAlt] := aColsTurno[oRet:nAt] 
EndIf           

Return
       
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³LOCC001   ºAutor  ³M&S Consultoria     º Data ³  30/06/07   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function RetGetD
Local nVal1 	:= 0
Local nMin  	:= 0
Local nMinSem 	:= 0 
Local nVrOper   := 0
//IIF ( ValType(oGetVT)=='O' .AND. Len(aColsTurno) >=oDlgGui:nAt,oGetVT:aCols:= aClone(aColsTurno[oDlgGui:nAt]) ,0)
For n:= 1 to Len(oGetVT:aCols)
	If !oGetVT:aCols[n,Len(oGetVT:aCols[n])]
		nVal1 +=IIF( ValType(oGetVT)=='O' .and.  Len(oGetVT:aCols) >= 1 , (GDFieldGet ( "ZBB_VALTUR", n, .F., oGetVT:aHeader, oGetVT:aCols )),0)
		nMin  +=IIF( ValType(oGetVT)=='O' .and.  Len(oGetVT:aCols) >= 1 , Val((GDFieldGet ( "ZBB_MINDIT", n, .F., oGetVT:aHeader, oGetVT:aCols ))),0)
		If  ZA0->ZA0_TIPOSE == "U"
			nMinSem += IIF( ValType(oGetVT)=='O' .and.  Len(oGetVT:aCols) >= 1 , Val((GDFieldGet ( "ZBB_DIASEM", n, .F., oGetVT:aHeader, oGetVT:aCols )));
				       * Val((GDFieldGet ( "ZBB_MINDIT", n, .F., oGetVT:aHeader, oGetVT:aCols ))) ,0)
			nVrOper += IIF( ValType(oGetVT)=='O' .and.  Len(oGetVT:aCols) >= 1 , ((GDFieldGet ( "ZBB_VROPER", n, .F., oGetVT:aHeader, oGetVT:aCols ))),0)
		Endif
	EndIf
Next 

//Atualiza a ZA0 com as Informações fornecidas na tabela de turnos
IF ZA0->ZA0_TIPOSE $ "G|R|I"	//Guindaste | Remoção | Transporte Interno
	//oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRHOR"})]  := nVal1
	oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_MINDIA"})] := nMin
ElseiF ZA0->ZA0_TIPOSE $ "U"
	oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_VRHOR"})]  := nVal1
	oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_MINDIA"})] := nMinSem //	Maickon - Valor Mult. 5 Para trazer horas min em semanas 
	oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_MINMES"})] := (nMin*Val(substr(dtos(LastDay(dDataBase)),7,2)))//(nMinSem * 4)//Maickon
	oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_THORAS"})] := (M->ZAG_PREDIA * oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_MINMES"})])//nMin*LastDay(dDataBase())
	oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_OPERAD"})] := nVrOper	 
ElseiF ZA0->ZA0_TIPOSE $ "P"
	oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_VRHOR"})]  := nVal1
	oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_MINDIA"})] := nMin	
Endif




Return
**************************************************
Static Function fSalvarTur(cAlias,aHeader,aCols)
//Função auxiliar do botão Turnos.
//Essa função pega os dados do acols e armazena
//na tabela ZBB.
**************************************************

Local nPos
Local cProjet,cObra,cTurno,cValtur,cHrIni,cHrFin, cMinDiT,nPorcent,cSeqGui
Local aGravados:={}  //Gravados

dbSelectArea(cAlias)
dbSetOrder(1)

For nX := 1 To Len(oTurno_Cols)
	aItens := oTurno_Cols[nX]
	For nPos := 1 To Len(aItens)
		cProjet :=aItens[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZBB_PROJET"})]
	    cObra   :=aItens[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZBB_OBRA"  })]
	    nFrota  :=aItens[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZBB_FROTA" })]    
	    cSeqGui :=aItens[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZBB_SEQGUI"})]    
	    cTurno  :=aItens[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZBB_TURNO" })]
	    cMinDiT :=aItens[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZBB_MINDIT"})]
	    cHrIni  :=aItens[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZBB_HRINIT"})]
	    cHrFin  :=aItens[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZBB_HOFIMT"})]
	    cValtur :=aItens[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZBB_VALTUR"})]
	    nPorcent:=aItens[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZBB_PORCEN"})]
	    If !aItens[nPos,Len(aHeader)+1] .AND. !Empty(cProjet) .AND. !Empty(cObra) .AND. !Empty(cTurno)  .AND. !Empty(cSeqGui) //!Deleted()
	        dbSeek(xFILIAL(cAlias)+cProjet+cObra+nFrota+cSeqGui+cTurno)
	        If Eof()
	           RecLock(cAlias,.T.)
	        Else
	           RecLock(cAlias,.F.)
	        EndIf
	        fGravaTudocC(cAlias,aHeader,aItens[nPos])  //Grava todos os campos do aItens
	        (cAlias)->ZBB_FILIAL :=xFILIAL(cAlias)
	        (cAlias)->ZBB_PROJET :=cProjet
	        (cAlias)->ZBB_OBRA   :=cObra
			(cAlias)->ZBB_SEQGUI :=cSeqGui	        
	        (cAlias)->ZBB_FROTA  :=nFrota
	        (cAlias)->ZBB_TURNO  :=cTurno
	        (cAlias)->ZBB_MINDIT :=cMinDiT
	        (cAlias)->ZBB_HOFIMT :=cHrIni
	        (cAlias)->ZBB_HOFIMT :=cHrFin
	        (cAlias)->ZBB_VALTUR :=cValtur 
	        (cAlias)->ZBB_PORCEN :=nPorcent
	        AAdd(aGravados,Recno())  //Gravados
	        MsUnLock()
	    Else
	    dbSeek(xFILIAL(cAlias)+cProjet+cObra+nFrota+cSeqGui+cTurno)
	        While !Eof() .AND. ZBB_FILIAL+ZBB_PROJET+ZBB_OBRA+ZBB_FROTA+ZBB_TURNO+ZBB_SEQGUI==xFILIAL(cAlias)+cProjet+cObra+nFrota+cTurno+cSeqGui
		       If Ascan(aGravados,{|x|x==Recno()})==0
			      RecLock(cAlias,.F.)
			      dbDelete()
			      MsUnLock()
		       EndIf
		       dbSkip()
	        Enddo
	    EndIf
	Next nPos
Next nX
    
/*
For nPos:=1 to Len(aCols)
    cProjet:=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZBB_PROJET"})]
    cObra  :=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZBB_OBRA"  })]
    nFrota :=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZBB_FROTA" })]    
    cTurno :=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZBB_TURNO" })]
    cMinDiT :=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZBB_MINDIT" })]
    cHrIni :=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZBB_HRINIT"})]
    cHrFin :=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZBB_HOFIMT"})]
    cValtur:=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZBB_VALTUR"})]
    nPorcent:=aCols[nPos][Ascan(aHeader,{|x|AllTrim(x[2])=="ZBB_PORCEN"})]
    If !aCols[nPos,Len(aHeader)+1] .AND. !Empty(cProjet) .AND. !Empty(cObra) .AND. !Empty(cTurno)  //!Deleted()
        dbSeek(xFILIAL(cAlias)+cProjet+cObra+nFrota+cTurno)
        If Eof()
           RecLock(cAlias,.T.)
        Else
           RecLock(cAlias,.F.)
        EndIf
        fGravaTudocC(cAlias,aHeader,aCols[nPos])  //Grava todos os campos do aCols
        (cAlias)->ZBB_FILIAL :=xFILIAL(cAlias)
        (cAlias)->ZBB_PROJET :=cProjet
        (cAlias)->ZBB_OBRA   :=cObra
        (cAlias)->ZBB_FROTA  :=nFrota
        (cAlias)->ZBB_TURNO  :=cTurno
        (cAlias)->ZBB_MINDIT :=cMinDiT
        (cAlias)->ZBB_HOFIMT :=cHrIni
        (cAlias)->ZBB_HOFIMT :=cHrFin
        (cAlias)->ZBB_VALTUR :=cValtur 
        (cAlias)->ZBB_PORCEN :=nPorcent
        AAdd(aGravados,Recno())  //Gravados
        MsUnLock()
    Else
    dbSeek(xFILIAL(cAlias)+cProjet+cObra+nFrota+cTurno)
        While !Eof() .AND. ZBB_FILIAL+ZBB_PROJET+ZBB_OBRA+ZBB_FROTA+ZBB_TURNO==xFILIAL(cAlias)+cProjet+cObra+nFrota+cTurno
	       If Ascan(aGravados,{|x|x==Recno()})==0
		      RecLock(cAlias,.F.)
		      dbDelete()
		      MsUnLock()
	       EndIf
	       dbSkip()
        Enddo
    EndIf
Next*/

Return


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³LC001Pos  ºAutor  ³Cristiam Rossi      º Data ³  26/05/11   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Usuário atribui o percentual de possibilidade da proposta  º±±
±±º          ³ a ser concretizada. Uso no relatório gerencial             º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ LOCC001                                                    º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
User function LC001Pos()
Local oDlg, oPan1, oGrp, oGet, oBtnOk, oBtnCanc
Local lGrv    := .F.
Local oFont   := TFont():New("Arial",12,16,,.T.,,,,.T.,.F.)
Local nPossib := 0

	if ZA0->(EOF()) .or. ZA0->(BOF())
		Return .F.
	else
		nPossib := Val(ZA0->ZA0_POSSIB)
	endif

	DEFINE MSDIALOG oDlg FROM 00,00 TO 130,172 PIXEL TITLE "Possibilidade"

	oPan1 := tPanel():New(02,02,"",oDlg,,,,,,85,38,.F.,.F.)
	oGrp  := tGroup():New(0,0,oPan1:nHeight/2-2,oPan1:nWidth/2,"Possibilidade de Venda:",oPan1,,,.T.)

	@ 10,25 msGet oGet Var nPossib Picture "999" Valid(fPossib(nPossib)) Font oFont of oPan1 Pixel

	@ 14,70 Say "%" Size 20,20 Font oFont of oPan1 PIXEL

   	oBtnOk   := tButton():New(45,10,"Gravar",oDlg,{||lGrv:=.T.,oDlg:end()},35,12,,,,.T.) 
   	oBtnCanc := tButton():New(45,52,"Fechar",oDlg,{||oDlg:end()},35,12,,,,.T.) 

	ACTIVATE MSDIALOG oDlg CENTERED
	
	if lGrv
		ZA0->(RecLock("ZA0",.F.))
		ZA0->ZA0_POSSIB := StrZero(nPossib,3)
		ZA0->(MsUnlock())
	endif
Return lGrv

Static Function fPossib(nValor)
	Local lRet := .f. 
	if nValor >= 0 
		if nValor <= 100
			lRet := .T.
		Else
			Alert("Informe de 0 a 100.")
			lRet := .F.
		Endif
	Else
			Alert("Informe de 0 a 100.")
			lRet := .F.

	Endif	
		
Return(lRet)               

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³LOCC001   ºAutor  ³M&S Consultoria     º Data ³  30/06/07   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Static Function Bobkj()
Local oRet

Do Case
	Case ValType(oDlgGui)=="O" ;oRet:= 	oDlgGui
 	Case ValType(oDlgTra)=="O" ;Ret:=  	oDlgTra	
	Case ValType(oDlgGru)=="O" ;oRet:= 	oDlgGru	
	Case ValType(oDlgPla)=="O"	;oRet:= oDlgPla	

EndCase

Return oRet

   
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³LOCC001   ºAutor  ³M&S Consultoria     º Data ³  30/06/07   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/                                                                          
User Function xCalcHoras

Local _nRet:= 0 

If ZA0->ZA0_TIPOSE $ "G|R|I"	//Guindaste | Remoção | Transporte Interno

	IF M->ZA5_TIPOCA $ "H|F"
		_nRet := (M->ZA5_PREDIA)
	
	ElseIf M->ZA5_TIPOCA = "D" 
		_nRet := (M->ZA5_PREDIA * M->ZA5_MINDIA)	

	ElseIf M->ZA5_TIPOCA = "M"
		_nRet := (M->ZA5_PREDIA * M->ZA5_MINMES )

	EndIf    
	
ElseIf ZA0->ZA0_TIPOSE $ "P|M"	//Plataforma | MARITIMO  

	If M->ZAG_TPBASE = "M" //Mensal
		_nRet:= (M->ZAG_PREDIA * M->ZAG_MINDIA)* 4 //Quatro corresponde a 4 semanasx
	
	ElseIf M->ZAG_TPBASE = "Q" //Quinzenal
		_nRet:= (M->ZAG_PREDIA * M->ZAG_MINDIA)* 2 //Dois corresponde a 15 dias
		
	ElseIf M->ZAG_TPBASE = "D" //Diaria
		_nRet:= ((M->ZAG_MINDIA/ 5)* M->ZAG_PREDIA) //
		
	Else  //Semanal
		_nRet:= (M->ZAG_PREDIA * M->ZAG_MINDIA)
		
	Endif

Else //Grua  - Quantidade de Meses * Minimo horas Mes

	_nRet:= (M->ZAG_PREDIA * oDlgGru:aCols[oDlgGru:nAt][Ascan(oDlgGru:aHeader,{|x|AllTrim(x[2])=="ZAG_MINMES"})])

Endif

Return _nRet      



/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³LOCC001   ºAutor  ³M&S Consultoria     º Data ³  30/06/07   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
User Function VerPed
Local lRet := .F.








Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³ fValResp ºAutor  ³M&S Consultoria     º Data ³  30/06/07   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Funcao para validar edicao do campo ZAA_VALOR.             º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³                                                            º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
User Function fValResp()
Local lRet 			:= .T.
Local cCampo   		:= "ZAA_RESPON"
Local cCampoGet		:= oDlgRes:aCols[ oDlgRes:oBrowse:nAt][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])==cCampo})]

If cCampoGet == "C"
	Alert( "O Campo [Valor] só poderá ser editado se o campo [Responsável] for diferente de 'C=Cliente'" )
	lRet := .F.
Endif  


Return( lRet )

User Function fValCob()
	If oDlgRes:aCols[ oDlgRes:oBrowse:nAt][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_RESPON"})] == "L" //Empresa
		oDlgRes:aCols[ oDlgRes:oBrowse:nAt][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_VALCOB"})] := M->ZAA_VALOR    			
	EndIf 
Return(.T.)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³ fVRespon ºAutor  ³M&S Consultoria     º Data ³  30/06/07   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Funcao para validar edicao do campo ZAA_RESPON             º±±
±±º          ³ ( Tipo de Responsavel )                                    º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³                                                            º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
User Function fVRespon()
Local lRet 		:= .T.
Local cNovaResp	:= &(ReadVar())

If cNovaResp == "C"
	oDlgRes:aCols[ oDlgRes:oBrowse:nAt][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_VALOR" })] := 0 
	oDlgRes:aCols[ oDlgRes:oBrowse:nAt][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_VALCOB"})] := 0
	oDlgRes:oBrowse:Refresh()
Endif

Return( lRet )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³LOCC001   ºAutor  ³M&S Consultoria     º Data ³  30/06/07   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Static Function VALID(oDlg, oFolder)
Local lSalTD 	:= .t.                    
Local nPosDtIni := 0
Local nPosDtFim := 0
Local nPosFrota := 0
Local nPosObra  := 0
Local nPosSeq	:= 0
Local cMsg		:= ""
Local cRet		:= ""   
Local lShowMsg  := .F.
Local aColsAux	:= {}
Local _lErro
Private cEOL    := CHR(13)+CHR(10)

 	U_ZA0MUDA( oFolder:nOption, oFolder:nOption, oDlg, oFolder)
 	
	If !VALCEPX()
		If AllTrim(SuperGetMV("IT_BLQCEP",,"S")) == "S"	
			Return .F.
		EndIf
	EndIf


	if ! ValITxObr()	// Exigencia Obra (Viagem) x Itinerario
		Return .F.
	Endif
	
	// Frank Z Fuga - 17/02/2016 - verificacao especial para tabela por turno e km
	_lErro := .F.
	For _nX:=1 to Len(oDlgCar:aCols)    
		If !oDlgCar:aCols[_nX][Len(oDlgCar:aHeader)+1]
			_aRet := U_KMMOD2("1", _nX, "2")
			If _aRet[1] == "S" // todos os rateios devem ter o seqcol preenchido
				If empty(oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SEQCOL"})])
					_lErro := .T.
				EndIF
			EndIF
		EndIF
	Next
	If _lErro
		MsgSTop("Falha no preenchimento da sequencia da coleta.","Atenção!")
		Return .F.
	EndIf
	

If ValType(oDlgCnj)=="O" 
	For nPos:=1 to Len(oDlgCnj:aCols)
		If Empty(oDlgCnj:aCols[nPos][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_DTLIM"})])
			If !oDlgCnj:aCols[nPos,28]    //Se a linha estiver deletada não deverá validar a data limite.
				MsgAlert('Data Limite não preenchida favor verificar')
				lSalTD := .f.
				Exit
			EndIf
		EndIf
		//Verifica se existe algum Conj. Transportador deletado, após realiza a verificação na DTQ para analizar
		// se a mesma está aceita, se estiver não será possível realizar o delete.
		//If oDlgCnj:aCols[nPos,28]
		If oDlgCnj:aCols[nPos,Len(oDlgCnj:aHeader)+1]
			DbSelectArea("DTQ")
			DbSetOrder(1)
			If DTQ->(DbSeek(xFilial("DTQ")+(oDlgCnj:aCols[nPos][Ascan(oDlgCnj:aHeader,{|x|AllTrim(x[2])=="ZLW_VIAGEM"})]) ))
				If DTQ->DTQ_STATUS == '6'
					MsgAlert("ASF não poderá ser deletada pois já teve liberação")
					lSalTD := .f.
				Else
					eFrom	:= AllTrim(GetMV("MV_RELFROM"))
					cPara	:= SuperGetMv("LC_MAILFR",nil,nil,"loliveira@itup.com.br")
					cCC		:= ""
					cTitulo	:= "Cancelada  ASF - Agendamento " + DTQ->DTQ_SOT
					cMsg	:= "Este email é para informar que no sistema foi CANCELADA a ASF de Numero: "+DTQ->DTQ_AS+ CHR(13)+CHR(10)
					cCCo	:= ""
					
					U_MandaEmail( eFrom, cPara , cCC, cTitulo, cMsg, nil, cCCo)
					
					Reclock("DTQ",.f.)
						DTQ->(DbDelete())
					DTQ->(MsUnLock())       
					
				EndIf
			EndIf
		EndIf
	Next
	
EndIf

If ValType(oDlgPla)=="O"  

	If ZA0->ZA0_TIPFAT == "P"

		nPsTpBas:= aScan(oDlgPla:aHeader,{|x| AllTrim(x[2])=="ZAG_TPBASE"}) 
		nPsPreDi:= aScan(oDlgPla:aHeader,{|x| AllTrim(x[2])=="ZAG_PREDIA"}) 
		nPsVrHor:= aScan(oDlgPla:aHeader,{|x| AllTrim(x[2])=="ZAG_VRHOR"}) 
		nPsDtIni:= aScan(oDlgPla:aHeader,{|x| AllTrim(x[2])=="ZAG_DTINI"}) 
		nPsDtFim:= aScan(oDlgPla:aHeader,{|x| AllTrim(x[2])=="ZAG_DTFIM"}) 
	
		For _nI := 1 To Len(oDlgPla:aCols)		
		
			If !oDlgPla:aCols[_nI,Len(oDlgPla:aHeader)+1]
				If Empty(oDlgPla:aCols[_nI,nPsTpBas]) .Or. Empty(oDlgPla:aCols[_nI,nPsPreDi]) .Or. Empty(oDlgPla:aCols[_nI,nPsDtIni]);
					.Or. Empty(oDlgPla:aCols[_nI,nPsDtFim]) .Or. Empty(oDlgPla:aCols[_nI,nPsVrHor]) 
					MsgStop("Verifique se os campos: Base Calculo/Qtde Meses/Vr.Base/Dt.Inicio/Dt.Final "+Chr(13)+Chr(10);
							+"estão preenchidos!")	
					lSalTD := .F.										
				EndIf					
			EndIf
		
		Next _nI
	
	EndIf	

EndIf	

//Alison
If ValType(oDlgGui)=="O"
	nPosDtIni   := aScan( oDlgGui:aHeader , { |x| Upper( Alltrim( x[2] ) ) == "ZA5_DTINI"   })
	nPosDtFim   := aScan( oDlgGui:aHeader , { |x| Upper( Alltrim( x[2] ) ) == "ZA5_DTFIM"   })
	nPosFrota   := aScan( oDlgGui:aHeader , { |x| Upper( Alltrim( x[2] ) ) == "ZA5_GUINDA"   })
	nPosObra    := aScan( oDlgGui:aHeader , { |x| Upper( Alltrim( x[2] ) ) == "ZA5_OBRA"   })
	nPosSeq	    := aScan( oDlgGui:aHeader , { |x| Upper( Alltrim( x[2] ) ) == "ZA5_SEQGUI"   })
	
	cMsg := "A(s) Frota(s) abaixo está(ão) com data(s) encavalada(s)."+cEOL
	For nX := 1 To Len(oDlgGui:Acols)
//		Alert(oDlgGui:Acols[nX,nPosDtIni])
//		Alert(oDlgGui:Acols[nX,nPosDtFim])
		cRet :=	ValDtFrota(oDlgGui:Acols[nX,nPosFrota],oDlgGui:Acols[nX,nPosDtIni],oDlgGui:Acols[nX,nPosDtFim],oDlgGui:Acols[nX,nPosObra],oDlgGui:Acols[nX,nPosSeq])
		cMsg += cRet
		lShowMsg := .T.
	Next nX
	
	If !lShowMsg
		MsgInfo(cMsg,"Info")
	EndIf
EndIf     

//Validação campos obrigatórios - Alison(16/08/2013)
If ValType(oDlgTra)=="O"
	nPosDtIni   := aScan( oDlgTra:aHeader , { |x| Upper( Alltrim( x[2] ) ) == "ZA6_DTINI"   })
	nPosDtFim   := aScan( oDlgTra:aHeader , { |x| Upper( Alltrim( x[2] ) ) == "ZA6_DTFIM"   })
	nPosOrig    := aScan( oDlgTra:aHeader , { |x| Upper( Alltrim( x[2] ) ) == "ZA6_ORIGEM"   })
	nPosDest    := aScan( oDlgTra:aHeader , { |x| Upper( Alltrim( x[2] ) ) == "ZA6_DESTIN"   })
	
	For nX := 1 To Len(oDlgTra:aCols)		
		If !oDlgTra:aCols[nX,Len(oDlgTra:aHeader)+1]                                                                                       
			
			If Empty(oDlgTra:aCols[nX,nPosDtIni]) .Or. Empty(oDlgTra:aCols[nX,nPosDtFim]) .Or. Empty(oDlgTra:aCols[nX,nPosOrig]) .Or. Empty(oDlgTra:aCols[nX,nPosDest])
				MsgStop("Verifique se os campos da aba 'Viagens': Dt. Ini/Dt Fim/Origem e Destino "+Chr(13)+Chr(10);
							+"estão preenchidos!")	
				lSalTD := .F.
				Exit
			EndIf
		EndIf
	Next nX
			
	
	//fAcumuCar()
	/*aColsAux:=Aclone(oCar_Cols) 
	
	nPosTerc    := aScan( oDlgCar:aHeader , { |x| Upper( Alltrim( x[2] ) ) == "ZA7_EHTERC"   })
	nPosQuant   := aScan( oDlgCar:aHeader , { |x| Upper( Alltrim( x[2] ) ) == "ZA7_QUANT"   })
	nPosCarga   := aScan( oDlgCar:aHeader , { |x| Upper( Alltrim( x[2] ) ) == "ZA7_CARGA"   })
	nPosQtde    := aScan( oDlgCar:aHeader , { |x| Upper( Alltrim( x[2] ) ) == "ZA7_QTD"   })
	For nY := 1 To Len(aColsAux)
		If !aColsAux[nY,Len(oDlgCar:aHeader)+1]
			If Empty(aColsAux[nY,nPosTerc]) .Or. Empty(aColsAux[nY,nPosQuant]) .Or. Empty(aColsAux[nY,nPosCarga]) .Or. Empty(aColsAux[nY,nPosQtde])
				MsgStop("Verifique se os campos da aba 'Cargas': Terceiro/Nf Cli Difer/Carga e Qtde "+Chr(13)+Chr(10);
							+"estão preenchidos!")	
				lSalTD := .F.
				Exit
			EndIf
		EndIf
	Next nY 
	
	aColsAux := {}
	
	//fAcumuCon()
	aColsAux:=Aclone(oCon_Cols)
	
	nPosFrota    := aScan( oDlgCon:aHeader , { |x| Upper( Alltrim( x[2] ) ) == "ZAE_TRANSP"   })
	For nZ := 1 To Len(aColsAux)
		If !aColsAux[nZ,Len(oDlgCon:aHeader)+1]
			If Empty(aColsAux[nZ,nPosFrota])
				MsgStop("Verifique se o campo da aba 'Conj.Transportador': Transporte "+Chr(13)+Chr(10);
							+"está preenchido!")	
				lSalTD := .F.
				Exit
			EndIf		
		EndIf
	Next nZ*/
EndIf 

//Joni lima do carmo 10/03/2016 - validação do 
If Alltrim(ZA0->ZA0_CVA)=='S'
	If Empty(ZA0->ZA0_CVACHR)
		lSalTD := .F.
		MsgStop("Necessario que o Caracter do CVA esteja preenchido caso o CVA esteja como 'Sim' na aba 'Dados do Agendamento' ")		
	EndIf
EndIf 

If lSalTD
	fTimer()	// Chama o Timer p/ verificar se existe atualização pendente
	oTimer:DeActivate()

	fSalvar(oDlg)

	oTimer:Activate()
EndIf       

Return nil


//-------------------------------------------------------------------------------------------------
Static Function ValDtFrota(cFrota,dDtIni,dDtFim,cObra,cSeq)
	Local cRet	:= "" 
	Local aArea		:= GetArea()
	Local aAreaZLG	:= ZLG->(GetArea())
	Local cQuery	:= "" 
	Local cEOL      := CHR(13)+CHR(10)
	
	cQuery := " SELECT ZLG.* "
	cQuery += " FROM "+RetSqlName("ZLG")+" ZLG " 
	cQuery += " WHERE ZLG.D_E_L_E_T_<>'*' "
	cQuery += " AND ZLG.ZLG_FILIAL = '"+xFilial("ZLG")+"' "	
	cQuery += " AND (ZLG.ZLG_DTINI BETWEEN '"+DTOS(dDtIni)+"' AND '"+DTOS(dDtFim)+"' "   
	cQuery += " OR ZLG.ZLG_DTFIM BETWEEN '"+DTOS(dDtIni)+"' AND '"+DTOS(dDtFim)+"') " 
	
	cQuery := ChangeQuery(cQuery)		                                
	
	//Memowrite('c:\temp\locc001.txt',cQuery)                    
	If Select("TR02") > 0
 	     TR02->(DbCloseArea())
 	EndIf           
 	
	TcQuery cQuery New Alias TR02
	
	TcSetField("TR02","ZLG_DTINI","D",08,00)                                
	TcSetField("TR02","ZLG_DTFIM","D",08,00)
	
	While !TR02->(Eof())
	    If TR02->ZLG_STATUS == "1" .Or. TR02->ZLG_STATUS == "E" .Or. TR02->ZLG_STATUS == "S" .Or. TR02->ZLG_STATUS == "A"
			TR02->(DbSkip())
			Loop               
		EndIf
				
		
		If !Empty(TR02->ZLG_CODBEM)
			TR02->(DbSkip())
			Loop 
		EndIf
		
		cRet += AllTrim(TR02->ZLG_PROJET)+"-"+cObra+"-"+cSeq+" ("+AllTrim(cFrota)+") - "+DTOC(TR02->ZLG_DTINI)+" / "+DTOC(TR02->ZLG_DTFIM)+cEOL	    
		TR02->(DbSkip())
	EndDo                  
 	If Select("TR02") > 0
 	     TR02->(DbCloseArea())
 	EndIf
	
	/*DbSelectArea("ZLG")
	DbSetOrder(1)
	DbSeek(xFilial("ZLG")+cFrota)
	
	While ZLG->(!Eof()) .And. AllTrim(ZLG->ZLG_FROTA) == AllTrim(cFrota)
		If ZLG->ZLG_STATUS == "1" .Or. ZLG->ZLG_STATUS == "E" .Or. ZLG->ZLG_STATUS == "S" .Or. ZLG->ZLG_STATUS == "A"
			ZLG->(DbSkip())
			Loop               
		EndIf
		
		If DTOS(dDtIni) < DTOS(ZLG->ZLG_DTINI) .Or. DTOS(dDtIni) > DTOS(ZLG->ZLG_DTFIM)        
			DTOS(dDtFim) > DTOS(ZLG->ZLG_DTFIM)
			
		
		If !(DTOS(dDtIni) < DTOS(ZLG->ZLG_DTINI)).Or. DTOS(dDtFim) > DTOS(ZLG->ZLG_DTFIM)
				
//		If DTOS(dDtIni) >= DTOS(ZLG->ZLG_DTINI) .Or. DTOS(dDtFim) <= DTOS(ZLG->ZLG_DTFIM)
			ZLG->(DbSkip())
			Loop               
		EndIf                                    
		
		If !(DTOS(dDtIni) < DTOS(ZLG->ZLG_DTINI))
				
		
		If !Empty(ZLG->ZLG_CODBEM)
			ZLG->(DbSkip())
			Loop 
		EndIf
		
		cRet += cObra+"-"+cSeq+" ("+AllTrim(cFrota)+") - "+DTOC(ZLG->ZLG_DTINI)+" / "+DTOC(ZLG->ZLG_DTFIM)
		ZLG->(DbSkip())
	EndDo*/
	
	RestArea(aAreaZLG)	
	RestArea(aArea)
Return(cRet)

************************************************************************************************************************************
User Function GATXZA0(cProspe)
************************************************************************************************************************************
Local cQry := ""

cQry += " SELECT U5_CONTAT FROM " + RetSQLName("SU5") + CRLF
cQry += " WHERE U5_PROSPEC = '" + cProspe + "' " + CRLF
dbUseArea(.T., "TOPCONN",TCGENQRY(,,cQry),"TRB",.F.,.T.)

dbSelectArea("TRB")
dbSelectArea("ZA0")

cQry := TRB->U5_CONTAT

TRB->(dbCloseArea())

Return cQry



/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±³Funo    ³ SHOWF4   ³ Autor ³M&S Consultoria     º Data ³  30/06/07   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Valida se o cliente possui titulos em abertos no financeiro º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
User Function fValiCli(cCliente, cLoja)
Local _lRet 	:= .T.
Local _nRegs	:= 0
Local _cBmp		:= LoadBitmap( Nil, "BR_VERMELHO" )
Local _aDados	:= {}
Local _oDlgValCl, _oList	
Local _oReport
Local _cValidCli	
Local _cSitCliFin     

Local nLimitCred := 0
Local nValTit	 := 0
Local dDtLimCred 

Private _cCliValid := cCliente
Private _cLojValid := cLoja
Private _dDataRef  := DtoS(MsDate())

_cValidCli 	:= Posicione("SA1",1, xFilial("SA1")+_cCliValid+_cLojValid,"A1_ZVALCLI")
_cSitCliFin := Posicione("SA1",1, xFilial("SA1")+_cCliValid+_cLojValid,"A1_ZPENFIN") 

nLimitCred	:= Posicione("SA1",1, xFilial("SA1")+_cCliValid+_cLojValid,"A1_LC") 
dDtLimCred	:= Posicione("SA1",1, xFilial("SA1")+_cCliValid+_cLojValid,"A1_VENCLC") 

//Verifica se deve ser feito a validação de pendencias do cliente no financeiro
If _cValidCli == "N"	
	Return .T.
EndIf

//Verifica se o Cliente tem titulos em carteira de Protesto ou Cobrança c/ Advogado
If _cSitCliFin == "S"
	Aviso("Pendência Financeira","Não será possivel abrir nenhuma A.S. para o cliente pois o mesmo tem titulos em carteira de 'Protesto' ou  'Cobraça c/ Advogado' ",{"Ok"},,"Não será possivel Gerar A.S.")
	Return .F.
EndIf

If Select("VALCLI") > 0 
	dbSelectArea("VALCLI")
	VALCLI->(dbCloseArea())
EndIf	

BeginSQL Alias "VALCLI"
	
	Column E1_VENCREA As Date
	
	%NoParser%
	
	Select 
		E1_FILIAL,
		E1_PREFIXO,
		E1_NUM,
		E1_PARCELA,	
		E1_TIPO,
		E1_NATUREZ,
		E1_NOMCLI,
		E1_VENCREA,
		E1_VALOR		
	From 
		%Table:SE1%
	Where
		%NotDel%						And
		E1_CLIENTE = %Exp:_cCliValid%	And
		E1_LOJA	   = %Exp:_cLojValid%   And
		E1_TIPO Not Like '%-%'			And
		E1_VENCREA	< %Exp:_dDataRef%	And
		E1_BAIXA	= ' '

EndSQL

VALCLI->(dbGoTop())
VALCLI->(dbEval({|| _nRegs++, aAdd(_aDados,{_cBmp,VALCLI->E1_FILIAL,E1_PREFIXO,E1_NUM,E1_PARCELA,E1_TIPO,E1_NATUREZ,E1_NOMCLI,E1_VENCREA,"R$ "+Transform(E1_VALOR,"@E 999,999,999,999.99"),E1_VALOR}  ) } ) )
VALCLI->(dbCloseArea())


If _nRegs > 0
	
	nValTit := 0
	For nX := 1 To Len(_aDados)
		nValTit += _aDados[nX,11]
	Next nX	        

	If DTOS(dDtLimCred) < DTOS(DDATABASE) .Or. nLimitCred < nValTit
			
		_lRet := .F.
		
		Aviso("Pendência Financeira","Não Será Possivel Abrir nenhuma A.S. para o cliente pois o mesmo tem "+cValToChar(_nRegs)+" Titulos pendentes no Financeiro",{"Ok"},,"Não será possivel Gerar A.S.")		
		
		Define MsDialog _oDlgValCl From 0,0 To 300,900 Title "Titulos Pendentes" Pixel
			@ 05,05 LISTBOX _oList FIELDS HEADER "", "Filial" ,"Prefixo","Numero","Parcela","Tipo","Natureza","Nome Cliente","Vencimento","Valor" Pixel Size 435,100 OF _oDlgValCl 
			_oList:SetArray( _aDados )
			_oList:bLine := {|| {   _aDados[_oList:nAt,01],;
									_aDados[_oList:nAt,02],;
									_aDados[_oList:nAt,03],;
									_aDados[_oList:nAt,04],;
									_aDados[_oList:nAt,05],;
									_aDados[_oList:nAt,06],;
									_aDados[_oList:nAt,07],;
									_aDados[_oList:nAt,08],;
									_aDados[_oList:nAt,09],;
									_aDados[_oList:nAt,10]}}
									
			Define Sbutton From 120,415 Type 1 Action (_oDlgValCl:End()) Enable								
		Activate MsDialog _oDlgValCl  Centered
		
		
		    oReport := ReportDef()
			oReport:PrintDialog()
	EndIf				
EndIf


Return _lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³LOCC001   ºAutor  ³					  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Relatório de titulos pendente para o cliente da proposta   º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³                                                       º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Static Function ReportDef()
Local oReport
Local oSection
Local _cDesRep	:=	"Este programa tem como objetivo imprimir relatorio de acordo com os parametros informados pelo usuario."
      _cDesRep	+=	"Exibindo a análise das medições não faturadas de forma sintética, para apreciação da Controladoria."
      _cDesRep	+=	"Medições não Faturadas Sintético"
      
	//			   TReport():New(cReport		,cTitle	                       ,uParam ,bAction						     ,cDescription,lLandscape,uTotalText,lTotalInLine,cPageTText,lPageTInLine,lTPageBreak,nColSpace)
	oReport 	:= TReport():New("LCRCM007"	    ,"Relação de Titulos Pendentes",	   ,{|oReport| PrintReport(@oReport)} , _cDesRep   ,.F.)
	
	
	//			   TRSection():New(oParent, cTitle              ,  uTable         ,aOrder,lLoadCells,lLoadOrder,uTotalText,lTotalInLine,lHeaderPage,lHeaderBreak,lPageBreak,lLineBreak,nLeftMargin,lLineStyle,nColSpace,lAutoSize,cCharSeparator,nLinesBefore,nCols,nClrBack,nClrFore,nPercentage)*/	
	oSection 	:= TRSection():New(oReport, "Contas a Receber"  ,  {"SE1"})
	
	/*/Define as Celulas de Impresão
	TRCell():New(oParent ,  cName     , 	cAlias,  cTitle                  , cPicture                  ,nSize   , lPixel	, bBlock, cAlign, lLineBreak, cHeaderAlign, lCellBreak, nColSpace, lAutoSize, nClrBack, nClrFore, lBold)*/
	TRCell():New(oSection,	"E1_FILIAL"  , 	"SE1", 	"Filial"				,							,  	     ,			,{|| FWFilialName(cEmpAnt,VALCLI->E1_FILIAL) } )
	TRCell():New(oSection,	"E1_PREFIXO" , 	"SE1", 	"Prefixo"				,    						,  )
	TRCell():New(oSection,	"E1_NUM"	 , 	"SE1", 	"Número"			    ,							,  )
	TRCell():New(oSection,	"E1_PARCELA" , 	"SE1", 	"Parcela"				,							,  )
	TRCell():New(oSection,	"E1_TIPO"    , 	"SE1", 	"Tipo"					,							,  )
	TRCell():New(oSection,	"E1_NATUREZ" , 	"SE1", 	"Natureza"				,							,  )
	TRCell():New(oSection,	"E1_NOMCLI"  , 	"SE1", 	"Nome do Cliente"		,							,  )
	TRCell():New(oSection,	"E1_VENCREA" , 	"SE1", 	"Vencimento"			,"@D"						,  )
	TRCell():New(oSection,	"E1_VALOR"   , 	"SE1", 	"$ Valor"				, "@E 999,999,999,999.99"	,  )
	
	/*/Define a Função de Totalização do Relatrório
	TRFunction():New(oCell					    ,cName	,cFunction	,oBreak	,cTitle                	,cPicture               ,uFormula	,lEndSection,lEndReport,lEndPage,oParent,bCondition,lDisable,bCanPrint)*/
	TRFunction():New(oSection:Cell("E1_VALOR")	,NIL	,"SUM"		,		,"Total ===>"			,"@E 999,999,999,999.99",			,  .F.		,.T.)
	

Return oReport


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³LOCC001   ºAutor  ³Fernando W S Furtadoº Data ³  03/21/12   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Dados do relatorio de titulos pendentes para o cliente      º±±
±±º          ³da proposta                                                 º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Static Function PrintReport(oReport)
Local oSection		:= oReport:Section(1)


oSection:BeginQuery()
	BeginSQL Alias "VALCLI"
            
		Column E1_VENCREA As Date
		
		%NoParser%					
			
		Select 
			E1_FILIAL,
			E1_PREFIXO,
			E1_NUM,
			E1_PARCELA,	
			E1_TIPO,
			E1_NATUREZ,
			E1_NOMCLI,
			E1_VENCREA,
			E1_VALOR,
			R_E_C_N_O_		
		From 
			%Table:SE1%
		Where
			%NotDel%						And
			E1_CLIENTE = %Exp:_cCliValid%	And
			E1_LOJA	   = %Exp:_cLojValid%	And
			E1_TIPO Not Like '%-%'			And
			E1_VENCREA	< %Exp:_dDataRef%	And
			E1_BAIXA	= ' '
	
	EndSQL   
oSection:EndQuery()			

oSection:Print()

Return

Static Function ConsLift()

Local _cProj	:= ""
Local _cAS		:= ""
Local _cNomCli	:= ""

Private oVerde	:= LoadBitmap(GetResources(),'BR_VERDE')
Private oAmara	:= LoadBitmap(GetResources(),'BR_AMARELO')
Private oAzul	:= LoadBitmap(GetResources(),'BR_AZUL')
Private oCinza	:= LoadBitmap(GetResources(),'BR_CINZA')
Private oVerme	:= LoadBitmap(GetResources(),'BR_VERMELHO')
Private oMarro	:= LoadBitmap(GetResources(),'BR_MARRON')
Private oCance	:= LoadBitmap(GetResources(),'BR_CANCEL')

Private oBrZP5
Private oBrZP6
Private oListP5
Private oListP6

Private oNumPed 
Private oNumRes
Private oNumApv
Private oStatus

Private aBrZP5	:= {}
Private aBrZP6	:= {}
Private _aPedC	:= {}

Private oPnlSol
Private oPnlZP5
Private oPnlZP6
Private oCombo
Private oDlg

DEFINE MSDIALOG oDlg TITLE "LIFT - Consulta Histórico de A.S." FROM 010,005 TO 550,900 PIXEL  

oPnlSol:= TPanel():New(0, 0, "", oDlg, NIL, .T., .F., NIL, NIL, 0,050, .F., .T. )
oPnlSol:Align:=CONTROL_ALIGN_TOP

// Cria objeto de fonte 
DEFINE FONT oFont NAME "MonoAs" SIZE 0, -16 BOLD
DEFINE FONT oFont1 NAME "MonoAs" SIZE 0, -18 BOLD
DEFINE FONT oFont2 NAME "MonoAs" SIZE 0, -14 BOLD

DbSelectArea("ZAG")
ZAG->( DbSetOrder(3) )
If ZAG->( DbSeek( xFilial("ZAG")+oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_AS"})] ) )
	_cProj	:= ZAG->ZAG_PROJET
	_cAS	:= ZAG->ZAG_AS
	
	_cNomCli:= Posicione("ZA0",1,xFilial("ZA0")+ZAG->ZAG_PROJET,"ZA0_CLINOM")
EndIf


@ 005,005 SAY "Agendamento: " Font oFont1 PIXEL OF oPnlSol
@ 005,070 SAY _cProj Font oFont1 Color CLR_BLUE PIXEL OF oPnlSol

@ 020,005 SAY "A.S.: " Font oFont1 PIXEL OF oPnlSol
@ 020,070 SAY _cAS Font oFont1 Color CLR_BLUE PIXEL OF oPnlSol

@ 035,005 SAY "Cliente: " Font oFont1 PIXEL OF oPnlSol
@ 035,070 SAY _cNomCli Font oFont1 Color CLR_BLUE PIXEL OF oPnlSol
		
AtuZP5()
									
ACTIVATE DIALOG oDlg CENTERED 

Return

Static Function AtuZP5()

aBrZP5	:= {}
aBrPed	:= {}

If Select("TMPZP5") > 0
	TMPZP5->( DbCloseArea() )
EndIf

cQryZP5 := " SELECT ZP5_EQUIPA, T9_NOME, ZP5_NF, ZP5_SERIE, ZP5_DTNF, ZP5_HORA, ZP5_DTDEVO, ZP5_STATUS, "
cQryZP5 += " ZP5_NFDEVO, ZP5_SERDEV, ZP5_FORNEC, ZP5_LOJFOR, COALESCE(A2_NOME,'') AS A2_NOME "	
cQryZP5 += "	FROM " + RetSqlName("ZP5") + " ZP5 "
cQryZP5 += "	INNER JOIN "+RetSqlName("ST9") + " ST9 "
cQryZP5 += "	ON ZP5_EQUIPA = T9_CODBEM AND ST9.D_E_L_E_T_ = '' " 
cQryZP5 += "	LEFT JOIN "+RetSqlName("SA2") + " SA2 "
cQryZP5 += "	ON ZP5_FORNEC+ZP5_LOJFOR = A2_COD+A2_LOJA AND SA2.D_E_L_E_T_ = '' " 
cQryZP5 += "	WHERE "
cQryZP5 += "		ZP5_FILIAL = '"+xFilial("ZP5")+"' AND ZP5_AS = '"+oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_AS"})]+"' AND ZP5.D_E_L_E_T_ = '' "
                                 
TcQuery cQryZP5 NEW ALIAS "TMPZP5"		

DbSelectArea("TMPZP5")
While TMPZP5->( !Eof() )
	Aadd(aBrZP5,{If(TMPZP5->ZP5_STATUS=="01",oVerde,If(TMPZP5->ZP5_STATUS=="02",oAmara,If(TMPZP5->ZP5_STATUS=="03",oAzul,;
		If(TMPZP5->ZP5_STATUS=="04",oCinza,If(TMPZP5->ZP5_STATUS=="05",oVerme,oMarro))))),;
					TMPZP5->ZP5_EQUIPA,;
					TMPZP5->T9_NOME,;
					TMPZP5->ZP5_NF,;
					TMPZP5->ZP5_SERIE,;
					STOD(TMPZP5->ZP5_DTNF),;
					TMPZP5->ZP5_HORA,;
					STOD(TMPZP5->ZP5_DTDEVO),;
					TMPZP5->ZP5_NFDEVO,; 
					TMPZP5->ZP5_SERDEV,;
					TMPZP5->ZP5_FORNEC,;
					TMPZP5->ZP5_LOJFOR,;
					TMPZP5->A2_NOME})					 										 					 
	TMPZP5->( DbSkip() )
EndDo

If Len(aBrZP5) == 0
	 aBrZP5	:= {{"","","","","","","","","","","","",""}}
EndIf	 

oPnlZP5:= TPanel():New(0, 0, "", oDlg, NIL, .T., .F., NIL, NIL, 0,90, .F., .T. )
oPnlZP5:Align:=CONTROL_ALIGN_ALLCLIENT

@ 005,005 SAY "Remessa: " Font oFont PIXEL OF oPnlZP5
@ 005,100 BUTTON "Legenda" SIZE 040,010 OF oPnlZP5 PIXEL ACTION( RemLeg() ) 

@ 020,001 LISTBOX oListP5 FIELDS HEADER '','Equipamento','Nome','Nota Fiscal','Serie','Data NF','Hora','Data Devolução',;
'NF Devolução','Serie','Fornecedor','Loja','Nome' SIZE 440,60 OF oPnlZP5 PIXEL
oListP5:SetArray(aBrZP5)
oListP5:bLine := {||{	aBrZP5[oListP5:nAt,01],;
						aBrZP5[oListP5:nAt,02],;
						aBrZP5[oListP5:nAt,03],;
						aBrZP5[oListP5:nAt,04],;
						aBrZP5[oListP5:nAt,05],;
						aBrZP5[oListP5:nAt,06],;
						aBrZP5[oListP5:nAt,07],;
						aBrZP5[oListP5:nAt,08],;
						aBrZP5[oListP5:nAt,09],;
						aBrZP5[oListP5:nAt,10],;
						aBrZP5[oListP5:nAt,11],;
						aBrZP5[oListP5:nAt,12],;
						aBrZP5[oListP5:nAt,13]}}
														
If Select("TMPZP5") > 0
	TMPZP5->( DbCloseArea() )
EndIf

AtuZP6()

oDlg:Refresh()							
									
Return

/*
+=============================================================+
| Funcao: AtuPed     | Autor: Antonio Carlos | Data: 15/05/12 |
+=============================================================+ 
|Descrição: Esta rotina tem como objetivo apresentar os dados |
|dos Pedidos de Compra associado a Solicitação de Compra.     |
+=============================================================+
|Uso: EQUIPAV                                                 |
+=============================================================+
*/									
Static Function AtuZP6()

Local _cUser 	:= ""
Local _cApro 	:= ""
Local _cLib  	:= ""
Local _cAuxPed  := ""		
Local _cPed		:= ""

aBrZP6	:= {}

If Select("TMPZP6") > 0
	TMPZP6->( DbCloseArea() )
EndIf

cQryZP6 := " SELECT DISTINCT ZP6_FILIAL, ZP6_AS, ZP6_PEDVEN, ZP6_DTPED, ZP6_DTINI, ZP6_DTFIM, ZP6_STATUS, "
cQryZP6 += " COALESCE(D2_DOC,'') AS D2_DOC, COALESCE(D2_SERIE,'') AS D2_SERIE "
cQryZP6 += "	FROM " + RetSqlName("ZP6") + " ZP6 "
cQryZP6 += "	LEFT JOIN " + RetSqlName("SD2") + " SD2 "
cQryZP6 += "	ON ZP6_FILIAL = D2_FILIAL AND ZP6_PEDVEN = D2_PEDIDO AND SD2.D_E_L_E_T_ = '' "
cQryZP6 += "	WHERE "
cQryZP6 += "		ZP6_FILIAL = '"+xFilial("ZP6")+"' AND ZP6_AS = '"+oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_AS"})]+"' AND ZP6.D_E_L_E_T_ = '' "
                                 
TcQuery cQryZP6 NEW ALIAS "TMPZP6"

DbSelectArea("TMPZP6")
While TMPZP6->( !Eof() ) 
			
	Aadd(aBrZP6, { If(TMPZP6->ZP6_STATUS=="01",oVerde,If(TMPZP6->ZP6_STATUS=="02",oAzul,If(TMPZP6->ZP6_STATUS=="03",oVerme,oCance))),; 
		TMPZP6->ZP6_AS,;
		TMPZP6->ZP6_PEDVEN,;
		STOD(TMPZP6->ZP6_DTPED),;
		STOD(TMPZP6->ZP6_DTINI),;
		STOD(TMPZP6->ZP6_DTFIM),;
		TMPZP6->D2_DOC,;		
		TMPZP6->D2_SERIE})
	TMPZP6->( DbSkip() )				
						
EndDo				

oPnlZP6:= TPanel():New(0, 0, "", oDlg, NIL, .T., .F., NIL, NIL, 0,120, .F., .T. )         
oPnlZP6:Align:=CONTROL_ALIGN_BOTTOM

@ 005,005 SAY "Faturamento: " Font oFont PIXEL OF oPnlZP6
@ 005,100 BUTTON "Legenda" SIZE 040,010 OF oPnlZP6 PIXEL ACTION( PedLeg() ) 
@ 005,160 BUTTON "Fatura" SIZE 040,010 OF oPnlZP6 PIXEL ACTION( ConsFin() ) 
		
If Len(aBrZP6) == 0
	aBrZP6	:= {{"","","","","","","","","","","",""}}
EndIf	

@ 020,001 LISTBOX oListP6 FIELDS HEADER "","A.S.","Pedido de Venda","Emissao","Período Inicio","Período Fim","Nota","Serie" SIZE 440,60 OF oPnlZP6 PIXEL
oListP6:SetArray(aBrZP6)
oListP6:bLine	:= {|| {	aBrZP6[oListP6:nAT,01],;
							aBrZP6[oListP6:nAT,02],;
							aBrZP6[oListP6:nAT,03],;
							aBrZP6[oListP6:nAT,04],;
							aBrZP6[oListP6:nAT,05],;
							aBrZP6[oListP6:nAT,06],;
							aBrZP6[oListP6:nAT,07],;
							aBrZP6[oListP6:nAT,08]}}
							
If Select("TMPZP6") > 0
	TMPZP6->( DbCloseArea() )
EndIf
							
oListP6:Refresh()
oDlg:Refresh()
								
Return

Static Function RemLeg()

BrwLegenda("Remessa",'Legenda',{{'BR_VERDE'		,'Remessa Enviada'			},;
								{'BR_AMARELO'	,'1 - Faturamento'			},;
								{'BR_AZUL'		,'2 - Faturamento'			},;
								{'BR_CINZA'		,'Devolução no Prazo'		},;
								{'BR_VERMELHO'	,'Devolução Prazo Carencia'	},;	
								{'BR_MARRON'	,'Devolução 2 - Faturamento'}})
	
Return(.T.)

Static Function PedLeg()

BrwLegenda("Pedido",'Legenda',{	{'BR_VERDE'		,'Digitado'	},;
								{'BR_AZUL'		,'Faturado'	},;
								{'BR_VERMELHO'	,'Cancelado'},;
								{'BR_CANCEL'	,'Excluido'}})
	
Return(.T.)

Static Function ConsFin()

Local aBrSE1 := {}
Local oListS1
Private oDlgFin

If Empty(aBrZP6[oListP6:nAT,7])
	MsgStop("Não existem registros para consulta!")
	Return(.F.)
Else

	If Select("TMPSE1") > 0
		TMPSE1->( DbCloseArea() )
	EndIf
	
	cQrySE1 := "	SELECT E1_FILIAL, E1_NUM, E1_PARCELA, E1_PREFIXO, E1_VALOR, E1_BAIXA "
	cQrySE1 += "		FROM "+RetSqlName("SE1")+" SE1 " 
	cQrySE1 += "		WHERE "
	cQrySE1 += "		E1_FILIAL+E1_NUM+E1_SERIE+E1_CLIENTE+E1_LOJA IN "
	cQrySE1 += "			( SELECT DISTINCT D2_FILIAL+ D2_DOC+D2_SERIE+D2_CLIENTE+D2_LOJA "
	cQrySE1 += "				FROM "+RetSqlName("ZP6")+" ZP6 " 
	cQrySE1 += "				INNER JOIN "+RetSqlName("SD2")+ " SD2 "
	cQrySE1 += "				ON D2_FILIAL = ZP6_FILIAL AND D2_PEDIDO = ZP6_PEDVEN AND SD2.D_E_L_E_T_ = '' "
	cQrySE1 += "				WHERE "
	cQrySE1 += "					ZP6_FILIAL = '"+xFilial("ZP6")+"' "
	cQrySE1 += "					AND ZP6_AS = '"+oDlgPla:aCols[oDlgPla:nAt][Ascan(oDlgPla:aHeader,{|x|AllTrim(x[2])=="ZAG_AS"})]+"' "
	cQrySE1 += "					AND ZP6.D_E_L_E_T_ = '' ) "
	cQrySE1 += "					AND SE1.D_E_L_E_T_ = ''	 "
                                 
	TcQuery cQrySE1 NEW ALIAS "TMPSE1"

	DbSelectArea("TMPSE1")
	While TMPSE1->( !Eof() ) 
			
		Aadd(aBrSE1, { If(Empty(TMPSE1->E1_BAIXA),oVerde,oAzul),; 
			TMPSE1->E1_NUM,;
			TMPSE1->E1_PARCELA,;
			TMPSE1->E1_PREFIXO,;
			Transform(TMPSE1->E1_VALOR,"@E 999,999,999.99"),;
			STOD(TMPSE1->E1_BAIXA)})
		TMPSE1->( DbSkip() )				
						
	EndDo				
	
	If Len(aBrSE1) == 0
		aBrSE1	:= {{"","","","","",""}}
	EndIf	
	
	DEFINE MSDIALOG oDlgFin TITLE "Consulta Fatura" FROM 010,005 TO 200,540 PIXEL  

	@ 010,005 LISTBOX oListS1 FIELDS HEADER "","Fatura","Parcela","Prefixo","Valor","Dt.Baixa" SIZE 260,60 OF oDlgFin PIXEL
	oListS1:SetArray(aBrSE1)
	oListS1:bLine	:= {|| {aBrSE1[oListS1:nAT,01],;
							aBrSE1[oListS1:nAT,02],;
							aBrSE1[oListS1:nAT,03],;
							aBrSE1[oListS1:nAT,04],;
							aBrSE1[oListS1:nAT,05],;
							aBrSE1[oListS1:nAT,06]}}
							
	If Select("TMPSE1") > 0
		TMPSE1->( DbCloseArea() )
	EndIf
							
	oListS1:Refresh()
	oDlgFin:Refresh()

	ACTIVATE DIALOG oDlgFin CENTERED 
	
EndIf	

Return
                              
//Alison (22/07/2013)
User Function GRCONTR2()
	If .T.//U_ValFrota(ZA0->ZA0_PROJET)
	
		U_GRCONTR()
		
		DbSelectArea("DTQ")
		DbSetOrder(8)//Projeto
		If DbSeek(xFilial("DTQ")+SubStr(ZA0->ZA0_PROJET,1,9))//Se gerou o contrato
			//Reclock("ZA0",.F.)
			//ZA0->ZA0_POSSIB := "100"
			//MsUnlock()
		EndIf
	EndIf
Return                  

User Function ValFrota(cProjeto)//Transporte
	Local lRet		:= .T. 
	Local aArea		:= GetArea()
	Local aAreaZLE	:= ZLE->(GetArea())
	Local aAreaDTQ	:= DTQ->(GetArea())
	Local cQuery	:= "" 
	Local cEOL      := CHR(13)+CHR(10)
	Local lJunto	:= .F.
	Local lRevis	:= .F.
	Local dDtAntIni
	Local dDtAntFim
	Local dDtValIni	
	Local dDtValFim
	
	If ZA0->ZA0_TIPOSE == "T"//Transporte
		/*SELECT DISTINCT ZAE.ZAE_PROJET,ZAE.ZAE_OBRA,ZAE.ZAE_SEQTRA,ZAE.ZAE_TRANSP,ZAE.ZAE_SEQCAR,ZA6.ZA6_DTINI,ZA6.ZA6_DTFIM 
	FROM ZAE010 ZAE 
	LEFT OUTER JOIN ZA7010 ZA7 ON (ZA7.ZA7_FILIAL = ZAE.ZAE_FILIAL AND ZA7.ZA7_PROJET = ZAE.ZAE_PROJET AND ZA7.ZA7_OBRA = ZAE.ZAE_OBRA AND ZA7.ZA7_SEQTRA = ZAE.ZAE_SEQTRA AND ZA7.ZA7_SEQCAR = ZAE.ZAE_SEQCAR AND ZA7.D_E_L_E_T_<>'*' )
	LEFT OUTER JOIN ZA6010 ZA6 ON (ZA6.ZA6_FILIAL = ZA7.ZA7_FILIAL AND ZA6.ZA6_PROJET = ZA7.ZA7_PROJET AND ZA6.ZA6_OBRA = ZA7.ZA7_OBRA AND ZA6.ZA6_SEQTRA = ZA7.ZA7_SEQTRA AND ZA7.D_E_L_E_T_<>'*')  WHERE  ZAE.D_E_L_E_T_<>'*' AND ZAE.ZAE_FILIAL = '01' AND ZAE.ZAE_PROJET = '201300058             ' */
		cQuery := " SELECT DISTINCT ZAE.ZAE_PROJET, ZAE.ZAE_OBRA,ZAE.ZAE_SEQTRA, ZAE.ZAE_TRANSP,ZAE.ZAE_SEQCAR,ZA6.ZA6_DTINI, ZA6.ZA6_DTFIM, ZA6.ZA6_VIAGEM,ZA6.ZA6_PROJET,ZA6.ZA6_OBRA "
		cQuery += " FROM "+RetSqlName("ZAE")+" ZAE " 
		cQuery += " LEFT OUTER JOIN "+RetSqlName("ZA7")+" ZA7 "
		cQuery += " ON (ZA7.ZA7_FILIAL = ZAE.ZAE_FILIAL AND ZA7.ZA7_PROJET = ZAE.ZAE_PROJET AND ZA7.ZA7_OBRA = ZAE.ZAE_OBRA AND ZA7.ZA7_SEQTRA = ZAE.ZAE_SEQTRA AND ZA7.ZA7_SEQCAR = ZAE.ZAE_SEQCAR AND ZA7.D_E_L_E_T_<>'*' ) "
		cQuery += " LEFT OUTER JOIN "+RetSqlName("ZA6")+" ZA6 "
		cQuery += " ON (ZA6.ZA6_FILIAL = ZA7.ZA7_FILIAL AND ZA6.ZA6_PROJET = ZA7.ZA7_PROJET AND ZA6.ZA6_OBRA = ZA7.ZA7_OBRA AND ZA6.ZA6_SEQTRA = ZA7.ZA7_SEQTRA AND ZA6.D_E_L_E_T_<>'*') "
		//cQuery += " ON (ZA6.ZA6_FILIAL = ZAE.ZAE_FILIAL AND ZA6.ZA6_PROJET = ZAE.ZAE_PROJET AND ZA6.ZA6_OBRA = ZAE.ZAE_OBRA AND ZA6.ZA6_SEQTRA = ZAE.ZAE_SEQTRA AND ZA6.D_E_L_E_T_<>'*') "
		cQuery += " WHERE ZAE.D_E_L_E_T_<>'*' "
		cQuery += " AND ZAE.ZAE_FILIAL = '"+xFilial("ZAE")+"' "	
		cQuery += " AND ZAE.ZAE_PROJET = '"+cProjeto+"' "	
		//cQuery += " AND (ZLE.ZLE_DTINI BETWEEN '"+DTOS(dDtIni)+"' AND '"+DTOS(dDtFim)+"' "   
		//cQuery += " OR ZLG.ZLG_DTFIM BETWEEN '"+DTOS(dDtIni)+"' AND '"+DTOS(dDtFim)+"') " 
		
		cQuery := ChangeQuery(cQuery)		                                
		
		//Memowrite('c:\temp\locc001.txt',cQuery)                    
		If Select("TR02") > 0
	 	     TR02->(DbCloseArea())
	 	EndIf           
	 	
		TcQuery cQuery New Alias TR02
		
		TcSetField("TR02","ZA6_DTINI","D",08,00)                                
		TcSetField("TR02","ZA6_DTFIM","D",08,00)
		
		DbSelectArea("DTQ")
		DbSetOrder(8)//Projeto
		If DbSeek(xFilial("DTQ")+SubStr(cProjeto,1,9))//Se gerou o contrato
			lRevis 		:= .T.                                                         
			dDtAntIni	:= DTQ->DTQ_DATINI
			dDtAntFim 	:= DTQ->DTQ_DATFIM
		EndIf
		
		While !TR02->(Eof())
		    lJunto := .F.
		    DbSelectArea("ZA7")
		    DbSetOrder(1)
		    If DbSeek(xFilial("ZA7")+TR02->ZAE_PROJET+TR02->ZAE_OBRA+TR02->ZAE_SEQTRA+TR02->ZAE_SEQCAR)
		    	If !Empty(ZA7->ZA7_JUNTO)
		    		lJunto := .T.	
		    	EndIf
		    EndIf
		    
		    If !lJunto//Se tiver campo junto desconsidera validação
			    DbSelectArea("ZLE")
			    DbSetOrder(5)
			    DbSeek(xFilial("ZLE")+TR02->ZAE_TRANSP)
			    
			    While !ZLE->(Eof()) .And. AllTrim(ZLE->ZLE_FROTA) == AllTrim(TR02->ZAE_TRANSP)
			    	If AllTrim(ZLE->ZLE_STATUS) == "1"
			    		ZLE->(DbSkip())
			    		Loop
			    	EndIf
			    	
			    	If lRevis//AS 2º vez
			    		If AllTrim(ZLE->ZLE_STATUS) == "9" .Or. AllTrim(ZLE->ZLE_STATUS) == "M"
				    		ZLE->(DbSkip())
				    		Loop
				    	EndIf  
				    	
				    	
				    	If AllTrim(TR02->ZA6_PROJET+TR02->ZA6_OBRA+TR02->ZAE_TRANSP) == AllTrim(ZLE->ZLE_PROJET+ZLE->ZLE_OBRA+ZLE->ZLE_FROTA)
				    		ZLE->(DbSkip())
				    		Loop
				    	EndIf
				    	
				    	If DTOS(ZLE->ZLE_DTPROG) >= DTOS(TR02->ZA6_DTINI) .And. DTOS(ZLE->ZLE_DTPROG) <= DTOS(TR02->ZA6_DTFIM)
				    		lRet := .F.
				    		Exit
				    	EndIf	
				    Else
				    	If DTOS(ZLE->ZLE_DTPROG) >= DTOS(TR02->ZA6_DTINI) .And. DTOS(ZLE->ZLE_DTPROG) <= DTOS(TR02->ZA6_DTFIM)
				    		lRet := .F.
				    		Exit
				    	EndIf	
			    	EndIf
			    	
			    	ZLE->(DbSkip())
			    EndDo
			EndIf
			
			//cRet += AllTrim(TR02->ZLG_PROJET)+"-"+cObra+"-"+cSeq+" ("+AllTrim(cFrota)+") - "+DTOC(TR02->ZLG_DTINI)+" / "+DTOC(TR02->ZLG_DTFIM)+cEOL	    
			TR02->(DbSkip())
		EndDo                  
		
		If !lRet
			MsgAlert("Não foi possivel gerar contrato deste agendamento, pois uma ou mais frotas estão com datas encavaladas na 'Prog. diaria Transp'.","Atenção")
			PrintRegs()
		EndIf
		
	 	If Select("TR02") > 0
	 	     TR02->(DbCloseArea())
	 	EndIf
	 	
	ElseIf ZA0->ZA0_TIPOSE == "G"//Equipamentos
	
		cQuery := " SELECT ZA5.ZA5_PROJET, ZA5.ZA5_OBRA,ZA5.ZA5_SEQGUI, ZA5.ZA5_GUINDA, ZA5.ZA5_DTINI, ZA5.ZA5_DTFIM, ZA5.ZA5_AS "
		cQuery += " FROM "+RetSqlName("ZA5")+" ZA5 " 
		cQuery += " LEFT OUTER JOIN "+RetSqlName("ST9")+" ST9 "
		cQuery += " ON (ST9.T9_FILIAL = ZA5.ZA5_FILIAL AND ST9.T9_CODBEM = ZA5.ZA5_GUINDA AND ST9.D_E_L_E_T_<>'*' ) "
		cQuery += " LEFT OUTER JOIN "+RetSqlName("ZA1")+" ZA1 "
		cQuery += " ON (ZA1.ZA1_FILIAL = ZA5.ZA5_FILIAL AND ZA1.ZA1_OBRA = ZA5.ZA5_OBRA AND ZA1.D_E_L_E_T_<>'*' ) "
		cQuery += " WHERE ZA5.D_E_L_E_T_<>'*' "
		cQuery += " AND ZA5.ZA5_FILIAL = '"+xFilial("ZA5")+"' "	
		cQuery += " AND ZA5.ZA5_PROJET = '"+cProjeto+"' "	
		cQuery += " AND ZA1.ZA1_PROJET = '"+cProjeto+"' "	
		cQuery += " AND ST9.T9_TIPOSE = 'T' "
		
		cQuery := ChangeQuery(cQuery)		                                
		
		//Memowrite('c:\temp\locc001.txt',cQuery)                    
		If Select("TR02") > 0
	 	     TR02->(DbCloseArea())
	 	EndIf           
	 	
		TcQuery cQuery New Alias TR02
		
		TcSetField("TR02","ZA5_DTINI","D",08,00)                                
		TcSetField("TR02","ZA5_DTFIM","D",08,00)
		
		DbSelectArea("DTQ")
		DbSetOrder(8)//Projeto
		If DbSeek(xFilial("DTQ")+SubStr(cProjeto,1,9))//Se gerou o contrato
			lRevis 		:= .T.                
		EndIf
		
		While !TR02->(Eof())
		    
		    DbSelectArea("ZLE")
		    DbSetOrder(5)
		    DbSeek(xFilial("ZLE")+TR02->ZA5_GUINDA)
		    
		    While !ZLE->(Eof()) .And. AllTrim(ZLE->ZLE_FROTA) == AllTrim(TR02->ZA5_GUINDA)
		    	If AllTrim(ZLE->ZLE_STATUS) == "1"
		    		ZLE->(DbSkip())
		    		Loop
		    	EndIf
		    	
		    	If lRevis//AS 2º vez
		    		If AllTrim(ZLE->ZLE_STATUS) == "9" .Or. AllTrim(ZLE->ZLE_STATUS) == "M"
			    		ZLE->(DbSkip())
			    		Loop
			    	EndIf  
			    	
			    	
			    	If AllTrim(TR02->ZA5_PROJET+TR02->ZA5_OBRA+TR02->ZA5_GUINDA+TR02->ZA5_AS) == AllTrim(ZLE->ZLE_PROJET+ZLE->ZLE_OBRA+ZLE->ZLE_FROTA+ZLE->ZLE_AS)
			    		ZLE->(DbSkip())
			    		Loop
			    	EndIf
			    	
			    	If DTOS(ZLE->ZLE_DTPROG) >= DTOS(TR02->ZA5_DTINI) .And. DTOS(ZLE->ZLE_DTPROG) <= DTOS(TR02->ZA5_DTFIM)
			    		lRet := .F.
			    		Exit
			    	EndIf	
			    Else
			    	If DTOS(ZLE->ZLE_DTPROG) >= DTOS(TR02->ZA5_DTINI) .And. DTOS(ZLE->ZLE_DTPROG) <= DTOS(TR02->ZA5_DTFIM)
			    		lRet := .F.
			    		Exit
			    	EndIf	
		    	EndIf
		    	
		    	ZLE->(DbSkip())
		    EndDo
			
			//cRet += AllTrim(TR02->ZLG_PROJET)+"-"+cObra+"-"+cSeq+" ("+AllTrim(cFrota)+") - "+DTOC(TR02->ZLG_DTINI)+" / "+DTOC(TR02->ZLG_DTFIM)+cEOL	    
			TR02->(DbSkip())
		EndDo                  
		
		If !lRet
			MsgAlert("Não foi possivel gerar contrato deste agendamento, pois uma ou mais frotas estão com datas encavaladas na 'Prog. diaria Transp'.","Atenção")
			PrintRegs()
		EndIf
		
	 	If Select("TR02") > 0
	 	     TR02->(DbCloseArea())
	 	EndIf
	 
	EndIf
	
	RestArea(aAreaZLE)	
	RestArea(aArea)
Return(lRet)

User Function ValPeriodo(nOpc)//Valida periodo ZA6
	Local aArea		:= GetArea() 
	Local dDtIni 	:= oDlgTra:aCols[n, GdFieldPos("ZA6_DTINI")]
	Local dDtFim 	:= oDlgTra:aCols[n, GdFieldPos("ZA6_DTFIM")] 
	Local lRet		:= .T.
	
	If nOpc == 1 .And. !Empty(dDtFim)//Estou na DataIni
		If DTOS(dDtFim) < DTOS(M->ZA6_DTINI) 
			Alert("Data fim NÃO pode ser menor que a Data inicio!")
			lRet := .F.
		Else
       		//FTABA()
			//oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TABVEN"})]:=cTabVen
			//oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VERVEN"})]:=cVerTab
		EndIf 	
	ElseIf nOpc == 2 .And. !Empty(dDtIni)//Estou na DataFim
		If DTOS(M->ZA6_DTFIM) < DTOS(dDtIni) 
			Alert("Data fim NÃO pode ser menor que a Data inicio!")
			lRet := .F.
		EndIf 
	EndIf
	
	RestArea(aArea)
Return(lRet)

Static Function SumValRes()
	Local cObraAux		:= ""
	Local cSeqTraAux	:= "" 
	Local aColsCus		:= {}
	        
	If ZA0->ZA0_TIPOSE == "G"
//		fCustoInd()              
	EndIf
	/*
	nValCusTG  := 0
	nValViagem := 0
	nPosVal    := aScan( oDlgRes:aHeader , { |x| Upper( Alltrim( x[2] ) ) == "ZAA_VALOR"   })
	
	For nX := 1 To Len(oDlgRes:aCols)
		nValCusTG += oDlgRes:aCols[nX,nPosVal]  
	Next nX
	oValCusTG:Refresh() 
	  */
	nPosValGui  := aScan( oDlgCus:aHeader , { |x| Upper( Alltrim( x[2] ) ) == "ZA9_VRFRET"   })
	For nPos:=1 to Len(oCus_Cols)
		cObraAux   :=oCus_Cols[nPos][Ascan(oDlgCus:aHeader,{|x|AllTrim(x[2])=="ZA9_OBRA"})]
		cSeqTraAux :=oCus_Cols[nPos][Ascan(oDlgCus:aHeader,{|x|AllTrim(x[2])=="ZA9_SEQTRA"})]
		If cObra+cSeqTra==cObraAux+cSeqTraAux
			AAdd(aColsCus,Aclone(oCus_Cols[nPos]))
		EndIf
	Next
	
	If ZA0->ZA0_TIPOSE == "G"
		return
	EndIf
	
	For nX := 1 To Len(aColsCus)
		nValViagem += aColsCus[nX,nPosValGui]  
	Next nX	 
	oValViagem:Refresh()
Return  

Static Function LoadValViag(nValNew)
  	Local cObraAux		:= ""
	Local cSeqTraAux	:= "" 
	Local aColsCus		:= {}
	Local nQtAtu		:= 0
	
	nValViagem := 0
	
  	nPosValGui  := aScan( oDlgCus:aHeader , { |x| Upper( Alltrim( x[2] ) ) == "ZA9_VRFRET"   })
	For nPos:=1 to Len(oCus_Cols)
		cObraAux   :=oCus_Cols[nPos][Ascan(oDlgCus:aHeader,{|x|AllTrim(x[2])=="ZA9_OBRA"})]
		cSeqTraAux :=oCus_Cols[nPos][Ascan(oDlgCus:aHeader,{|x|AllTrim(x[2])=="ZA9_SEQTRA"})]
		If cObra+cSeqTra==cObraAux+cSeqTraAux
			AAdd(aColsCus,Aclone(oCus_Cols[nPos]))
		EndIf
	Next
	For nX := 1 To Len(aColsCus)
		nValViagem += aColsCus[nX,nPosValGui]  
	Next nX	       
	
	For nX := 1 To Len(oDlgCus:aCols)
		nQtAtu += oDlgCus:aCols[nX,nPosValGui]  
	Next nX
	
	nValViagem -= nQtAtu
	nValViagem += nValNew
	
	oValViagem:Refresh()
Return

Static Function fCustoInd()
	Local cCodResp := GetMv("MV_CUSIND")
	Local nResult  := 0                 
	Local cCampo,cCampoGet 
	Local nColCod2 := 0
	Local nPosCod2 := 0	
	
	nColCodigo := aScan( oDlgRes:aHeader , { |x| Upper( Alltrim( x[2] ) ) == "ZAA_CODIGO"   })	
	nPosCodigo := ASCAN(oDlgRes:aCols,{|x| AllTrim(x[nColCodigo]) == AllTrim(cCodResp)})
	
	DbSelectArea("ZAB")
	DbSetOrder(1)
	If DbSeek(xFilial("ZAB")+cCodResp)
		nResult := (nValCusIG * nValTotG) / 100
		oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_CUSIND" })] := nValCusIG
		
		nColCod2 := aScan( oDlgGui:aHeader , { |x| Upper( Alltrim( x[2] ) ) == "ZA5_CUSIND"   })	
		nPosCod2 := ASCAN(oGui_Cols,{|x| AllTrim(x[1]+x[2]) == AllTrim(cObra+cSeqGui)})
		If nPosCod2 > 0
			oGui_Cols[nPosCod2][nColCod2] := nValCusIG			
		EndIf
		
		
		If nPosCodigo > 0
			oDlgRes:aCols[nPosCodigo][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_CODIGO"})]:=ZAB->ZAB_CODIGO
			oDlgRes:aCols[nPosCodigo][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_DESCRI"})]:=ZAB->ZAB_DESCRI
			oDlgRes:aCols[nPosCodigo][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_DESCCO"})]:=ZAB->ZAB_DESCCO
			oDlgRes:aCols[nPosCodigo][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_RESPON"})]:="D"
			oDlgRes:aCols[nPosCodigo][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_VALOR"})] :=nResult	
			
			nPosCod2 := ASCAN(oRes_Cols,{|x| AllTrim(x[1]+x[2]+x[nColCodigo]) == AllTrim(cObra+cSeqGui+cCodResp)})
			If nPosCod2 > 0
				oRes_Cols[nPosCod2] := Aclone(oDlgRes:aCols[nPosCodigo])			
			EndIf
			//oRes_Cols[nPosCodigo] := Aclone(oDlgRes:aCols[nPosCodigo])
		Else
			If Empty(oDlgRes:aCols[Len(oDlgRes:aCols)][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_CODIGO"})]) .And. Len(oDlgRes:aCols) == 1				
				oDlgRes:aCols[Len(oDlgRes:aCols)][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_CODIGO"})]:=ZAB->ZAB_CODIGO
				oDlgRes:aCols[Len(oDlgRes:aCols)][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_DESCRI"})]:=ZAB->ZAB_DESCRI
				oDlgRes:aCols[Len(oDlgRes:aCols)][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_DESCCO"})]:=ZAB->ZAB_DESCCO
				oDlgRes:aCols[Len(oDlgRes:aCols)][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_RESPON"})]:="D"
				oDlgRes:aCols[Len(oDlgRes:aCols)][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_VALOR"})] :=nResult	
				
				oRes_Cols[Len(oDlgRes:aCols)] := Aclone(oDlgRes:aCols[Len(oDlgRes:aCols)])
			Else
				AAdd(oDlgRes:aCols,Aclone(oDlgRes:aCols[Len(oDlgRes:aCols)]))
		
				cCampo   :="ZAA_SEQRES"
				cCampoGet:=oDlgRes:aCols[Len(oDlgRes:aCols)][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])==cCampo})]
				oDlgRes:aCols[Len(oDlgRes:aCols)][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])==cCampo})]:=StrZero(Val(cCampoGet)+1,Len(cCampoGet)) 
				
				oDlgRes:aCols[Len(oDlgRes:aCols)][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_CODIGO"})]:=ZAB->ZAB_CODIGO
				oDlgRes:aCols[Len(oDlgRes:aCols)][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_DESCRI"})]:=ZAB->ZAB_DESCRI
				oDlgRes:aCols[Len(oDlgRes:aCols)][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_DESCCO"})]:=ZAB->ZAB_DESCCO
				oDlgRes:aCols[Len(oDlgRes:aCols)][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_RESPON"})]:="D"
				oDlgRes:aCols[Len(oDlgRes:aCols)][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_VALOR"})] :=nResult	
				oDlgRes:aCols[Len(oDlgRes:aCols)][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_TRECHO"})] :=""
				
				Aadd(oRes_Cols,Aclone(oDlgRes:aCols[Len(oDlgRes:aCols)]))//Add no AcolsGeral
			EndIf
		EndIf 
		oDlgRes:Refresh()
	EndIf
Return

User Function fCusIndT(lBCalc)
	Local cCodResp := GetMv("MV_CUSIND")
	Local nResult  := 0    
	Local nPosCod  := 0
	Local nPosCod2 := 0  
	Local nValCus  := 0	          
	Local cCampo,cCampoGet 	
	
	nColCodigo := aScan( oDlgRes:aHeader , { |x| Upper( Alltrim( x[2] ) ) == "ZAA_CODIGO"   })	
	nPosCod    := ASCAN(oDlgRes:aCols,{|x| AllTrim(x[nColCodigo]) == AllTrim(cCodResp)})
	
	nValCus := 0 //oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_CUSIND"})]
	
	DbSelectArea("ZAB")
	DbSetOrder(1)
	If DbSeek(xFilial("ZAB")+cCodResp)
		nResult := (nValViagem * Iif(lBCalc,nValCus,M->ZA6_CUSIND)) / 100
		If nPosCod > 0                                                                                      
			oDlgRes:aCols[nPosCod][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_OBRA"})]  :=cObra
			oDlgRes:aCols[nPosCod][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_SEQGUI"})]:=cSeqTra
			oDlgRes:aCols[nPosCod][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_CODIGO"})]:=ZAB->ZAB_CODIGO
			oDlgRes:aCols[nPosCod][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_DESCRI"})]:=ZAB->ZAB_DESCRI
			oDlgRes:aCols[nPosCod][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_DESCCO"})]:=ZAB->ZAB_DESCCO
			oDlgRes:aCols[nPosCod][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_RESPON"})]:="D"
			oDlgRes:aCols[nPosCod][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_VALOR"})] :=nResult	
			
			nPosCod2 := ASCAN(oRes_Cols,{|x| AllTrim(x[1]+x[2]+x[nColCodigo]) == AllTrim(cObra+cSeqTra+cCodResp)})
			If nPosCod2 > 0
				oRes_Cols[nPosCod2] := Aclone(oDlgRes:aCols[nPosCod])			
			EndIf
			//oRes_Cols[nPosCodigo] := Aclone(oDlgRes:aCols[nPosCodigo])
		Else
			If Empty(oDlgRes:aCols[Len(oDlgRes:aCols)][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_CODIGO"})]) .And. Len(oDlgRes:aCols) == 1				
				oDlgRes:aCols[Len(oDlgRes:aCols)][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_CODIGO"})]:=ZAB->ZAB_CODIGO
				oDlgRes:aCols[Len(oDlgRes:aCols)][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_DESCRI"})]:=ZAB->ZAB_DESCRI
				oDlgRes:aCols[Len(oDlgRes:aCols)][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_DESCCO"})]:=ZAB->ZAB_DESCCO
				oDlgRes:aCols[Len(oDlgRes:aCols)][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_RESPON"})]:="D"
				oDlgRes:aCols[Len(oDlgRes:aCols)][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_VALOR"})] :=nResult	 
				
				oRes_Cols[Len(oDlgRes:aCols)] := Aclone(oDlgRes:aCols[Len(oDlgRes:aCols)])
			Else
				AAdd(oDlgRes:aCols,Aclone(oDlgRes:aCols[Len(oDlgRes:aCols)]))
		
				cCampo   :="ZAA_SEQRES"
				cCampoGet:=oDlgRes:aCols[Len(oDlgRes:aCols)][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])==cCampo})]
				oDlgRes:aCols[Len(oDlgRes:aCols)][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])==cCampo})]:=StrZero(Val(cCampoGet)+1,Len(cCampoGet)) 
				
				oDlgRes:aCols[Len(oDlgRes:aCols)][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_CODIGO"})]:=ZAB->ZAB_CODIGO
				oDlgRes:aCols[Len(oDlgRes:aCols)][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_DESCRI"})]:=ZAB->ZAB_DESCRI
				oDlgRes:aCols[Len(oDlgRes:aCols)][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_DESCCO"})]:=ZAB->ZAB_DESCCO
				oDlgRes:aCols[Len(oDlgRes:aCols)][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_RESPON"})]:="D"
				oDlgRes:aCols[Len(oDlgRes:aCols)][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_VALOR"})] :=nResult	
				oDlgRes:aCols[Len(oDlgRes:aCols)][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_VALCOB"})]:=0
				
				Aadd(oRes_Cols,Aclone(oDlgRes:aCols[Len(oDlgRes:aCols)]))//Add no AcolsGeral
			EndIf
		EndIf 
		oDlgRes:Refresh()
	EndIf
Return(.T.)
        
/*
============================================
| Rotina usada pra pegar o Valor da AS,    |
| e setar o campo ZA5_VALAS do acols       |
============================================
*/

Static Function ValorAS()
	Local nLi := 0
	
	For nLi := 1 To Len(oDlgGui:aCols)
		GetValAS(nLi,.T.)
	Next nLi
	
Return


Static Function GetValAS(nLi,lCalcItem)

	Local cTipoCa,nPreDia,nVrHor,nQtMes,nQtDia,nDiaTurno,nHrsTurno 
	Local nRet := 0
	Private oDlgVT
	
	If !lCalcItem==.t. ; lCalcItem:=.f. ; EndIf
	
	If !ValType(oDlgGui)=="O"  //Se o objeto já foi criado
		Return
	EndIf
	
	//nValMob:=nValCus	//oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRMOB" })]
	//nValDes:=nVl2Cus	//oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRDES" })]
	nValMob:=oDlgGui:aCols[nLi][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRMOB" })]
	nValDes:=oDlgGui:aCols[nLi][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRDES" })]
	nValSeg:=oDlgGui:aCols[nLi][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRSEGU"})]
	
	//nValMob:=nValCusM
	//nValDes:=nValCusD
	
	cTipoIss:=oDlgGui:aCols[nLi][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_TPISS" })]
	cTipoSeg:=oDlgGui:aCols[nLi][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_TPSEGU"})]
	cTipoCa :=oDlgGui:aCols[nLi][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_TIPOCA"})]
	nPreDia :=oDlgGui:aCols[nLi][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_PREDIA"})]
	nVrHor  :=oDlgGui:aCols[nLi][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRHOR" })]  
	nMinDia :=oDlgGui:aCols[nLi][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_MINDIA"})] 	// Cleuber 28-05
	nMinMes :=oDlgGui:aCols[nLi][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_MINMES"})]	// Cleuber 28-05
	nQtMes  :=oDlgGui:aCols[nLi][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_QTMES" })] //Exibir Campo - Renato Ruy - 12/04/12// inibir o uso - Cristiam em 18/04/11
	nQtDia  :=oDlgGui:aCols[nLi][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_QTDIA" })] //Exibir Campo - Renato Ruy - 12/04/12// inibir o uso - Cristiam em 18/04/11
	
	//Valores de Turnos
	If ValType(oGetVT)=='O' .and.  Len(oGetVT:aCols) >= 1
		nDiaTurno := GDFieldGet ( "ZBB_MINDIT", 1, .F., oGetVT:aHeader, oGetVT:aCols )
		nHrsTurno := GetHorasTurno(GDFieldGet("ZBB_HRINIT",1,.F.,oGetVT:aHeader,oGetVT:aCols),GDFieldGet("ZBB_HOFIMT",1,.F.,oGetVT:aHeader,oGetVT:aCols))
	EndIf 
	nValTur1 := IIF( ValType(oGetVT)=='O' .and.  Len(oGetVT:aCols) >= 1 , ((Val(nDiaTurno) * nHrsTurno) * GDFieldGet ( "ZBB_VALTUR", 1, .F., oGetVT:aHeader, oGetVT:aCols )),nValTur1)

	If ValType(oGetVT)=='O' .and.  Len(oGetVT:aCols) >= 2
		nDiaTurno := GDFieldGet ( "ZBB_MINDIT", 2, .F., oGetVT:aHeader, oGetVT:aCols )
		nHrsTurno := GetHorasTurno(GDFieldGet("ZBB_HRINIT",2,.F.,oGetVT:aHeader,oGetVT:aCols),GDFieldGet("ZBB_HOFIMT",2,.F.,oGetVT:aHeader,oGetVT:aCols))
	EndIf
	nValTur2 := IIF( ValType(oGetVT)=='O' .and.  Len(oGetVT:aCols) >= 2 , ((Val(nDiaTurno) * nHrsTurno) * GDFieldGet ( "ZBB_VALTUR", 2, .F., oGetVT:aHeader, oGetVT:aCols )),nValTur2)
	
	If ValType(oGetVT)=='O' .and.  Len(oGetVT:aCols) >= 3
		nDiaTurno := GDFieldGet ( "ZBB_MINDIT", 3, .F., oGetVT:aHeader, oGetVT:aCols )
		nHrsTurno := GetHorasTurno(GDFieldGet("ZBB_HRINIT",3,.F.,oGetVT:aHeader,oGetVT:aCols),GDFieldGet("ZBB_HOFIMT",3,.F.,oGetVT:aHeader,oGetVT:aCols))
	EndIf      
	nValTur3 := IIF( ValType(oGetVT)=='O' .and.  Len(oGetVT:aCols) >= 3 , ((Val(nDiaTurno) * nHrsTurno) * GDFieldGet ( "ZBB_VALTUR", 3, .F., oGetVT:aHeader, oGetVT:aCols )),nValTur3)
	
	//nValTur2 :=IIF( ValType(oGetVT)=='O' .and.  Len(oGetVT:aCols) >= 2 , (nPreDia * GDFieldGet ( "ZBB_VALTUR", 2, .F., oGetVT:aHeader, oGetVT:aCols )),0)
	//nValTur3 :=IIF( ValType(oGetVT)=='O' .and.  Len(oGetVT:aCols) >= 3 , (nPreDia * GDFieldGet ( "ZBB_VALTUR", 3, .F., oGetVT:aHeader, oGetVT:aCols )),0)
	cNumAcT  :=IIF( ValType(oGetVT)=='O' , Len(oGetVT:aCols),1)
	
	// 8500 - retirei o comentário para validar se os campos ZA5_QTMES e ZA5_QTDIA estão preenchidos, caso sim será executado calculo conforme validação da 8508 a 8516 - Renato Ruy - 12/04/12
	If nQtMes==0 .and. nQtDia==0  
		Do Case
		Case cTipoCa=="H" ; nValEqu:= (nPreDia*nVrHor)	//*nMinDia
		Case cTipoCa=="D" ; nValEqu:= (nPreDia*nVrHor)	//*nMinDia
		Case cTipoCa=="M" ; nValEqu:= (nPreDia*nVrHor) //*nMinMes
		Case cTipoCa=="F" ; nValEqu:= nVrHor
		Otherwise         ; nValEqu:= 0
		EndCase
		Else //8508 a 8516 - retirado comentário para executar o calculo - Renato Ruy - 12/04/12
		Do Case
		Case cTipoCa=="H" ; nValEqu:=(nQtMes*nMinMes*nVrHor)+(nQtDia*nMinDia*nVrHor)
		Case cTipoCa=="D" ; nValEqu:=(nQtMes*nMinMes*nVrHor)+(nQtDia*nMinDia*nVrHor) 
		Case cTipoCa=="M" ; nValEqu:=(nQtMes*nMinMes*nVrHor)+(nQtDia*nMinDia*nVrHor)
		Case cTipoCa=="F" ; nValEqu:=nVrHor
		Otherwise         ; nValEqu:=0
		EndCase
	EndIf
	// fim do comentário
	nValEqu += nValTur1+nValTur2+nValTur3
	nValBasGT:=nValEqu  //Vr.Base Total (Guindaste)
	
	//Valor a cobrar 'Responsabilidades'
	nValCobr := 0
	For nX1 := 1 To Len(oDlgRes:aCols)
		If oDlgGui:aCols[nLi, GdFieldPos("ZA5_SEQGUI",oDlgGui:aHeader)] == oDlgRes:aCols[nX1, GdFieldPos("ZAA_SEQGUI",oDlgRes:aHeader)] 
			nValCobr += oDlgRes:aCols[nX1, GdFieldPos("ZAA_VALCOB",oDlgRes:aHeader)]
		EndIf
	Next nX1
	oValCobr:Refresh()
	
	nValTcp:=oDlgGui:aCols[nLi][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRPESO"})]
	nValGui:=(nValEqu+nValMob+nValDes)+nValCus+nValTcp+nValVis
	
	nPerIss:=oDlgGui:aCols[nLi][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_PERISS"})]
	If oFolder:nOption == nFolderGui//Verificar se está no folder guindaste, para verificar condição abaixo - Alison(17/10/13)
		if Valtype(M->ZA5_PERISS) == "N" .And. AllTrim(SX3->X3_CAMPO) == "ZA5_PERISS"//verificar se ta posicionado no campo(Alison)	// Se o campo estiver sendo editado o valor atual não está atualizado no aCols - Cristiam Rossi em 15/04/2011
			nPerIss := M->ZA5_PERISS
		endif 
	Endif
	
	nBasIss:=nValEqu+nValMob+nValDes+nValTcp+nValSeg
	//nValIss:=Round(nPerIss*(nValEqu+nValMob+nValDes+nValTcp+nValSeg)/100,2)
	
	//Se o ISS estiver incluso no valor, calculo o valor do ISS pura e simplesmente
	//Chamado 8514 - Nilza - Executado por Marcos Proativa em 03/08/09
	nValISS :=U_fCalcIssG(nBasIss,nPerIss,cTipoIss)  //Calcula o ISS dos Guindastes
	
	//Linhas abaixo comentada foram alteradas por conta do chamado 8514 citado acima
	/*if alltrim(cTipoIss) == "X"
	nValISS:= 0
	else
	nValIss:=((nValEqu+nValMob+nValDes+nValTcp+nValSeg) / ((100-nPerISS)/100)) - nBasIss //Cleuber 28-05
	endif	*/
	
	nPreDiaG :=nPreDia
	nValBasG :=nVrHor
	
	//nValMobG:=nValCus	//oDlgGui:aCols[nLi][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRMOB" })]
	//nValDesG:=nVl2Cus	//oDlgGui:aCols[oDlgGui:nAt][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRDES" })]
	nValMobG:=oDlgGui:aCols[nLi][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRMOB" })]
	nValDesG:=oDlgGui:aCols[nLi][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRDES" })]
	//nValTAcG:=oDlgGui:aCols[nLi][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRUNIT"})] 
	nValTAcG:=oDlgGui:aCols[nLi][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRPESO"})]//Alison 17/07/2013
	
	nValIssG :=nValIss
	nValSegG :=nValSeg
	
	If cTipoIss=="I"  //I=Incluso, N=N/A, C=Cliente
		nValTotG :=nValMobG+nValDesG+nValSegG+nValBasGT+nValTAcG+nValCobr
	Else
		nValTotG :=nValMobG+nValDesG+nValIssG+nValSegG+nValBasGT+nValTAcG+nValCobr
	EndIf                                                       
	
	//SumValRes()
	nValRenTG := nValTotG-nValCusTG
	nValCusIG := oDlgGui:aCols[nLi][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_CUSIND" })]
	oValRenTG:Refresh()   
	oValCusIG:Refresh()
	
	If lCalcItem
		nVamMobG :=nValMobG
		nVamDesG :=nValDesG
		nVamIssG :=nValIssG
		nVamSegG :=nValSegG
		nVamTAcG :=nValTAcG
		Do Case
		Case cTipoIss=="I" ; nVamIssG :=0
		Case cTipoIss=="N" ; nVamIssG :=nValIssG
		Case cTipoIss=="C" ; nVamIssG :=nValIssG
		Case cTipoIss=="X" ; nVamIssG :=0
		EndCase
		Do Case
		Case cTipoSeg=="I" ; nVamSegG :=0
		Case cTipoSeg=="N" ; nVamSegG :=nValSegG
		Case cTipoSeg=="C" ; nVamSegG :=nValSegG
		Case cTipoSeg=="X" ; nVamSegG :=0
		EndCase
	EndIf
	
	
	nVamTotG :=nVamMobG+nVamDesG+nVamIssG+nVamSegG+nValBasGT+nValTAcG
	
	nRet := nValTotG
	If oDlgGui:nAt == nLi
		oDlgGui:aCols[nLi][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VALAS" })] := nRet
	EndIf

Return

//Alison 12/11/13 -> Função chamado na validação do campo ZA5_VRHOR
User Function ValPrcBase()//Valida valor base ZA5
	Local aArea		:= GetArea() 
	Local aAreaSB1	:= SB1->(GetArea())
	Local aAreaSZ5	:= ZZ5->(GetArea())
	Local aAreaDA1	:= DA1->(GetArea())
	Local cProduto 	:= oDlgGui:aCols[n, GdFieldPos("ZA5_PRODUT")]
	Local cCodTab 	:= oDlgGui:aCols[n, GdFieldPos("ZA5_CODTAB")]
	Local lRet		:= .T. 
	Local cCodUsr	:= RetCodUsr()
	
	DbSelectArea("ZZ5")
	DbSetOrder(1)
	If !DbSeek(xFilial("ZZ5")+cCodUsr+"VALPRCBASE")// se o usuário nao tiver na SZ5, faz validação abaixo.
		DbSelectArea("DA1")
		DbSetOrder(1)//codtab+prod
		If DbSeek(xFilial("DA1")+cCodTab+cProduto) .And. !Empty(cCodTab)
			If M->ZA5_VRHOR < DA1->DA1_PRCVEN	
				MsgAlert("O valor base, não pode ser menor que o preço de venda informado na tabela de preço!","Atenção")
				lRet := .F.
			EndIf
		Else		                 
			DbSelectArea("SB1")
			DbSetOrder(1)
			If DbSeek(xFilial("SB1")+cProduto)
				If M->ZA5_VRHOR < SB1->B1_PRV1
					MsgAlert("O valor base, não pode ser menor que o preço de venda informado no cadastro deste produto!","Atenção")
					lRet := .F.
				EndIf 
			EndIf
		EndIf 
	EndIf
	
	RestArea(aAreaSB1) 
	RestArea(aAreaSZ5)
	RestArea(aAreaDA1)
	RestArea(aArea)
Return(lRet)

//Alison 12/11/13 -> Função chamado no gatilho do campo ZA5_PRODUT, para preencher o valor base.
User Function GetPrcBase(cCampo)
	Local nRet		:= 0
	Local aArea		:= GetArea() 
	Local aAreaSB1	:= SB1->(GetArea())
	Local aAreaDA1	:= DA1->(GetArea())
	Local cProd		:= ""
	Local cCodTab 	:= ""
	
	If cCampo == "ZA5_PRODUT"
		cProd 	:= M->ZA5_PRODUT
		cCodTab := oDlgGui:aCols[n, GdFieldPos("ZA5_CODTAB")]	
	ElseIf cCampo == "ZA5_CODTAB"
		cProd 	:= oDlgGui:aCols[n, GdFieldPos("ZA5_PRODUT")]
		cCodTab := M->ZA5_CODTAB
	EndIf        
	
	DbSelectArea("DA1")
	DbSetOrder(1)//codtab+prod
	If DbSeek(xFilial("DA1")+cCodTab+cProd) .And. !Empty(cCodTab)
		nRet := DA1->DA1_PRCVEN	
	Else
		DbSelectArea("SB1")
		DbSetOrder(1)
		DbSeek(xFilial("SB1")+cProd)
		nRet := SB1->B1_PRV1
		If Empty(cCodTab) 
			oDlgGui:aCols[n, GdFieldPos("ZA5_DESTAB")]	:= ""
		EndIf
	EndIf		
    
	RestArea(aAreaSB1) 
	RestArea(aAreaDA1)
	RestArea(aArea)
Return(nRet) 

User Function ValTabPr()
	Local lRet		:= .T.
	Local aArea		:= GetArea() 
	Local aAreaDA0	:= DA0->(GetArea())
	
	DbSelectArea("DA0")
	DbSetOrder(1)
	If DbSeek(xFilial("DA0")+M->ZA5_CODTAB)
		If DA0->DA0_ATIVO == "2"//Não
			lRet := .F.
			MsgAlert("Esta tabela de preço está INATIVA.","Atenção")
		EndIf
	Else
   		lRet := .F.
		MsgAlert("Tabela de preço não existe","Atenção")		
	EndIf

	RestArea(aAreaDA0)
	RestArea(aArea)
Return(lRet)

User Function ValTurno()
	Local nValBase := oDlgGui:aCols[oDlgGui:nAt, GdFieldPos("ZA5_VRHOR",oDlgGui:aHeader)]
	Local nPorcent := 0
	
	nPorcent := (nValBase * M->ZBB_PORCENT) / 100 	
	
	oGetVT:aCols[n, GdFieldPos("ZBB_VALTUR")] := nValBase + nPorcent  
			
Return .T.

Static Function GetHorasTurno(cHoraIni,cHoraFim)
	Local nHoraIni	:= 0
	Local nHoraFim  := 0
	Local nRet 		:= 0
	
	cHoraIni := SubStr(cHoraIni,1,2)+"."+SubStr(cHoraIni,3,2) 
	cHoraFim := SubStr(cHoraFim,1,2)+"."+SubStr(cHoraFim,3,2)
	nHoraIni := Val(cHoraIni)
	nHoraFim := Val(cHoraFim)	
	
	nRet := nHoraFim - nHoraIni

Return(nRet)

User Function ValHoraT(cCampo)
	Local lRet := .T.
	Local cHrIni := ""
	Local cHrFim := ""
	
	If cCampo == "ZBB_HRINIT"
		cHrIni := M->ZBB_HRINIT
		cHrFim := oGetVT:aCols[n, GdFieldPos("ZBB_HOFIMT")]
	ElseIf cCampo == "ZBB_HOFIMT"
		cHrIni := oGetVT:aCols[n, GdFieldPos("ZBB_HRINIT")]
		cHrFim := M->ZBB_HOFIMT
	EndIf
	
	If !Empty(cHrFim) .And. !Empty(cHrIni)
		cHrIni := SubStr(cHrIni,1,2)+"."+SubStr(cHrIni,3,2) 
		cHrFim := SubStr(cHrFim,1,2)+"."+SubStr(cHrFim,3,2)
		
		If Val(cHrFim) < Val(cHrIni)
			MsgAlert("Hora final não pode ser maior que a hora inicial!","Atenção")   
			lRet := .F.
		ElseIf Val(cHrFim) >= 24 .Or. Val(cHrIni) >= 24
			MsgAlert("Hora inválida!","Atenção")
			lRet := .F.
		EndIf                                 
	EndIf

Return(lRet)

/*
+===================================+
|======= PROJETO GUINDASTE =========|
|= Valores totalizados por projeto =|   
+===================================+
*/
Static Function fCalcGuiTot()

	Local nV1 	 	:= 0
	Local aItens 	:= {}    
	Local nMobAux   := 0
	Local nDesAux  	:= 0
	Local nSegAux	:= 0
	Local nPesoAux  := 0
	Local nCobrAux  := 0
	Local nVT1		:= 0
	Local nVT2		:= 0
	Local nVT3		:= 0
	Local nDiaTurno := 0
	Local nHrsTurno	:= 0
	Local nTurnoAux	:= 0
	Local cObraAux	:= ""
	Local cSeqGAux  := ""
	Local lTurVazio := .F.              
	Local nCont		:= 0
	Local aColsAux	:= {}  
	Local aHeaderAux:= {}
	Local nUsado	:= 0   

	If !ValType(oDlgGui)=="O"  //Se o objeto já foi criado
		Return
	EndIf 
	     
	If Empty(oTurno_Cols)
		SX3->(DbSetOrder(1))
		SX3->(DbSeek("ZBB"))
		While SX3->(!Eof()) .and. SX3->X3_ARQUIVO == "ZBB"       
			If X3Uso(SX3->X3_USADO) .and. cNivel >= SX3->X3_NIVEL 
			
			  	If !(ZA0->ZA0_TIPOSE <> "U" .and. SX3->X3_CAMPO $ "ZBB_DIASEM|ZBB_VROPER" )
		         	 nUsado++ 
			         AAdd (aHeaderAux, {Trim(SX3->X3_TITULO),;    //01 - titulo
			                              SX3->X3_CAMPO  ,;    //02 - nome do campo
			                              SX3->X3_PICTURE,;    //03 - mascara do campo
			                              SX3->X3_TAMANHO,;    //04 - tamanho
			                              SX3->X3_DECIMAL,;    //05 - decimais
			                              SX3->X3_VALID  ,;    //06 - validacao
			                              SX3->X3_USADO  ,;    //07 - USADO
			                              SX3->X3_TIPO   ,;    //08 - TIPO DO CAMPO
			                              "",;    //09 - ALIAS
			                              SX3->X3_CONTEXT})    //10 - Virtual ou Real    
				EndIf
		 	Endif
		    SX3->(DbSkip())
		Enddo      
		
		
		
		lTurVazio:=.T.
		DbSelectArea("ZBB")
		DbSetOrder(1)
		DbSeek(xFilial("ZBB")+cProjet)
		
		While !ZBB->(Eof()) .And. ZBB->ZBB_PROJET == cProjet 
	          nCont++       
	          aColsAux:={}
	          Aadd(oTurno_Cols,{})
	          AAdd(aColsAux,{ZBB_PROJET,;                         
                         ZBB_OBRA,;  
                         ZBB_FROTA,;
                         ZBB_SEQGUI,;
                         ZBB_TURNO,;
                         ZBB_MINDIT,;
                         ZBB_HRINIT,;
                         ZBB_HOFIMT,;
                         ZBB_VALTUR,;                                     
                         ZBB_PORCEN,;
                         .F.})		
           	oTurno_Cols[nCont] := aColsAux
			ZBB->(DbSkip())
		EndDo
	EndIf
	                               
	nValBasT  := 0
	nValEquT  := 0
	nValBasTT := 0	
	nValTur1T := 0
	nValTur2T := 0
	nValTur3T := 0
	nValTAcT  := 0
	nValISST  := 0
	nValCobrT := 0
	nValTotT  := 0  
	nValRenT  := 0
	nValCusT  := 0
	
	For nX := 1 To Len(oGui_Cols)
		cObraAux :=oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_OBRA"  })]
		cSeqGAux :=oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_SEQGUI"})]
	
		nValBasT +=oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRHOR" })]
		nMobAux  +=oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRMOB" })]
		nDesAux  +=oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRDES" })]			
		nSegAux  +=oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRSEGU"})]
		nValTAcT +=oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRPESO"})]
		
		nValMobT :=oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRMOB" })]
		nValDesT :=oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRDES" })]
		nValSegT :=oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRSEGU"})]		
		cTipoIssT:=oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_TPISS" })]
		cTipoSegT:=oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_TPSEGU"})]
		cTipoCaT :=oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_TIPOCA"})]
		nPreDiaT :=oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_PREDIA"})]
		nVrHorT  :=oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRHOR" })]  
		nMinDiaT :=oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_MINDIA"})] 	
		nMinMesT :=oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_MINMES"})]
		nQtMesT  :=oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_QTMES" })] 
		nQtDiaT  :=oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_QTDIA" })] 
		nPerIssT :=oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_PERISS"})]
		nPesoAux :=oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRPESO"})]
		

		If nQtMesT==0 .and. nQtDiaT==0  
		Do Case
			Case cTipoCaT=="H" ; nV1:= (nPreDiaT*nVrHorT)	//*nMinDia
			Case cTipoCaT=="D" ; nV1:= (nPreDiaT*nVrHorT)	//*nMinDia
			Case cTipoCaT=="M" ; nV1:= (nPreDiaT*nVrHorT) //*nMinMes
			Case cTipoCaT=="F" ; nV1:= nVrHorT
			Otherwise         ; nV1:= 0
		EndCase
		Else //8508 a 8516 - retirado comentário para executar o calculo - Renato Ruy - 12/04/12
			Do Case
			Case cTipoCaT=="H" ; nV1:=(nQtMesT*nMinMesT*nVrHorT)+(nQtDiaT*nMinDiaT*nVrHorT)
			Case cTipoCaT=="D" ; nV1:=(nQtMesT*nMinMesT*nVrHorT)+(nQtDiaT*nMinDiaT*nVrHorT) 
			Case cTipoCaT=="M" ; nV1:=(nQtMesT*nMinMesT*nVrHorT)+(nQtDiaT*nMinDiaT*nVrHorT)
			Case cTipoCaT=="F" ; nV1:=nVrHorT
			Otherwise         ; nV1:=0
			EndCase
		EndIf
		// fim do comentário
		nValEquT += nV1          
		
		nTurnoAux := 0
		For nY := 1 To Len(oTurno_Cols)
			//If Val(oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_SEQGUI" })]) == nY .And. !Empty(oTurno_Cols[nY])
			If lTurVazio
				aItens := oTurno_Cols[nY]
				For nI := 1 To Len(aItens)
					If cObraAux==aItens[nI,GdFieldPos("ZBB_OBRA",aHeaderAux)] .And. cSeqGAux==aItens[nI,GdFieldPos("ZBB_SEQGUI",aHeaderAux)]  							
						If aItens[nI,GdFieldPos("ZBB_TURNO",aHeaderAux)] == "001"
							nDiaTurno := aItens[nI,GdFieldPos("ZBB_MINDIT",aHeaderAux)]
							nHrsTurno := GetHorasTurno(aItens[nI,GdFieldPos("ZBB_HRINIT",aHeaderAux)],aItens[nI,GdFieldPos("ZBB_HOFIMT",aHeaderAux)])   
							nVT1	  := Val(nDiaTurno) * nHrsTurno * aItens[nI,GdFieldPos("ZBB_VALTUR",aHeaderAux)]			
							nValTur1T += nVT1 
							nValEquT  += nVT1						
							//nValTur1O += aItens[nI,GdFieldPos("ZBB_VALTUR",aHeaderAux)] 
						ElseIf aItens[nI,GdFieldPos("ZBB_TURNO",aHeaderAux)] == "002"                               
							nDiaTurno := aItens[nI,GdFieldPos("ZBB_MINDIT",aHeaderAux)]
							nHrsTurno := GetHorasTurno(aItens[nI,GdFieldPos("ZBB_HRINIT",aHeaderAux)],aItens[nI,GdFieldPos("ZBB_HOFIMT",aHeaderAux)])   
							nVT2	  :=Val(nDiaTurno) * nHrsTurno * aItens[nI,GdFieldPos("ZBB_VALTUR",aHeaderAux)]
							nValTur2T += nVT2  
							nValEquT  += nVT2
							//nValTur2O += aItens[nI,GdFieldPos("ZBB_VALTUR",aHeaderAux)] 
						ElseIf aItens[nI,GdFieldPos("ZBB_TURNO",aHeaderAux)] == "003"                               
							nDiaTurno := aItens[nI,GdFieldPos("ZBB_MINDIT",aHeaderAux)]
							nHrsTurno := GetHorasTurno(aItens[nI,GdFieldPos("ZBB_HRINIT",aHeaderAux)],aItens[nI,GdFieldPos("ZBB_HOFIMT",aHeaderAux)])   
							nVT3	  := Val(nDiaTurno) * nHrsTurno * aItens[nI,GdFieldPos("ZBB_VALTUR",aHeaderAux)]
							nValTur3T += nVT3  
							nValEquT  += nVT3
						    //nValTur3O += aItens[nI,GdFieldPos("ZBB_VALTUR",aHeaderAux)] 
						EndIf
						//nValEquT +=nVT1+nVT2+nVT3 
						nTurnoAux := nVT1+nVT2+nVT3
					EndIf 
				Next nI
			Else
				aItens := oTurno_Cols[nY]
				For nI := 1 To Len(aItens)
					If cObraAux==aItens[nI,GdFieldPos("ZBB_OBRA",oGetVT:aHeader)] .And. cSeqGAux==aItens[nI,GdFieldPos("ZBB_SEQGUI",oGetVT:aHeader)]  						
						If aItens[nI,GdFieldPos("ZBB_TURNO",oGetVT:aHeader)] == "001"
							nDiaTurno := aItens[nI,GdFieldPos("ZBB_MINDIT",oGetVT:aHeader)]
							nHrsTurno := GetHorasTurno(aItens[nI,GdFieldPos("ZBB_HRINIT",oGetVT:aHeader)],aItens[nI,GdFieldPos("ZBB_HOFIMT",oGetVT:aHeader)])   
							nVT1	  := Val(nDiaTurno) * nHrsTurno * aItens[nI,GdFieldPos("ZBB_VALTUR",oGetVT:aHeader)]			
							nValTur1T += nVT1						
							nValEquT  += nVT1
							//nValTur1O += aItens[nI,GdFieldPos("ZBB_VALTUR",oGetVT:aHeader)] 
						ElseIf aItens[nI,GdFieldPos("ZBB_TURNO",oGetVT:aHeader)] == "002"                               
							nDiaTurno := aItens[nI,GdFieldPos("ZBB_MINDIT",oGetVT:aHeader)]
							nHrsTurno := GetHorasTurno(aItens[nI,GdFieldPos("ZBB_HRINIT",oGetVT:aHeader)],aItens[nI,GdFieldPos("ZBB_HOFIMT",oGetVT:aHeader)])   
							nVT2	  :=Val(nDiaTurno) * nHrsTurno * aItens[nI,GdFieldPos("ZBB_VALTUR",oGetVT:aHeader)]
							nValTur2T += nVT2
							nValEquT  += nVT2
							//nValTur2O += aItens[nI,GdFieldPos("ZBB_VALTUR",oGetVT:aHeader)] 
						ElseIf aItens[nI,GdFieldPos("ZBB_TURNO",oGetVT:aHeader)] == "003"                               
							nDiaTurno := aItens[nI,GdFieldPos("ZBB_MINDIT",oGetVT:aHeader)]
							nHrsTurno := GetHorasTurno(aItens[nI,GdFieldPos("ZBB_HRINIT",oGetVT:aHeader)],aItens[nI,GdFieldPos("ZBB_HOFIMT",oGetVT:aHeader)])   
							nVT3	  := Val(nDiaTurno) * nHrsTurno * aItens[nI,GdFieldPos("ZBB_VALTUR",oGetVT:aHeader)]
							nValTur3T += nVT3
							nValEquT  += nVT3
						    //nValTur3O += aItens[nI,GdFieldPos("ZBB_VALTUR",oGetVT:aHeader)] 
						EndIf
						//nValEquT +=nVT1+nVT2+nVT3 
						nTurnoAux := nVT1+nVT2+nVT3
					EndIf 
				Next nI
			EndIf
		Next nY        
		
		nCobrAux := 0
		For nI := 1 To Len(oRes_Cols)
			If oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_SEQGUI" })]==oRes_Cols[nI, GdFieldPos("ZAA_SEQGUI",oDlgRes:aHeader)]
				nCobrAux += oRes_Cols[nI, GdFieldPos("ZAA_VALCOB",oDlgRes:aHeader)]
			EndIf
		Next nI
		
		nBasIssT:=nTurnoAux+nValMobT+nValDesT+nPesoAux+nValSegT+nCobrAux+nV1
		
		nISSaux :=U_fCalcIssG(nBasIssT,nPerIssT,cTipoIssT)  //Calcula o ISS dos Guindastes
		
		nValISST += nISSaux
		
		If cTipoIssT=="I"  //I=Incluso, N=N/A, C=Cliente
			nValTotT +=nValMobT+nValDesT+nValSegT+nPesoAux//+nCobrAux
		Else
			nValTotT +=nValMobT+nValDesT+nISSaux+nValSegT+nPesoAux//+nCobrAux
		EndIf  

	Next nX    
	
	//nValEquT += nValBasT                
	
	For nI := 1 To Len(oRes_Cols)
		nValCusT  += oRes_Cols[nI, GdFieldPos("ZAA_VALOR",oDlgRes:aHeader)]
		nValCobrT += oRes_Cols[nI, GdFieldPos("ZAA_VALCOB",oDlgRes:aHeader)]
	Next nI  
	
	nValEquT += nValCobrT
	
	nValSegT := nSegAux
	nValMobT := nMobAux
	nValDesT := nDesAux
	
	
	nValBasTT:=nValEquT  //Vr.Base Total (Guindaste)
	nValTotT += nValBasTT
	  
	nValRenT := nValTotT-nValCusT
	
	oValBasT:Refresh()
	oValBasTT:Refresh()
	oValTur1T:Refresh()
	oValTur2T:Refresh()
	oValTur3T:Refresh() 
	oValMobT:Refresh()
	oValDesT:Refresh()
	oValSegT:Refresh()
	oValTAcT:Refresh()
	oValISST:Refresh()    
	oValTotT:Refresh()
	oValCusT:Refresh()
	
	If lTurVazio 
		oTurno_Cols := {}
	EndIf

Return

/*
+================================+
|======= PROJETO GUINDASTE ======|
|= Valores totalizados por obra =|   
+================================+
*/
Static Function fCalcGuiObra()

	Local nV1 	 	:= 0
	Local aItens 	:= {}    
	Local nMobAux   := 0
	Local nDesAux  	:= 0
	Local nSegAux	:= 0
	Local nPesoAux  := 0
	Local nCobrAux  := 0
	Local nVT1		:= 0
	Local nVT2		:= 0
	Local nVT3		:= 0
	Local nDiaTurno := 0
	Local nHrsTurno	:= 0
	Local nTurnoAux	:= 0
	Local lTurVazio := .F.              
	Local nCont		:= 0
	Local aColsAux	:= {}  
	Local aHeaderAux:= {}
	Local cSeqGAux	:= ""
	Local nUsado	:= 0

	If !ValType(oDlgGui)=="O"  //Se o objeto já foi criado
		Return
	EndIf 
	
	                               
	nValBasOG := 0
	nValEquO  := 0
	nValBasTO := 0	
	nValTur1O := 0
	nValTur2O := 0
	nValTur3O := 0
	nValTAcO  := 0
	nValISSO  := 0
	nValCobrO := 0
	nValTotO  := 0  
	nValRenO  := 0
	nValCusO  := 0
	
	If Empty(aColsTurno) .Or. Empty(oTurno_Cols)
		SX3->(DbSetOrder(1))
		SX3->(DbSeek("ZBB"))
		While SX3->(!Eof()) .and. SX3->X3_ARQUIVO == "ZBB"       
			If X3Uso(SX3->X3_USADO) .and. cNivel >= SX3->X3_NIVEL 
			
			  	If !(ZA0->ZA0_TIPOSE <> "U" .and. SX3->X3_CAMPO $ "ZBB_DIASEM|ZBB_VROPER" )
		         	 nUsado++ 
			         AAdd (aHeaderAux, {Trim(SX3->X3_TITULO),;    //01 - titulo
			                              SX3->X3_CAMPO  ,;    //02 - nome do campo
			                              SX3->X3_PICTURE,;    //03 - mascara do campo
			                              SX3->X3_TAMANHO,;    //04 - tamanho
			                              SX3->X3_DECIMAL,;    //05 - decimais
			                              SX3->X3_VALID  ,;    //06 - validacao
			                              SX3->X3_USADO  ,;    //07 - USADO
			                              SX3->X3_TIPO   ,;    //08 - TIPO DO CAMPO
			                              "",;    //09 - ALIAS
			                              SX3->X3_CONTEXT})    //10 - Virtual ou Real    
				EndIf
		 	Endif
		    SX3->(DbSkip())
		Enddo      
		
		
		
		lTurVazio:=.T.
		DbSelectArea("ZBB")
		DbSetOrder(1)
		DbSeek(xFilial("ZBB")+cProjet)
		
		While !ZBB->(Eof()) .And. ZBB->ZBB_PROJET == cProjet 
	          nCont++       
	          aColsAux:={}
	          Aadd(aColsTurno,{})
	          AAdd(aColsAux,{ZBB_PROJET,;                         
                         ZBB_OBRA,;  
                         ZBB_FROTA,;
                         ZBB_SEQGUI,;
                         ZBB_TURNO,;
                         ZBB_MINDIT,;
                         ZBB_HRINIT,;
                         ZBB_HOFIMT,;
                         ZBB_VALTUR,;                                     
                         ZBB_PORCEN,;
                         .F.})		
           	aColsTurno[nCont] := aColsAux
			ZBB->(DbSkip())
		EndDo
	EndIf
	
	For nX := 1 To Len(oGui_Cols)
		If cObra==oGui_Cols[nX, GdFieldPos("ZA5_OBRA",oDlgGui:aHeader)]
			nValBasOG+=oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRHOR" })]
			nMobAux  +=oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRMOB" })]
			nDesAux  +=oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRDES" })]			
			nSegAux  +=oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRSEGU"})]
			nValTAcO +=oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRPESO"})]
			
			nValMobO :=oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRMOB" })]
			nValDesO :=oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRDES" })]
			nValSegO :=oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRSEGU"})]		
			cTipoIssO:=oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_TPISS" })]
			cTipoSegO:=oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_TPSEGU"})]
			cTipoCaO :=oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_TIPOCA"})]
			nPreDiaO :=oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_PREDIA"})]
			nVrHorO  :=oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRHOR" })]  
			nMinDiaO :=oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_MINDIA"})] 	
			nMinMesO :=oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_MINMES"})]
			nQtMesO  :=oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_QTMES" })] 
			nQtDiaO  :=oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_QTDIA" })] 
			nPerIssO :=oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_PERISS"})]
			nPesoAux :=oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_VRPESO"})]
			
			cSeqGAux :=oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_SEQGUI"})]
			
	
			If nQtMesO==0 .and. nQtDiaO==0  
			Do Case
				Case cTipoCaO=="H" ; nV1:= (nPreDiaO*nVrHorO)	//*nMinDia
				Case cTipoCaO=="D" ; nV1:= (nPreDiaO*nVrHorO)	//*nMinDia
				Case cTipoCaO=="M" ; nV1:= (nPreDiaO*nVrHorO) //*nMinMes
				Case cTipoCaO=="F" ; nV1:= nVrHorO
				Otherwise         ; nV1:= 0
			EndCase
			Else //8508 a 8516 - retirado comentário para executar o calculo - Renato Ruy - 12/04/12
				Do Case
				Case cTipoCaO=="H" ; nV1:=(nQtMesO*nMinMesO*nVrHorO)+(nQtDiaO*nMinDiaO*nVrHorO)
				Case cTipoCaO=="D" ; nV1:=(nQtMesO*nMinMesO*nVrHorO)+(nQtDiaO*nMinDiaO*nVrHorO) 
				Case cTipoCaO=="M" ; nV1:=(nQtMesO*nMinMesO*nVrHorO)+(nQtDiaO*nMinDiaO*nVrHorO)
				Case cTipoCaO=="F" ; nV1:=nVrHorO
				Otherwise         ; nV1:=0
				EndCase
			EndIf
			// fim do comentário
			nValEquO += nV1
			
			For nY := 1 To Len(aColsTurno)
				If lTurVazio
					aItens := aColsTurno[nY]
					For nI := 1 To Len(aItens)
						If cObra==aItens[nI, GdFieldPos("ZBB_OBRA",aHeaderAux)] .And. cSeqGAux==aItens[nI, GdFieldPos("ZBB_SEQGUI",aHeaderAux)]
							If aItens[nI,GdFieldPos("ZBB_TURNO",aHeaderAux)] == "001"
								nDiaTurno := aItens[nI,GdFieldPos("ZBB_MINDIT",aHeaderAux)]
								nHrsTurno := GetHorasTurno(aItens[nI,GdFieldPos("ZBB_HRINIT",aHeaderAux)],aItens[nI,GdFieldPos("ZBB_HOFIMT",aHeaderAux)])   
								nVT1	  := Val(nDiaTurno) * nHrsTurno * aItens[nI,GdFieldPos("ZBB_VALTUR",aHeaderAux)]			
								nValTur1O += nVT1						
								nValEquO  += nVT1
								//nValTur1O += aItens[nI,GdFieldPos("ZBB_VALTUR",aHeaderAux)] 
							ElseIf aItens[nI,GdFieldPos("ZBB_TURNO",aHeaderAux)] == "002"                               
								nDiaTurno := aItens[nI,GdFieldPos("ZBB_MINDIT",aHeaderAux)]
								nHrsTurno := GetHorasTurno(aItens[nI,GdFieldPos("ZBB_HRINIT",aHeaderAux)],aItens[nI,GdFieldPos("ZBB_HOFIMT",aHeaderAux)])   
								nVT2	  :=Val(nDiaTurno) * nHrsTurno * aItens[nI,GdFieldPos("ZBB_VALTUR",aHeaderAux)]
								nValTur2O += nVT2
								nValEquO  += nVT2
								//nValTur2O += aItens[nI,GdFieldPos("ZBB_VALTUR",aHeaderAux)] 
							ElseIf aItens[nI,GdFieldPos("ZBB_TURNO",aHeaderAux)] == "003"                               
								nDiaTurno := aItens[nI,GdFieldPos("ZBB_MINDIT",aHeaderAux)]
								nHrsTurno := GetHorasTurno(aItens[nI,GdFieldPos("ZBB_HRINIT",aHeaderAux)],aItens[nI,GdFieldPos("ZBB_HOFIMT",aHeaderAux)])   
								nVT3	  := Val(nDiaTurno) * nHrsTurno * aItens[nI,GdFieldPos("ZBB_VALTUR",aHeaderAux)]
								nValTur3O += nVT3
								nValEquO  += nVT3
							    //nValTur3O += aItens[nI,GdFieldPos("ZBB_VALTUR",aHeaderAux)] 
							EndIf
							//nValEquO +=nVT1+nVT2+nVT3 
							nTurnoAux := nVT1+nVT2+nVT3 
						EndIf				
					Next nI		 	
				Else
					If Val(oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_SEQGUI" })]) == nY .And. !Empty(aColsTurno[nY])
						aItens := aColsTurno[nY]
						For nI := 1 To Len(aItens)						
							If cObra==aItens[nI, GdFieldPos("ZBB_OBRA",oGetVT:aHeader)]
								If aItens[nI,GdFieldPos("ZBB_TURNO",oGetVT:aHeader)] == "001"
									nDiaTurno := aItens[nI,GdFieldPos("ZBB_MINDIT",oGetVT:aHeader)]
									nHrsTurno := GetHorasTurno(aItens[nI,GdFieldPos("ZBB_HRINIT",oGetVT:aHeader)],aItens[nI,GdFieldPos("ZBB_HOFIMT",oGetVT:aHeader)])   
									nVT1	  := Val(nDiaTurno) * nHrsTurno * aItens[nI,GdFieldPos("ZBB_VALTUR",oGetVT:aHeader)]			
									nValTur1O += nVT1						
									nValEquO  += nVT1
									//nValTur1O += aItens[nI,GdFieldPos("ZBB_VALTUR",oGetVT:aHeader)] 
								ElseIf aItens[nI,GdFieldPos("ZBB_TURNO",oGetVT:aHeader)] == "002"                               
									nDiaTurno := aItens[nI,GdFieldPos("ZBB_MINDIT",oGetVT:aHeader)]
									nHrsTurno := GetHorasTurno(aItens[nI,GdFieldPos("ZBB_HRINIT",oGetVT:aHeader)],aItens[nI,GdFieldPos("ZBB_HOFIMT",oGetVT:aHeader)])   
									nVT2	  :=Val(nDiaTurno) * nHrsTurno * aItens[nI,GdFieldPos("ZBB_VALTUR",oGetVT:aHeader)]
									nValTur2O += nVT2                                                                          
									nValEquO  += nVT2
									//nValTur2O += aItens[nI,GdFieldPos("ZBB_VALTUR",oGetVT:aHeader)] 
								ElseIf aItens[nI,GdFieldPos("ZBB_TURNO",oGetVT:aHeader)] == "003"                               
									nDiaTurno := aItens[nI,GdFieldPos("ZBB_MINDIT",oGetVT:aHeader)]
									nHrsTurno := GetHorasTurno(aItens[nI,GdFieldPos("ZBB_HRINIT",oGetVT:aHeader)],aItens[nI,GdFieldPos("ZBB_HOFIMT",oGetVT:aHeader)])   
									nVT3	  := Val(nDiaTurno) * nHrsTurno * aItens[nI,GdFieldPos("ZBB_VALTUR",oGetVT:aHeader)]
									nValTur3O += nVT3
									nValEquO  += nVT3
								    //nValTur3O += aItens[nI,GdFieldPos("ZBB_VALTUR",oGetVT:aHeader)] 
								EndIf
								//nValEquO +=nVT1+nVT2+nVT3 
								nTurnoAux := nVT1+nVT2+nVT3 
							EndIf						
						Next nI
					EndIf
				EndIf
			Next nY        
			        
			nCobrAux := 0
			For nI := 1 To Len(oRes_Cols)
				If cObra==oRes_Cols[nI, GdFieldPos("ZAA_OBRA",oDlgRes:aHeader)] .And. oGui_Cols[nX][Ascan(oDlgGui:aHeader,{|x|AllTrim(x[2])=="ZA5_SEQGUI" })]==oRes_Cols[nI, GdFieldPos("ZAA_SEQGUI",oDlgRes:aHeader)]
					nCobrAux += oRes_Cols[nI, GdFieldPos("ZAA_VALCOB",oDlgRes:aHeader)]
				EndIf
			Next nI
			
			nBasIssO:=nTurnoAux+nValMobO+nValDesO+nPesoAux+nValSegO+nCobrAux+nV1
			
			nISSaux :=U_fCalcIssG(nBasIssO,nPerIssO,cTipoIssO)  //Calcula o ISS dos Guindastes
			
			nValISSO += nISSaux
			
			If cTipoIssO=="I"  //I=Incluso, N=N/A, C=Cliente
				nValTotO +=nValMobO+nValDesO+nValSegO+nPesoAux//+nCobrAux
			Else
				nValTotO +=nValMobO+nValDesO+nISSaux+nValSegO+nPesoAux//+nCobrAux
			EndIf       
	        
			
		EndIf
	Next nX 
	
	//nValEquO += nValBasOG              
	
	For nI := 1 To Len(oRes_Cols)
		If cObra==oRes_Cols[nI, GdFieldPos("ZAA_OBRA",oDlgRes:aHeader)]
			nValCusO  += oRes_Cols[nI, GdFieldPos("ZAA_VALOR",oDlgRes:aHeader)]
			nValCobrO += oRes_Cols[nI, GdFieldPos("ZAA_VALCOB",oDlgRes:aHeader)]
		EndIf
	Next nI
	
	nValEquO += nValCobrO
	
	nValSegO := nSegAux
	nValMobO := nMobAux
	nValDesO := nDesAux
	
	
	nValBasTO:=nValEquO  //Vr.Base Total (Guindaste)
	nValTotO += nValBasTO
	  
	nValRenO := nValTotO-nValCusO
	
	oValBasOG:Refresh()
	oValBasTO:Refresh()
	oValTur1O:Refresh()
	oValTur2O:Refresh()
	oValTur3O:Refresh() 
	oValMobO:Refresh()
	oValDesO:Refresh()
	oValSegO:Refresh()
	oValTAcO:Refresh()
	oValISSO:Refresh()    
	oValTotO:Refresh()
	oValCusO:Refresh()
	
	If lTurVazio 
		aColsTurno := {}
	EndIf

Return

User Function TabCalc()
	Local aVetor := {}
	Local oDlg
	Local oLbx
	Local cTitulo := "Calculo do sistema"
	
	Aadd(aVetor,{"1" ,"Batedor Credenciado"			})
	Aadd(aVetor,{"2" ,"DER"							})
	Aadd(aVetor,{"3" ,"DNIT"						})
	Aadd(aVetor,{"4" ,"TUV"							})
	Aadd(aVetor,{"5" ,"TAP"							})
	Aadd(aVetor,{"6" ,"Bloqueio de Serra"			})
	Aadd(aVetor,{"7" ,"Alemoa"						})
	Aadd(aVetor,{"8" ,"Calculo p/ taxas Municipais"	})
	Aadd(aVetor,{"9" ,"Pedágio"						})
	Aadd(aVetor,{"10","Taxa de licenças"			})
	Aadd(aVetor,{"11","Taxa portuária"				})
	Aadd(aVetor,{"12","Taxa administrativa"			})
	Aadd(aVetor,{"13","CET"							})
	
	// Monta a tela para usuário visualizar consulta.
	DEFINE MSDIALOG oDlg TITLE cTitulo FROM 0,0 TO 240,500 PIXEL
		// Primeira opção para montar o listbox.
		@ 10,10 LISTBOX oLbx FIELDS HEADER ;
		"Id", "Calculo" ;
		SIZE 230,95 On DblClick(M->ZAB_ID := aVetor[oLbx:nAt,1],oDlg:End()) OF oDlg PIXEL
		oLbx:SetArray( aVetor )
		oLbx:bLine := {|| {aVetor[oLbx:nAt,1],aVetor[oLbx:nAt,2]}}
		DEFINE SBUTTON FROM 107,185 TYPE 1 ACTION (M->ZAB_ID := aVetor[oLbx:nAt,1],oDlg:End()) ENABLE OF oDlg
		DEFINE SBUTTON FROM 107,215 TYPE 2 ACTION oDlg:End() ENABLE OF oDlg
	ACTIVATE MSDIALOG oDlg CENTER
Return .T.
  

/*
+------------+-----------+--------+-----------------+-------+-----------------+
| Programa:  | fCadZAN   | Autor: | Alison Oliveira | Data: | Novembro/2013   |
+------------+-----------+--------+-----------------+-------+-----------------+
| Descrição: | Cadastro de Escolta				                              |
+------------+----------------------------------------------------------------+
| Uso:       | Transremoção                                    		          |
+------------+----------------------------------------------------------------+
*/
Static Function fCadZAN(cAlias)//ZAN
	Private cCadastro := "Cadastro de Escolta"
	Private aRotina   := MenuZAN()     
	Private cDelFunc  := "U_A050VlDel()"
	
	DbSelectArea(cAlias)
	DbSetOrder(1)
	
	MBrowse(6,1,22,75,cAlias)
Return

User Function CadZANI(cAlias, nReg, nOpc)
	Local aCpoEnch   := {}
	Local aAlter     := {}
	Local cAliasE    := cAlias
	Local aAlterEnch := {}
	Local aPos       := {015,000,300,600}
	Local nModelo    := 3
	Local lF3        := .F.
	Local lMemoria   := .T.
	Local lColumn    := .F.
	Local caTela     := ""
	Local lNoFolder  := .F.
	Local lProperty  := .F.
    Local lOk        := .F.
    Local aButtons   := {}
    Local aTFolder	 := {}

    //>>MsNewGetDados    
    Local aCpoGDa    := {}
	Local cAliasGD   := "ZAN"
	Local nSuperior  := 101
	Local nEsquerda  := 001
	Local nInferior  := 250
	Local nDireita   := 390
	Local cLinOk     := "AllwaysTrue"
	Local cTudoOk    := "AllwaysTrue"
	Local cIniCpos   := "+ZAN_ITEM"
	Local nFreeze    := 000
	Local nMax       := 999
	Local cFieldOk   := "AllwaysTrue"
	Local cSuperDel  := ""
	Local cDelOk     := "AllwaysTrue"
	Local aHeader    := {}
	Local aCols      := {}
	Local aAlterGDa  := {}  
	Local nUsado     := 0
	Local nOpcX      := nOpc						
	Local aHeaderZAN := {}
	Local aColsZAN   := {}
	Local nCols      := 0
	Local aCombo	 := {}
	Local aCombo2	 := {}
	Local aCombo3	 := {}   
	Local lEdit		 := nOpc==3 .Or. nOpc==4
    //<<MsNewGetDados
    
    //Posições
    Local aObjects  := {}
	Local aPosObj   := {}
	Local aInfo		:= {}
	Local aSize		:= MsAdvSize()
	Local nGd1,nGd2,nGd3,nGd4       
    
    Private oTFolder := Nil
	Private oDlgZAN  := Nil
	Private oGetD1   := Nil
	Private oEnch    := Nil 
	Private cFilZAN  := ""
	Private aAlteraZAN  := {}
	Private aTELA[0][0]
	Private aGETS[0] 
	
	Private cCodigo	:= Iif(nOpc==3,CriaVar("ZAN_COD")   ,ZAN->ZAN_COD)
	Private cAlemoa	:= Iif(nOpc==3,CriaVar("ZAN_ALEMOA"),ZAN->ZAN_ALEMOA)	
	Private cBlqSer	:= Iif(nOpc==3,CriaVar("ZAN_BLOQSR"),ZAN->ZAN_BLOQSR)
	Private cTpRod	:= Iif(nOpc==3,CriaVar("ZAN_TPROD") ,ZAN->ZAN_TPROD)
	Private cTpPist	:= Iif(nOpc==3,CriaVar("ZAN_TPPIST"),ZAN->ZAN_TPPIST)	
	
	Private oAlemoa
	Private oBlqSer
	Private oTpRod
	Private oTpPist		
				
	//DbSelectArea("ZAN")
	//DbSetOrder(1)
	//cFilZAN := xFilial("ZAN")
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Calcula posicao dos objetos³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	AAdd( aObjects, { 100, 25, .T., .T. } )
	AAdd( aObjects, { 100, 75, .T., .T. } )
	aInfo := { aSize[ 1 ], aSize[ 2 ], aSize[ 3 ], aSize[ 4 ], 3, 3 } 
	aPosObj := MsObjSize( aInfo, aObjects, .T. ) 
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Define as posicoes da Getdados a partir do folder    ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	nGd1 := 2
	nGd2 := 2
	nGd3 := aPosObj[2,3]-aPosObj[2,1]-15
	nGd4 := aPosObj[2,4]-aPosObj[2,2]-4
		
	/*AADD(aCpoEnch,cCodigo)
	AADD(aCpoEnch,cAlemoa)
	AADD(aCpoEnch,cBlqSer)
	AADD(aCpoEnch,cTpRod)
	AADD(aCpoEnch,cTpPist)*/
	DbSelectArea("SX3")
	DbSetOrder(1)
	DbSeek(cAliasE)
	While !SX3->(Eof()) .And. SX3->X3_ARQUIVO == cAliasE
		If !(SX3->X3_CAMPO $ "ZAN_FILIAL") .And. cNivel >= SX3->X3_NIVEL .And. X3Uso(SX3->X3_USADO) .And. AllTrim(SX3->X3_CAMPO) $ "ZAN_COD|ZAN_ALEMOA|ZAN_BLOQSR|ZAN_TPROD|ZAN_TPPIST"
			AADD(aCpoEnch,SX3->X3_CAMPO)
		EndIf
		SX3->(DbSkip())
	EndDo	
	aAlterEnch := aClone(aCpoEnch)
    
    //>>>Itens:MsNewGetDados ZAN
    DbSelectArea("SX3")
    DbSetOrder(1)
	DbSeek("ZAN")
	aHeaderZAN := {}
	While !SX3->(Eof()).And.(X3_ARQUIVO == "ZAN" )
		If X3USO(X3_USADO).And. cNivel >= X3_NIVEL .And. !(AllTrim(SX3->X3_CAMPO) $  "ZAN_COD|ZAN_ALEMOA|ZAN_BLOQSR|ZAN_TPROD|ZAN_TPPIST")
			nUsado++ //:= nUsado+1         
			
			AADD(aHeaderZAN,{ AllTrim(X3_TITULO),;
						X3_CAMPO   ,;
						X3_PICTURE ,;
						X3_TAMANHO ,;
						X3_DECIMAL ,;
						X3_VALID   ,;
						X3_USADO   ,;
						X3_TIPO    ,;
						X3_F3      ,;
						X3_CONTEXT } )
						
			
		EndIf
		SX3->(DbSkip())
	EndDo
	
	If nOpc==3 // Incluir
		aColsZAN            := {Array(nUsado+1)}
		aColsZAN[1,nUsado+1] := .F.
		For nX := 1 to nUsado
			aColsZAN[1,nX] := CriaVar(aHeaderZAN[nX,2])
		Next nX
		aColsZAN[1][1] := '0001'
	Else
		aColsZAN:={}
		DbSelectArea("ZAN")
		DbSetOrder(1) 
		DbSeek(xFilial("ZAN")+ZAN->ZAN_COD)
		While !ZAN->(Eof()) .And. ZAN->ZAN_FILIAL == xFilial("ZAN") .And. ZAN->ZAN_COD == cCodigo
			AADD(aColsZAN,Array(nUsado+1))
			nCols++
			For nX := 1 to nUsado
				If (aHeaderZAN[nX][10] != "V")
					aColsZAN[nCols][nX] := FieldGet(FieldPos(aHeaderZAN[nX][2]))
				Else
					aColsZAN[nCols][nX] := CriaVar(aHeaderZAN[nX][2],.T.)
				Endif
				//aColsZAN[Len(aColsZAN),nX] := FieldGet(FieldPos(aHeaderZAN[nX,2]))
			Next nX
			aColsZAN[nCols][nUsado+1] := .F.
			DbSelectArea("ZAN")
			aAdd(aAlteraZAN,RecNo())
			ZAN->(DbSkip())
		EndDo
	Endif

	oDlgZAN := MSDIALOG():New(aSize[7],aSize[1],aSize[6],aSize[5],cCadastro,,,,,,,,,.T.)
	//Carrega e preenche variaveis de memória, 
	//inclusive executando os inicializadores padrão quando aplicável
	//RegToMemory(cAliasE, If(nOpc==3,.T.,.F.))
	
	//oEnch := MsMGet():New(cAliasE, nReg, nOpc, /*aCRA*/, /*cLetra*/,;
	//	/*cTexto*/, aCpoEnch, aPosObj[1], aAlterEnch, nModelo, /*nColMens*/,;
	//	/*cMensagem*/, /*cTudoOk*/,oDlgZAN,lF3,lMemoria,lColumn, caTela,;
	//	lNoFolder, lProperty)                           
	
	
	aAdd(aCombo,"S=Sim")  
	aAdd(aCombo,"N=Nao")
	
	//1=Municipal;2=Estadual;3=Federal                                                                                                
	aAdd(aCombo2,"M=Municipal")  
	aAdd(aCombo2,"E=Estadual")
	aAdd(aCombo2,"F=Federal")
	//1=Simples;2=Dupla;3=Ambas                                                                                                       
	aAdd(aCombo3,"S=Simples")  
	aAdd(aCombo3,"D=Dupla")
	aAdd(aCombo3,"A=Ambas")
	
	@ 0.6,01.0  SAY OemToAnsi("Codigo") OF oDlgZAN 	
	@ 0.5,06.0  MSGET cCodigo	Picture PesqPict("ZAN","ZAN_COD") Valid CheckSX3("ZAN_COD") When(.F.)
	@ 0.6,12.0  SAY OemToAnsi("Alemoa ?") OF oDlgZAN 	
	@ 0.5,17.0  COMBOBOX oAlemoa VAR cAlemoa ITEMS aCombo SIZE 50,010 VALID fZanVal("ALEMOA") When(lEdit)
	@ 0.6,24.0  SAY OemToAnsi("Bloq.Serra ?") OF oDlgZAN 	
	@ 0.5,29.0  COMBOBOX oBlqSer VAR cBlqSer ITEMS aCombo SIZE 50,010 VALID fZanVal("BLOQSR") When(lEdit)
	@ 0.6,36.0  SAY OemToAnsi("Tipo Rodovia ?") OF oDlgZAN 	
	@ 0.5,41.0  COMBOBOX oTpRod  VAR cTpRod  ITEMS aCombo2 SIZE 50,010 When(lEdit)
	@ 0.6,48.0  SAY OemToAnsi("Tipo Pista ?") OF oDlgZAN 	
	@ 0.5,53.0  COMBOBOX oTpPist VAR cTpPist ITEMS aCombo3 SIZE 50,010 When(lEdit)
		
	
	aTFolder	:= {'Itens' }
	oTFolder	:= TFolder():New(aPosObj[2,1],aPosObj[2,2],aTFolder,,oDlgZAN,,,,.T.,,aPosObj[2,4]-aPosObj[2,2],aPosObj[2,3]-aPosObj[2,1])	
	//Criando MsNewGetDados
	oGetD1 := MsNewGetDados():New(nGd1,nGd2,nGd3,nGd4, iif(nOpcx==2, 0, GD_UPDATE + GD_INSERT + GD_DELETE),;
							cLinOk,cTudoOk,cIniCpos,/*aAlterGDa*/,nFreeze,nMax,cFieldOk, cSuperDel,;
							cDelOk, oTFolder:aDialogs[1], aHeaderZAN, aColsZAN)

	oDlgZAN:lCentered := .T.
	Activate MsDialog oDlgZAN ON INIT (EnchoiceBar(oDlgZAN,{||Iif(Obrigatorio(aGets,aTela) .And. ValidZAN(nOpc),(lOk:=.T.,oDlgZAN:End()),.F.)},{||oDlgZAN:End()},,@aButtons))		
		
	If lOk .And. nOpc != 2
		Begin Transaction
			GravaZAN(nOpc)
			EvalTrigger()
			If __lSX8
				ConfirmSX8()
			EndIf
		End Transaction
	Else
		If __lSX8
			RollBackSX8()
		EndIf
	EndIf
Return

Static Function fZanVal(cOpc)
	If cOpc == "ALEMOA"
		If cAlemoa == "S"
			cBlqSer := "N"
			oBlqSer:SetEnable(.F.) 
			oBlqSer:Refresh()
		Else 
			oBlqSer:SetEnable(.T.) 
			oBlqSer:Refresh()
		EndIf
	ElseIf cOpc == "BLOQSR"
		If cBlqSer == "S"
			cAlemoa := "N"
			oAlemoa:SetEnable(.F.) 
			oAlemoa:Refresh()	
		Else 
			oAlemoa:SetEnable(.T.) 
			oAlemoa:Refresh()
		EndIf
	EndIf   
Return 
                
//Validação botão confirmar
Static Function ValidZAN(nOpc)
	Local aArea		:= GetArea()                            
	Local aAreaZAN	:= ZAN->(GetArea())
	Local lRet		:= .T.
	Local nRecno	:= Recno()
	
	If nOpc <> 3 .And. nOpc <> 4
		Return(lRet)
	EndIf
	
	DbSelectArea("ZAN")
	DbSetOrder(2)
	If DbSeek(xFilial("ZAN")+cAlemoa+cBlqSer+cTpRod) //.And. cTpPist == "A"//Ambas
	While !ZAN->(Eof()) .And. ZAN->(ZAN_ALEMOA+ZAN_BLOQSR+ZAN_TPROD) == cAlemoa+cBlqSer+cTpRod
		If ZAN->ZAN_TPPIST == cTpPist .Or. cTpPist == "A" .Or. ZAN->ZAN_TPPIST == "A"
			//If nRecno != Recno()
			If cCodigo != ZAN->ZAN_COD
				MsgAlert("Já existe um cadastro com esses dados, Troque uma das chaves Principais(Alemoa,Bloq.Serra,Tipo Rod.,Tipo Pista)")			
				lRet := .F.	
				exit
			EndIf 
		EndIf
		ZAN->(DbSkip())
	EndDo
	EndIf
	
	RestArea(aAreaZAN)
	RestArea(aArea)
Return(lRet)

User Function ZANVALID(cCampo)
	Local lRet	 := .T.
	Local nNivel := M->ZAN_NIVEL
	
	If cCampo == "ZAN_NIVEL"
		For nX := 1 To Len(oGetD1:aCols)
			If oGetD1:aCols[nX,GdFieldPos("ZAN_NIVEL")] == nNivel .And. nX !=oGetD1:nAt 
				MsgAlert("Este Nivel já foi informado. Informe outro nivel.","Atenção")
				lRet := .F.
				Exit
			EndIf
		Next nX    
	EndIf
Return(lRet)

Static Function GravaZAN(nOpc)
	Local nUsadoZAN := 0                         
	Private bCampo := { |nField| FieldName(nField) }                    
	
	nUsadoZAN := Len(oGetD1:aHeader) + 1
	If nOpc == 3 //Inclui
	
		DbSelectArea("ZAN")				
		DbSetOrder(1)
		For nX := 1 To Len(oGetD1:aCols)
			//If !oGet02:aCols[nX][nUsado]
			If !oGetD1:aCols[1,Len(oGetD1:aHeader)+1]
					RecLock("ZAN",.T.)
				For nI := 1 To Len(oGetD1:aHeader)
					FieldPut(FieldPos(Trim(oGetD1:aHeader[nI,2])),oGetD1:aCols[nX,nI])
				Next nI
				ZAN->ZAN_FILIAL := xFilial("ZAN")
				ZAN->ZAN_COD  	:= cCodigo
				ZAN->ZAN_ALEMOA	:= cAlemoa
				ZAN->ZAN_BLOQSR	:= cBlqSer
				ZAN->ZAN_TPROD	:= cTpRod
				ZAN->ZAN_TPPIST	:= cTpPist			 
				MsUnLock()
			EndIf
		Next nX 
		
	ElseIf nOpc == 4 // Altera	
		
		DbSelectArea("ZAN")
		DbSetOrder(1)
		DbSeek(xFilial("ZAN")+cCodigo)
		While !ZAN->(Eof()) .And. ZAN->(ZAN_FILIAL+ZAN_COD) == xFilial("ZAN")+cCodigo
		    RecLock("ZAN",.F.) 
		    DbDelete()
		    MsUnLock()
			ZAN->(DbSkip())
		EndDo         
		
		For nX := 1 To Len(oGetD1:aCols)
			If !oGetD1:aCols[nX][nUsadoZAN] //Se a linha nao estiver deletada
				RecLock("ZAN",.T.)
				For nI := 1 To Len(oGetD1:aHeader)
					FieldPut(FieldPos(Trim(oGetD1:aHeader[nI,2])),oGetD1:aCols[nX,nI])
				Next nI
				ZAN->ZAN_FILIAL := xFilial("ZAN")
				ZAN->ZAN_COD  	:= cCodigo
				ZAN->ZAN_ALEMOA	:= cAlemoa
				ZAN->ZAN_BLOQSR	:= cBlqSer
				ZAN->ZAN_TPROD	:= cTpRod
				ZAN->ZAN_TPPIST	:= cTpPist			 
				lGravou := .T.
			EndIf
			MsUnLock()
		Next nX            
	ElseIf nOpc == 5  //Exclui  
	
		DbSelectArea("ZAN")
		DbSetOrder(1)
		DbSeek(xFilial("ZAN")+cCodigo)
		While !ZAN->(Eof()) .And. ZAN->(ZAN_FILIAL+ZAN_COD) == xFilial("ZAN")+cCodigo
		    RecLock("ZAN",.F.) 
		    DbDelete()
		    MsUnLock()
			ZAN->(DbSkip())
		EndDo         
	
	EndIf
Return

Static Function MenuZAN()                   
	Local aRotina := {}
	AADD(aRotina,{"Pesquisar"  ,"AxPesqui" ,0,1})  
	AADD(aRotina,{"Visualizar" ,"U_CadZANI",0,2})
	AADD(aRotina,{"Incluir"    ,"U_CadZANI",0,3})
	AADD(aRotina,{"Alterar"    ,"U_CadZANI",0,4})
	AADD(aRotina,{"Excluir"    ,"U_CadZANI",0,5})
Return(aRotina)
/*
+------------+----------------------------------------------------------------+
| Fim da rotina de Cadastro de Escolta                         		          |
+------------+--------------------------------------+-------------------------+
*/

Static Function GetStrZAN(cTipoRo,cTipoPi,cCampo,cVazio)
	Local aArea		:= GetArea()                            
	Local cQuery	:= ""
	Local lSegue	:= .F.
	Local cRet		:= "N"          
	
	Local nCompZAN 	:= 0 
	Local nLargZAN 	:= 0
	Local nAltuZAN  := 0
	Local nPesoZAN  := 0
	
	If cVazio == "V"   //Vazio
		//Conj. Transp	
		nCompZAN  := n2Comp 
		nLargZAN  := n2Larg
		nAltuZAN  := n2Altu
	 	nPesoZAN  := n2Peso
	ElseIf cVazio == "C"   //Carregado
		//Dimens. Tot
		nCompZAN  := n3Comp 
		nLargZAN  := n3Larg
		nAltuZAN  := n3Altu
	 	nPesoZAN  := n3Peso
	EndIf		
	
	cQuery := "SELECT ZAN.* "
	cQuery += " FROM "+RetSqlName("ZAN")+" ZAN "
	cQuery += " WHERE ZAN.D_E_L_E_T_<>'*' "
	cQuery += " AND ZAN.ZAN_FILIAL = '"+xFilial("ZAN")+"' " 
	cQuery += " AND ZAN.ZAN_ALEMOA = 'N' AND ZAN.ZAN_BLOQSR = 'N' "
	cQuery += " AND ZAN.ZAN_TPPIST IN ('"+cTipoPi+"','A') "
	/*If cCampo == "ZAM_CET"
		cQuery += " AND ZAN.ZAN_TPROD = 'M' "
	ElseIf cCampo == "ZAM_DER"
		cQuery += " AND ZAN.ZAN_TPROD = 'E' "	
	ElseIf cCampo == "ZAM_DNIT"
		cQuery += " AND ZAN.ZAN_TPROD = 'F' "	
	EndIf*/
	cQuery += " AND ZAN.ZAN_TPROD = '"+cTipoRo+"' "	
	//cQuery += " AND ZAN.ZAN_FILIAL = '"+xFilial("ZAN")+"' "
	cQuery += " ORDER BY ZAN.ZAN_NIVEL DESC "

	cQuery := ChangeQuery(cQuery)

    //Memowrite('c:\temp\divinal.txt',cQuery)
	If Select("TRB01") > 0
		TRB01->(DbCloseArea())
	EndIf                                                                    
	TcQuery cQuery New Alias "TRB01"      
	
    nCont := 0
	
	DbSelectArea("TRB01")  
	TRB01->(DbGoTop())
	TRB01->(DbEval({|| nCont++},,{|| !EOF()})) 
	TRB01->(DbGoTop())
	
	If nCont > 0  
		While TRB01->(!Eof())  
			lSegue := .F.
			
			If  (nCompZAN >= TRB01->ZAN_COMPDE .And. nCompZAN <= TRB01->ZAN_COMPAT) .Or. ;
				(nLargZAN >= TRB01->ZAN_LARGDE .And. nLargZAN <= TRB01->ZAN_LARGAT) .Or. ;
				(nAltuZAN >= TRB01->ZAN_ALTUDE .And. nAltuZAN <= TRB01->ZAN_ALTUAT) .Or. ;
				(nPesoZAN >= TRB01->ZAN_PESODE .And. nPesoZAN <= TRB01->ZAN_PESOAT)
				lSegue := .T. 
			EndIf             
			
			If !lSegue
				TRB01->(DbSkip())
				Loop
			EndIf
			     
			If cCampo == "ZAM_CET" 
				If TRB01->ZAN_UTLCET == "S"
					cRet := "S"                   
				EndIf
			ElseIf cCampo == "ZAM_DER" 
				If TRB01->ZAN_UTLDER == "S"
					cRet := "S"                   
				EndIf
			ElseIf cCampo == "ZAM_DNIT" 
				If TRB01->ZAN_UTLDNT == "S"
					cRet := "S"                   
				EndIf
			EndIf
			Exit
        	TRB01->(DbSkip())
  		EndDo
  	EndIf                
  	
  	If Select("TRB01") > 0
		TRB01->(DbCloseArea())
	EndIf
	
	
	RestArea(aArea)
Return(cRet)

Static Function GetIntZAN(cTipoRo,cTipoPi,cCampo,nDistan,cVazio)
	Local aArea		:= GetArea()                            
	Local cQuery	:= ""
	Local lSegue	:= .F.
	Local nRet		:= 0
	
	Local nCompZAN 	:= 0 
	Local nLargZAN 	:= 0
	Local nAltuZAN  := 0
	Local nPesoZAN  := 0
	
	If cVazio == "V"   //Vazio
		//Conj. Transp	
		nCompZAN  := n2Comp 
		nLargZAN  := n2Larg
		nAltuZAN  := n2Altu
	 	nPesoZAN  := n2Peso
	ElseIf cVazio == "C"   //Carregado
		//Dimens. Tot
		nCompZAN  := n3Comp 
		nLargZAN  := n3Larg
		nAltuZAN  := n3Altu
	 	nPesoZAN  := n3Peso
	EndIf
	
	cQuery := "SELECT ZAN.* "
	cQuery += " FROM "+RetSqlName("ZAN")+" ZAN "
	cQuery += " WHERE ZAN.D_E_L_E_T_<>'*' "
	cQuery += " AND ZAN.ZAN_FILIAL = '"+xFilial("ZAN")+"' " 
	cQuery += " AND ZAN.ZAN_ALEMOA = 'N' AND ZAN.ZAN_BLOQSR = 'N' "
	cQuery += " AND ZAN.ZAN_TPPIST IN ('"+cTipoPi+"','A') "
	cQuery += " AND ZAN.ZAN_TPROD = ('"+cTipoRo+"') "	
	cQuery += " ORDER BY ZAN.ZAN_NIVEL DESC "

	cQuery := ChangeQuery(cQuery)

    //Memowrite('c:\temp\divinal.txt',cQuery)
	If Select("TRB01") > 0
		TRB01->(DbCloseArea())
	EndIf                                                                    
	TcQuery cQuery New Alias "TRB01"      
	
    nCont := 0
	
	DbSelectArea("TRB01")  
	TRB01->(DbGoTop())
	TRB01->(DbEval({|| nCont++},,{|| !EOF()})) 
	TRB01->(DbGoTop())
	
	If nCont > 0  
		While TRB01->(!Eof())  
			lSegue := .F.		
			If  (nCompZAN >= TRB01->ZAN_COMPDE .And. nCompZAN <= TRB01->ZAN_COMPAT) .Or. ;
				(nLargZAN >= TRB01->ZAN_LARGDE .And. nLargZAN <= TRB01->ZAN_LARGAT) .Or. ;
				(nAltuZAN >= TRB01->ZAN_ALTUDE .And. nAltuZAN <= TRB01->ZAN_ALTUAT) .Or. ;
				(nPesoZAN >= TRB01->ZAN_PESODE .And. nPesoZAN <= TRB01->ZAN_PESOAT)
				lSegue := .T. 
			EndIf             
			
			If !lSegue
				TRB01->(DbSkip())
				Loop                   
			EndIf
			
			If cCampo == "ZAM_CRED" .And. cVazio == "C"
				nRet := TRB01->ZAN_QTCRED
			ElseIf cCampo == "ZAM_TEMPO"
				nRet := nDistan/TRB01->ZAN_KMDIA
			EndIf
			Exit
        	TRB01->(DbSkip())
  		EndDo
  	EndIf                
  	
  	If Select("TRB01") > 0
		TRB01->(DbCloseArea())
	EndIf
	
	
	RestArea(aArea)
Return(nRet)

Static Function fDupliTra()
Local _novaVia
	Local cCampo,cCampoGet
	
	If !oFolder:nOption==nFolderTra
		MsgStop("ATENÇÃO: Favor selecionar a aba VIAGENS !!")
		Return
	EndIf
	
	
	_nNumDup := 0
	
	@ 0,0   TO 90,250 DIALOG oDlgq TITLE "Duplica a viagem selecionada"
	@ 00,01 TO 03,15
	
	@ 001,002 SAY "Quantidade de Linhas a duplicar:"
	@ 001,012 GET _nNumDup picture "999" When fWhen()
	@ 025,060 BMPBUTTON TYPE 1 ACTION Close(oDlgq)
	@ 025,085 BMPBUTTON TYPE 2 ACTION Close(oDlgq)
	ACTIVATE DIALOG oDlgq CENTERED
	
	If Empty(_nNumDup) .or. !MsgYesNo("Duplica a viagem " +cSeqTra+ " - "+ AllTrim(Str(_nNumDup)) + " vezes ??")
		Return
	EndIf
	
	For _f:= 1 to _nNumDup
		AAdd(oDlgTra:aCols,Aclone(oDlgTra:aCols[oDlgTra:nAt]))

		cCampo   :="ZA6_OBRA"
		cCampoGet:=oDlgTra:aCols[Len(oDlgTra:aCols)-1][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])==cCampo})]
		If cCampoGet > _nProxLn
			_novaVia := Soma1(cCampoGet) // By Frank Zwarg Fuga
		Else
			_novaVia := _nProxLn         // By Frank Zwarg Fuga
			_nProxLn := Soma1(_nProxLn)		// armazena próxima viagem
		EndIF
		oDlgTra:aCols[Len(oDlgTra:aCols)][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])==cCampo})] := _novaVia	// By Frank Zwarg Fuga

		cCampo   :="ZA6_SEQTRA"
		// Validar a numeracao do acols da getdados das viagens
		oDlgTra:aCols[Len(oDlgTra:aCols)][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])==cCampo})] := _novaVia // By Frank Zwarg Fuga

		oDlgTra:aCols[Len(oDlgTra:aCols)][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_AS"})]:=""
		oDlgTra:aCols[Len(oDlgTra:aCols)][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VIAGEM"})] := ""	// Cristiam Rossi em 29/01/2016
		oDlgTra:aCols[Len(oDlgTra:aCols)][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_OBSVIA"})] := ""	// Cristiam Rossi em 29/01/2016
		oDlgTra:aCols[Len(oDlgTra:aCols)][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_CVA"})] := ""	// Cristiam Rossi em 11/03/2016

		//Duplica cargas
		For nX := 1 To Len(oCar_Cols)
			If oCar_Cols[nX,Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_OBRA"})] == cObra .And. oCar_Cols[nX,Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SEQTRA"})] == cSeqTra
				AAdd(oCar_Cols,Aclone(oCar_Cols[nX]))

				oCar_Cols[Len(oCar_Cols)][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_OBRA"})]   := _novaVia
				oCar_Cols[Len(oCar_Cols)][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SEQTRA"})] := _novaVia
				oCar_Cols[Len(oCar_Cols)][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_AS"})]     := ""

				oCar_Cols[Len(oCar_Cols)][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_VIAGEM"})] := ""	// Cristiam Rossi em 29/01/2016
				oCar_Cols[Len(oCar_Cols)][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_VRCARG"})] := 0		// Cristiam Rossi em 29/01/2016
				oCar_Cols[Len(oCar_Cols)][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_PESO"})]   := 0		// Cristiam Rossi em 29/01/2016
			EndIf 	
		Next nX

		//Duplica Conj.Transp.
		For nX := 1 To Len(oCon_Cols)
			If oCon_Cols[nX,Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_OBRA"})] == cObra .And. oCon_Cols[nX,Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_SEQTRA"})] == cSeqTra
				AAdd(oCon_Cols,Aclone(oCon_Cols[nX]))
				
				oCon_Cols[Len(oCon_Cols)][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_OBRA"})]   := _novaVia
				oCon_Cols[Len(oCon_Cols)][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_SEQTRA"})] := _novaVia
			EndIf 	
		Next nX

		//Duplica Trechos
		For nX := 1 To Len(oTre_Cols)
			If oTre_Cols[nX,Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_OBRA"})] == cObra .And. oTre_Cols[nX,Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_SEQTRA"})] == cSeqTra
				AAdd(oTre_Cols,Aclone(oTre_Cols[nX]))
				
				oTre_Cols[Len(oTre_Cols)][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_OBRA"})]   := _novaVia
				oTre_Cols[Len(oTre_Cols)][Ascan(oDlgTre:aHeader,{|x|AllTrim(x[2])=="ZAM_SEQTRA"})] := _novaVia
			EndIf
		Next nX

		//Duplica Responsabilidades
		For nX := 1 To Len(oRes_Cols)
			If oRes_Cols[nX,Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_OBRA"})] == cObra .And. oRes_Cols[nX,Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_SEQGUI"})] == cSeqTra
				AAdd(oRes_Cols,Aclone(oRes_Cols[nX]))
				
				oRes_Cols[Len(oRes_Cols)][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_OBRA"})]   := _novaVia
				oRes_Cols[Len(oRes_Cols)][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_SEQGUI"})] := _novaVia
			EndIf 	
		Next nX

		//Duplica Custos
		For nX := 1 To Len(oCus_Cols)
			If oCus_Cols[nX,Ascan(oDlgCus:aHeader,{|x|AllTrim(x[2])=="ZA9_OBRA"})] == cObra .And. oCus_Cols[nX,Ascan(oDlgCus:aHeader,{|x|AllTrim(x[2])=="ZA9_SEQTRA"})] == cSeqTra
				AAdd(oCus_Cols,Aclone(oCus_Cols[nX]))
				
				oCus_Cols[Len(oCus_Cols)][Ascan(oDlgCus:aHeader,{|x|AllTrim(x[2])=="ZA9_OBRA"})]   := _novaVia
				oCus_Cols[Len(oCus_Cols)][Ascan(oDlgCus:aHeader,{|x|AllTrim(x[2])=="ZA9_SEQTRA"})] := _novaVia
			EndIf 	
		Next nX
	Next _f
Return nil
            
//validação tabela ZAP
User Function VALIDZAP(cCampo)
	Local lRet := .T.
	Local aArea		:= GetArea()
	Local aAreaZAP	:= ZAP->(GetArea())  
	
	DbSelectArea("ZAP")
	DbSetOrder(3)
	DbSeek(xFilial("ZAP")+M->ZAP_UF)
	
	While !ZAP->(Eof()) .And. ZAP->ZAP_UF == M->ZAP_UF
		If M->ZAP_DE <= ZAP->ZAP_ATE 
			MsgAlert("A Km de/até já foi informada para o UF:"+M->ZAP_UF)
			lRet := .F.
		EndIf
		
		ZAP->(DbSkip())	
	EndDo 
	
	If M->ZAP_DE > M->ZAP_ATE .And. AllTrim(cCampo) == "ZAP_ATE"
		MsgAlert("O 'Km De' deve ser menor que o 'Km Ate'.")
		lRet := .F.	
	EndIf          
                                       
	RestArea(aAreaZAP)
	RestArea(aArea)
Return(lRet)

Static Function CalcSistema(aHeader,aCols)	
	Local nDistan := 0
	Local cTipoRo := ""
	Local cTipoPi := ""
	Local nTempo  := 0
	Local nCred	  := 0
	Local nResult := 0                   
	Local cEtapa  := ""	  
	Local lPorto  := .F.	
	Local nValCob := 0	
	Local nTap	  := GetMv("LC_TAP")
	Local nTapFat := GetMv("LC_TAPFAT")	
	Local cBloqSr := ""
	Local cAlemoa := ""
	Local cCet	  := ""  
	Local nQtEixo := 0 
	Local cOriTre := ""
	Local cDesTre := ""	
	Local cOrig1  := ""
	Local cDest1  := ""           
	Local cVazio  := ""
	
	Local nAltuCalc  := 0
	Local nPesoCalc  := 0
	
	For nX := 1 To Len(oDlgCon:aCols)
		nQtEixo += oDlgCon:aCols[nX][Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_QTEIXO"})]	                   
	Next nX                                                                     
	
	For nX := 1 To Len(aCols)
		nDistan := aCols[nX][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_DISTAN"})]
		cTipoRo := aCols[nX][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_TIPORO"})]
		cTipoPi := aCols[nX][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_TIPOPI"})]
		nTempo  := aCols[nX][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_TEMPO" })]
		nCred	:= aCols[nX][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_CRED"  })]
		cEtapa  := aCols[nX][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_ETAPA" })]
		cDer    := aCols[nX][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_DER"   })]
		cDnit   := aCols[nX][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_DNIT"  })]
		cCet    := aCols[nX][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_CET"   })]
		cTpRod  := aCols[nX][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_TIPORO"})]
		cEstDe  := aCols[nX][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_ESTDE" })]
		cEstAte := aCols[nX][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_ESTATE"})]
		nQtdPed := aCols[nX][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_QTDPED"})]
		nValPed := aCols[nX][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_VALPED"})]
		cVazio  := aCols[nX][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_VAZIO" })]
		nResult := 0                                                         
		lPorto  := .F.
		                                                                   
		cOrig1 := aCols[nX][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_ORIGEM" })]
		cDest1 := aCols[nX][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_DESTIN" })]
		
		cOriTre := aCols[nX][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_DE" })]
		cDesTre := aCols[nX][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_ATE" })]
		cRota   := aCols[nX][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_ROTA"   })]
		
		If cVazio == "V"
			nAltuCalc := n2Altu
			nPesoCalc := n2Peso
		ElseIf cVazio == "C" 
			nAltuCalc := n3Altu
			nPesoCalc := n3Peso
		EndIf
		
		DbSelectArea("ZA3")
		DbSetOrder(1)
		If DbSeek(xFilial("ZA3")+cOrig1+cDest1+cRota+cEtapa)
			cBloqSr := ZA3->ZA3_TEMBLO
			cAlemoa := ZA3->ZA3_TEMALE	
		EndIf
		         
		nTempo := ArredTempo(Round(nTempo,2))              
		//Calculo batedor credenciado
		//If nCred > 0
			//If aCols[nX][Ascan(aHeader,{|x|AllTrim(x[2])=="ZAM_VAZIO"  })] <> "V"
				nResult := GetCalc(cTipoRo,cTipoPi,"ZAM_CRED",nDistan,cVazio)
				nResult := (nResult * Round(nTempo,0)) * nCred 
				//If nResult > 0 
					AddResp("01",nResult,cEtapa)	
				//EndIf 	
			//EndIf
		//EndIf   
		
		//Calculo DER
		If cDer == "S"
			nResult := GetCalc(cTipoRo,cTipoPi,"ZAM_DER",nDistan,cVazio)
			nResult := (nResult * nDistan) 
			//If nResult > 0
				AddResp("02",nResult,cEtapa)					
			//EndIf
		Else
			AddResp("02",0,cEtapa)							
		EndIf              
		             
		//Calculo DNIT
		If cDnit == "S"
			nResult := GetCalc(cTipoRo,cTipoPi,"ZAM_DNIT",nDistan,cVazio) 
			nResult := (nResult * nDistan) 
			//If nResult > 0
				AddResp("03",nResult,cEtapa)					
			//EndIf	                                                            
		Else  
			AddResp("03",0,cEtapa)
		EndIf
		              
		//Calculo TUV
		If cTpRod == "F"
			//If n3Peso > nTuv
				nResult := GetCalcTUV(cEstDe,cEstAte,nDistan,nPesoCalc,cVazio)
				//If nResult > 0
					AddResp("04",nResult,cEtapa)
				//EndIf
			//EndIf		
		EndIf
		             
		//Calculo TAP
		If cTpRod == "E"
			//If (n3Peso - nTap) > 0
				nResult := (nPesoCalc - nTap) * nTapFat * nQtdPed * nValPed 
				//If nResult > 0
					AddResp("05",nResult,cEtapa)
				//EndIf
			//EndIf
		EndIf
		
		//Calculo Bloq. Serra
		If cBloqSr == "S"
			nResult := GetCalc(cTipoRo,cTipoPi,"ZAM_BLOQSR",nDistan,cVazio)
			//If nResult > 0
				AddResp("06",nResult,cEtapa)
			//EndIf
		Else
			AddResp("06",0,cEtapa)	
		EndIf

		//Calculo Alemoa
		If cAlemoa == "S"
			nResult := GetCalc(cTipoRo,cTipoPi,"ZAM_ALEMOA",nDistan,cVazio)
			//If nResult > 0
				AddResp("07",nResult,cEtapa)
			//EndIf       
		Else
			AddResp("07",0,cEtapa)
		EndIf 
		
		//Calculo Taxas municipais
		If cTipoRo == "M"
			/*DbSelectArea("ZAB")
			DbSetOrder(2)
			If DbSeek(xFilial("ZAB")+"08")
				If nAltuCalc > ZAB->ZAB_ALTURA
					nResult := Round(nTempo,0) * ZAB->ZAB_VLR*/
					//If nResult > 0
						AddResp("08",0,cEtapa,nAltuCalc)
					//EndIf
				//Else
				//	AddResp("08",0,cEtapa)	
				//EndIf	
			//EndIf	
		EndIf
		
		//Calculo Pedagio
		nResult := (nQtdPed * nValPed) * nQtEixo
		//If nResult > 0
			AddResp("09",nResult,cEtapa)
		//EndIf
		      
		//Calculo licença
		nResult := GetCalc(cTipoRo,cTipoPi,"ZAM_LICENC",nDistan,cVazio)
		//If nResult > 0
			AddResp("10",nResult,cEtapa)
		//EndIf            
		
		//Calculo Taxa portuária         
		If !Empty(cOriTre) .And. !Empty(cDesTre)
			DbSelectArea("ZA2")
			DbSetOrder(1)
			If DbSeek(xFilial("ZA2")+cOriTre) 
				If ZA2->ZA2_PORTO == "S"
					lPorto := .T.
				EndIf	
			EndIf
			If DbSeek(xFilial("ZA2")+cDesTre)
				If ZA2->ZA2_PORTO == "S"
					lPorto := .T.
				EndIf	
			EndIf
			If lPorto
				nResult := GetCalc(cTipoRo,cTipoPi,"ZAM_PORTO",cVazio)
				//If nResult > 0
					AddResp("11",nResult,cEtapa)
				//EndIf 
			EndIf			
		EndIf    
		
		//Calculo CET
		If cCet == "S"
			nResult := GetCalc(cTipoRo,cTipoPi,"ZAM_CET",nDistan,cVazio)
			nResult := (nResult * Round(nTempo,0)) 
			//If nResult > 0
				AddResp("13",nResult,cEtapa)					
			//EndIf	      
		Else
			AddResp("13",0,cEtapa)						
		EndIf              
	Next nX 
	

	
	//Taxa Adm 
	/*nValCob := 0         
	nTxAdm	:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TXADM"})]
	
	For nX := 1 To Len(oDlgRes:aCols)
		DbSelectArea("ZAB")
		DbSetOrder(1)//
		DbSeek(xFilial("ZAB")+oDlgRes:aCols[nX, GdFieldPos("ZAA_CODIGO",oDlgRes:aHeader)])
		
		If ZAB->ZAB_ID <> "12"  .And. !oDlgRes:aCols[nX,Len(oDlgRes:aHeader)+1]
			nValCob += oDlgRes:aCols[nX, GdFieldPos("ZAA_VALCOB",oDlgRes:aHeader)]		
		EndIf
	Next nX
	nResult := (nValCob * nTxAdm) / 100
	//If nResult > 0
		AddResp("12",nResult,"")
	//EndIf     */

	Return                                  
    


Static Function ArredTempo(nTempo)
	Local nRet := 0
	Local cVal := Str(nTempo)
	
	cVal := SubStr(cVal,AT(".",cVal))// AT(".",c1) > 1
	If AT(".",cVal) > 0 
		cVal := SubStr(cVal,AT(".",cVal)+1)
		If Len(cVal) == 1
			cVal += "0"
		EndIf
		If Val(cVal) > 50 .And. Val(cVal) <> 0
			nRet := Round(nTempo,0)
		ElseIf Val(cVal) < 50 .And. Val(cVal) <> 0
			nRet := Round(nTempo+1,0)
		EndIf	
	Else
		nRet := Round(nTempo,0)	
	EndIf	

Return(nRet)

Static Function AddResp(cId,nCusto,cEtapa,nAlt)
	Local aArea		:= GetArea()
	Local aAreaZAB	:= ZAB->(GetArea())
	Local cCampoGet := ""
	Local nPosCod   := Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_CODIGO"})
	Local nPosEta	:= Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_TRECHO"})
	Local nPos		:= 0
	Local nPos2		:= 0
	
	DbSelectArea("ZAB")
	DbSetOrder(2)//
	DbSeek(xFilial("ZAB")+cId)
	
	While !ZAB->(Eof()) .And. ZAB->(ZAB_FILIAL+ZAB_ID) == xFilial("ZAB")+cId
		//Verifica se já exite no array
		nPos := ASCAN(oDlgRes:Acols,{|x| AllTrim(x[nPosCod])+AllTrim(x[nPosEta]) == AllTrim(ZAB_CODIGO)+AllTrim(cEtapa)})
		
		If cId == "08"     
			If nAlt > ZAB->ZAB_ALTURA
				nCusto := ZAB->ZAB_VLR     
			EndIf
		EndIf
		
		If cId == "10"
			nPos2 := ASCAN(oDlgRes:Acols,{|x| AllTrim(x[nPosCod]) == AllTrim(ZAB_CODIGO)}) 
			If nPos2 > 0 
				ZAB->(DbSkip())
				Loop
			EndIf
		EndIf
		
		If nPos > 0//Se já existir			
			If nCusto <= 0
				oDlgRes:Acols[nPos][Len(oDlgRes:aHeader)+1]:=.T.			
			Else			
				oDlgRes:Acols[nPos][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_CODIGO"})]:=ZAB_CODIGO
				oDlgRes:Acols[nPos][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_DESCRI"})]:=ZAB_DESCRI
				oDlgRes:Acols[nPos][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_RESPON"})]:=ZAB_RESPON
				oDlgRes:Acols[nPos][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_VALOR" })]:=nCusto
				oDlgRes:Acols[nPos][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_VALCOB"})]:=Iif(ZAB_RESPON=="L",nCusto,0)
				oDlgRes:Acols[nPos][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_TRECHO"})]:=cEtapa		
			EndIf
		Else
			If nCusto <= 0//Senão tiver custo, nao deve criar
				ZAB->(DbSkip())
				Loop
			EndIf
				
			If !Empty(oDlgRes:Acols[Len(oDlgRes:Acols)][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_CODIGO"})])
				AAdd(oDlgRes:Acols,Aclone(oDlgRes:Acols[Len(oDlgRes:Acols)]))
				cCampoGet := oDlgRes:Acols[Len(oDlgRes:Acols)][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_SEQRES"})]
				oDlgRes:Acols[Len(oDlgRes:Acols)][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_SEQRES"})]:=StrZero(Val(cCampoGet)+1,Len(cCampoGet))
			EndIf
			
			
			oDlgRes:Acols[Len(oDlgRes:Acols)][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_CODIGO"})]:=ZAB_CODIGO
			oDlgRes:Acols[Len(oDlgRes:Acols)][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_DESCRI"})]:=ZAB_DESCRI
			oDlgRes:Acols[Len(oDlgRes:Acols)][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_RESPON"})]:=ZAB_RESPON
			oDlgRes:Acols[Len(oDlgRes:Acols)][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_VALOR" })]:=nCusto
			oDlgRes:Acols[Len(oDlgRes:Acols)][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_VALCOB"})]:=Iif(ZAB_RESPON=="L",nCusto,0)
			oDlgRes:Acols[Len(oDlgRes:Acols)][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_TRECHO"})]:=cEtapa
		EndIf
		  
		ZAB->(DbSkip())
	EndDo
	
	oDlgRes:Refresh()
                    
	RestArea(aAreaZAB)
	RestArea(aArea)
Return

Static Function GetCalc(cTipoRo,cTipoPi,cCampo,nDistan,cVazio)
	Local aArea		:= GetArea()                            
	Local cQuery	:= ""
	Local lSegue	:= .F.
	Local nRet		:= 0
	
	Local nCompZAN 	:= 0 
	Local nLargZAN 	:= 0
	Local nAltuZAN  := 0
	Local nPesoZAN  := 0
	
	If cVazio == "V"   //Vazio
		//Conj. Transp	
		nCompZAN  := n2Comp 
		nLargZAN  := n2Larg
		nAltuZAN  := n2Altu
	 	nPesoZAN  := n2Peso
	ElseIf cVazio == "C"   //Carregado
		//Dimens. Tot
		nCompZAN  := n3Comp 
		nLargZAN  := n3Larg
		nAltuZAN  := n3Altu
	 	nPesoZAN  := n3Peso
	EndIf
	
	cQuery := "SELECT ZAN.* "
	cQuery += " FROM "+RetSqlName("ZAN")+" ZAN "
	cQuery += " WHERE ZAN.D_E_L_E_T_<>'*' "
	cQuery += " AND ZAN.ZAN_FILIAL = '"+xFilial("ZAN")+"' " 
	
	If cCampo == "ZAM_ALEMOA"              
		cQuery += " AND ZAN.ZAN_ALEMOA = 'S' "	
	Else	
		cQuery += " AND ZAN.ZAN_ALEMOA = 'N' "
	EndIf
	
	If cCampo == "ZAM_BLOQSR"              
		cQuery += " AND ZAN.ZAN_BLOQSR = 'S' "	
	Else
		cQuery += " AND ZAN.ZAN_BLOQSR = 'N' "
	EndIf                                  
	
	cQuery += " AND ZAN.ZAN_TPPIST IN ('"+cTipoPi+"','A') "
	cQuery += " AND ZAN.ZAN_TPROD = ('"+cTipoRo+"') "	
	cQuery += " ORDER BY ZAN.ZAN_NIVEL DESC "

	cQuery := ChangeQuery(cQuery)

    //Memowrite('c:\temp\divinal.txt',cQuery)
	If Select("TRB01") > 0
		TRB01->(DbCloseArea())
	EndIf                                                                    
	TcQuery cQuery New Alias "TRB01"      
	
    nCont := 0
	
	DbSelectArea("TRB01")  
	TRB01->(DbGoTop())
	TRB01->(DbEval({|| nCont++},,{|| !EOF()})) 
	TRB01->(DbGoTop())
	
	If nCont > 0  
		While TRB01->(!Eof())  
			lSegue := .F.		
			If  (nCompZAN >= TRB01->ZAN_COMPDE .And. nCompZAN <= TRB01->ZAN_COMPAT) .Or. ;
				(nLargZAN >= TRB01->ZAN_LARGDE .And. nLargZAN <= TRB01->ZAN_LARGAT) .Or. ;
				(nAltuZAN >= TRB01->ZAN_ALTUDE .And. nAltuZAN <= TRB01->ZAN_ALTUAT) .Or. ;
				(nPesoZAN >= TRB01->ZAN_PESODE .And. nPesoZAN <= TRB01->ZAN_PESOAT)
				lSegue := .T. 
			EndIf             
			
			If !lSegue
				TRB01->(DbSkip())
				Loop
			EndIf
			
			If cCampo == "ZAM_CRED" 
				nRet := TRB01->ZAN_VRCRED
			ElseIf cCampo == "ZAM_DER"
				nRet := TRB01->ZAN_KMVDER			 				
			ElseIf cCampo == "ZAM_DNIT"
				nRet := TRB01->ZAN_KMVDNT				
			ElseIf cCampo == "ZAM_BLOQSR"
				nRet := TRB01->ZAN_VLRLB 				 
			ElseIf cCampo == "ZAM_ALEMOA"
				nRet := TRB01->ZAN_VLRLB 				 
			ElseIf cCampo == "ZAM_LICENC"
				nRet := TRB01->ZAN_VLRLIC
			ElseIf cCampo == "ZAM_PORTO"
				nRet := TRB01->ZAN_VLRPOR	 				
			ElseIf cCampo == "ZAM_CET"
				nRet := TRB01->ZAN_VLRCET
			EndIf
			Exit
        	TRB01->(DbSkip())
  		EndDo
  	EndIf                
  	
  	If Select("TRB01") > 0
		TRB01->(DbCloseArea())
	EndIf
	
	RestArea(aArea)
Return(nRet)

Static Function GetCalcTUV(cEstDe,cEstAte,nDistan,nPeso)
	Local aArea		:= GetArea()
	Local aAreaZAP	:= ZAP->(GetArea())  
	Local cUf		:= ""
	Local nValor	:= 0
	Local nUfir	    := 0 
	Local nDif  	:= 0
	
	If cEstDe == cEstAte
		cUf := cEstDe
	EndIf
	
	DbSelectArea("ZAP")
	DbSetOrder(3)
	If !Empty(cUf)
		If DbSeek(xFilial("ZAP")+cUf) 
			While !ZAP->(Eof()) .And. ZAP->ZAP_UF == cUf
				If nDistan >= ZAP->ZAP_DE .And. nDistan <= ZAP->ZAP_ATE
					nValor := ZAP->ZAP_VALOR	
					nUfir  := ZAP->ZAP_UFIR	
					nDif   := nPeso - ZAP->ZAP_PESO
					Exit
				EndIf
				
				ZAP->(DbSkip())	
			EndDo
		Else
			DbSeek(xFilial("ZAP"))
			While !ZAP->(Eof()) //.And. ZAP->ZAP_UF == M->ZAP_UF
				If nDistan >= ZAP->ZAP_DE .And. nDistan <= ZAP->ZAP_ATE
					nValor := ZAP->ZAP_VALOR	
					nUfir  := ZAP->ZAP_UFIR 
					nDif   := nPeso - ZAP->ZAP_PESO
					Exit
				EndIf
				
				ZAP->(DbSkip())	
			EndDo  	
		EndIf
	Else
		DbSeek(xFilial("ZAP"))
		While !ZAP->(Eof()) //.And. ZAP->ZAP_UF == M->ZAP_UF
			If nDistan >= ZAP->ZAP_DE .And. nDistan <= ZAP->ZAP_ATE
				nValor := ZAP->ZAP_VALOR	
				nUfir  := ZAP->ZAP_UFIR            
				nDif   := nPeso - ZAP->ZAP_PESO
				Exit
			EndIf
			
			ZAP->(DbSkip())	
		EndDo  	
	EndIf 
	
	nRet := (nDif * nValor) * nUfir
                                       
	RestArea(aAreaZAP)
	RestArea(aArea)
Return(nRet)

Static Function DeletZBB(cIndice)
    Local aArea		:= GetArea()
    Local aAreaZBB	:= ZBB->(GetArea())
    
	DbSelectArea("ZBB")
	DbSetOrder(2)
	DbSeek(xFilial("ZBB")+cIndice)
	
	While !ZBB->(Eof()) .And. ZBB->(ZBB_PROJET+ZBB_OBRA+ZBB_SEQGUI) == cIndice
		RecLock("ZBB",.F.)
		DbDelete()
		MsUnlock()
		
		ZBB->(DbSkip())
	EndDo
                
	RestArea(aAreaZBB)
	RestArea(aArea)
Return


//Imprime
Static Function PrintRegs()
	Local oReport := ReportEncav()
	If oReport <> Nil
		oReport:nDevice 		:= 1       
		oReport:NENVIRONMENT  	:= 1
		oReport:PrintDialog()
	Endif
Return

Static Function ReportEncav()
	Local oReport	:= Nil
	Local oSection1 := Nil                                                      
	Local oSection2 := Nil
	
	oReport   := TReport():New("LOCC001", OemToAnsi("Inconsistencias"), /*cPerg*/, {|oReport| LOCC001Imp(oReport)})
	                                                                                                                     
	oSection1 := TRSection():New(oReport, OemToAnsi("Frota"), {} ) 
	oSection1:SetHeaderSection(.T.)    
	TRCell():New(oSection1,'cFrota'     , /*"PDA"*/,	"Frota"		, "@!"/*"@R 99.999.999/9999-99"*/  , 40 ,.F. , )	
	TRCell():New(oSection1,'cDatIni'    , /*"PDA"*/,	"Data Ini."	, "@!"/*"@R 99.999.999/9999-99"*/  , 10 ,.F. , )	
	TRCell():New(oSection1,'cDatFim'    , /*"PDA"*/,	"Data Fim"	, "@!"/*"@R 99.999.999/9999-99"*/  , 10 ,.F. , )	
	
	//oSection2 := TRSection():New(oReport, OemToAnsi("Data encavalada"), {} )   
	//oSection2:SetHeaderSection(.T.)
	//TRCell():New(oSection2,'cFrota2'    , /*"PDA"*/,	"Frota"   	, "@!"/*"@R 99.999.999/9999-99"*/  , 40 ,.F. , )				
	//TRCell():New(oSection2,'cData'      , /*"PDA"*/,	"Data"     	, "@!"/*"@R 99.999.999/9999-99"*/  , 10 ,.F. , )		
	//TRCell():New(oSection2,'cAs'        , /*"PDA"*/,	"A.S."     	, "@!"/*"@R 99.999.999/9999-99"*/  , 30 ,.F. , )		

Return(oReport)

Static Function LOCC001Imp(oReport)
	Local aArea      := GetArea()              
	Local oSection1  := oReport:Section(1)                 
	//Local oSection2  := oReport:Section(2)                 
	Local nX         := 0
	Local nY         := 0 
	Local cQuery	 := ""      
	Local aError	 := {}
	Local aFrota	 := {}
	Local aEncav     := {}                
	Local lRevis	 := .F.
	                              
	If ZA0->ZA0_TIPOSE == "T"
		cQuery := " SELECT DISTINCT ZAE.ZAE_PROJET, ZAE.ZAE_OBRA,ZAE.ZAE_SEQTRA, ZAE.ZAE_TRANSP,ZAE.ZAE_SEQCAR,ZA6.ZA6_DTINI, ZA6.ZA6_DTFIM, ZA6.ZA6_VIAGEM,ZA6.ZA6_PROJET,ZA6.ZA6_OBRA "
		cQuery += " FROM "+RetSqlName("ZAE")+" ZAE " 
		cQuery += " LEFT OUTER JOIN "+RetSqlName("ZA7")+" ZA7 "
		cQuery += " ON (ZA7.ZA7_FILIAL = ZAE.ZAE_FILIAL AND ZA7.ZA7_PROJET = ZAE.ZAE_PROJET AND ZA7.ZA7_OBRA = ZAE.ZAE_OBRA AND ZA7.ZA7_SEQTRA = ZAE.ZAE_SEQTRA AND ZA7.ZA7_SEQCAR = ZAE.ZAE_SEQCAR AND ZA7.D_E_L_E_T_<>'*' ) "
		cQuery += " LEFT OUTER JOIN "+RetSqlName("ZA6")+" ZA6 "
		cQuery += " ON (ZA6.ZA6_FILIAL = ZA7.ZA7_FILIAL AND ZA6.ZA6_PROJET = ZA7.ZA7_PROJET AND ZA6.ZA6_OBRA = ZA7.ZA7_OBRA AND ZA6.ZA6_SEQTRA = ZA7.ZA7_SEQTRA AND ZA6.D_E_L_E_T_<>'*') "
		cQuery += " WHERE ZAE.D_E_L_E_T_<>'*' "
		cQuery += " AND ZAE.ZAE_FILIAL = '"+xFilial("ZAE")+"' "	
		cQuery += " AND ZAE.ZAE_PROJET = '"+ZA0->ZA0_PROJETO+"' "	
		
		cQuery := ChangeQuery(cQuery)		                                
		
		//Memowrite('c:\temp\locc001.txt',cQuery)                    
		If Select("TR02") > 0
	 	     TR02->(DbCloseArea())
	 	EndIf           
	 	
		TcQuery cQuery New Alias TR02
		
		TcSetField("TR02","ZA6_DTINI","D",08,00)                                
		TcSetField("TR02","ZA6_DTFIM","D",08,00)
		
		DbSelectArea("DTQ")
		DbSetOrder(8)//Projeto
		If DbSeek(xFilial("DTQ")+SubStr(ZA0->ZA0_PROJET,1,9))//Se gerou o contrato
			lRevis 		:= .T.                                                         
			dDtAntIni	:= DTQ->DTQ_DATINI
			dDtAntFim 	:= DTQ->DTQ_DATFIM
		EndIf     
		
		While !TR02->(Eof())
		    lJunto := .F.
		    DbSelectArea("ZA7")
		    DbSetOrder(1)
		    If DbSeek(xFilial("ZA7")+TR02->ZAE_PROJET+TR02->ZAE_OBRA+TR02->ZAE_SEQTRA+TR02->ZAE_SEQCAR)
		    	If !Empty(ZA7->ZA7_JUNTO)
		    		lJunto := .T.	
		    	EndIf
		    EndIf
		    
		    If !lJunto//Se tiver campo junto desconsidera validação
			    DbSelectArea("ZLE")
			    DbSetOrder(5)
			    DbSeek(xFilial("ZLE")+TR02->ZAE_TRANSP)
			    
			    While !ZLE->(Eof()) .And. AllTrim(ZLE->ZLE_FROTA) == AllTrim(TR02->ZAE_TRANSP)
			    	If AllTrim(ZLE->ZLE_STATUS) == "1"
			    		ZLE->(DbSkip())
			    		Loop
			    	EndIf
			    	
			    	If lRevis//AS 2º vez
			    		If AllTrim(ZLE->ZLE_STATUS) == "9" .Or. AllTrim(ZLE->ZLE_STATUS) == "M"
				    		ZLE->(DbSkip())
				    		Loop
				    	EndIf  
				    	
				    	
				    	If AllTrim(TR02->ZA6_PROJET+TR02->ZA6_OBRA+TR02->ZAE_TRANSP) == AllTrim(ZLE->ZLE_PROJET+ZLE->ZLE_OBRA+ZLE->ZLE_FROTA)
				    		ZLE->(DbSkip())
				    		Loop
				    	EndIf
				    	
				    	If DTOS(ZLE->ZLE_DTPROG) >= DTOS(TR02->ZA6_DTINI) .And. DTOS(ZLE->ZLE_DTPROG) <= DTOS(TR02->ZA6_DTFIM)
				    		//lRet := .F.
				    		//Exit                     
				    		
				    		aEncav := {ZLE->ZLE_FROTA,ZLE->ZLE_DTPROG,ZLE->ZLE_AS,ZLE->ZLE_PROJET,ZLE->ZLE_OBRA}   
				    		nPos := ASCAN(aFrota,{|x| x[1]+x[4]+X[5] == TR02->ZAE_TRANSP+TR02->ZAE_SEQTRA+TR02->ZAE_SEQCAR})
							If nPos > 0
				    			Aadd(aFrota[nPos,6],aEncav)                                                                  
				    		Else
				    			Aadd(aFrota,{TR02->ZAE_TRANSP,TR02->ZA6_DTINI,TR02->ZA6_DTFIM,TR02->ZAE_SEQTRA,TR02->ZAE_SEQCAR,{aEncav}})                                                                 
				    		EndIf
				    	EndIf	
				    Else
				    	If DTOS(ZLE->ZLE_DTPROG) >= DTOS(TR02->ZA6_DTINI) .And. DTOS(ZLE->ZLE_DTPROG) <= DTOS(TR02->ZA6_DTFIM)
				    		//lRet := .F.
				    		//Exit                                                                                              
				    		
				    		aEncav := {ZLE->ZLE_FROTA,ZLE->ZLE_DTPROG,ZLE->ZLE_AS,ZLE->ZLE_PROJET,ZLE->ZLE_OBRA}   
				    		nPos := ASCAN(aFrota,{|x| x[1]+x[4]+X[5] == TR02->ZAE_TRANSP+TR02->ZAE_SEQTRA+TR02->ZAE_SEQCAR})
							If nPos > 0
				    			Aadd(aFrota[nPos,6],aEncav) 
				    		Else
				    			Aadd(aFrota,{TR02->ZAE_TRANSP,TR02->ZA6_DTINI,TR02->ZA6_DTFIM,TR02->ZAE_SEQTRA,TR02->ZAE_SEQCAR,{aEncav}})                                                                 
				    		EndIf
				    	EndIf	
			    	EndIf
			    	
			    	ZLE->(DbSkip())
			    EndDo
			EndIf
		
			TR02->(DbSkip())
		EndDo                  
	ElseIf ZA0->ZA0_TIPOSE == "G"
		cQuery := " SELECT ZA5.ZA5_PROJET, ZA5.ZA5_OBRA,ZA5.ZA5_SEQGUI, ZA5.ZA5_GUINDA, ZA5.ZA5_DTINI, ZA5.ZA5_DTFIM, ZA5.ZA5_AS "
		cQuery += " FROM "+RetSqlName("ZA5")+" ZA5 " 
		cQuery += " LEFT OUTER JOIN "+RetSqlName("ST9")+" ST9 "
		cQuery += " ON (ST9.T9_FILIAL = ZA5.ZA5_FILIAL AND ST9.T9_CODBEM = ZA5.ZA5_GUINDA AND ST9.D_E_L_E_T_<>'*' ) "
		cQuery += " WHERE ZA5.D_E_L_E_T_<>'*' "
		cQuery += " AND ZA5.ZA5_FILIAL = '"+xFilial("ZA5")+"' "	
		cQuery += " AND ZA5.ZA5_PROJET = '"+ZA0->ZA0_PROJETO+"' "	
		cQuery += " AND ST9.T9_TIPOSE = 'T' "
		
		cQuery := ChangeQuery(cQuery)		                                
		
		//Memowrite('c:\temp\locc001.txt',cQuery)                    
		If Select("TR02") > 0
	 	     TR02->(DbCloseArea())
	 	EndIf           
	 	
		TcQuery cQuery New Alias TR02
		
		TcSetField("TR02","ZA5_DTINI","D",08,00)                                
		TcSetField("TR02","ZA5_DTFIM","D",08,00)
		
		DbSelectArea("DTQ")
		DbSetOrder(8)//Projeto
		If DbSeek(xFilial("DTQ")+SubStr(ZA0->ZA0_PROJETO,1,9))//Se gerou o contrato
			lRevis 		:= .T.                
		EndIf
	    
		While !TR02->(Eof())
		    
		    DbSelectArea("ZLE")
		    DbSetOrder(5)
		    DbSeek(xFilial("ZLE")+TR02->ZA5_GUINDA)
		    
		    While !ZLE->(Eof()) .And. AllTrim(ZLE->ZLE_FROTA) == AllTrim(TR02->ZA5_GUINDA)
		    	If AllTrim(ZLE->ZLE_STATUS) == "1"
		    		ZLE->(DbSkip())
		    		Loop
		    	EndIf
		    	
		    	If lRevis//AS 2º vez
		    		If AllTrim(ZLE->ZLE_STATUS) == "9" .Or. AllTrim(ZLE->ZLE_STATUS) == "M"
			    		ZLE->(DbSkip())
			    		Loop
			    	EndIf  
			    	
			    	
			    	If AllTrim(TR02->ZA5_PROJET+TR02->ZA5_OBRA+TR02->ZA5_GUINDA+TR02->ZA5_AS) == AllTrim(ZLE->ZLE_PROJET+ZLE->ZLE_OBRA+ZLE->ZLE_FROTA+ZLE->ZLE_AS)
			    		ZLE->(DbSkip())
			    		Loop
			    	EndIf
			    	
			    	If DTOS(ZLE->ZLE_DTPROG) >= DTOS(TR02->ZA5_DTINI) .And. DTOS(ZLE->ZLE_DTPROG) <= DTOS(TR02->ZA5_DTFIM)
			    		//lRet := .F.
			    		//Exit    
			    		
			    		aEncav := {ZLE->ZLE_FROTA,ZLE->ZLE_DTPROG,ZLE->ZLE_AS,ZLE->ZLE_PROJET,ZLE->ZLE_OBRA}   
			    		nPos := ASCAN(aFrota,{|x| x[1]+x[4]+X[5] == TR02->ZA5_GUINDA+TR02->ZA5_OBRA+TR02->ZA5_SEQGUI})
						If nPos > 0
			    			Aadd(aFrota[nPos,6],aEncav)
			    		Else
			    			Aadd(aFrota,{TR02->ZA5_GUINDA,TR02->ZA5_DTINI,TR02->ZA5_DTFIM,TR02->ZA5_OBRA,TR02->ZA5_SEQGUI,{aEncav}})                                                                    
			    		EndIf
			    	EndIf	
			    Else
			    	If DTOS(ZLE->ZLE_DTPROG) >= DTOS(TR02->ZA5_DTINI) .And. DTOS(ZLE->ZLE_DTPROG) <= DTOS(TR02->ZA5_DTFIM)
			    		//lRet := .F.
			    		//Exit        			    		
			    		aEncav := {ZLE->ZLE_FROTA,ZLE->ZLE_DTPROG,ZLE->ZLE_AS,ZLE->ZLE_PROJET,ZLE->ZLE_OBRA}   
			    		nPos := ASCAN(aFrota,{|x| x[1]+x[4]+X[5] == TR02->ZA5_GUINDA+TR02->ZA5_OBRA+TR02->ZA5_SEQGUI})
						If nPos > 0
			    			Aadd(aFrota[nPos,6],aEncav)
			    		Else
			    			Aadd(aFrota,{TR02->ZA5_GUINDA,TR02->ZA5_DTINI,TR02->ZA5_DTFIM,TR02->ZA5_OBRA,TR02->ZA5_SEQGUI,{aEncav}})                                                                  
			    		EndIf
			    	EndIf	
		    	EndIf
		    	
		    	ZLE->(DbSkip())
		    EndDo
			
			//cRet += AllTrim(TR02->ZLG_PROJET)+"-"+cObra+"-"+cSeq+" ("+AllTrim(cFrota)+") - "+DTOC(TR02->ZLG_DTINI)+" / "+DTOC(TR02->ZLG_DTFIM)+cEOL	    
			TR02->(DbSkip())
		EndDo                  
	EndIf
	
 		
	oReport:SetMeter(Len(aFrota))
	oSection1:Init()
	oReport:PrintSHeader()
    For nX := 1 To Len(aFrota)
    	oReport:IncMeter()   
    	
		oSection1:Cell('cFrota'):SetValue(aFrota[nX,1])
		oSection1:Cell('cDatIni'):SetValue(DTOC(aFrota[nX,2]))
		oSection1:Cell('cDatFim'):SetValue(DTOC(aFrota[nX,3]))
		oSection1:PrintLine()
		aError := aFrota[nX,6]	     		
		For nY := 1 To Len(aError)                         
			oReport:PrintText("		Encavalado: "+aError[nY,1]+" - "+Dtoc(aError[nY,2])+" - As/Agendamento/Obra: ("+AllTrim(aError[nY,3])+" / "+AllTrim(aError[nY,4])+")",oReport:Row(),10)
			oReport:SkipLine()
					    
			//oSection2:Init()
			//oSection2:PrintLine()
			//oSection2:Cell('cFrota2'):SetValue(aError[nY,1])
			//oSection2:Cell('cData'):SetValue(DTOC(aError[nY,2]))
			//oSection2:Cell('cAs'):SetValue(aError[nY,3])
			
		Next nY
		oReport:ThinLine() 
	Next nX    
    
    oSection1:Finish()
    //oSection2:Finish()
    
    /*oReport:StartPage()               
    
    //Imprime erros
    If Len(aError) > 0
    	 oSection2:Init()	
    	 oReport:PrintSHeader()
         For nX := 1 To Len(aError)
         	oSection2:Cell('cNotaNOk'):SetValue(aError[nX,1])
         	oSection2:Cell('cError'):SetValue(aError[nX,2])
			oSection2:PrintLine()
         Next nX
         oSection2:Finish()               
    EndIf 		*/
    
	RestArea(aArea)
Return
                             
/*
+-----------------------------------------------------------------------------+
| Alison 20/03/14															  |
+-----------------------------------------------------------------------------+
| Função criada para deletar viagens, que tem relação com as outras abas      |
+-----------------------------------------------------------------------------+
*/      
Static Function DeleteViagem()
	Local cIndice	:= ""
	Local aArea		:= GetArea()
	Local aAreaZA7	:= ZA7->(GetArea())
	Local aAreaZAE	:= ZAE->(GetArea())
	Local aAreaZAM	:= ZAM->(GetArea())
	Local aAreaZAA	:= ZAA->(GetArea())
	Local aAreaZA9	:= ZA9->(GetArea())
	
	For nX := 1 To Len(aDelViag)
		cIndice := aDelViag[nX,1]+aDelViag[nX,2]+aDelViag[nX,3]
		DbSelectArea("ZA7")
		DbSetOrder(1)
		DbSeek(xFilial("ZA7")+cIndice)
		While !ZA7->(Eof()) .And. ZA7->(ZA7_FILIAL+ZA7_PROJET+ZA7_OBRA+ZA7_SEQTRA) == xFilial("ZA7")+cIndice
			RecLock("ZA7", .F.)
			DbDelete()
			MsUnlock()			
			ZA7->(DbSkip())
		EndDo
		
		DbSelectArea("ZAE")
		DbSetOrder(1)
		DbSeek(xFilial("ZAE")+cIndice)
		While !ZAE->(Eof()) .And. ZAE->(ZAE_FILIAL+ZAE_PROJET+ZAE_OBRA+ZAE_SEQTRA) == xFilial("ZAE")+cIndice
			RecLock("ZAE", .F.)
			DbDelete()
			MsUnlock()			
			ZAE->(DbSkip())
		EndDo
		
		DbSelectArea("ZAM")
		DbSetOrder(1)
		DbSeek(xFilial("ZAM")+cIndice)
		While !ZAM->(Eof()) .And. ZAM->(ZAM_FILIAL+ZAM_PROJET+ZAM_OBRA+ZAM_SEQTRA) == xFilial("ZAM")+cIndice
			RecLock("ZAM", .F.)
			DbDelete()
			MsUnlock()			
			ZAM->(DbSkip())
		EndDo
		
		DbSelectArea("ZAA")
		DbSetOrder(2)
		DbSeek(xFilial("ZAA")+cIndice)
		While !ZAA->(Eof()) .And. ZAA->(ZAA_FILIAL+ZAA_PROJET+ZAA_OBRA+ZAA_SEQGUI) == xFilial("ZAA")+cIndice
			RecLock("ZAA", .F.)
			DbDelete()
			MsUnlock()			
			ZAA->(DbSkip())
		EndDo
		
		DbSelectArea("ZA9")
		DbSetOrder(1)
		DbSeek(xFilial("ZA9")+cIndice)
		While !ZA9->(Eof()) .And. ZA9->(ZA9_FILIAL+ZA9_PROJET+ZA9_OBRA+ZA9_SEQTRA) == xFilial("ZA9")+cIndice
			RecLock("ZA9", .F.)
			DbDelete()
			MsUnlock()			
			ZA9->(DbSkip())
		EndDo
	Next nX

	RestArea(aAreaZA7)
	RestArea(aAreaZAE)
	RestArea(aAreaZAM)
	RestArea(aAreaZAA)
	RestArea(aAreaZA9)
	RestArea(aArea)
Return

//Revisão de projeto.
/*Static Function MailRevisao()
Local lOk 		:= .F. 
Local cCC	 	:= Space(100)
Local cCCo	 	:= Space(100)
Local cMsg	 	:= "" + CHR(13)+CHR(10)
Local cPara	 	:= Space(100)
Local cTitulo	:= Space(100)
Local oAnexo                                                           
Local oCC
Local oCCo
Local oMsg
Local oPara
Local oTitulo
Local eFrom 	:= AllTrim(UsrRetName(RetCodUsr())) + " <" + AllTrim(UsrRetMail(RetCodUsr())) + ">" 
Local aButtons	:= {}
Private _oDlgMail
	
cTitulo		:= "Solicitação de Aprovação do Projeto " + AllTrim(ZA0->ZA0_PROJET)

cPara := GetMv("LC_MAILAPR")
cMsg  := "Solicitação de Aprovação do Projeto: " + AllTrim(ZA0->ZA0_PROJET) + CHR(13)+CHR(10)
cMsg  += "Cliente: " +AllTrim(ZA0->ZA0_CLI)+ " - " +AllTrim(ZA0->ZA0_CLINOM)
	
U_MandaEmail( eFrom, cPara , cCC, cTitulo, cMsg, nil, cCCo) 
	
Return()*/                                           

//Validação no momento de mandar o projeto para aprovação
//Verifica se alguma obra não possui recurso.
Static Function TemRecurso()
	Local aArea 	:= GetArea()
	Local aAreaZA7 	:= ZA7->(GetArea())
	Local aAreaZAE 	:= ZAE->(GetArea())
	Local lRet 		:= .T.
    
	DbSelectArea("ZA7")
	DbSetOrder(1)
	DbSeek(xFilial("ZA7")+ZA0->ZA0_PROJET)	          
	While !ZA7->(Eof()) .And. ZA7->(ZA7_FILIAL+ZA7_PROJET) == xFilial("ZA7")+ZA0->ZA0_PROJET
	
		DbSelectArea("ZAE")
		DbSetOrder(1)
		If !DbSeek(xFilial("ZAE")+ZA7->(ZA7_PROJET+ZA7_OBRA))	          
			lRet := .F.                                                   
			MsgAlert("A Obra: "+AllTrim(ZA7->ZA7_OBRA)+" não possui recurso. Favor informar o(s) recurso(s). Aba: 'Conj.Transportador'.","Atenção!")
			Exit
		EndIf
	    
		ZA7->(DbSkip())
	EndDo
	
	RestArea(aAreaZA7)
	RestArea(aAreaZAE)      
    RestArea(aArea)
Return(lRet)

User Function VALZT0()
   Local aArea		:= GetArea()
   Local aAreaZT0	:= ZT0->(GetArea())
   Local lRet		:= .T.
   
   DbSelectArea("ZT0")
   DbSetOrder(1)
   If DbSeek(xFilial("ZT0")+M->ZT0_CLIENT+M->ZT0_ORIGEM+M->ZT0_DESTIN+M->ZT0_FAMCAV+M->ZT0_FAMCAR+M->ZT0_QTDBAT+M->ZT0_CEXCE1+M->ZT0_CEXCE2)   
   	MsgAlert("Já existe um registro com essa chave.","Atenção!") 
   	lRet := .F.
	EndIf
	                 
	RestArea(aAreaZT0)
	RestArea(aArea)
Return(lRet)

//Especifico TWA
Static Function TabPreco()              
	Local aArea 	:= GetArea()
	Local aAreaZT0 := ZT0->(GetArea())
	Local cRespAju := GetMv("LC_CRVLAJU")
	Local cRespEsc := GetMv("LC_CRVLESC")
	Local cRespMot := GetMv("LC_CRVLMOT")
	Local cRespVis := GetMv("LC_CRVLVIS")
	Local cRespBal := GetMv("LC_CRVLBAL")
	Local cRespLic := GetMv("LC_CRVLLIC")
	Local cFCavalo	:= "" //Familia Cavalo
	Local cFCarret := "" //Familia Carreta
	Local aAuxTre	:= {}
	Local nPosBat	:= aScan( oDlgTre:AHeader , { |x| Upper( Alltrim( x[2] ) ) == "ZAM_CRED"   })//Posição campo batedor

      
 	If ZA0->ZA0_TIPOSE $ "T" .and. ValType(oDlgTra)=="O"  //Se o objeto já foi criado
		cOrigem:=oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ORIGEM"})]
		cDestin:=oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_DESTIN"})]
	EndIf                                 
	
	//Pega o cod da familia do cavalo e carreta!
	For nX := 1 To Len(oCon_Cols)
		If oCon_Cols[nX,Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_OBRA"})] == cObra .And. oCon_Cols[nX,Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_SEQTRA"})] == cSeqTra
			If oCon_Cols[nX,Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_SEQCON"})] == "001"
				cFCavalo := Posicione("ST9",1,xFilial("ST9")+oCon_Cols[nX,Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_TRANSP"})],"T9_CODFAMI")
			ElseIf oCon_Cols[nX,Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_SEQCON"})] == "002"
			   cFCarret := Posicione("ST9",1,xFilial("ST9")+oCon_Cols[nX,Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_TRANSP"})],"T9_CODFAMI")   
			Else
				Exit
			EndIf 			
		EndIf
	Next nX  
	
	aAuxTre := aClone(oDlgTre:Acols) 
	
	aSort(aAuxTre,,,{|x,y| x[nPosBat] > y[nPosBat]})
	
	nQtdBat := aAuxTre[1,nPosBat]
	
	DbSelectArea("ZT0")
	DbSetOrder(1)
	DbSeek(xFilial("ZT0")+ZA0->ZA0_CLI+cOrigem+cDestin+cFCavalo+cFCarret)
	
	While !ZT0->(Eof()) .And. ZT0->(ZT0_FILIAL+ZT0_CLIENT+ZT0_ORIGEM+ZT0_DESTIN) == xFilial("ZT0")+ZA0->ZA0_CLI+cOrigem+cDestin
		//Alert("OK") 
		
		If ZT0->ZT0_FAMCAV <> cFCavalo .And. !Empty(ZT0->ZT0_FAMCAV)
			ZT0->(DbSkip())
			Loop
		EndIf
		
		If ZT0->ZT0_FAMCAR <> cFCarret .And. !Empty(cFCarret)
			ZT0->(DbSkip())
			Loop
		EndIf           
		
		If ZT0->ZT0_QTDBAT > 0
			If ZT0->ZT0_QTDBAT <> nQtdBat    			     
				ZT0->(DbSkip())
				Loop
			EndIf
		
		EndIf
		
		If ZT0->ZT0_CEXCE1 == "S" .And. ZT0->ZT0_CEXCE2 == "S"
			If n3Larg > 3.5 .Or. n3Larg > 3.2 
				ZT0->(DbSkip())
				Loop			
			EndIf
		ElseIf ZT0->ZT0_CEXCE1 == "S"
			If n3Larg < 3.2
				ZT0->(DbSkip())
				Loop
			EndIf
		ElseIf ZT0->ZT0_CEXCE2 == "S"
			If n3Larg < 3.5
				ZT0->(DbSkip())
				Loop
			EndIf
		EndIf
		
		nValFre := ZT0->ZT0_VALFRE
		nValAdv := ZT0->ZT0_ADVAL
		
//		nValFechT := nValFre
//		oValFechT:Refresh()
		
		//Responsabilidades
		For nX := 1 To Len(oRes_Cols)     
			If oRes_Cols[nX,Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_OBRA"})] == cObra .And. oRes_Cols[nX,Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_SEQGUI"})] == cSeqTra
			
				If oRes_Cols[nX][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_CODIGO"})] == cRespAju       
					oRes_Cols[nX][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_VALOR" })]:= ZT0->ZT0_VALAJU
				ElseIf oRes_Cols[nX][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_CODIGO"})] == cRespEsc
					oRes_Cols[nX][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_VALOR" })]:= ZT0->ZT0_VALESC
				ElseIf oRes_Cols[nX][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_CODIGO"})] == cRespMot
					oRes_Cols[nX][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_VALOR" })]:= ZT0->ZT0_VALMOT
				ElseIf oRes_Cols[nX][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_CODIGO"})] == cRespVis
					oRes_Cols[nX][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_VALOR" })]:= ZT0->ZT0_VISDES
				ElseIf oRes_Cols[nX][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_CODIGO"})] == cRespBal
					oRes_Cols[nX][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_VALOR" })]:= ZT0->ZT0_VALBAL
				ElseIf oRes_Cols[nX][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_CODIGO"})] == cRespLic
					oRes_Cols[nX][Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="ZAA_VALOR" })]:= ZT0->ZT0_VALLIC
				EndIf   
			
			EndIf
		
		Next nX
		
			
		For nX := 1 To Len(oCon_Cols)
			If oCon_Cols[nX,Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_OBRA"})] == cObra .And. oCon_Cols[nX,Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_SEQTRA"})] == cSeqTra
				oCon_Cols[nX,Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_VRDIA"})] := nValFre
				oCon_Cols[nX,Ascan(oDlgCon:aHeader,{|x|AllTrim(x[2])=="ZAE_VRESTA"})] := ZT0->ZT0_VALHOR
				Exit
			EndIf
		Next nX
		
		For nX := 1 To Len(oCar_Cols)
			If oCar_Cols[nX,Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_OBRA"})] == cObra .And. oCar_Cols[nX,Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SEQTRA"})] == cSeqTra;
			.And. oCar_Cols[nX,Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SEQCAR"})] == oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|Alltrim(x[2])=="ZA7_SEQCAR"})]
	  
					oCar_Cols[nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_VALADV"})]:= nValAdv
			EndIf 	
		Next nX
		  
		ZT0->(DbSkip())
	EndDo
	
	
	
	
	//oDlgCon:aCols[oDlgCon:nAt][Ascan(oDlgCon:aHeader,{|x|Alltrim(x[2])=="ZAE_VRDIA"})] := nValFre
	
	//oCon_Cols:Refresh()
	
	RestArea(aAreaZT0)
   RestArea(aArea)
Return

Static Function fValidZA6()

Local cCampo	:=	Replace(Replace(ReadVar(),'M->',''),'ZA6->','')
Local cCodigo	
Local cNome
Local lRet := .T.		

	If cCampo	==	"ZA6_TPTRAN"
		
		cCodigo	:=	&(ReadVar())
		
		if Empty(AllTrim(cCodigo))
			MsgStop("Tipo de Transporte deve ser preenchidos ! ")
        	lRet := .F.
    	Endif

		
		//cNome	:=	Posicione("DA4",1,xFilial("DA4")+cCodigo,"DA4_NOME")
		
		//aEval(oDlgVei:aCols,{|x,nLin| GDFieldPut("DTR_CODMOT" ,cCodigo ,nLin,oDlgVei:aHeader,oDlgVei:aCols,.F.), GDFieldPut("DTR_NOMMOT" ,cNome ,nLin,oDlgVei:aHeader,oDlgVei:aCols,.F.)})
		//oDlgVei:oBrowse:Refresh()  
		
	EndIf

	If cCampo == "ZA6_TPTRAC"		// Cristiam Rossi em 05/04/2016
		cCodigo	:=	&(ReadVar())
		if Empty(AllTrim(cCodigo))
			MsgStop("Tipo de Transporte de Compra deve ser preenchido! ")
        	lRet := .F.
    	Endif
	EndIf
    /*
	If cCampo	==	"ZA6_TIPFLU"
		
		cCodigo	:=	&(ReadVar())
		cNome	:=	Posicione("DA4",1,xFilial("DA4")+cCodigo,"DA4_NOME")
		
		aEval(oDlgVei:aCols,{|x,nLin| GDFieldPut("DTR_CODMOT" ,cCodigo ,nLin,oDlgVei:aHeader,oDlgVei:aCols,.F.), GDFieldPut("DTR_NOMMOT" ,cNome ,nLin,oDlgVei:aHeader,oDlgVei:aCols,.F.)})
		oDlgVei:oBrowse:Refresh()  
		
	EndIf
	  */
Return (lRet)                


    //********************************************************************************
	// Rotina que retorno verssao atual de vendas - padrao GEFCO // ROBERTO MARQUES 
	// DATA : 20-07-2015
	//********************************************************************************
	
	Static Function FTABAV()
		Local aAreaZA6  :=ZA6->(GetArea())
		Local mSQL := ""
		Local cCodCli	:= 	AllTrim(ZA0->ZA0_CLI)
		Local cLojCli	:=  AllTrim(ZA0->ZA0_LOJA)
		Local cTpTrans  :=  gdFieldGet("ZA6_TPTRAN" , n, .F., aHeader, aCols) // //oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TPTRAN"})] //:  aColsAux[Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TPTRAN"})] 
		Local cTpTraC   :=  gdFieldGet("ZA6_TPTRAC" , n, .F., aHeader, aCols) // Cristiam Rossi em 05/04/2016
		Local cTpFluxo  :=  gdFieldGet("ZA6_TIPFLU" , n, .F., aHeader, aCols) //oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TIPFLU"})] //aColsAux[Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TIPFLU"})]
		Local dDtIni	:=  gdFieldGet("ZA6_DTINI"  , n, .F., aHeader, aCols) //oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_DTINI"})]  //aColsAux[Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_DTINI"})] 
		Local _cTipLkm	:=  gdFieldGet("ZA6_TIPLKM"  , n, .F., aHeader, aCols)
		Local _cTipVei  :=  gdFieldGet("ZA6_TRANSP"  , n, .F., aHeader, aCols) // Frank 13/04/2016

		// Retirado por Frank em 15/04/16
		// Valida se houve entregas para bloquear a tabela de vendas e compras
		//If !VALQJUE()
		//	Return
		//EndIF

		If alltrim(readvar()) == "M->ZA6_TPTRAN"
			cTpTrans := &(readvar())
		EndIF

		If alltrim(readvar()) == "M->ZA6_TPTRAC"
			cTpTraC := &(readvar())
		EndIF

		If alltrim(readvar()) == "M->ZA6_TIPFLU"
			cTpFluxo := &(readvar())
		EndIF        
		If alltrim(readvar()) == "M->ZA6_DTINI"
			dDtIni := &(readvar())
		EndIF       
		
		If alltrim(readvar()) == "M->ZA6_TRANSP"
			_cTipVei := &(readvar())
		EndIf      
		cTabVen := ""
		cVerTab := ""

		if dDtIni == CToD("  /  /  ")
		   dDtIni	:= dDatabase
		Endif

		If Select("TZT0") > 0 
			dbSelectArea("TZT0")
			TZT0->(dbCloseArea())                                                                  
		EndIf                                                                                      
		
		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TABCOM"})]:=""
		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VERCOM"})]:=""
		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABC"})]:=""         
		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TABVEN"})]:=""
		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VERVEN"})]:=""
		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABV"})]:=""

		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_SKMVEN"})]:=0			
		oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_SKMCOM"})]:=0

		mSQL := "SELECT MAX(ZT0_CODTAB)TABELA,MAX(ZT0_VERTAB)VERSAO "
		mSQL += " FROM "+RetSQLName("ZT0")+" ZT0 "
		mSQL += " WHERE ZT0_FILIAL='"+xFilial("ZT0")+"' AND ZT0.D_E_L_E_T_=' '  "
		mSQL += " AND ZT0_INIVIG <='"+DtoS(dDtIni)+"' AND (ZT0_FIMVIG >='"+DtoS(dDtIni)+"' OR ZT0_FIMVIG ='' ) "
		mSQL += " AND ZT0_CODCLI='"+cCodCli+"' AND ZT0_LOJCLI='"+cLojCli+"'"  
		mSQL += " AND ZT0_TIPTAB='"+cTpTrans+"' AND ZT0_TIPFLU='"+cTpFluxo+"' AND ZT0_MSBLQL='2' "
		mSQL += " AND ZT0_TIPVEI='"+_cTipVei+"' " // Frank 13/04/2016
		If(_cTipLkm <> "N", mSQL += " AND ZT0_TIPLKM='"+_cTipLkm+"' ", mSQL += "")

		dbUseArea( .T., "TOPCONN", TCGENQRY(,,mSQL), "TZT0", .F., .T. )
		           
		dbSelectArea("TZT0")
		TZT0->(dbGoTop())
		IF TZT0->(!Eof())
		
			_cOrig := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ORIGEM"})]
			_cTran := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TRANSP"})]
			
			If alltrim(readvar()) == "M->ZA6_TRANSP"
				_cTran := &(readvar())    
			EndIF
			If alltrim(readvar()) == "M->ZA6_ORIGEM"
				_cOrig := &(readvar())    
			EndIF
			
			cTpTran  := _cTran
			
			dbSelectArea("ZT0")
			dbSetOrder(1)
			dbSeek(xFilial("ZT0")+TZT0->TABELA+TZT0->VERSAO+cCodCli+cLojCli+cTpTrans)
			While !eof() .and. ZT0_FILIAL+ZT0_CODTAB+ZT0_VERTAB+ZT0_CODCLI+ZT0_LOJCLI+ZT0_TIPTAB == xFilial("ZT0")+TZT0->TABELA+TZT0->VERSAO+cCodCli+cLojCli+cTpTrans
				
				If _cTipLkm <> "N"
				 	If ZT0->ZT0_TIPLKM <> _cTipLkm
				 		ZT0->(dbSkip())
				 		Loop
				 	EndIF
				 EndIF						 
				
				If ZT0_MSBLQL='2' .and. ZT0_TIPFLU=cTpFluxo .and. ZT0_CODORI==_cOrig .and. ZT0_TIPVEI==_cTran
					oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TABCOM"})]:=ZT0->ZT0_TABCOM
					oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VERCOM"})]:=ZT0->ZT0_VERCOM  
					oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABC"})]:=ZT0->ZT0_ITTABC
					
					If ZT0->ZT0_TIPREG == "5"                                 
						oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_SKMVEN"})]	:= ZT0->ZT0_QTDKM
					EndIf   

					// Posicionar na ZT1 correspondente
					If !empty(ZT0->ZT0_TABCOM) .and. !empty(ZT0->ZT0_VERCOM) .and. !empty(ZT0->ZT0_ITTABC)
						_aTemp := GetArea()   
						dbSelectArea("ZT1")
						dbSetOrder(1)                                                                                
						dbSeek( xFilial("ZT1") + ZT0->ZT0_TABCOM + ZT0->ZT0_VERCOM)
						_lAchou := .F.
						While !Eof() .and. ZT1_FILIAL+ZT1_CODTAB+ZT1_VERTAB == xFilial("ZT1")+ZT0->ZT0_TABCOM + ZT0->ZT0_VERCOM

//							If ZT1_TIPTAB == cTpTrans .and. ZT1_ITEMTB == ZT0->ZT0_ITTABC .and. ZT1_CODCLI == cCodCli .and. ZT1_LOJCLI == cLojCli
//							If ZT1_TIPTAB == cTpTraC  .and. ZT1_ITEMTB == ZT0->ZT0_ITTABC .and. ZT1_CODCLI == cCodCli .and. ZT1_LOJCLI == cLojCli
							If ZT1_ITEMTB == ZT0->ZT0_ITTABC .and. ZT1_CODCLI == cCodCli .and. ZT1_LOJCLI == cLojCli
								_lAchou := .T.
								Exit
							EndIF
							dbSkip()
						EndDo
						If _lAchou
							If ZT1->ZT1_TIPREG == "5"
								oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_SKMCOM"})]	:= ZT1->ZT1_QTDKM									
							EndIF
						EndIF
						RestArea(_aTemp)
					EndIf
					
					
					Exit
				EndIF   
				dbSkip()
			EndDo
		
			cTabVen := TZT0->TABELA
			cVerTab := TZT0->VERSAO
			oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TABVEN"})]:=cTabVen
			oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VERVEN"})]:=cVerTab

			oDlgTra:oBrowse:Refresh()
		Endif
		TZT0->(dbCloseArea())


		RestArea(aAreaZA6)
	
	Return   
	
    //********************************************************************************
	// Rotina que retorno verssao atual de compras - padrao GEFCO // ROBERTO MARQUES 
	// DATA : 20-07-2015
	//********************************************************************************
	Static Function FTABAC()
		//Local aAreaZA6  :=ZA6->(GetArea())
		//Local mSQL := ""
		//Local cCodCli	:= AllTrim(ZA0->ZA0_CLI)
		//Local cLojCli	:= AllTrim(ZA0->ZA0_LOJA)
		//Local cTpTrans  := gdFieldGet("ZA6_TPTRAN" , n, .F., aHeader, aCols) //oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TPTRAN"})] //:  aColsAux[Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TPTRAN"})] 
		//Local cTpFluxo  := gdFieldGet("ZA6_TIPFLU" , n, .F., aHeader, aCols) //oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TIPFLU"})] //aColsAux[Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TIPFLU"})]
		//Local dDtIni	:= gdFieldGet("ZA6_DTINI"  , n, .F., aHeader, aCols) //oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_DTINI"})]  //aColsAux[Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_DTINI"})] 
        //Local cTabCom	:= ZA0->ZA0_TABCOM 
        //Local cTabVen   := ZA0->ZA0_TABVEN
		
		//cVerTabC := ""

		//if dDtIni == CToD("  /  /  ")
		//   dDtIni	:= dDatabase
		//Endif

		//If Select("TZT1") > 0 
		//	dbSelectArea("TZT1")
		//	TZT1->(dbCloseArea())
		//EndIf

		//mSQL := "SELECT MAX(ZT1_VERTAB)VERSAO "
		//mSQL += " FROM "+RetSQLName("ZT1")+" ZT1 "
		//mSQL += " WHERE ZT1_FILIAL='"+xFilial("ZT0")+"' AND ZT1.D_E_L_E_T_=' '  "
		//mSQL += " AND ZT1_INIVIG >='"+DtoS(dDtIni)+"' AND (ZT1_FIMVIG <='"+DtoS(dDtIni)+"' OR ZT1_FIMVIG ='' ) "
		//mSQL += " AND ZT1_CODCLI='"+cCodCli+"' AND ZT1_LOJCLI='"+cLojCli+"'"  
		//mSQL += " AND ZT1_TIPTAB='"+cTpTrans+"' AND ZT1_TIPFLU='"+cTpFluxo+"' AND ZT1_MSBLQL='2' "
		//mSQL += " AND ZT1_CODTAB='"+cTabCom+"'"

		//dbUseArea( .T., "TOPCONN", TCGENQRY(,,mSQL), "TZT1", .F., .T. )
		           
		//dbSelectArea("TZT1")
		//TZT1->(dbGoTop())
		//IF TZT1->(!EoF())                    
		//	cVerTabC := TZT1->VERSAO
		//	oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TABCOM"})]:=cTabCom
		//	oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VERCOM"})]:=cVerTabC
		//	oDlgTra:oBrowse:Refresh()
		//Endif
		//TZT1->(dbCloseArea())


		//RestArea(aAreaZA6)
	
	Return


//-------------------------------------
User Function LC01VEmerg()
Local lRet   := .T.
Local cQuery
Local cAliasQry
Local aArea  := GetArea()
Local cCampo := StrTran(ReadVar(), "M->", "")

	if cCampo == "ZA6_EMERG2"	// Cliente checar tabela ZT0
		ZT0->( dbSetOrder(1) )	// ZT0_FILIAL+ZT0_CODTAB+ZT0_VERTAB+ZT0_CODCLI+ZT0_LOJCLI+ZT0_TIPTAB+ZT0_ITEMTB
		if ZT0->( dbSeek( xFilial("ZT0") + ;
			gdFieldGet("ZA6_TABVEN" , N, .F., aHeader, aCols) + ;
			gdFieldGet("ZA6_VERVEN" , N, .F., aHeader, aCols) + ;
			ZA0->ZA0_CLI + ;
			ZA0->ZA0_LOJA + ;
			gdFieldGet("ZA6_TPTRAN" , N, .F., aHeader, aCols) + ;
			gdFieldGet("ZA6_ITTABV" , N, .F., aHeader, aCols)  ) )
			
			if ZT0->ZT0_EMERGE != "S" .and. M->ZA6_EMERG2 != "N"
				MsgAlert("Cliente nao possui tabela emergencial","Tabela Emergencial")
				lRet := .F.
			endif
		else
			lRet := .F.
		endif
	endif


	if cCampo == "ZA6_EMERGE"	// Fornecedor checar tabela ZT1
		cQuery := "select ZT1_EMERGE from " + RetSqlName("ZT1") + " ZT1 "
		cQuery += " where ZT1_FILIAL = '"+xFilial("ZT1")+"'"
		cQuery += " and ZT1_CODTAB = '"+gdFieldGet("ZA6_TABCOM" , N, .F., aHeader, aCols) +"'"
		cQuery += " and ZT1_VERTAB = '"+gdFieldGet("ZA6_VERCOM" , N, .F., aHeader, aCols) +"'"
		cQuery += " and ZT1_CODCLI = '"+ZA0->ZA0_CLI +"'"
		cQuery += " and ZT1_LOJCLI = '"+ZA0->ZA0_LOJA +"'"
//		cQuery += " and ZT1_TIPTAB = '"+gdFieldGet("ZA6_TPTRAN" , N, .F., aHeader, aCols) +"'"
		cQuery += " and ZT1_TIPTAB = '"+gdFieldGet("ZA6_TPTRAC" , N, .F., aHeader, aCols) +"'"
		cQuery += " and ZT1_ITEMTB = '"+gdFieldGet("ZA6_ITTABC" , N, .F., aHeader, aCols) +"'"
		cQuery += " and ZT1.D_E_L_E_T_ = ' '"
		dbUseArea(.T., "TOPCONN", TCGenQry(,,cQuery),(cAliasQry := GetNextAlias() ), .F., .T.)

		if ! EOF()
			if ZT1_EMERGE != "S" .and. M->ZA6_EMERGE != "N"
				MsgAlert("Fornecedor nao possui tabela emergencial","Tabela Emergencial")
				lRet := .F.
			endif
		else
			lRet := .F.
		endif

		(cAliasQry)->( dbCloseArea() )
		RestArea( aArea )
	endif

Return lRet





/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³LOCATUE   ºAutor  ³Frank Zwarg Fuga    º Data ³  11/16/15   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Atualiza o acols das coletas quando auterar na viagem      º±±
±±º          ³ os campos ZA6_EMERGE e ZA6_EMERG2 (X3_VLDUSER)             º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ Manutenção dos agendamentos                                º±±
±±º          ³ estando na pasta das viagens, quando houver a alteracao dosº±±
±±º          ³ campos ZA6_EMERGE e ZA6_EMERG2 vamos replicar o conteudo   º±±
±±º          ³ destes campos p/o ZA7_EMERGE e ZA7_EMERG2 da pasta coletas  ±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
User Function LOCATUE(_cCampoX)
Local _cObra
Local _cSeqTra  
Local _cEmerge		:= ""
Local _cEmerg2      := ""
Local _nX

// Protecao contra o uso do valid em um local que possa dar error.log
If upper(alltrim(FunName())) == "LOCC001" .and. nopc == 4

	// nao vou tratar as linhas deletadas intencionalmente  
	If _cCampoX == "M->ZA6_EMERGE"
		_cEmerge	:= &(_cCampoX)
	Else
		_cEmerg2	:= &(_cCampoX)
	EndIF
	
	_cObra	:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_OBRA"})]
	_cSeq	:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_SEQTRA"})]

	For _nX:=1 to Len(oCar_Cols)
		If oCar_Cols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_OBRA"})] == _cObra
			If oCar_Cols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SEQTRA"})] == _cSeq
				If _cCampoX == "M->ZA6_EMERGE"
					oCar_Cols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_EMERGE"})] := _cEmerge
				Else
					oCar_Cols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_EMERG2"})] := _cEmerg2
				EndIF
					
			EndIF
		EndIF
	Next  
	
EndIF

Return .T.


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³LOCATU2   ºAutor  ³Frank Zwarg Fuga    º Data ³  11/16/15   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Validacao da alteracao dos campos ZA7_EMERGE, ZA7_EMERG2,  º±±
±±º          ³ ZA6_EMERGE e ZA6_EMERG2 (X3_VLDUSER)                       º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ Manutenção dos agendamentos                                º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
User Function LOCATU2(_cCampoX)
Local _cQuery                          
Local _cCodTab
Local _cVerTab
Local _cCodCli
Local _cLojCli
Local _cTipTab
Local _cItemTb                   
Local _cArea := GetArea()
Local _lRetorno := .T.

// Protecao contra o uso do valid em um local que possa dar error.log
If upper(alltrim(FunName())) == "LOCC001" .and. nopc == 4

	If Select("QUERYX") > 0
	   QUERYX->(dbCloseArea())
	EndIf  

	// nao vou tratar as linhas deletadas intencionalmente  
	
	_cCodTab	:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TABCOM"})]
	_cVerTab	:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VERCOM"})]

	_cCodCli	:= ZA0->ZA0_CLI
	_cLojCli	:= ZA0->ZA0_LOJA
	_cTipTab	:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TPTRAN"})]
	_cTipTbC	:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TPTRAC"})]
	_cItemTb	:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABC"})]
		
		
	_cTabVen	:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TABVEN"})]
    _cVerVen	:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VERVEN"})]	
    _cIemVen    := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABV"})]	

	If _cCampoX == "M->ZA6_EMERGE" .or. _cCampoX == "M->ZA7_EMERGE"
	
	
		_cQuery := "select ZT1_EMERGE from " + RetSqlName("ZT1") + " ZT1 "
		_cQuery += " where ZT1_FILIAL = '"+xFilial("ZT1")+"'"
		_cQuery += " and ZT1_CODTAB = '"+_cCodTab +"'"
		_cQuery += " and ZT1_VERTAB = '"+_cVerTab +"'"
		_cQuery += " and ZT1_CODCLI = '"+ZA0->ZA0_CLI +"'"
		_cQuery += " and ZT1_LOJCLI = '"+ZA0->ZA0_LOJA +"'"
//		_cQuery += " and ZT1_TIPTAB = '"+_cTipTab +"'"
		_cQuery += " and ZT1_TIPTAB = '"+ _cTipTbC +"'"			// Cristiam Rossi em 05/04/2016
		_cQuery += " and ZT1_ITEMTB = '"+_cItemTb +"'"
		_cQuery += " and ZT1.D_E_L_E_T_ = ' '"
	    _cQuery := ChangeQuery(_cQuery)
	    dbUseArea( .T., "TOPCONN", TCGENQRY(,,_cQuery),"QUERYX", .F., .T.)

		If QUERYX->ZT1_EMERGE == "N"
			If &(_cCampoX) <> "N"
				MsgStop("A tabela de compras não permite o conteúdo diferente de Nao.","Atenção!")
				_lRetorno := .F.
			EndIF
		EndIF                                    
		If Eof()
			MsgStop("Não foi possivel vincular com a tabela de compras.","Atenção!")
			_lRetorno := .F.
		EndIF

	    dbSelectArea("QUERYX")
		
		dbCloseArea()
		
	ElseIf _cCampoX == "M->ZA6_EMERG2" .or. _cCampoX == "M->ZA7_EMERG2"
		ZT0->( dbSetOrder(1) )	// ZT0_FILIAL+ZT0_CODTAB+ZT0_VERTAB+ZT0_CODCLI+ZT0_LOJCLI+ZT0_TIPTAB+ZT0_ITEMTB
		If ZT0->( dbSeek( xFilial("ZT0") + _cTabVen + _cVerVen + _cCodCli + _cLojCli + _cTipTab	+ _cIemVen) )

			If ZT0->ZT0_EMERGE == "N"
				If &(_cCampoX) <> "N"
					MsgStop("A tabela de vendas não permite o conteúdo diferente de Nao.","Atenção!")
					_lRetorno := .F.
				EndIF		
			EndIF
		
		Else
			MsgStop("Não foi possivel vincular com a tabela de vendas.","Atenção!")
			_lRetorno := .F.
		EndIF
	EndIF
	
EndIF
RestArea(_cArea)          

Return _lRetorno

                             

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³ZA0FIL1   ºAutor  ³Frank Zwarg Fuga    º Data ³  11/18/15   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Parametros para filtro da aba viagem                       º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

User Function ZA0FIL1
Local oDlg
Local _lRet  := .F.                
Local _nDias := SuperGetMv("LC_LFTMAX", .F., 5,)

// As variaveis _dViag1 e _dViag2 foram atribuidas como private na chamada do LOCC001


DEFINE MSDIALOG oDlg TITLE "Parametro para visualização das viagens." FROM 5,5 TO 15,40 

@ 05,05 Say "Informe o período para visualização das viagens."  pixel Of oDlg    
@ 15,05 Say "Atenção! O período não pode ser superior a "+strzero(_nDias,2,0)+" dias."  pixel Of oDlg  

@ 30,05 say "Dt. Coleta:" pixel Of oDlg
@ 45,05 say "Dt. Entrega:" pixel Of oDlg

@ 28,40 MsGet _dViag1 	Size 040,009 Pixel Of oDlg Valid NaoVazio()
@ 43,40 MsGet _dViag2 	Size 040,009 Pixel Of oDlg Valid NaoVazio()

@ 60,75 BMPBUTTON TYPE 1 ACTION (_lRet:=.t.,Close(oDlg))
@ 60,105 BMPBUTTON TYPE 2 ACTION (_lRet:=.f.,Close(oDlg))

ACTIVATE MSDIALOG oDlg CENTERED 

If _lRet        
	If _nDias == 0
		MsgStop("A quantidade de dias deve ser pelo menos 1, acerte o parametro LC_LFTMAX.","Atenção!")
		_lRet := .F.
	EndIF
	If _dViag1 > _dViag2
		MsgStop("Erro no prenchimento do período.","Atenção!")
		_lRet := .F.
	Else
		If _dViag2 - _dViag1 > _nDias
			MsgStop("A quantidade de dias informado no parâmetro, ultrapassa o permitido pelo administrador do sistema.","Atenção!")
			_lRet := .F.
		EndIF
	EndIF
EndIF

Return _lRet




// ZA6_EMERGE        
//PERTENCE("SN") .and. IF(  U_LOCATU2("M->ZA6_EMERGE")   ,  U_LOCATUE("M->ZA6_EMERGE")    , .F.)                                  

//ZA6_EMERG2
//PERTENCE("SN") .and. IF( U_LOCATU2("M->ZA6_EMERG2")    , U_LOCATUE("M->ZA6_EMERG2")     , .F.)                                  

// ZA7_EMERGE
// U_LOCATU2("M->ZA7_EMERGE")

// ZA7_EMERG2
// U_LOCATU2("M->ZA7_EMERG2")

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³VALDELZ7  ºAutor  ³Frank Zwarg Fuga    º Data ³  12/10/15   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Validacao da possibilidade de exclusao da linha na getdados º±±
±±º          ³do folder VIAGENS                                           º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function VALDELZ6
Local _lRet  	:= .T.                                        
Local _aArea 	:= GetArea()
Local _aAreaDTQ := DTQ->(GetArea())
Local _cViagem  
Local _cProjeto
Local _cObra
Local _lVal
Local _nX

If oDlgTra:aCols[oDlgTra:nAt][len(oDlgTra:aHeader)+1]
	oDlgTra:aCols[oDlgTra:nAt][len(oDlgTra:aHeader)+1] := .F.
Else                                 
	/*
	Regra:
	1 - Não permitir deletar uma viagem que tenha um CT-e associado.
	*/      
	If Inclui
		oDlgTra:aCols[oDlgTra:nAt][len(oDlgTra:aHeader)+1] := .T.
	Else          
		// Para cada Viagem associada, verificar se exite CT-e emitido.
		_lVal := .T.
		
		_cObra 	  := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_OBRA"})]
		_cProjeto := ZA0->ZA0_PROJET
        
		If !empty(_cObra) .and. !empty(_cProjeto)
			For _nX:=1 to Len(ocar_cols) // aCols do ZA7 sem o filtro pela viagem do ZA6
				If !ocar_cols[_nX][len(oDlgCar:aHeader)+1]			
					If ocar_cols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_OBRA"})]==_cObra
						DTQ->(dbSetOrder(1))
						_cViagem := ocar_cols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_VIAGEM"})]
						If DTQ->(dbSeek( xFilial("DTQ") + _cViagem))		
							While !DTQ->(eof()) .and. DTQ->(DTQ_FILIAL+DTQ_SOT+DTQ_OBRA+DTQ_VIAGEM) == xFilial("DTQ")+_cProjeto+_cOBRA+_cViagem		
								If !empty(DTQ->DTQ_NUMPV)
									_lVal := .F.
									Exit
								EndIF
								DTQ->(dbSkip())
							EndDo
						EndIF
					EndIF   
					RestArea(_aAreaDTQ)
				EndIF
			Next
		EndIf

		If _lVal
			oDlgTra:aCols[oDlgTra:nAt][len(oDlgTra:aHeader)+1] := .T.
		Else
			MsgStop("Não é possivel deletar o registro da viagem, pois existem coletas associadas com CT-e emitido.","Atenção!")
		EndIf 
		RestArea(_aArea)	
	EndIF
EndIF
oDlgTra:refresh()
Return _lRet


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³VALDELZ6  ºAutor  ³Frank Zwarg Fuga    º Data ³  12/10/15   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Validacao da possibilidade de exclusao da linha na getdados º±±
±±º          ³do folder COLETAS                                           º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function VALDELZ7
Local _lRet  	:= .T.                                        
Local _aArea 	:= GetArea()
Local _aAreaDTQ := DTQ->(GetArea())
Local _cViagem  
Local _cProjeto
Local _cObra
Local _lVal
Local _nX

If oDlgCar:aCols[oDlgCar:nAt][len(oDlgCar:aHeader)+1]
	oDlgCar:aCols[oDlgCar:nAt][len(oDlgCar:aHeader)+1] := .F.
Else                                 
	/*
	Regra:
	1 - Não permitir deletar uma viagem que tenha um CT-e associado.
	*/      
	If Inclui
		oDlgCar:aCols[oDlgCar:nAt][len(oDlgCar:aHeader)+1] := .T.
	Else          
		// Para cada Viagem associada, verificar se exite CT-e emitido.
		_lVal := .T.     
		
		_cViagem  := oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_VIAGEM"})]
		_cObra 	  := oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_OBRA"})]
		_cProjeto := ZA0->ZA0_PROJET

		_cJunto   := oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_JUNTO"})]
		if ! Empty( _cJunto )
			for _w := 1 to len( oDlgCar:aCols )
				if oDlgCar:aCols[_w][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SEQCAR"})] == _cJunto
					_cViagem  := oDlgCar:aCols[_w][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_VIAGEM"})]
					exit
				endif
			next
		endif
		
		If !empty(_cObra) .and. !empty(_cProjeto) .and. !empty(_cViagem)
			DTQ->(dbSetOrder(1))
			If DTQ->(dbSeek( xFilial("DTQ") + _cViagem))		
				While !DTQ->(eof()) .and. DTQ->(DTQ_FILIAL+DTQ_SOT+DTQ_OBRA+DTQ_VIAGEM) == xFilial("DTQ")+_cProjeto+_cOBRA+_cViagem		
					If !empty(DTQ->DTQ_NUMPV)
						_lVal := .F.
						Exit
					EndIF
					DTQ->(dbSkip())
				EndDo
			EndIF
			RestArea(_aAreaDTQ)
		EndIf

		If _lVal
			oDlgCar:aCols[oDlgCar:nAt][len(oDlgCar:aHeader)+1] := .T.
		Else
			MsgStop("Não é possivel deletar o registro da coleta, pois existe um CT-e emitido.","Atenção!")
		EndIf 
		RestArea(_aArea)	
	EndIF
EndIF
oDlgCar:refresh()

Return _lRet



/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³Atuitem   ºAutor  ³Frank Zwarg Fuga    º Data ³  12/10/15   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ atualizacao da tabela de vendas conforme ocorrer mudanças  º±±
±±º          ³ nas informações                                           º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Static Function AtuItem(_cCampo,_cConteudo)
Local _cTpTrans 	:= gdFieldGet("ZA6_TPTRAN" , oDlgTra:nAt, .F., oDlgTra:aHeader, oDlgTra:aCols) 	
Local _cTpTraC  	:= gdFieldGet("ZA6_TPTRAC" , oDlgTra:nAt, .F., oDlgTra:aHeader, oDlgTra:aCols)    	// Cristiam Rossi em 05/04/2016
Local _cTpFluxo 	:= gdFieldGet("ZA6_TIPFLU" , oDlgTra:nAt, .F., oDlgTra:aHeader, oDlgTra:aCols) 	
Local _dDtIni	 	:= gdFieldGet("ZA6_DTINI"  , oDlgTra:nAt, .F., oDlgTra:aHeader, oDlgTra:aCols)	
Local _COrig    	:= gdFieldGet("ZA6_ORIGEM" , oDlgTra:nAt, .F., oDlgTra:aHeader, oDlgTra:aCols)	
Local _cDest		:= gdFieldGet("ZA6_DESTIN" , oDlgTra:nAt, .F., oDlgTra:aHeader, oDlgTra:aCols)	
Local _cCodCli	 	:= AllTrim(ZA0->ZA0_CLI)
Local _cLojCli	 	:= AllTrim(ZA0->ZA0_LOJA)
Local _cTabVen	 	:= gdFieldGet("ZA6_TABVEN" , oDlgTra:nAt, .F., oDlgTra:aHeader, oDlgTra:aCols)
Local _cVerTab	 	:= gdFieldGet("ZA6_VERVEN" , oDlgTra:nAt, .F., oDlgTra:aHeader, oDlgTra:aCols)
//Local _cTpTran  	:= gdFieldGet("ZA6_TRANSP" , oDlgTra:nAt, .F., oDlgTra:aHeader, oDlgTra:aCols)    
Local _cTpRean		:= gdFieldGet("ZA6_TPREAN" , oDlgTra:nAt, .F., oDlgTra:aHeader, oDlgTra:aCols)    
Local _cTipLkm		:= gdFieldGet("ZA6_TIPLKM" , oDlgTra:nAt, .F., oDlgTra:aHeader, oDlgTra:aCols)    
Local _cTipVei		:= gdFieldGet("ZA6_TRANSP" , oDlgTra:nAt, .F., oDlgTra:aHeader, oDlgTra:aCols)    
Local _aArea		:= GetArea()
Local _lProc		:= .T.

If alltrim(upper(funname())) <> "LOCC001"
	Return .T.
EndIf        

// Retirado por Frank em 15/04/16
// Valida se houve entregas para bloquear a tabela de vendas e compras
//If !VALQJUE()
//	Return .T.
//EndIF 

If alltrim(readvar()) == "M->ZA6_ORIGEM"
	_cOrig := &(readvar())
EndIF
If alltrim(readvar()) == "M->ZA6_DESTIN"
	_cDest := &(readvar())
EndIF
If alltrim(readvar()) == "M->ZA6_TRANSP"
	//_cTpTran := &(readvar())   
	_cTipVei := &(readvar())
EndIF
If alltrim(readvar()) == "M->ZA6_TPTRAN"
	_cTpTrans := &(readvar())
EndIF 	
If alltrim(readvar()) == "M->ZA6_TPTRAC"	// Cristiam Rossi em 05/04/2016
	_cTpTraC := &(readvar())
EndIF 	
If alltrim(readvar()) == "M->ZA6_TIPFLU"
	_cTpFluxo 	:= &(readvar())
EndIF
If alltrim(readvar()) == "M->ZA6_DTINI"
	_dDtIni	 	:= &(readvar())
EndIf                          
If alltrim(readvar()) == "M->ZA6_TABVEN"
	_cTabVen	:= &(readvar())
EndIF
If alltrim(readvar()) == "M->ZA6_VERVEN"
	_cVerTab	:= &(readvar())
EndIF
If alltrim(readvar()) == "M->ZA6_TPREAN"
	_cTpRean	:= &(readvar())
EndIf                  
If alltrim(readvar()) == "M->ZA6_TIPLKM"
	_cTipLkm	:= &(readvar())
EndIF

                             
If _cCampo == "ZA6_ORIGEM"
	//If _COrig <> _cConteudo
		FTABAV()
		//FTABAC()  - na tabela de vendas ja posicionamos a tabela de compras
		oDlgTra:oBrowse:Refresh()
	//EndIF
ElseIf _cCampo == "ZA6_TPTRAN"
	//If _cTpTrans <> _cConteudo
		FTABAV()
		//FTABAC() na tabela de vendas ja posicionamos a tabela de compras
		oDlgTra:oBrowse:Refresh()
	//EndIF       
	If empty(_cTpTrans)
		_lProc := .F.
	EndIf
ElseIf _cCampo == "ZA6_TPTRAC"		// Cristiam Rossi em 05/04/2016
	FTABAV()
	oDlgTra:oBrowse:Refresh()
	If empty(_cTpTraC)
		_lProc := .F.
	EndIf
ElseIf _cCampo == "ZA6_TPREAN"
	//If _cTpRean <> _cConteudo
		FTABAV()
		//FTABAC()  - na tabela de vendas ja posicionamos a tabela de compras
		oDlgTra:oBrowse:Refresh()
	//EndIF
ElseIf _cCampo == "ZA6_TIPFLU"                                                                                               
	//If _cTpFluxo <> _cConteudo
		FTABAV()
		//FTABAC()  - na tabela de vendas ja posicionamos a tabela de compras
		oDlgTra:oBrowse:Refresh()
	//EndIF
ElseIf _cCampo == "ZA6_DTINI"
	//If _dDtIni <> _cConteudo
		FTABAV()
		//FTABAC()  - na tabela de vendas ja posicionamos a tabela de compras
		oDlgTra:oBrowse:Refresh()
	//EndIF
ElseIf _cCampo == "ZA6_TRANSP"
	//If _cTpTran <> _cConteudo
		FTABAV()
		//FTABAC()  - na tabela de vendas ja posicionamos a tabela de compras
		oDlgTra:oBrowse:Refresh()
	//EndIF                     
ElseIf _cCampo == "ZA6_TIPLKM"
	FTABAV()
	oDlgTra:oBrowse:Refresh()
EndIF                           

//If empty(_cTabVen) .or. empty(_cVerTab)
//	_lProc := .F.
//EndIf      

If _lProc                                   

// Atualização das Variáveis locais após tratamentos FTABAV() - Cristiam Rossi em 21/07/2016
_cTabVen := gdFieldGet("ZA6_TABVEN" , oDlgTra:nAt, .F., oDlgTra:aHeader, oDlgTra:aCols)
_cVerTab := gdFieldGet("ZA6_VERVEN" , oDlgTra:nAt, .F., oDlgTra:aHeader, oDlgTra:aCols)





	oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TABCOM"})]:=""
	oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VERCOM"})]:=""
	oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABC"})]:=""    
	oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABV"})]:=""
	
	oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_SKMVEN"})]:=0
	oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_SKMCOM"})]:=0
	
	_aAreaZT0 := ZT0->(GetArea())
	ZT0->( dbSetOrder(1) )
	ZT0->( dbSeek( xFilial("ZT0") + _cTabVen + _cVerTab + _cCodCLi + _cLojCli + _cTpTrans, .T. ) )
	while ! ZT0->( EOF() ) .and. ZT0->( ZT0_FILIAL+ZT0_CODTAB+ZT0_VERTAB+ZT0_CODCLI+ZT0_LOJCLI+ZT0_TIPTAB ) ==  xFilial("ZT0") + _cTabVen + _cVerTab + _cCodCLi + _cLojCli + _cTpTrans 
		if ZT0->ZT0_TIPFLU == _cTpFluxo .and. ;
			ZT0->ZT0_INIVIG <= _dDtIni .and. ;
			( ZT0->ZT0_FIMVIG >= _dDtIni .or. Empty(ZT0->ZT0_FIMVIG) ) .and. ;
			 ZT0->ZT0_CODORI == _cOrig .and. ZT0->ZT0_CODDES == _cDest .and. ZT0->ZT0_TIPVEI== _cTipVei .and. ZT0->ZT0_MSBLQL=='2' 
			 
			 If _cTipLkm <> "N"
			 	If ZT0->ZT0_TIPLKM <> _cTipLkm
			 		ZT0->(dbSkip())
			 		Loop
			 	EndIF
			 EndIF
				
			oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABV"})] := ZT0->ZT0_ITEMTB
			oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABC"})] := ZT0->ZT0_ITTABC
			oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TABCOM"})] := ZT0->ZT0_TABCOM
			oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VERCOM"})] := ZT0->ZT0_VERCOM
			
			
			If ZT0->ZT0_TIPREG == "5"                                 
				oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_SKMVEN"})]	:= ZT0->ZT0_QTDKM
			EndIf   

			// Posicionar na ZT1 correspondente
			If !empty(ZT0->ZT0_TABCOM) .and. !empty(ZT0->ZT0_VERCOM) .and. !empty(ZT0->ZT0_ITTABC)
				_aTemp := GetArea()   
				dbSelectArea("ZT1")
				dbSetOrder(1)                                                                                
				dbSeek( xFilial("ZT1") + ZT0->ZT0_TABCOM + ZT0->ZT0_VERCOM)
				_lAchou := .F.
				While !ZT1->(Eof()) .and. ZT1->ZT1_FILIAL+ZT1->ZT1_CODTAB+ZT1->ZT1_VERTAB == xFilial("ZT1")+ZT0->ZT0_TABCOM + ZT0->ZT0_VERCOM
//					If ZT1_TIPTAB == _cTpTrans .and. ZT1_ITEMTB == ZT0->ZT0_ITTABC .and. ZT1_CODCLI == _cCodCli .and. ZT1_LOJCLI == _cLojCli
//					If ZT1_TIPTAB == _cTpTraC  .and. ZT1_ITEMTB == ZT0->ZT0_ITTABC .and. ZT1_CODCLI == _cCodCli .and. ZT1_LOJCLI == _cLojCli
					If ZT1_ITEMTB == ZT0->ZT0_ITTABC .and. ZT1_CODCLI == _cCodCli .and. ZT1_LOJCLI == _cLojCli
						_lAchou := .T.
						Exit
					EndIF
					dbSkip()
				EndDo
				If _lAchou
					If ZT1->ZT1_TIPREG == "5"
						oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_SKMCOM"})]	:= ZT1->ZT1_QTDKM									
					EndIF
				EndIF
				RestArea(_aTemp)
			EndIf

			exit
		endif
		ZT0->( dbSkip() )
	EndDo           
	RestArea(_aAreaZT0)
Else
	oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABV"})] := space(TamSX3("ZA6_ITTABV")[1])
	oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABC"})] := space(TamSX3("ZA6_ITTABC")[1])
	
	oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_SKMVEN"})]:=0
	oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_SKMCOM"})]:=0
	
EndIf

RestArea(_aArea)        
oDlgTra:oBrowse:Refresh()
return .T.

// Rotina ATUITEM para X3_VALID
User Function VALITEX(_cCampo,_cConteudo)
AtuItem(_cCampo,_cConteudo)
Return .T.




/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³VALQJUE   ºAutor  ³Frank Zwarg Fuga    º Data ³  01/20/16   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Valida se houve alguma coleta/entrega para a viagem posicio-º±±
±±º          ³nada, se houver nao permite a alteracao da tab.venda        º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function VALQJUE()
Local _lRet		:= .T.
Local _nX   
Local _cObrX	:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_OBRA"})]
Local _cSeqX    := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_SEQTRA"})]
Local aAreaZA7 	:= ZA7->(GetArea())
Local _aArea	:= GetArea()
// Validando as informacoes da viagem informada na getdados da ZA6
dbSelectArea("ZA7")
dbSetOrder(3)
dbSeek(oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VIAGEM"})])
If !ZA7->(Eof()) .and. ZA7->ZA7_QJUE > 0
	_lRet := .F.
EndIF

// Validando as informacoes da viagem informada na getdados da ZA7
dbSelectArea("ZA7")
dbSetOrder(3)
For _nX:=1 to len(oCar_Cols)
	If oCar_Cols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_OBRA"})]==_cObrX .and. oCar_Cols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SEQTRA"})]==_cSeqX
		dbSeek(oCar_Cols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_VIAGEM"})])
		If !eof() .and. ZA7->ZA7_QJUE > 0
			_lRet := .F.
		EndIF	
	EndIF
Next        

RestArea(aAreaZA7)
RestArea(_aArea)
Return _lRet



/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³LOCVU1    ºAutor  ³Frank Zwarg Fuga    º Data ³  01/25/16   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Validacao do usuario logado                                º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/                           
User Function LOCVU1
Local 	_aArea 	:= GetArea()
Local 	_lRet	:= .F.       
Local	_cUsu	:= RetCodUsr()

dbSelectArea("ZZ5")
dbSetOrder(1)
dbSeek(xFilial("ZZ5")+_cUsu)
While !eof() .and. ZZ5_FILIAL+ZZ5_CODUSR == xFilial("ZZ5")+_cUsu
	If alltrim(upper(ZZ5_NOMPRO)) == "DESLOC" .and. alltrim(upper(ZZ5_CC)) == "ALL"
		_lRet := .T.
		Exit
	EndIF
	dbSkip()
EndDo

RestArea(_aArea)
Return _lRet



/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³LOCDI1    ºAutor  ³Frank Zwarg Fuga    º Data ³  01/26/16   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ encontrar o valor em km com base nos ceps da ZA3           º±±
±±º          ³ tab.vendas                                                 º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ SX7                                                       º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
User Function LOCDI1       
Local _cCodCli
Local _cLojCli
Local _cCliRes
Local _cLojRes
Local _aArea 	:= GetArea()
Local _aAreaCli	:= SA1->(GetArea())
Local _cCepOri	:= ""
Local _cCepDes	:= ""
Local cQuery
Local _nKm		:= 0
Local _nX   
Local _nRet
Local _cTipo	
Local _cVenda
Local _cCompra              
Local _cTabV
Local _cTabC
Local _cVerV
Local _cVerC
Local _cIteV
Local _cIteC
Local _cTpTrans
Local _lAchou     
Local _nKm1
Local _cTipVV
Local _cTipVC

If readvar() == "M->ZA7_CODCLI"
	_cCodCli 	:= 	&(readvar())
Else
	_cCodCli 	:= oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_CODCLI"})]
EndIF
If readvar() == "M->ZA7_LOJCLI"
	_cLojCli 	:= &(readvar())
Else
	_cLojCli 	:= oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_LOJCLI"})]
EndIF
If readvar() == "M->ZA7_CLIDES"
	_cCliDes 	:= &(readvar())
Else
	_cCliDes 	:= oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_CLIDES"})]
EndIF	
If readvar() == "M->ZA7_LOJDES"	
	_cLojDes 	:= &(readvar()) 		
Else
	_cLojDes 	:= oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_LOJDES"})]
EndIF

_cTipo	 	:= oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_DEVEMB"})]

_cTabV		:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TABVEN"})]
_cTabC      := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TABCOM"})]
_cVerV      := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VERVEN"})]
_cVerC      := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VERCOM"})]
_cIteV      := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABV"})]
_cIteC      := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABC"})]

_cTipVV		:= ""
_cTipVC		:= ""

_cTpTrans	:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TPTRAN"})]
_cTpTraC	:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TPTRAC"})]		// Cristiam Rossi em 05/04/2016

cCodCli	:= AllTrim(M->ZA0_CLI)
cLojCli	:= AllTrim(M->ZA0_LOJA)


// Existem duas formar de calcular o KM, um pelo ZA3 e outro pela tabela ZT2 o que indica a forma é a tabela de vendas.
// Se o campo ZT0_KMPTRE <> "N" buscamos o km de venda pela ZA3, se for == "N" vamos identificar o km pela ZT2 (_cVenda)
// Se o campo ZT1_KMPTRE <> "N" buscamos o km de compra pela ZA3, se for == "N" vamos identificar o km pela ZT2 (_cCompra)

_cRatPV := ""
_cRatPC := ""

// Posicionar na tabela de venda
ZT0->(dbSetOrder(1))
ZT0->( dbSeek( xFilial("ZT0") + _cTabV + _cVerV + cCodCLi + cLojCli + _cTpTrans + _cIteV , .T. ) )
If ZT0->(Eof())
	MsgStop("Não foi possível vincular a tabela de venda.","Atenção!")
	Return 0	                
Else
	If ZT0->ZT0_KMPTRE == "S"
		_cVenda := "S"
	Else
		_cVenda := "N"
	EndIF    
	_cTipVV := ZT0->ZT0_TIPVEI
	If ZT0->ZT0_RATPES == "S"
		_cRatPV := "S"
	Else 
		_cRatPV := "N"
	EndIF
EndIF                 

// Posicionar na tabela de compra
dbSelectArea("ZT1")
dbSetOrder(1)                                                                                
dbSeek( xFilial("ZT1") + _cTabC + _cVerC)
_lAchou := .F.
While !Eof() .and. ZT1_FILIAL+ZT1_CODTAB+ZT1_VERTAB == xFilial("ZT1")+_cTabC + _cVerC

//	If ZT1_TIPTAB == _cTpTrans .and. ZT1_ITEMTB == ZT0->ZT0_ITTABC .and. ZT1_CODCLI == cCodCli .and. ZT1_LOJCLI == cLojCli
//	If ZT1_TIPTAB == _cTpTraC .and. ZT1_ITEMTB == ZT0->ZT0_ITTABC .and. ZT1_CODCLI == cCodCli .and. ZT1_LOJCLI == cLojCli
	If ZT1_ITEMTB == _cIteC .and. ZT1_CODCLI == cCodCli .and. ZT1_LOJCLI == cLojCli
		_lAchou := .T.
		Exit
	EndIF
	dbSkip()
EndDo
If Eof()
	MsgStop("Não foi possivel vincular a tabela de compras.","Atenção!")
	RestArea(_aArea)
	Return 0
Else
	If ZT1->ZT1_KMPTRE == "S"
		_cCompra := "S"
	Else
		_cCompra := "N"
	EndIF                     
	_cTipVC := ZT1->ZT1_TIPVEI
	
	If ZT1->ZT1_RATPES == "S"
		_cRatPC := "S"
	Else 
		_cRatPC := "N"
	EndIF
	
EndIf	
RestArea(_aArea)     

If _cCompra == "S" .or. _cVenda == "S"
	Return 0
EndIF


// Verificar na tabela de vendas se utilizaremos o tipo de calculo FIAT - FTL (Frank 05/04/2016) 
// ---------------------------------------------------------------------------------------------
_lFtlv := .F.           
If _cVenda == "N" .and. _cRatPV == "S"
	dbSelectArea("ZTC")
	DbOrderNickName("ITUPZTC001")
	dbSeek(xFilial("ZTC")+ZT0->ZT0_CODTAB+ZT0->ZT0_VERTAB+ZT0->ZT0_ITEMTB)
	While !Eof() .and. ZTC_FILIAL+ZTC_TABVEN+ZTC_VERVEN+ZTC_ITTABV == xFilial("ZTC")+ZT0->ZT0_CODTAB+ZT0->ZT0_VERTAB+ZT0->ZT0_ITEMTB
		If ZTC_FAIXAA > 0
			_lFtlv := .T.
			Exit
		EndIF
	    dbSkip()                                           
	EndDo                                                  
EndIf

// Verificar na tabela de compras se utilizaremos o tipo de calculo FIAT - FTL (Frank 05/04/2016)
// ----------------------------------------------------------------------------------------------
_lFtlc := .F.                                         
If _cCompra == "N" .and. _cRatPC == "S"
	dbSelectArea("ZTD")
	DbOrderNickName("ITUPZTD001")
	dbSeek(xFilial("ZTD")+ZT1->ZT1_CODTAB+ZT1->ZT1_VERTAB+ZT1->ZT1_ITEMTB)
	While !Eof() .and. ZTD_FILIAL+ZTD_TABCOM+ZTD_VERCOM+ZTD_ITTABC == xFilial("ZTD")+ZT1->ZT1_CODTAB+ZT1->ZT1_VERTAB+ZT1->ZT1_ITEMTB
		If ZTD_FAIXAA > 0 
			_lFtlc := .T.							
			exit
		EndIF
	    dbSkip()                            
	EndDo                                   
EndIF

//If _lFtlc .or. _lFtlv
//	Return 0
//EndIF


If !empty(_cCodCli) .and. !empty(_cLojCli) .and. !empty(_cCliDes) .and. !empty(_cLojDes) .and. _cTipo == "P"
	dbSelectArea("SA1")
	dbSetOrder(1)
	dbSeek(xFilial("SA1")+_cCodCli+_cLojCli)
	If !SA1->(eof())
		_cCepOri := SA1->A1_CEP
	EndIF
	dbSeek(xFilial("SA1")+_cCliDes+_cLojDes)
	If !Eof()
		_cCepDes := SA1->A1_CEP
	EndIF
	
	If !empty(_cCepOri) .and. !empty(_cCepDes)
		//cQuery := "SELECT ZA3_DISTAN FROM " + RetSqlName("ZA3")     + " "
		//cQuery += "WHERE  ZA3_FILIAL = '" + xFilial("ZA3") + "' AND "
		//cQuery += "       ZA3_CEPDE  = '" + _cCepOri       + "' AND "
		//cQuery += "       ZA3_CEPATE = '" + _cCepDes       + "' AND "
		//cQuery += "       D_E_L_E_T_<>'*' "
		
		
		cQuery := "SELECT ZT2_QTDKMU, ZT2_QTDKMA FROM " + RetSqlName("ZT2")
		cQuery += " WHERE ZT2_FILIAL = '" + xFilial("ZT2") + "' AND "
		cQuery += "       ZT2_BLOQUE <> 'S' AND "
		cQuery += "       ZT2_CEPD = '" + _cCepOri + "' AND "
		cQuery += "       ZT2_CEPA = '" + _cCepDes + "' AND "
		cQuery += "       D_E_L_E_T_<>'*' "

		If Select("TRBX") > 0
			TRBX->(dbCloseArea())	 
		endif

		TCQUERY cQuery NEW ALIAS "TRBX"

		dbSelectArea("TRBX")
		TRBX->(dbGotop())
		If !TRBX->(eof())
		
			DUT->( dbSetOrder(1) )
			If DUT->( dbSeek( xFilial("DUT") + _cTipVV ) )
				If DUT->DUT_TIPVEI == "05"
					_nKm := TRBX->ZT2_QTDKMU
				Else
					_nKm := TRBX->ZT2_QTDKMA
				EndIF          
			EndIF

			//_nKm := TRBX->ZA3_DISTAN
		Else
			MsgStop("Ocorrência não encontrada no cadastro de CEPs.","Atenção!")
			_nKm := 0
		EndIF                        
		TRBX->(dbCloseArea())	 
	EndIF
	
	_nKm1 := 0
	_nKm2 := 0
	If _cVenda == "S" .or. _cCompra == "S"
		_nKm1 := 0
		_nKm2 := 0
	EndIF	
	
	// PASSO 1
	// Pesquisar na ZA7 quem tem o cliente e clides = ao da variavel e que o item seja relacionado à peça
    For _nX:=1 to Len(oDlgCar:aCols)
    	If !oDlgCar:aCols[_nX][len(oDlgCar:aHeader)+1]
    		If oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_CLIDES"})]==_cCliDes
    			If oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_LOJDES"})]==_cLojDes
    				If oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_CODCLI"})]==_cCodCli
    					If oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_LOJCLI"})]==_cLojCli
    						If oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_DEVEMB"})]=="P" 
    							If _cVenda == "N"
	    							oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SKMVEN"})] := _nKm
	    						Else                                                                                   
	    							oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SKMVEN"})] := _nKm1
	    						EndIf
	    						If _cCompra == "N"
	    							oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SKMCOM"})] := _nKm
	    						Else
	    							oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SKMCOM"})] := _nKm2
	    						EndIF
    						EndIF
    					EndIf
    				EndIf
    			EndIf
    		EndIF
    	EndIF
    Next
    // PASSO 2 
    // Fazer o procedimento ao contrário para o tipo R - Retorno
	//cQuery := "SELECT ZA3_DISTAN FROM " + RetSqlName("ZA3")     + " "
	//cQuery += "WHERE  ZA3_FILIAL = '" + xFilial("ZA3") + "' AND "
	//cQuery += "       ZA3_CEPDE  = '" + _cCepDes       + "' AND " // inverte
	//cQuery += "       ZA3_CEPATE = '" + _cCepOri       + "' AND " // inverte
	//cQuery += "       D_E_L_E_T_<>'*' "    
	
	cQuery := "SELECT ZT2_QTDKMU, ZT2_QTDKMA FROM " + RetSqlName("ZT2")
	cQuery += " WHERE ZT2_FILIAL = '" + xFilial("ZT2") + "' AND "
	cQuery += "       ZT2_BLOQUE <> 'S' AND "
	cQuery += "       ZT2_CEPD = '" + _cCepDes + "' AND "
	cQuery += "       ZT2_CEPA = '" + _cCepOri + "' AND "
	cQuery += "       D_E_L_E_T_<>'*' "
	
	
	If Select("TRBX") > 0
		TRBX->(dbCloseArea())	 
	endif
	TCQUERY cQuery NEW ALIAS "TRBX"
	dbSelectArea("TRBX")
	TRBX->(dbGotop())
	If !eof()    
	
		DUT->( dbSetOrder(1) )
		If DUT->( dbSeek( xFilial("DUT") + _cTipVV ) )
			If DUT->DUT_TIPVEI == "05"
				_nKm := TRBX->ZT2_QTDKMU
			Else
				_nKm := TRBX->ZT2_QTDKMA
			EndIF          
		EndIF
	
		//_nKm := TRBX->ZA3_DISTAN
	Else
		MsgStop("Ocorrência não encontrada no cadastro de CEPs.","Atenção!")
		_nKm := 0
	EndIF                        
             
	_nKm1 := 0
	_nKm2 := 0
	If _cVenda == "S" .or. _cCompra == "S"
		_nKm1 := 0
		_nKm2 := 0
	EndIF
		
	TRBX->(dbCloseArea())	 
	For _nX:=1 to Len(oDlgCar:aCols)
    	If !oDlgCar:aCols[_nX][len(oDlgCar:aHeader)+1]
    		If oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_CLIDES"})]==_cCliDes
    			If oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_LOJDES"})]==_cLojDes 
    				If oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_CODCLI"})]==_cCodCli 
    					If oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_LOJCLI"})]==_cLojCli
    						If oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_DEVEMB"})]=="R"    
    							If _cVenda <> "S"
	    							oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SKMVEN"})] := _nKm
	    						Else                                                                                   
	    							oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SKMVEN"})] := _nKm1
	    						EndIF
	    						If _cCompra <> "S"
	    							oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SKMCOM"})] := _nKm
	    						Else                                                                                    
	    							oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SKMCOM"})] := _nKm2
	    						EndIF
    						EndIF
    					EndIf
    				EndIf
    			EndIf
    		EndIF
    	EndIF
    Next

	RestArea(_aAreaCli)
	RestArea(_aArea)                         
ElseIf !empty(_cCodCli) .and. !empty(_cLojCli) .and. !empty(_cCliDes) .and. !empty(_cLojDes) .and. _cTipo == "R"
	_cCodCli :=	oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_CODCLI"})]
	_cLojCli := oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_LOJCLI"})]
	_cCliDes := oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_CLIDES"})]
	_cLojDes := oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_LOJDES"})]
	_cTipo	 := oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_DEVEMB"})]
	dbSelectArea("SA1")
	dbSetOrder(1)
	dbSeek(xFilial("SA1")+_cCodCli+_cLojCli)
	If !eof()
		_cCepOri := SA1->A1_CEP
	EndIF
	dbSeek(xFilial("SA1")+_cCliDes+_cLojDes)
	If !Eof()
		_cCepDes := SA1->A1_CEP
	EndIF
	
	If !empty(_cCepOri) .and. !empty(_cCepDes)
		//cQuery := "SELECT ZA3_DISTAN FROM " + RetSqlName("ZA3")     + " "
		//cQuery += "WHERE  ZA3_FILIAL = '" + xFilial("ZA3") + "' AND "
		//cQuery += "       ZA3_CEPDE  = '" + _cCepDes       + "' AND "
		//cQuery += "       ZA3_CEPATE = '" + _cCepOri       + "' AND "
		//cQuery += "       D_E_L_E_T_<>'*' "
		
		cQuery := "SELECT ZT2_QTDKMU, ZT2_QTDKMA FROM " + RetSqlName("ZT2")
		cQuery += " WHERE ZT2_FILIAL = '" + xFilial("ZT2") + "' AND "
		cQuery += "       ZT2_BLOQUE <> 'S' AND "
		cQuery += "       ZT2_CEPD = '" + _cCepDes + "' AND "
		cQuery += "       ZT2_CEPA = '" + _cCepOri + "' AND "
		cQuery += "       D_E_L_E_T_<>'*' "
		
		If Select("TRBX") > 0
			TRBX->(dbCloseArea())	 
		endif

		TCQUERY cQuery NEW ALIAS "TRBX"

		dbSelectArea("TRBX")
		TRBX->(dbGotop())
		If !TRBX->(eof())
		
			DUT->( dbSetOrder(1) )
			If DUT->( dbSeek( xFilial("DUT") + _cTipVV ) )
				If DUT->DUT_TIPVEI == "05"
					_nKm := TRBX->ZT2_QTDKMU
				Else
					_nKm := TRBX->ZT2_QTDKMA
				EndIF          
			EndIF
		
			//_nKm := TRBX->ZA3_DISTAN
		Else
			MsgStop("Ocorrência não encontrada no cadastro de CEPs.","Atenção!")
			_nKm := 0
		EndIF                        
		TRBX->(dbCloseArea())	             
		RestArea(_aAreaCli)
		RestArea(_aArea)                         
	EndIF  
	
	If _cVenda == "S" .or. _cCompra == "S"
		_nKm1 := 0
		_nKm2 := 0
	EndIF
	
	If _cVenda <> "S" .and. _nKm > 0
		oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SKMVEN"})] := _nKm
	EndIF
	If _cCompra <> "S" .and. _nKm > 0
		oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SKMCOM"})] := _nKm	
	EndIf
	If _cVenda == "S" .and. _nKm1 > 0
		oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SKMVEN"})] := _nKm1
	EndIF
	If _cCompra == "S" .and. _nKm2 > 0
		oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SKMCOM"})] := _nKm2	
	EndIf	

EndIF

If oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SKMVEN"})] > 0
	_nRet := oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SKMVEN"})]
Else
	_nRet := 0
EndIF

Return _nRet



/*--------------------------------------
Recálculo das Viagens filtradas no aCols
Solicitante: Anderson
Cristiam Rossi em 28/01/2016
--------------------------------------*/
Static Function reCalcVi()
Local nI
Local nAtBkp  := oDlgTra:nAt
Local nTotVia := Len( oDlgTra:aCols )

	ProcRegua( nTotVia )

	for nI := 1 to nTotVia							// objeto das Viagens-ZA6

//		incProc( "Viagem: "+gdFieldGet("ZA6_OBRA", nI, .F., oDlgTra:aHeader, oDlgTra:aCols)+" "+Alltrim(Str(nI))+" / "+Alltrim(Str( nTotVia )) )
		incProc( "Viagem: "+gdFieldGet("ZA6_OBRA", nI, .F., oDlgTra:aHeader, oDlgTra:aCols) )

		if ! gdDeleted( nI, oDlgTra:aHeader, oDlgTra:aCols )
			oDlgTra:nAt := nI

			fTrazCar()	// posiciona Coletas

			fTrazCon()	// posiciona Conj. Transportador

			fTrazCus()		// Carga Custo
			U_MudaCusB()
			fTrazMem(.T.)  //.t.=Atualiza variáveis/.f.=Atualiza oDlgCus:aCols
			fCalcCus()

			fCalcItem(.F.)	// Chama botão CalcItem da aba Base de Cálculo

			fTrazMem(.F.)  //.t.=Atualiza variáveis/.f.=Atualiza oDlgCus:aCols
			fAcumuCus()


			fAcumuCar()		// Armazenar Coletas

			fAcumuCon()		// Armazenar Conj. Transportador

		endif
	next

	oDlgTra:nAt := nAtBkp

	fTrazCar()	// posiciona Coletas

	fTrazCon()	// posiciona Conj. Transportador

Return nil




/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³AchaKM    ºAutor  ³Frank Zwarg Fuga    º Data ³  09/02/16   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Rotina para Encontrar os KM via tabela ZT2                 º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
User Function AchaKM()
Local _lRet 	:= .T.
Local _cTabV	:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TABVEN"})]
Local _cTabC    := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TABCOM"})]
Local _cVerV    := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VERVEN"})]
Local _cVerC    := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VERCOM"})]
Local _cIteV    := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABV"})]
Local _cIteC    := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABC"})]
Local _cTpTrans	:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TPTRAN"})]
Local _cTpTraC	:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TPTRAC"})]		// Cristiam Rossi em 05/04/2016
Local _cCodCli	
Local _cLojCli	
Local _lProc	:= .T.
Local _aAreaX        
Local _cSeq     
Local _aTemp             
Local _lAcha
Local _lTemProximo := .F.
//Local _lMudaTipo   := .F.
Local _lPrimeiro   := .T.
Local _cCepD
Local _cCepA
Local cQuery
Local _cCompra 	:= "N"
Local _cVenda	:= "N"               
Local _lErro	:= .F.
Local _cErroX	:= ""
Local _cRatPV   := ""
Local _cRatPC   := ""
Local _cTipVV   := ""
Local _cTipVC   := ""

	if ! u_LC1CanEdt('ZA6','ZA6_ORIGEM', , .T.)	// Verifica se Viagem 
		return .T.		// para nao parar o processo, esta viagem já está encerrada
	endif

_cCodCli	:= AllTrim(ZA0->ZA0_CLI)
_cLojCli	:= AllTrim(ZA0->ZA0_LOJA)

// Validacao se em todas as sequencias informadas, a tabela de vendas, ou compras permitem esta indicação
ZT0->(dbSetOrder(1))
ZT0->( dbSeek( xFilial("ZT0") + _cTabV + _cVerV + _cCodCLi + _cLojCli + _cTpTrans + _cIteV , .T. ) )
If ZT0->(Eof())
	_lProc := .F.                                           
	MsgStop("Tabela de vendas não identificada.","Atenção!")
Else
	If ZT0->ZT0_KMPTRE == "S"
		_cVenda := "S"
		_cTipVV := ZT0->ZT0_TIPVEI
	Else
		_cVenda := "N"
	EndIF    
	
	If ZT0->ZT0_RATPES == "S"
		_cRatPV := "S"
	Else
		_cRatPV := "N"
	EndIf                     
	_cTipVV := ZT0->ZT0_TIPVEI
	
EndIF                 

_aAreaX := GetArea()
dbSelectArea("ZT1")
dbSetOrder(1)                                                                                
dbSeek( xFilial("ZT1") + _cTabC + _cVerC)
_lAchou := .F.
While !Eof() .and. ZT1_FILIAL+ZT1_CODTAB+ZT1_VERTAB == xFilial("ZT1")+_cTabC + _cVerC
//	If ZT1_TIPTAB == _cTpTrans .and. ZT1_ITEMTB == ZT0->ZT0_ITTABC .and. ZT1_CODCLI == _cCodCli .and. ZT1_LOJCLI == _cLojCli
//	If ZT1_TIPTAB == _cTpTraC  .and. ZT1_ITEMTB == ZT0->ZT0_ITTABC .and. ZT1_CODCLI == _cCodCli .and. ZT1_LOJCLI == _cLojCli
	If ZT1_ITEMTB == _cIteC .and. ZT1_CODCLI == _cCodCli .and. ZT1_LOJCLI == _cLojCli
		_lAchou := .T.
		Exit
	EndIF
	dbSkip()
EndDo

If Eof()
	_lProc := .F.   
	MsgStop("Tabela de compras não identificada.","Atenção!")
Else
	If ZT1->ZT1_KMPTRE == "S"
		_cCompra := "S"
		_cTipVC := ZT1->ZT1_TIPVEI
 	Else
		_cCompra := "N"
	EndIF                     
	
	If ZT1->ZT1_RATPES == "S"
		_cRatPC := "S"
	Else
		_cRatPC := "N"
	EndIf
	_cTipVC := ZT1->ZT1_TIPVEI
	
EndIf	
RestArea(_aAreaX)   

//If _cCompra == "N" .and. _cVenda == "N" .and. _cRatPC == "N" .and. _cRatPV == "N"
//	Return .T.
//EndIf  
		    
If _cCompra <> "S" .and. _cVenda <> "S" .and. !empty(oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SEQCOL"})])
	_lProc := .F.	
EndIf                           

// Verificar na tabela de vendas se utilizaremos o tipo de calculo FIAT - FTL (Frank 05/04/2016) 
// ---------------------------------------------------------------------------------------------
_lFtlv := .F.           
If _cVenda == "N" .and. _cRatPV == "S"
	dbSelectArea("ZTC")
	DbOrderNickName("ITUPZTC001")
	dbSeek(xFilial("ZTC")+ZT0->ZT0_CODTAB+ZT0->ZT0_VERTAB+ZT0->ZT0_ITEMTB)
	While !Eof() .and. ZTC_FILIAL+ZTC_TABVEN+ZTC_VERVEN+ZTC_ITTABV == xFilial("ZTC")+ZT0->ZT0_CODTAB+ZT0->ZT0_VERTAB+ZT0->ZT0_ITEMTB
		If ZTC_FAIXAA > 0
			_lFtlv := .T.
			Exit
		EndIF
	    dbSkip()                                           
	EndDo                                                  
EndIf

// Verificar na tabela de compras se utilizaremos o tipo de calculo FIAT - FTL (Frank 05/04/2016)
// ----------------------------------------------------------------------------------------------
_lFtlc := .F.                                         
If _cCompra == "N" .and. _cRatPC == "S"
	dbSelectArea("ZTD")
	DbOrderNickName("ITUPZTD001")
	dbSeek(xFilial("ZTD")+ZT1->ZT1_CODTAB+ZT1->ZT1_VERTAB+ZT1->ZT1_ITEMTB)
	While !Eof() .and. ZTD_FILIAL+ZTD_TABCOM+ZTD_VERCOM+ZTD_ITTABC == xFilial("ZTD")+ZT1->ZT1_CODTAB+ZT1->ZT1_VERTAB+ZT1->ZT1_ITEMTB
		If ZTD_FAIXAA > 0 
			_lFtlc := .T.							
			exit
		EndIF
	    dbSkip()                            
	EndDo                                   
EndIF

// Validar se existe alguma sequencia repetida
If (_cCompra == "S" .and. !_lFtlc) .or. (_cVenda == "S" .and. !_lFtlv) // Frank Z Fuga 05/04/2016
	For _nX:=1 to Len(oDlgCar:aCols)
		For _nY:=1 to Len(oDlgCar:aCols)
			If !oDlgCar:aCols[_nX][Len(oDlgCar:aHeader)+1]
				If !oDlgCar:aCols[_nY][Len(oDlgCar:aHeader)+1]
					If oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SEQCOL"})] == oDlgCar:aCols[_nY][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SEQCOL"})] .and. _nX <> _nY
						MsgStop("Falha grave, existem sequencias iguais nas coletas","Atenção!")
						_lProc := .F.
					EndIF
				EndIF
			EndIF
		Next
	Next
EndIF

// Validar se existe pelo menos um SEQCOL preenchido		    
_lAcha := .F.
If !_lFtlc .or. !_lFtlv // Frank 05/04/2016 - vendas ou compras não é FIAT - FTL
	For _nX:=1 to Len(oDlgCar:aCols)
		If !oDlgCar:aCols[_nX][Len(oDlgCar:aHeader)+1]	
			If !empty(oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SEQCOL"})])
				_lAcha := .T.
			EndIf				
		EndIf
	Next
EndIF

If _lFtlc .or. _lFtlv
	If _lFtlv // Refazer o calculo (vendas) com base nas regras da FIAT FTL
		For _nX:=1 to Len(oDlgCar:aCols)
			If !oDlgCar:aCols[_nX][Len(oDlgCar:aHeader)+1]
				oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SKMVEN"})] := 0
			EndIF
		Next	                         
	EndIF
	
	If _lFtlc // Refazer o calculo (compras) com base nas regras da FIAT FTL
		For _nX:=1 to Len(oDlgCar:aCols)
			If !oDlgCar:aCols[_nX][Len(oDlgCar:aHeader)+1]
				oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SKMCOM"})] := 0
			EndIF
		Next	                         
	EndIf                                
	
	_cOrigem := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_CLIORI"})]+oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_LOJORI"})]
	_cDestin := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_CLIDES"})]+oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_LOJDES"})]
		
	dbSelectArea("SA1")
	dbSetOrder(1)
	dbSeek(xFilial("SA1")+_cOrigem)				
	_cCepD := SA1->A1_CEP
			                     
	dbSelectArea("SA1")
	dbSetOrder(1)
	dbSeek(xFilial("SA1")+_cDestin)				
	_cCepA := SA1->A1_CEP
		
	cQuery := "SELECT ZT2_QTDKMU, ZT2_QTDKMA FROM " + RetSqlName("ZT2")
	cQuery += " WHERE ZT2_FILIAL = '" + xFilial("ZT2") + "' AND "
	cQuery += "       ZT2_BLOQUE <> 'S' AND "
	cQuery += "       ZT2_CEPD = '" + _cCepD + "' AND "
	cQuery += "       ZT2_CEPA = '" + _cCepA + "' AND "
	cQuery += "       D_E_L_E_T_<>'*' "
			
	If Select("TRBX") > 0
		TRBX->(dbCloseArea())	 
	endif
	TCQUERY cQuery NEW ALIAS "TRBX"
		
	If !(TRBX->(Eof()))
		DUT->( dbSetOrder(1) )
		If DUT->( dbSeek( xFilial("DUT") + _cTipVV ) ) .and. _lFtlv
			If DUT->DUT_TIPVEI == "05"
				oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_EKMVEN"})] := TRBX->ZT2_QTDKMU
			Else
				oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_EKMVEN"})] := TRBX->ZT2_QTDKMA
			EndIF          
		EndIF
		DUT->( dbSetOrder(1) )
		If DUT->( dbSeek( xFilial("DUT") + _cTipVC ) ) .and. _lFtlc
			If DUT->DUT_TIPVEI == "05"
				oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_EKMCOM"})] := TRBX->ZT2_QTDKMU
			Else
				oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_EKMCOM"})] := TRBX->ZT2_QTDKMA
			EndIF
		EndIF
	Else
		MsgStop("Houve problemas na identificação do CEP de/até.","Atenção!")
		_lRet := .F.
		If _lFtlv
			oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_EKMVEN"})] := 0
		EndIF
		If _lFtlc
			oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_EKMCOM"})] := 0
		EndIF
	EndIF    

	TRBX->(dbCloseArea())	 

EndIF      

If _lFtlc 
	If !_lRet
		Return .F.
	EndIf
EndIF

If _lFtlv 
	If !_lRet
		Return .F.
	EndIf
EndIF


If _lFtlc .and. _lFtlv
	If !_lRet
		Return .F.
	EndIf
	Return .T.
EndIF

If !_lAcha 
	_lProc := .F.
EndIF

If !_lProc 
	Return .T.
Else

	_aTemp := {}
	For _nX:=1 to Len(oDlgCar:aCols)
		If !oDlgCar:aCols[_nX][Len(oDlgCar:aHeader)+1]	
			//If !empty(oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SEQCOL"})])
			
				aadd(_aTemp,{oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SEQCOL"})],;
							 oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_DEVEMB"})],;
							 oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_CODCLI"})],;
							 oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_LOJCLI"})],;
							 oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_CLIDES"})],;
							 oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_LOJDES"})],;
							 oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_DEVEMB"})],;
							 0,;
							 0,;
							 })
			//EndIf				
		EndIf
	Next
	_aTemp := aSort(_aTemp,,,{|x,y| x[1] < y[1] })
	
	_nRecursivo := 1
	If Len(_aTemp) == 1
		_nRecursivo := 2
	EndIF	
	
	For _nEsp:=1 to _nRecursivo
		For _nX:=1 to Len(_aTemp)
			_cSeq  := _aTemp[_nX][01]
			_cTipo := _aTemp[_nX][02]
			
			_lTemProximo := .F.            
			//_lMudaTipo   := .F. 
			// Verifica se existe uma proxima sequencia
			For _nY:=1 to Len(_aTemp)
				If _cSeq < _aTemp[_nY][01] 
					_lTemProximo := .T.
					//If _aTemp[_nY][02] <> _cTipo
					//	_lMudaTipo := .T.
					//EndIF
					Exit
				EndIF
			Next                
			    
			If _nEsp == 2
				_lPrimeiro := .F.
			EndIF				
				
			If !_lPrimeiro
				If _lTemProximo // .and. !_lMudaTipo  
					_cOrigem  := _aTemp[_nX-1][03]+_aTemp[_nX-1][04]
					_cDestin  := _aTemp[_nX][03]+_aTemp[_nX][04]
				Else
					_cOrigem  := _aTemp[_nX][03]+_aTemp[_nX][04]
					// _cDestino := _aTemp[_nX][05]+_aTemp[_nX][06] Frank 25/02/2016
					_cDestin := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_CLIDES"})]+oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_LOJDES"})]
				EndIF
			Else
				_cOrigem   := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_CLIORI"})]+oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_LOJORI"})]
				_cDestin   := _aTemp[_nX][03]+_aTemp[_nX][04]		
				_lPrimeiro := .F.
			EndIF
			
			If _nRecursivo == 2
				_nVezes := 1
			Else
				If _lTemProximo
					_nVezes := 1
				Else            
					_nVezes := 2
				EndIF
			EndIF
			
			For _nH:=1 to _nVezes
			
				If _nVezes == 2 .and. _nH == 2
					_cOrigem  := _aTemp[_nX-1][03]+_aTemp[_nX-1][04]
					_cDestin  := _aTemp[_nX][03]+_aTemp[_nX][04]
				EndIf
			
				dbSelectArea("SA1")
				dbSetOrder(1)
				dbSeek(xFilial("SA1")+_cOrigem)				
				_cCepD := SA1->A1_CEP
			                     
				dbSelectArea("SA1")
				dbSetOrder(1)
				dbSeek(xFilial("SA1")+_cDestin)				
				_cCepA := SA1->A1_CEP
		
				cQuery := "SELECT ZT2_QTDKMU, ZT2_QTDKMA FROM " + RetSqlName("ZT2")
				cQuery += " WHERE ZT2_FILIAL = '" + xFilial("ZT2") + "' AND "
				cQuery += "       ZT2_BLOQUE <> 'S' AND "
				cQuery += "       ZT2_CEPD = '" + _cCepD + "' AND "
				cQuery += "       ZT2_CEPA = '" + _cCepA + "' AND "
				cQuery += "       D_E_L_E_T_<>'*' "
			
				If Select("TRBX") > 0
					TRBX->(dbCloseArea())	 
				endif
				TCQUERY cQuery NEW ALIAS "TRBX"
		
				If !(TRBX->(Eof()))
					If _cVenda == "S"
						DUT->( dbSetOrder(1) )
						If DUT->( dbSeek( xFilial("DUT") + _cTipVV ) )
							If DUT->DUT_TIPVEI == "05"
								_nKm := TRBX->ZT2_QTDKMU
							Else
								_nKm := TRBX->ZT2_QTDKMA
							EndIF          
							If _nEsp == 2 .or. _nH == 2
								_aTemp[_nX][8] += _nKm			
							Else                                
								_aTemp[_nX][8] := _nKm			
							EndIf
						EndIF
					EndIF
					If _cCompra == "S"
						DUT->( dbSetOrder(1) )
						If DUT->( dbSeek( xFilial("DUT") + _cTipVC ) )
							If DUT->DUT_TIPVEI == "05"
								_nKm := TRBX->ZT2_QTDKMU
							Else
								_nKm := TRBX->ZT2_QTDKMA
							EndIF
							If _nEsp == 2 .or. _nH == 2 
								_aTemp[_nX][9] += _nKm
							Else                  
								_aTemp[_nX][9] := _nKm
							EndIF
						EndIf
					EndIF
				Else      
					_cErroX := _cCepD+"-"+_cCepA
					If _cVenda == "S"
						_lErro := .T.
						_nKm := 0
						If _nEsp == 2 .or. _nH == 2
							_aTemp[_nX][8] += 0			
						Else                                
							_aTemp[_nX][8] := 0
						EndIF
					EndIF
					If _cCompra == "S"
						_nKm := 0    
						_lErro := .T.
						If _nEsp == 2 .or. _nH == 2 
							_aTemp[_nX][9] += 0
						Else                  
							_aTemp[_nX][9] := 0
						EndIF
					EndIF
			
				EndIf
			
				TRBX->(dbCloseArea())	 
			Next
		Next
	Next  
	
	For _nX:=1 to Len(oDlgCar:aCols)
		If !oDlgCar:aCols[_nX][Len(oDlgCar:aHeader)+1]
			For _nY:=1 to Len(_aTemp)
				If oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SEQCOL"})] == _aTemp[_nY][01]
					If !_lFtlv
						oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SKMVEN"})] := _aTemp[_nY][08]
					EndIF
					If !_lFtlc
						oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SKMCOM"})] := _aTemp[_nY][09]
					EndIF
					Exit
				EndIF
		    Next
		EndIF
	Next	     
	
	_cObra := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_OBRA"})]                    
	
	If _lErro .and. _cCepD <> _cCepA
		Alert("Obra: "+_cObra+".Não foi encontrado o cadastro de CEPS ("+_cErroX+"), cálculo por Km/Peso está comprometido.","Atenção!")
		_lRet := .F.
	EndIF

	If _lFtlv // Refazer o calculo (vendas) com base nas regras da FIAT FTL
		For _nX:=1 to Len(oDlgCar:aCols)
			If !oDlgCar:aCols[_nX][Len(oDlgCar:aHeader)+1]
				oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SKMVEN"})] := 0
			EndIF
		Next	                         
	EndIF
	
	If _lFtlc // Refazer o calculo (compras) com base nas regras da FIAT FTL
		For _nX:=1 to Len(oDlgCar:aCols)
			If !oDlgCar:aCols[_nX][Len(oDlgCar:aHeader)+1]
				oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SKMCOM"})] := 0
			EndIF
		Next	                         
	EndIf                                
	
	If _lFtlc .or. _lFtlv
		_cOrigem := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_CLIORI"})]+oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_LOJORI"})]
		_cDestin := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_CLIDES"})]+oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_LOJDES"})]
		
		dbSelectArea("SA1")
		dbSetOrder(1)
		dbSeek(xFilial("SA1")+_cOrigem)				
		_cCepD := SA1->A1_CEP
			                     
		dbSelectArea("SA1")
		dbSetOrder(1)
		dbSeek(xFilial("SA1")+_cDestin)				
		_cCepA := SA1->A1_CEP
		
		cQuery := "SELECT ZT2_QTDKMU, ZT2_QTDKMA FROM " + RetSqlName("ZT2")
		cQuery += " WHERE ZT2_FILIAL = '" + xFilial("ZT2") + "' AND "
		cQuery += "       ZT2_BLOQUE <> 'S' AND "
		cQuery += "       ZT2_CEPD = '" + _cCepD + "' AND "
		cQuery += "       ZT2_CEPA = '" + _cCepA + "' AND "
		cQuery += "       D_E_L_E_T_<>'*' "
			
		If Select("TRBX") > 0
			TRBX->(dbCloseArea())	 
		endif
		TCQUERY cQuery NEW ALIAS "TRBX"
		
		If !(TRBX->(Eof()))
			DUT->( dbSetOrder(1) )
			If DUT->( dbSeek( xFilial("DUT") + _cTipVV ) ) .and. _lFtlv
				If DUT->DUT_TIPVEI == "05"
					oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_EKMVEN"})] := TRBX->ZT2_QTDKMU
				Else
					oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_EKMVEN"})] := TRBX->ZT2_QTDKMA
				EndIF          
			EndIF
			DUT->( dbSetOrder(1) )
			If DUT->( dbSeek( xFilial("DUT") + _cTipVC ) ) .and. _lFtlc
				If DUT->DUT_TIPVEI == "05"
					oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_EKMCOM"})] := TRBX->ZT2_QTDKMU
				Else
					oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_EKMCOM"})] := TRBX->ZT2_QTDKMA
				EndIF
			EndIF
		Else
			MsgStop("Obra: "+_cObra+".Houve problemas na identificação do CEP de/até.","Atenção!")
			_lRet := .F.
			If _lFtlv
				oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_EKMVEN"})] := 0
			EndIF
			If _lFtlc
				oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_EKMCOM"})] := 0
			EndIF
		EndIF
		
		TRBX->(dbCloseArea())	 
		
	EndIF

	
EndIF

Return _lRet




/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³VALZA7    ºAutor  ³Frank Zwarg Fuga    º Data ³  02/10/16   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Valida a linha da ZA7                                      º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
User Function VALZA7   
Local _aArea := GetArea()
// ------------------------------------------------------------------------------------------------------------------------
// Validar a linha com base na tabela de vendas e compras - Frank Zwarg Fuga 10/02/2016
// Se a tabela de vendas ou compras o campo ZT0 e ZT1_KMPTRE == "S" forcar o preenchimento do campo ZAT_SEQCOL

_cTabV		:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TABVEN"})]
_cTabC      := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TABCOM"})]
_cVerV      := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VERVEN"})]
_cVerC      := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VERCOM"})]
_cIteV      := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABV"})]
_cIteC      := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABC"})]
_cTpTrans	:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TPTRAN"})]
_cTpTraC	:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TPTRAC"})]		// Cristiam Rossi em 05/04/2016

_cCodCli	:= AllTrim(M->ZA0_CLI)
_cLojCli	:= AllTrim(M->ZA0_LOJA)

// Posicionar na tabela de vendas
ZT0->(dbSetOrder(1))
ZT0->( dbSeek( xFilial("ZT0") + _cTabV + _cVerV + _cCodCLi + _cLojCli + _cTpTrans + _cIteV , .T. ) )
If ZT0->(Eof())
	MsgStop("Não foi possível vincular a tabela de venda.","Atenção!")
	Return .F.
Else
	If ZT0->ZT0_KMPTRE == "S"
		_cVenda := "S"
	Else
		_cVenda := "N"
	EndIF    
EndIF                 

// Posicionar na tabela de compras
dbSelectArea("ZT1")
dbSetOrder(1)                                                                                
dbSeek( xFilial("ZT1") + ZT0->ZT0_TABCOM + ZT0->ZT0_VERCOM)
_lAchou := .F.
While !Eof() .and. ZT1_FILIAL+ZT1_CODTAB+ZT1_VERTAB == xFilial("ZT1")+ZT0->ZT0_TABCOM + ZT0->ZT0_VERCOM
//	If ZT1_TIPTAB == _cTpTrans .and. ZT1_ITEMTB == ZT0->ZT0_ITTABC .and. ZT1_CODCLI == _cCodCli .and. ZT1_LOJCLI == _cLojCli
//	If ZT1_TIPTAB == _cTpTraC  .and. ZT1_ITEMTB == ZT0->ZT0_ITTABC .and. ZT1_CODCLI == _cCodCli .and. ZT1_LOJCLI == _cLojCli
	If ZT1_ITEMTB == ZT0->ZT0_ITTABC .and. ZT1_CODCLI == _cCodCli .and. ZT1_LOJCLI == _cLojCli
		_lAchou := .T.
		Exit
	EndIF
	dbSkip()
EndDo
If Eof()
	MsgStop("Não foi possivel vincular a tabela de compras.","Atenção!")
	RestArea(_aArea)
	Return .F.
Else
	If ZT1->ZT1_KMPTRE == "S"
		_cCompra := "S"
	Else
		_cCompra := "N"
	EndIF                     
EndIf	
RestArea(_aArea)                  

If _cVenda == "S" .or. _cCompra == "S"                                                           
	If Len(oDlgCar:aCols) > 1
		If empty(oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SEQCOL"})])
			If !oDlgCar:aCols[oDlgCar:nAt][Len(oDlgCar:aHeader)+1]
				MsgStop("Falta o preenchimento do campo sequencia da coleta.","Atenção!")
				Return .F.
			EndIf
		EndIf
	EndIF
EndIF
// ----------------------------------------------------------------------------------------------------------------------------------

Return .T.

/*
	Joni Lima
	Valida se tem os caracteres para o Geração do CVA
*/

User Function xValCVA()

	Local lRet := .T.
    
	If AllTrim(M->ZA0_CVA) == 'S'
		lRet := !Empty(M->ZA0_CVACHR)	
	EndIf
    
	If !lRet
		MsgStop("Falta o preenchimento do campo Caracter do CVA, ja que esse Agendamento possui CVA.","Atenção!")
	EndIf

Return lRet



/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³FIATFTL   ºAutor  ³Frank Zwarg Fuga    º Data ³  09/02/16   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Rotina para Encontrar os KM da FIAT FTL		              º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
User Function FIATFTL()
Local _nX
Local _nY
Local _lRet 		:= .T.
Local _cTabV	
Local _cTabC    
Local _cVerV    
Local _cVerC    
Local _cIteV    
Local _cIteC    
Local _cTpTrans	
Local _cTpTraC	
Local _cCodCli 		:= ""		
Local _cLojCli		:= ""
Local _lProc		:= .T.
Local _aAreaX        
Local _cSeq     
Local _aTemp             
Local _lAcha
Local _lTemProximo 	:= .F.
Local _lPrimeiro    := .T.
Local _cCepD
Local _cCepA
Local cQuery
Local _cCompra 	:= "N"
Local _cVenda	:= "N"               
Local _lErro	:= .F.
Local _cRatPV   := ""
Local _cRatPC   := ""
Local _cTipVV   := ""
Local _cTipVC   := ""
Local _aAreaX
Local _aAreaZT0 := ZT0->(GetArea())
Local _aAreaZT1 := ZT1->(GetArea())

	if ! u_LC1CanEdt('ZA6','ZA6_ORIGEM',,.T.)	// Verifica se Viagem 
		return .T.		// para nao parar o processo, esta viagem já está encerrada
	endif

_cCodCli		:= AllTrim(ZA0->ZA0_CLI)
_cLojCli		:= AllTrim(ZA0->ZA0_LOJA)

For _nY:=1 to Len(oDlgTra:aCols)
	If !oDlgTra:aCols[_nY][Len(oDlgTra:aHeader)+1]

		_cTabV		:= oDlgTra:aCols[_nY][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TABVEN"})]
		_cTabC    	:= oDlgTra:aCols[_nY][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TABCOM"})]
		_cVerV    	:= oDlgTra:aCols[_nY][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VERVEN"})]
		_cVerC    	:= oDlgTra:aCols[_nY][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VERCOM"})]
		_cIteV    	:= oDlgTra:aCols[_nY][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABV"})]
		_cIteC    	:= oDlgTra:aCols[_nY][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABC"})]
		_cTpTrans	:= oDlgTra:aCols[_nY][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TPTRAN"})]
		_cTpTraC	:= oDlgTra:aCols[_nY][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TPTRAC"})]
	
		// Validacao se em todas as sequencias informadas, a tabela de vendas, ou compras permitem esta indicação
		ZT0->(dbSetOrder(1))
		ZT0->( dbSeek( xFilial("ZT0") + _cTabV + _cVerV + _cCodCLi + _cLojCli + _cTpTrans + _cIteV , .T. ) )

		If ZT0->(Eof())
			_lProc := .F.
			MsgStop("Tabela de vendas não identificada.","Atenção!")
		Else
			If ZT0->ZT0_KMPTRE == "S"
				_cVenda := "S"
				_cTipVV := ZT0->ZT0_TIPVEI
			Else
				_cVenda := "N"
			EndIF    
			If ZT0->ZT0_RATPES == "S"
				_cRatPV := "S"
			Else
				_cRatPV := "N"
			EndIf                     
			_cTipVV := ZT0->ZT0_TIPVEI
		EndIF                 
		
		_aAreaX := GetArea()
		dbSelectArea("ZT1")
		dbSetOrder(1)                                                                                
		dbSeek( xFilial("ZT1") + _cTabC + _cVerC)
		_lAchou := .F.
		While !Eof() .and. ZT1_FILIAL+ZT1_CODTAB+ZT1_VERTAB == xFilial("ZT1")+_cTabC + _cVerC
			If ZT1_ITEMTB == _cIteC .and. ZT1_CODCLI == _cCodCli .and. ZT1_LOJCLI == _cLojCli
				_lAchou := .T.
				Exit
			EndIF
			dbSkip()
		EndDo
		
		If Eof()
			_lProc := .F.
			MsgStop("Tabela de compras não identificada.","Atenção!")
		Else
			If ZT1->ZT1_KMPTRE == "S"
				_cCompra := "S"
				_cTipVC := ZT1->ZT1_TIPVEI
		 	Else
				_cCompra := "N"
			EndIF                     
			If ZT1->ZT1_RATPES == "S"
				_cRatPC := "S"
			Else
				_cRatPC := "N"
			EndIf
			_cTipVC := ZT1->ZT1_TIPVEI
		EndIf	
		RestArea(_aAreaX)   
		
		// Verificar na tabela de vendas se utilizaremos o tipo de calculo FIAT - FTL (Frank 05/04/2016) 
		// ---------------------------------------------------------------------------------------------
		_lFtlv := .F.           
		If _cVenda == "N" .and. _cRatPV == "S"
			dbSelectArea("ZTC")
			DbOrderNickName("ITUPZTC001")
			dbSeek(xFilial("ZTC")+ZT0->ZT0_CODTAB+ZT0->ZT0_VERTAB+ZT0->ZT0_ITEMTB)
			While !Eof() .and. ZTC_FILIAL+ZTC_TABVEN+ZTC_VERVEN+ZTC_ITTABV == xFilial("ZTC")+ZT0->ZT0_CODTAB+ZT0->ZT0_VERTAB+ZT0->ZT0_ITEMTB
				If ZTC_FAIXAA > 0
					_lFtlv := .T.
					Exit
				EndIF
			    dbSkip()                                           
			EndDo                                                  
		EndIf
		
		// Verificar na tabela de compras se utilizaremos o tipo de calculo FIAT - FTL (Frank 05/04/2016)
		// ----------------------------------------------------------------------------------------------
		_lFtlc := .F.                                         
		If _cCompra == "N" .and. _cRatPC == "S"
			dbSelectArea("ZTD")
			DbOrderNickName("ITUPZTD001")
			dbSeek(xFilial("ZTD")+ZT1->ZT1_CODTAB+ZT1->ZT1_VERTAB+ZT1->ZT1_ITEMTB)
			While !Eof() .and. ZTD_FILIAL+ZTD_TABCOM+ZTD_VERCOM+ZTD_ITTABC == xFilial("ZTD")+ZT1->ZT1_CODTAB+ZT1->ZT1_VERTAB+ZT1->ZT1_ITEMTB
				If ZTD_FAIXAA > 0 
					_lFtlc := .T.							
					exit
				EndIF
			    dbSkip()                            
			EndDo                                   
		EndIF
		
		If _lFtlc .or. _lFtlv
			//If _lFtlv // Refazer o calculo (vendas) com base nas regras da FIAT FTL
			//	For _nX:=1 to Len(oDlgCar:aCols)
			//		If !oDlgCar:aCols[_nX][Len(oDlgCar:aHeader)+1]
			//			oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SKMVEN"})] := 0
			//		EndIF
			//	Next	                         
			//EndIF
				
			//If _lFtlc // Refazer o calculo (compras) com base nas regras da FIAT FTL
			//	For _nX:=1 to Len(oDlgCar:aCols)
			//		If !oDlgCar:aCols[_nX][Len(oDlgCar:aHeader)+1]
			//			oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SKMCOM"})] := 0
			//		EndIF
			//	Next	                         
			//EndIf                                
				
			_cOrigem := oDlgTra:aCols[_nY][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_CLIORI"})]+oDlgTra:aCols[_nY][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_LOJORI"})]
			_cDestin := oDlgTra:aCols[_nY][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_CLIDES"})]+oDlgTra:aCols[_nY][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_LOJDES"})]
					
			dbSelectArea("SA1")
			dbSetOrder(1)
			dbSeek(xFilial("SA1")+_cOrigem)				
			_cCepD := SA1->A1_CEP
						                     
			dbSelectArea("SA1")
			dbSetOrder(1)
			dbSeek(xFilial("SA1")+_cDestin)				
			_cCepA := SA1->A1_CEP
					
			cQuery := "SELECT ZT2_QTDKMU, ZT2_QTDKMA FROM " + RetSqlName("ZT2")
			cQuery += " WHERE ZT2_FILIAL = '" + xFilial("ZT2") + "' AND "
			cQuery += "       ZT2_BLOQUE <> 'S' AND "
			cQuery += "       ZT2_CEPD = '" + _cCepD + "' AND "
			cQuery += "       ZT2_CEPA = '" + _cCepA + "' AND "
			cQuery += "       D_E_L_E_T_<>'*' "
						
			If Select("TRBX") > 0
				TRBX->(dbCloseArea())	 
			endif
			TCQUERY cQuery NEW ALIAS "TRBX"
					
			If !(TRBX->(Eof()))
				DUT->( dbSetOrder(1) )
				If DUT->( dbSeek( xFilial("DUT") + _cTipVV ) ) .and. _lFtlv
					If DUT->DUT_TIPVEI == "05"
						oDlgTra:aCols[_nY][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_EKMVEN"})] := TRBX->ZT2_QTDKMU
					Else
						oDlgTra:aCols[_nY][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_EKMVEN"})] := TRBX->ZT2_QTDKMA
					EndIF          
				EndIF
				DUT->( dbSetOrder(1) )
				If DUT->( dbSeek( xFilial("DUT") + _cTipVC ) ) .and. _lFtlc
					If DUT->DUT_TIPVEI == "05"
						oDlgTra:aCols[_nY][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_EKMCOM"})] := TRBX->ZT2_QTDKMU
					Else
						oDlgTra:aCols[_nY][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_EKMCOM"})] := TRBX->ZT2_QTDKMA
					EndIF
				EndIF
			Else
				If _lFtlv
					oDlgTra:aCols[_nY][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_EKMVEN"})] := 0
				EndIF
				If _lFtlc
					oDlgTra:aCols[_nY][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_EKMCOM"})] := 0
				EndIF
			EndIF

			oDlgTra:aCols[_nY][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_SKMVEN"})] := 0
			oDlgTra:aCols[_nY][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_SKMCOM"})] := 0			
			
		EndIF
			
	EndIf
Next

RestArea(_aAreaZT0)
RestArea(_aAreaZT1)


Return .T.




/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³VALCEP    ºAutor  ³Frank Zwarg Fuga    º Data ³  13/04/16   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ validar a tabela de ceps                                   º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ SX7                                                       º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/            
Static Function VALCEP       
Local _cCodCli
Local _cLojCli
Local _cCliRes
Local _cLojRes
Local _aArea 	:= GetArea()
Local _aAreaCli	:= SA1->(GetArea())
Local _cCepOri	:= ""
Local _cCepDes	:= ""
Local cQuery
Local _nKm		:= 0
Local _nX   
Local _nRet
Local _cTipo	
Local _cVenda
Local _cCompra              
Local _cTabV
Local _cTabC
Local _cVerV
Local _cVerC
Local _cIteV
Local _cIteC
Local _cTpTrans
Local _lAchou     
Local _nKm1
Local _cTipVV
Local _cTipVC
Local _lRet := .T.
Local _lProcessa := .T.
Local _cErro := ""         
Local _lErro := .F.        
Local _cObra := ""
           
For _nX:=1 to Len(oDlgCar:aCols)
	If !oDlgCar:aCols[_nX][Len(oDlgCar:aHeader)+1]
		
		_lProcessa 	:= .T.
		   
		_cCodCli 	:= oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_CODCLI"})]
		_cLojCli 	:= oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_LOJCLI"})]    
		_cCliDes 	:= oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_CLIDES"})]    
		_cLojDes 	:= oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_LOJDES"})]
		_cTipo	 	:= oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_DEVEMB"})]
		_cObra      := oDlgCar:aCols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_OBRA"})]
		
		_cTabV		:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TABVEN"})]
		_cTabC      := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TABCOM"})]
		_cVerV      := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VERVEN"})]
		_cVerC      := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VERCOM"})]
		_cIteV      := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABV"})]
		_cIteC      := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABC"})]
		
		_cTipVV		:= ""
		_cTipVC		:= ""

		_cTpTrans	:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TPTRAN"})]
		_cTpTraC	:= oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TPTRAC"})]		// Cristiam Rossi em 05/04/2016

		cCodCli		:= AllTrim(M->ZA0_CLI)
		cLojCli		:= AllTrim(M->ZA0_LOJA)
		
		_cRatPV := ""
		_cRatPC := ""
		
		_cVenda := ""

		// Posicionar na tabela de venda
		ZT0->(dbSetOrder(1))
		ZT0->( dbSeek( xFilial("ZT0") + _cTabV + _cVerV + cCodCLi + cLojCli + _cTpTrans + _cIteV , .T. ) )
		If ZT0->(Eof())
			_lProcessa := .F.	                
		Else
			If ZT0->ZT0_KMPTRE == "S"
				_cVenda := "S"
			Else
				_cVenda := "N"
			EndIF    
			_cTipVV := ZT0->ZT0_TIPVEI
			If ZT0->ZT0_RATPES == "S"
				_cRatPV := "S"
			Else 
				_cRatPV := "N"
			EndIF
		EndIF
        
		If _cVenda <> "S"
			_lProcessa := .F.
		EndIF

		If _lProcessa
		
			If empty(_cCodCli) .or. empty(_cLojCli)
				_cErro := "Obra: "+alltrim(_cObra)+". Falta informar o cliente para encontrar os CEPs."
				_lRet  := .F.
			EndIF
			
			If empty(_cCliDes) .or. !empty(_cLojDes)
				_cErro := "Obra: "+alltrim(_cObra)+". Falta informar o cliente destino para encontrar os CEPs."
				_lRet  := .F.
			EndIF	         
			
			If _cTipo == "P"
				dbSelectArea("SA1")
				dbSetOrder(1)
				dbSeek(xFilial("SA1")+_cCodCli+_cLojCli)
				If !SA1->(eof())
					_cCepOri := SA1->A1_CEP
				EndIF
				dbSeek(xFilial("SA1")+_cCliDes+_cLojDes)
				If !Eof()
					_cCepDes := SA1->A1_CEP
				EndIF
				
				If !empty(_cCepOri) .and. !empty(_cCepDes)
					cQuery := "SELECT ZT2_QTDKMU, ZT2_QTDKMA FROM " + RetSqlName("ZT2")
					cQuery += " WHERE ZT2_FILIAL = '" + xFilial("ZT2") + "' AND "
					cQuery += "       ZT2_BLOQUE <> 'S' AND "
					cQuery += "       ZT2_CEPD = '" + _cCepOri + "' AND "
					cQuery += "       ZT2_CEPA = '" + _cCepDes + "' AND "
					cQuery += "       D_E_L_E_T_<>'*' "
			
					If Select("TRBX") > 0
						TRBX->(dbCloseArea())	 
					endif
			
					TCQUERY cQuery NEW ALIAS "TRBX"
			
					dbSelectArea("TRBX")
					TRBX->(dbGotop())
					If TRBX->(eof())
						_cErro := "Obra: "+alltrim(_cObra)+". Ocorrência não encontrada no cadastro de CEPs."+" CEP.De: "+_cCepOri+" CEP.Ate: "+_cCepDes
						_lErro := .T.
					EndIF                        
					TRBX->(dbCloseArea())	 
				Else
					_cErro := "Obra: "+alltrim(_cObra)+". Não foi registrado o CEP no cadastro do cliente."
					_lErro := .T.
				EndIF
		
				cQuery := "SELECT ZT2_QTDKMU, ZT2_QTDKMA FROM " + RetSqlName("ZT2")
				cQuery += " WHERE ZT2_FILIAL = '" + xFilial("ZT2") + "' AND "
				cQuery += "       ZT2_BLOQUE <> 'S' AND "
				cQuery += "       ZT2_CEPD = '" + _cCepDes + "' AND "
				cQuery += "       ZT2_CEPA = '" + _cCepOri + "' AND "
				cQuery += "       D_E_L_E_T_<>'*' "
				
				If Select("TRBX") > 0
					TRBX->(dbCloseArea())	 
				endif
				TCQUERY cQuery NEW ALIAS "TRBX"
				dbSelectArea("TRBX")
				TRBX->(dbGotop())
				If eof()
					_cErro := "Obra: "+alltrim(_cObra)+". Ocorrência não encontrada no cadastro de CEPs."+" CEP.De: "+_cCepDes+" CEP.Ate: "+_cCepOri
					_lErro := .T.
				EndIF
				TRBX->(dbCloseArea())    

			ElseIf _cTipo == "R"
				_cCodCli :=	oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_CODCLI"})]
				_cLojCli := oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_LOJCLI"})]
				_cCliDes := oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_CLIDES"})]
				_cLojDes := oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_LOJDES"})]
				_cTipo	 := oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_DEVEMB"})]
				dbSelectArea("SA1")
				dbSetOrder(1)
				dbSeek(xFilial("SA1")+_cCodCli+_cLojCli)
				If !eof()
					_cCepOri := SA1->A1_CEP
				EndIF
				dbSeek(xFilial("SA1")+_cCliDes+_cLojDes)
				If !Eof()
					_cCepDes := SA1->A1_CEP
				EndIF
				
				If !empty(_cCepOri) .and. !empty(_cCepDes)
					cQuery := "SELECT ZT2_QTDKMU, ZT2_QTDKMA FROM " + RetSqlName("ZT2")
					cQuery += " WHERE ZT2_FILIAL = '" + xFilial("ZT2") + "' AND "
					cQuery += "       ZT2_BLOQUE <> 'S' AND "
					cQuery += "       ZT2_CEPD = '" + _cCepDes + "' AND "
					cQuery += "       ZT2_CEPA = '" + _cCepOri + "' AND "
					cQuery += "       D_E_L_E_T_<>'*' "
						
					If Select("TRBX") > 0
						TRBX->(dbCloseArea())	 
					endif
		
					TCQUERY cQuery NEW ALIAS "TRBX"
		
					dbSelectArea("TRBX")
					TRBX->(dbGotop())
					If TRBX->(eof())
						_cErro := "Obra: "+alltrim(_cObra)+". Ocorrência não encontrada no cadastro de CEPs."+" CEP.De: "+_cCepDes+" CEP.Ate: "+_cCepOri
						_lErro := .T.
					EndIF                        
					TRBX->(dbCloseArea())	             
				Else
					_cErro := "Obra: "+alltrim(_cObra)+". Não foi registrado o CEP no cadastro do cliente."
				EndIF  
				
			EndIF
			
		EndIf

    EndIF
Next

If _lErro
	MsgStop(_cErro,"Atenção!")
EndIf          

RestArea(_aAreaCli)
RestArea(_aArea) 


Return _lRet


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³VALCEPX   ºAutor  ³Frank Zwarg Fuga    º Data ³  28/04/16   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Validacao do preenchimento dos ceps conforme tabela de      º±±
±±º          ³vendas/compras                                              º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function VALCEPX
Local _lRet			:= .T.
Local _cTabV          
Local _cVerV
Local _cIteV      
Local _cTabC
Local _cVerC
Local _cIteC
Local cCodCli
Local cLojCli            
Local _cTpTrans
Local cCodCli		:= AllTrim(M->ZA0_CLI)
Local cLojCli		:= AllTrim(M->ZA0_LOJA)
Local _cTipoVen		:= ""
Local _cTipoCom		:= ""
Local _cOrigem
Local _cDestin              
Local _cLojOri
Local _cLojDes
Local _cCepD
Local _cCepA
Local cQuery   
Local _cMsg 		:= ""
Local nX               
Local _aArea		:= GetArea()

If ValType(oDlgTra) == "O" .and. ValType(oDlgTre) == "O"
	For nX:=1 to Len(oTra_Cols) // ZA6 oTra_Cols               

		_cTipoVen		:= "" // Frank Zwarg Fuga - 06/05/2016
		_cTipoCom		:= "" // Frank Zwarg Fuga - 06/05/2016

		If !oTra_Cols[nX,Len(oDlgTra:aHeader)+1]
			If dtos(oTra_Cols[nX][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_DTINI"})]) >= dtos(_dviag1) .and. dtos(oTra_Cols[nX][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_DTFIM"})]) <= dtos(_dviag2)

				// PASSO 1 - Validacao pela tabela de Vendas.
				// -----------------------------------------------------------------------------------------------
				_cTabV		:= oTra_Cols[nX][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TABVEN"})]
				_cVerV      := oTra_Cols[nX][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VERVEN"})]
				_cIteV      := oTra_Cols[nX][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABV"})]
				_cTpTrans	:= oTra_Cols[nX][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TPTRAN"})]
				
				ZT0->(dbSetOrder(1))
				ZT0->( dbSeek( xFilial("ZT0") + _cTabV + _cVerV + cCodCLi + cLojCli + _cTpTrans + _cIteV , .T. ) )
				If !ZT0->(Eof())
					If ZT0->ZT0_KMPTRE == "N" .and. ZT0->ZT0_RATPES == "S" .and. ZT0->ZT0_TIPREG == "4" // Frank Zwarg Fuga - 06/05/2016
						dbSelectArea("ZTC")
						DbOrderNickName("ITUPZTC001")
						dbSeek(xFilial("ZTC")+ZT0->ZT0_CODTAB+ZT0->ZT0_VERTAB+ZT0->ZT0_ITEMTB)
						While !Eof() .and. ZTC_FILIAL+ZTC_TABVEN+ZTC_VERVEN+ZTC_ITTABV == xFilial("ZTC")+ZT0->ZT0_CODTAB+ZT0->ZT0_VERTAB+ZT0->ZT0_ITEMTB
							If ZTC->ZTC_FAIXAA > 0
								_cTipoVen = "FTL"											
								exit
							EndIF                   
							dbSkip()
						EndDo
					EndIF
				EndIF
	
	            // PASSO 2 - Validacao pela tabela de compras.
	            // -----------------------------------------------------------------------------------------------
				_cTabC		:= oTra_Cols[nX][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TABCOM"})]
				_cVerC      := oTra_Cols[nX][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VERCOM"})]
				_cIteC      := oTra_Cols[nX][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABC"})]
				
				dbSelectArea("ZT1")
				dbSetOrder(1)                                                                                
				dbSeek( xFilial("ZT1") + _cTabC + _cVerC)
				_lAchou := .F.
				While !Eof() .and. ZT1_FILIAL+ZT1_CODTAB+ZT1_VERTAB == xFilial("ZT1")+_cTabC+_cVerC
					If ZT1_ITEMTB == _cIteC .and. ZT1_CODCLI == cCodCli .and. ZT1_LOJCLI == cLojCli	
						_lAchou := .T.
						Exit
					EndIF
					dbSkip()
				EndDo
				If _lAchou
					If ZT1->ZT1_KMPTRE == "N" .and. ZT1->ZT1_RATPES == "S" .and. ZT1->ZT1_TIPREG == "4" // Frank Zwarg Fuga - 06/05/2016
						dbSelectArea("ZTD")
						DbOrderNickName("ITUPZTD001")
						dbSeek(xFilial("ZTD")+ZT1->ZT1_CODTAB+ZT1->ZT1_VERTAB+ZT1->ZT1_ITEMTB)
						While !Eof() .and. ZTD_FILIAL+ZTD_TABCOM+ZTD_VERCOM+ZTD_ITTABC == xFilial("ZTD")+ZT1->ZT1_CODTAB+ZT1->ZT1_VERTAB+ZT1->ZT1_ITEMTB
							If ZTD->ZTD_FAIXAA > 0
								_cTipoCom := "FTL"					
								exit
							EndIF                   
						    dbSkip()
						EndDo
					EndIf
				EndIF

				If _cTipoVen == "FTL" .or. _cTipoCom == "FTL"
					_cOrigem := oTra_Cols[nX][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_CLIORI"})]
					_cLojOri := oTra_Cols[nX][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_LOJORI"})]
					_cDestin := oTra_Cols[nX][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_CLIDES"})]
					_cLojDes := oTra_Cols[nX][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_LOJDES"})]
					_cObra	 := oTra_Cols[nX][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_OBRA"})]

					dbSelectArea("SA1")
					dbSetOrder(1)
					dbSeek(xFilial("SA1")+_cOrigem+_cLojOri)				
					_cCepD := SA1->A1_CEP
										                     
					dbSelectArea("SA1")
					dbSetOrder(1)
					dbSeek(xFilial("SA1")+_cDestin+_cLojDes)				
					_cCepA := SA1->A1_CEP
							
					cQuery := "SELECT ZT2_QTDKMU, ZT2_QTDKMA FROM " + RetSqlName("ZT2")
					cQuery += " WHERE ZT2_FILIAL = '" + xFilial("ZT2") + "' AND "
					cQuery += "       ZT2_BLOQUE <> 'S' AND "
					cQuery += "       ZT2_CEPD = '" + _cCepD + "' AND "
					cQuery += "       ZT2_CEPA = '" + _cCepA + "' AND "
					cQuery += "       D_E_L_E_T_<>'*' "
					If Select("TRBX") > 0
						TRBX->(dbCloseArea())	 
					endif
					TCQUERY cQuery NEW ALIAS "TRBX"
							
					If TRBX->(Eof()) .or. empty(_cOrigem) .or. empty(_cDestin)  
						TRBX->(dbCloseArea())	 
					    If _cTipoVen == "FTL"
							_cMsg := "A tabela de venda é do tipo FTL. "
						Else 
							_cMsg := "A tabela de compra é do tipo FTL. "
						EndIf
									
						If empty(_cOrigem) .or. empty(_cDestin)  
							_cMsg += "Falta o preenchimento do cliente origem ou destino, "
						Else
							_cMsg += "Falta o cadastramento dos CEP´s: "+_cCepD+" - "+_cCepA+", "
						EndIf
						_cMsg += "para a viagem/sequência: "+_cObra+" - cliente de: "+_cOrigem+"-"+_cLojOri+" até: "+_cDestin+"-"+_cLojDes
						
						MsgStop(_cMsg,"Cálculo FTL - Falha no preenchimento dos CEP´s.")
									
						_lRet := .F.
						Exit
					EndIF
					TRBX->(dbCloseArea())	 
				EndIf			
			EndIF
		EndIF
	Next  
EndIf
                                
RestArea(_aArea)
Return _lRet


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³LOCC001   ºAutor  ³Microsiga           º Data ³  06/23/16   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
User Function LIMPAZTJ
Local _cFilX := ZA6->ZA6_FILIAL
Local _cPedX := ZA6->ZA6_PEDCLI
Local _cProX := ZA6->ZA6_PROJET
Local _cQuery

If empty(ZA6->ZA6_PEDCLI)
	Return .T.
EndIf

_cQuery := "UPDATE ZTJ010 SET ZTJ_SITUA = '1' WHERE D_E_L_E_T_ = '' AND ZTJ_FILZA6 = '"+ZA6->ZA6_FILIAL+"' AND "
_cQuery += "ZTJ_PROJET = '"+ZA6->ZA6_PROJET+"' AND ZTJ_OBRA = '"+ZA6->ZA6_OBRA+"' AND ZTJ_PEDIDO = '"+ZA6->ZA6_PEDCLI+"' "
TCSQLExec(_cQuery)

_cQuery := "UPDATE ZTJ010 SET ZTJ_DTINTE = '' WHERE D_E_L_E_T_ = '' AND ZTJ_FILZA6 = '"+ZA6->ZA6_FILIAL+"' AND "
_cQuery += "ZTJ_PROJET = '"+ZA6->ZA6_PROJET+"' AND ZTJ_OBRA = '"+ZA6->ZA6_OBRA+"' AND ZTJ_PEDIDO = '"+ZA6->ZA6_PEDCLI+"' "
TCSQLExec(_cQuery)


Return .T.



/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³ACHACCG   ºAutor  ³Frank Zwarg Fuga    º Data ³  07/07/16   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Gatilho do campo ZA7_CCGEFC                                º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

User Function ACHACCG
_CodCli := gdFieldGet("ZA7_CODCLI", N, .F., aHeader, aCols)
_Loja   := gdFieldGet("ZA7_LOJCLI", N, .F., aHeader, aCols)

if Empty(_CodCli) .or. Empty(_Loja)
	msgStop("Preencha o Código e Loja do cliente!", "Validação cliente/loja")
else
	_DesCli := Posicione('SA1',1,xFilial('SA1')+_CodCli+_Loja,'A1_NOME')
	// Posicionar para verificacao do tipo de calculo
	cTpTrans  := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TPTRAN"})]
	cTabVen	  := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TABVEN"})]
	cVerTab	  := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VERVEN"})]
	cITTabV	  := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABV"})]
	ZT0->( dbSetOrder(1) )	
	ZT0->( dbSeek( xFilial("ZT0") + cTabVen + cVerTab + M->ZA0_CLI + M->ZA0_LOJA + cTpTrans + cITTabV , .T. ) )
	oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_DESCLI"})] := _DesCli
	oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_LOJCLI"})] := SA1->A1_LOJA
	oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_CARENC"})] := ZT0->ZT0_FRANQC
	oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_CAREND"})] := ZT0->ZT0_FRANQU
	oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_VALADV"})] := ZT0->ZT0_PADV
	oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_INCADV"})] := ZA0->ZA0_FORMAS
	if gdFieldGet("ZA7_ADICIO", oDlgCar:nAt, .F., oDlgCar:aHeader, oDlgCar:aCols) != "S" .or. ZT0->ZT0_TIPREG == "2" // forma de calculo 1 - by Frank	
		oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_MUNICI"})] := Posicione('ZA2',4,xFilial('ZA2')+SA1->A1_COD_MUN+SA1->A1_EST,'ZA2_CODIGO') //SA1->A1_COD_MUN
		oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_DESMUN"})] := ZA2->ZA2_DESCRI
		oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_UFCARG"})] := ZA2->ZA2_ESTADO     	
	else
		oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_MUNICI"})] := CriaVar("ZA7_MUNICI")
		oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_DESMUN"})] := CriaVar("ZA7_DESMUN")
		oDlgCar:aCols[oDlgCar:nAt][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_UFCARG"})] := CriaVar("ZA7_UFCARG")
	endif
   	U_LOCTF04(readvar(),"ZA7")	// Chamada da funcao que verifica as formulas especificas por cliente.
endif
Return M->ZA7_CCGEFC


/*----------------------------------------------------------------/
/ Esta rotina retorna .T. / .F. para permitir alteração/exclusão  /
/ de registros das tabelas ZA6 e ZA7 quando tiver CT-e / NFS-e    /
/ Cristiam Rossi em 26/07/2016                                    /
*----------------------------------------------------------------*/
User Function LC1CanEdt( cParam, cParam2, lChkTab, lQuiet )
Local   aArea    := getArea()
Local   aAreaDTQ := DTQ->( getArea() )
Local   aAreaZL8 := ZL8->( getArea() )
Local   aAreaZT0 := ZT0->( getArea() )
Local   oObj     := nil
Local   cRegra   := ""
Local   cCampo   := StrTran(ReadVar(),"M->","")
Default cParam   := ""
Default cParam2  := ""
Default lChkTab  := .F.
Default lQuiet   := .F.

If alltrim(upper(funname())) == "LOCT004" .or. empty(alltrim(funname()))
	Return .T.
EndIf

	if Empty(cParam)
		return .T.
	endif

	if ! Empty(cParam2)
		cCampo := cParam2
	endif

	if cParam == "ZA7" .or. lChkTab
		cTpTrans  := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TPTRAN"})]
		cTabVen	  := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_TABVEN"})]
		cVerTab	  := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_VERVEN"})]
		cITTabV	  := oDlgTra:aCols[oDlgTra:nAt][Ascan(oDlgTra:aHeader,{|x|AllTrim(x[2])=="ZA6_ITTABV"})]
		ZT0->( dbSetOrder(1) )
		if ZT0->( dbSeek( xFilial("ZT0") + cTabVen + cVerTab + M->ZA0_CLI + M->ZA0_LOJA + cTpTrans + cITTabV , .T. ) )
			cRegra := ZT0->ZT0_TIPREG
		endif
		ZT0->( restArea( aAreaZT0 ) )
	endif

	DTQ->( dbSetOrder(1) )

	if cParam == "ZA6"

		if cCampo == "ZA6_TRANSP"
			ZL8->( dbSetOrder(1) )
			if ZL8->( dbSeek( xFilial("ZL8") + cProjet + cObra, .T. ) )		// Tem Ordem de Coleta, não deixar alterar - TODOS

				ZL8->( restArea( aAreaZL8 ) )
				DTQ->( restArea( aAreaDTQ ) )
				restArea( aArea )

				if ! lQuiet
					MsgStop("Existe Ordem de Coleta, ação negada", "Consistência - LC1CanEdt()")
				endif

				return .F.
			endif
			ZL8->( restArea( aAreaZL8 ) )
		endif

		for _nX := 1 to Len(oCar_Cols) // aCols do ZA7 sem o filtro pela viagem do ZA6

			if ! oCar_Cols[_nX][len(oDlgCar:aHeader)+1]
				if oCar_Cols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_OBRA"})] == cObra

					_cViagem := oCar_Cols[_nX][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_VIAGEM"})]

					if ! Empty(_cViagem) .and. DTQ->(dbSeek( xFilial("DTQ") + _cViagem)) .and. ! Empty(DTQ->DTQ_NUMPV)

						if cCampo == "ITINERARIOS" .and. ! cRegra $ "1;2"	// Demais regras permite mudar o Itinerário
							Loop
						endif

						DTQ->( restArea( aAreaDTQ ) )
						restArea( aArea )

						if ! lQuiet
							MsgStop("Existe CT-e/NFS-e gerada, ação negada", "Consistência - LC1CanEdt()")
						endif

						return .F.

					endif
				endif
			endif
		next

	elseif cParam == "ZA7"
		_cViagem := oDlgCar:aCols[oDlgCar:nAT][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_VIAGEM"})]
		_cJunto  := oDlgCar:aCols[oDlgCar:nAT][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_JUNTO" })]
		if ! Empty( _cJunto )
			for _w := 1 to len( oDlgCar:aCols )
				if oDlgCar:aCols[_w][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_SEQCAR"})] == _cJunto
					_cViagem  := oDlgCar:aCols[_w][Ascan(oDlgCar:aHeader,{|x|AllTrim(x[2])=="ZA7_VIAGEM"})]
					exit
				endif
			next
		endif

		if ! Empty(_cViagem) .and. DTQ->(dbSeek( xFilial("DTQ") + _cViagem)) .and. ! Empty(DTQ->DTQ_NUMPV)

			if	( cRegra == "4" .and. cCampo $ "ZA7_SEQCOL;ZA7_KMDESL;ZA7_PESO" ) .OR. ;
				( cRegra == "1" .and. cCampo == "ZA7_ADICIO" ) .OR. ;
				( cRegra == "3" .and. cCampo $ "ZA7_CLIDES;ZA7_LOJDES;ZA7_CODCLI;ZA7_LOJCLI" ) .OR. ;
				( cRegra == "5" .and. cCampo $ "ZA7_SEQCOL;ZA7_KMDESL" )

				DTQ->( restArea( aAreaDTQ ) )
				restArea( aArea )

				if ! lQuiet
					MsgStop("Existe CT-e/NFS-e gerada, ação negada", "Consistência - LC1CanEdt()")
				endif

				return .F.
			endif
		endif

	else

		return .T.
	endif

	DTQ->( restArea( aAreaDTQ ) )
	restArea( aArea )

	if cCampo == "ITINERARIOS"
		for _nX := 1 to len( oDlgTre:aCols )
			oDlgTre:aCols[_nX][len(oDlgTre:aHeader)+1] := ! oDlgTre:aCols[_nX][len(oDlgTre:aHeader)+1]
		next
		oDlgTre:Refresh()
	endif
Return .T.
